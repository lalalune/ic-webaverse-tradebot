(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(script) {
    const fetchOpts = {};
    if (script.integrity)
      fetchOpts.integrity = script.integrity;
    if (script.referrerpolicy)
      fetchOpts.referrerPolicy = script.referrerpolicy;
    if (script.crossorigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (script.crossorigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  var f = n.default;
  if (typeof f == "function") {
    var a = function() {
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var react = { exports: {} };
var react_development = { exports: {} };
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(module2, exports2) {
  {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var ReactVersion = "18.2.0";
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      function warn(format2) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format2, args);
          }
        }
      }
      function error(format2) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format2, args);
          }
        }
      }
      function printWarning(level, format2, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format2 += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format2);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return void 0;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray2(a) {
        return isArrayImpl(a);
      }
      function typeName(value2) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value2[Symbol.toStringTag] || value2.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value2) {
        {
          try {
            testStringCoercion(value2);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value2) {
        return "" + value2;
      }
      function checkKeyStringCoercion(value2) {
        {
          if (willCoercionThrow(value2)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value2));
            return testStringCoercion(value2);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return getComponentNameFromType(init2(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          self2 = config.__self === void 0 ? null : config.__self;
          source = config.__source === void 0 ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i2 = 0; i2 < childrenLength; i2++) {
            childArray[i2] = arguments[i2 + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (element === null || element === void 0) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === void 0 && defaultProps !== void 0) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i2 = 0; i2 < childrenLength; i2++) {
            childArray[i2] = arguments[i2 + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape2(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index2) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape2("" + element.key);
        }
        return index2.toString(36);
      }
      function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray2(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c2) {
              return c2;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(
                mappedChild,
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
              );
            }
            array2.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray2(children)) {
          for (var i2 = 0; i2 < children.length; i2++) {
            child = children[i2];
            nextName = nextNamePrefix + getElementKey(child, i2);
            subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === void 0) {
              error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        {
          if (Context._context !== void 0) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context);
      }
      function useState(initialState2) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState2);
      }
      function useReducer(reducer, initialArg, init2) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init2);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value2, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value2, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value2) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value2);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c2 = controlLines.length - 1;
            while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
              c2--;
            }
            for (; s >= 1 && c2 >= 0; s--, c2--) {
              if (sampleLines[s] !== controlLines[c2]) {
                if (s !== 1 || c2 !== 1) {
                  do {
                    s--;
                    c2--;
                    if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c2 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== void 0) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (isArray2(node)) {
          for (var i2 = 0; i2 < node.length; i2++) {
            var child = node[i2];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i2 = 0; i2 < keys.length; i2++) {
            var key = keys[i2];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray2(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i2 = 2; i2 < arguments.length; i2++) {
          validateChildKeys(arguments[i2], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      function startTransition(scope2, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        }
        try {
          scope2();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module2 && module2[requireString];
            enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel();
              channel.port1.onmessage = callback;
              channel.port2.postMessage(void 0);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;
          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue);
              }
            }
          } catch (error2) {
            popActScope(prevActScopeDepth);
            throw error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function(resolve, reject) {
                wasAwaited = true;
                thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth);
                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error2) {
                  popActScope(prevActScopeDepth);
                  reject(error2);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                Promise.resolve().then(function() {
                }).then(function() {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }
              var _thenable = {
                then: function(resolve, reject) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null) {
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                if (queue.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                }
              });
            } catch (error2) {
              reject(error2);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i2 = 0;
            try {
              for (; i2 < queue.length; i2++) {
                var callback = queue[i2];
                do {
                  callback = callback(true);
                } while (callback !== null);
              }
              queue.length = 0;
            } catch (error2) {
              queue = queue.slice(i2 + 1);
              throw error2;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports2.Children = Children;
      exports2.Component = Component;
      exports2.Fragment = REACT_FRAGMENT_TYPE;
      exports2.Profiler = REACT_PROFILER_TYPE;
      exports2.PureComponent = PureComponent;
      exports2.StrictMode = REACT_STRICT_MODE_TYPE;
      exports2.Suspense = REACT_SUSPENSE_TYPE;
      exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports2.cloneElement = cloneElement$1;
      exports2.createContext = createContext;
      exports2.createElement = createElement$1;
      exports2.createFactory = createFactory;
      exports2.createRef = createRef;
      exports2.forwardRef = forwardRef;
      exports2.isValidElement = isValidElement;
      exports2.lazy = lazy;
      exports2.memo = memo;
      exports2.startTransition = startTransition;
      exports2.unstable_act = act;
      exports2.useCallback = useCallback;
      exports2.useContext = useContext;
      exports2.useDebugValue = useDebugValue;
      exports2.useDeferredValue = useDeferredValue;
      exports2.useEffect = useEffect;
      exports2.useId = useId;
      exports2.useImperativeHandle = useImperativeHandle;
      exports2.useInsertionEffect = useInsertionEffect;
      exports2.useLayoutEffect = useLayoutEffect;
      exports2.useMemo = useMemo;
      exports2.useReducer = useReducer;
      exports2.useRef = useRef;
      exports2.useState = useState;
      exports2.useSyncExternalStore = useSyncExternalStore;
      exports2.useTransition = useTransition;
      exports2.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
})(react_development, react_development.exports);
(function(module2) {
  {
    module2.exports = react_development.exports;
  }
})(react);
const React = /* @__PURE__ */ getDefaultExportFromCjs(react.exports);
var client = {};
var reactDom = { exports: {} };
var reactDom_development = {};
var scheduler = { exports: {} };
var scheduler_development = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports2) {
  {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var frameYieldMs = 5;
      function push(heap, node) {
        var index2 = heap.length;
        heap.push(node);
        siftUp(heap, node, index2);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      }
      function siftUp(heap, node, i2) {
        var index2 = i2;
        while (index2 > 0) {
          var parentIndex = index2 - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index2] = parent;
            index2 = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i2) {
        var index2 = i2;
        var length = heap.length;
        var halfLength = length >>> 1;
        while (index2 < halfLength) {
          var leftIndex = (index2 + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare(left, node) < 0) {
            if (rightIndex < length && compare(right, left) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node;
              index2 = rightIndex;
            } else {
              heap[index2] = left;
              heap[leftIndex] = node;
              index2 = leftIndex;
            }
          } else if (rightIndex < length && compare(right, node) < 0) {
            heap[index2] = right;
            heap[rightIndex] = node;
            index2 = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports2.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports2.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5e3;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          var currentTime;
          if (enableProfiling)
            ;
          else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports2.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports2.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout2;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout2 = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout2 = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout2 = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout2;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports2.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1e3 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports2.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports2.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports2.unstable_IdlePriority = IdlePriority;
      exports2.unstable_ImmediatePriority = ImmediatePriority;
      exports2.unstable_LowPriority = LowPriority;
      exports2.unstable_NormalPriority = NormalPriority;
      exports2.unstable_Profiling = unstable_Profiling;
      exports2.unstable_UserBlockingPriority = UserBlockingPriority;
      exports2.unstable_cancelCallback = unstable_cancelCallback;
      exports2.unstable_continueExecution = unstable_continueExecution;
      exports2.unstable_forceFrameRate = forceFrameRate;
      exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports2.unstable_next = unstable_next;
      exports2.unstable_pauseExecution = unstable_pauseExecution;
      exports2.unstable_requestPaint = unstable_requestPaint;
      exports2.unstable_runWithPriority = unstable_runWithPriority;
      exports2.unstable_scheduleCallback = unstable_scheduleCallback;
      exports2.unstable_shouldYield = shouldYieldToHost;
      exports2.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
})(scheduler_development);
(function(module2) {
  {
    module2.exports = scheduler_development;
  }
})(scheduler);
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
{
  (function() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    }
    var React2 = react.exports;
    var Scheduler = scheduler.exports;
    var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
      {
        suppressWarning = newSuppressWarning;
      }
    }
    function warn(format2) {
      {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning("warn", format2, args);
        }
      }
    }
    function error(format2) {
      {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format2, args);
        }
      }
    }
    function printWarning(level, format2, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format2 += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format2);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2;
    var HostRoot = 3;
    var HostPortal = 4;
    var HostComponent = 5;
    var HostText = 6;
    var Fragment2 = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    var enableClientRenderFallbackOnTextMismatch = true;
    var enableNewReconciler = false;
    var enableLazyContextPropagation = false;
    var enableLegacyHidden = false;
    var enableSuspenseAvoidThisFallback = false;
    var disableCommentsAsDOMContainers = true;
    var enableCustomElementPropertySupport = false;
    var warnAboutStringRefs = false;
    var enableSchedulingProfiler = true;
    var enableProfilerTimer = true;
    var enableProfilerCommitHooks = true;
    var allNativeEvents = /* @__PURE__ */ new Set();
    var registrationNameDependencies = {};
    var possibleRegistrationNames = {};
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      {
        if (registrationNameDependencies[registrationName]) {
          error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        }
      }
      registrationNameDependencies[registrationName] = dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === "onDoubleClick") {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
      for (var i2 = 0; i2 < dependencies.length; i2++) {
        allNativeEvents.add(dependencies[i2]);
      }
    }
    var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function typeName(value2) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value2[Symbol.toStringTag] || value2.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value2) {
      {
        try {
          testStringCoercion(value2);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value2) {
      return "" + value2;
    }
    function checkAttributeStringCoercion(value2, attributeName) {
      {
        if (willCoercionThrow(value2)) {
          error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value2));
          return testStringCoercion(value2);
        }
      }
    }
    function checkKeyStringCoercion(value2) {
      {
        if (willCoercionThrow(value2)) {
          error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value2));
          return testStringCoercion(value2);
        }
      }
    }
    function checkPropStringCoercion(value2, propName) {
      {
        if (willCoercionThrow(value2)) {
          error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value2));
          return testStringCoercion(value2);
        }
      }
    }
    function checkCSSPropertyStringCoercion(value2, propName) {
      {
        if (willCoercionThrow(value2)) {
          error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value2));
          return testStringCoercion(value2);
        }
      }
    }
    function checkHtmlStringCoercion(value2) {
      {
        if (willCoercionThrow(value2)) {
          error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value2));
          return testStringCoercion(value2);
        }
      }
    }
    function checkFormFieldValueStringCoercion(value2) {
      {
        if (willCoercionThrow(value2)) {
          error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value2));
          return testStringCoercion(value2);
        }
      }
    }
    var RESERVED = 0;
    var STRING = 1;
    var BOOLEANISH_STRING = 2;
    var BOOLEAN = 3;
    var OVERLOADED_BOOLEAN = 4;
    var NUMERIC = 5;
    var POSITIVE_NUMERIC = 6;
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }
      illegalAttributeNameCache[attributeName] = true;
      {
        error("Invalid attribute name: `%s`", attributeName);
      }
      return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
        return true;
      }
      return false;
    }
    function shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }
      switch (typeof value2) {
        case "function":
        case "symbol":
          return true;
        case "boolean": {
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            return !propertyInfo.acceptsBooleans;
          } else {
            var prefix2 = name.toLowerCase().slice(0, 5);
            return prefix2 !== "data-" && prefix2 !== "aria-";
          }
        }
        default:
          return false;
      }
    }
    function shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag) {
      if (value2 === null || typeof value2 === "undefined") {
        return true;
      }
      if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag)) {
        return true;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value2;
          case OVERLOADED_BOOLEAN:
            return value2 === false;
          case NUMERIC:
            return isNaN(value2);
          case POSITIVE_NUMERIC:
            return isNaN(value2) || value2 < 1;
        }
      }
      return false;
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL2;
      this.removeEmptyString = removeEmptyString;
    }
    var properties = {};
    var reservedProps = [
      "children",
      "dangerouslySetInnerHTML",
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
    reservedProps.forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        RESERVED,
        false,
        name,
        null,
        false,
        false
      );
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
      var name = _ref[0], attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        attributeName,
        null,
        false,
        false
      );
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEANISH_STRING,
        false,
        name.toLowerCase(),
        null,
        false,
        false
      );
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEANISH_STRING,
        false,
        name,
        null,
        false,
        false
      );
    });
    [
      "allowFullScreen",
      "async",
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      "itemScope"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEAN,
        false,
        name.toLowerCase(),
        null,
        false,
        false
      );
    });
    [
      "checked",
      "multiple",
      "muted",
      "selected"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEAN,
        true,
        name,
        null,
        false,
        false
      );
    });
    [
      "capture",
      "download"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        OVERLOADED_BOOLEAN,
        false,
        name,
        null,
        false,
        false
      );
    });
    [
      "cols",
      "rows",
      "size",
      "span"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        POSITIVE_NUMERIC,
        false,
        name,
        null,
        false,
        false
      );
    });
    ["rowSpan", "start"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        NUMERIC,
        false,
        name.toLowerCase(),
        null,
        false,
        false
      );
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token2) {
      return token2[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        attributeName,
        null,
        false,
        false
      );
    });
    [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        attributeName,
        "http://www.w3.org/1999/xlink",
        false,
        false
      );
    });
    [
      "xml:base",
      "xml:lang",
      "xml:space"
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        attributeName,
        "http://www.w3.org/XML/1998/namespace",
        false,
        false
      );
    });
    ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(
        attributeName,
        STRING,
        false,
        attributeName.toLowerCase(),
        null,
        false,
        false
      );
    });
    var xlinkHref = "xlinkHref";
    properties[xlinkHref] = new PropertyInfoRecord(
      "xlinkHref",
      STRING,
      false,
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      true,
      false
    );
    ["src", "href", "action", "formAction"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(
        attributeName,
        STRING,
        false,
        attributeName.toLowerCase(),
        null,
        true,
        true
      );
    });
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url2) {
      {
        if (!didWarn && isJavaScriptProtocol.test(url2)) {
          didWarn = true;
          error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
        }
      }
    }
    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL("" + expected);
          }
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value2 = node.getAttribute(attributeName);
              if (value2 === "") {
                return true;
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value2;
              }
              if (value2 === "" + expected) {
                return expected;
              }
              return value2;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return node.getAttribute(attributeName);
            }
            if (propertyInfo.type === BOOLEAN) {
              return expected;
            }
            stringValue = node.getAttribute(attributeName);
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === "" + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    function getValueForAttribute(node, name, expected, isCustomComponentTag) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }
        if (!node.hasAttribute(name)) {
          return expected === void 0 ? void 0 : null;
        }
        var value2 = node.getAttribute(name);
        {
          checkAttributeStringCoercion(expected, name);
        }
        if (value2 === "" + expected) {
          return expected;
        }
        return value2;
      }
    }
    function setValueForProperty(node, name, value2, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }
      if (shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag)) {
        value2 = null;
      }
      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;
          if (value2 === null) {
            node.removeAttribute(_attributeName);
          } else {
            {
              checkAttributeStringCoercion(value2, name);
            }
            node.setAttribute(_attributeName, "" + value2);
          }
        }
        return;
      }
      var mustUseProperty = propertyInfo.mustUseProperty;
      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        if (value2 === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? false : "";
        } else {
          node[propertyName] = value2;
        }
        return;
      }
      var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
      if (value2 === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue;
        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value2 === true) {
          attributeValue = "";
        } else {
          {
            {
              checkAttributeStringCoercion(value2, attributeName);
            }
            attributeValue = "" + value2;
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL(attributeValue.toString());
          }
        }
        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    }
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_CACHE_TYPE = Symbol.for("react.cache");
    var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var assign = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
          }
        }
        return "\n" + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c2 = controlLines.length - 1;
          while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
            c2--;
          }
          for (; s >= 1 && c2 >= 0; s--, c2--) {
            if (sampleLines[s] !== controlLines[c2]) {
              if (s !== 1 || c2 !== 1) {
                do {
                  s--;
                  c2--;
                  if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c2 >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
      {
        return describeNativeComponentFrame(ctor, true);
      }
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    function describeFiber(fiber) {
      fiber._debugOwner ? fiber._debugOwner.type : null;
      fiber._debugSource;
      switch (fiber.tag) {
        case HostComponent:
          return describeBuiltInComponentFrame(fiber.type);
        case LazyComponent:
          return describeBuiltInComponentFrame("Lazy");
        case SuspenseComponent:
          return describeBuiltInComponentFrame("Suspense");
        case SuspenseListComponent:
          return describeBuiltInComponentFrame("SuspenseList");
        case FunctionComponent:
        case IndeterminateComponent:
        case SimpleMemoComponent:
          return describeFunctionComponentFrame(fiber.type);
        case ForwardRef:
          return describeFunctionComponentFrame(fiber.type.render);
        case ClassComponent:
          return describeClassComponentFrame(fiber.type);
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress2) {
      try {
        var info = "";
        var node = workInProgress2;
        do {
          info += describeFiber(node);
          node = node.return;
        } while (node);
        return info;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            try {
              return getComponentNameFromType(init2(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || "";
      return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName$1(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromFiber(fiber) {
      var tag = fiber.tag, type = fiber.type;
      switch (tag) {
        case CacheComponent:
          return "Cache";
        case ContextConsumer:
          var context = type;
          return getContextName$1(context) + ".Consumer";
        case ContextProvider:
          var provider = type;
          return getContextName$1(provider._context) + ".Provider";
        case DehydratedFragment:
          return "DehydratedFragment";
        case ForwardRef:
          return getWrappedName$1(type, type.render, "ForwardRef");
        case Fragment2:
          return "Fragment";
        case HostComponent:
          return type;
        case HostPortal:
          return "Portal";
        case HostRoot:
          return "Root";
        case HostText:
          return "Text";
        case LazyComponent:
          return getComponentNameFromType(type);
        case Mode:
          if (type === REACT_STRICT_MODE_TYPE) {
            return "StrictMode";
          }
          return "Mode";
        case OffscreenComponent:
          return "Offscreen";
        case Profiler:
          return "Profiler";
        case ScopeComponent:
          return "Scope";
        case SuspenseComponent:
          return "Suspense";
        case SuspenseListComponent:
          return "SuspenseList";
        case TracingMarkerComponent:
          return "TracingMarker";
        case ClassComponent:
        case FunctionComponent:
        case IncompleteClassComponent:
        case IndeterminateComponent:
        case MemoComponent:
        case SimpleMemoComponent:
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          break;
      }
      return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== "undefined") {
          return getComponentNameFromFiber(owner);
        }
      }
      return null;
    }
    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return "";
        }
        return getStackByFiberInDevAndProd(current);
      }
    }
    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
      }
    }
    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
      }
    }
    function getCurrentFiber() {
      {
        return current;
      }
    }
    function setIsRendering(rendering) {
      {
        isRendering = rendering;
      }
    }
    function toString2(value2) {
      return "" + value2;
    }
    function getToStringValue(value2) {
      switch (typeof value2) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value2;
        case "object":
          {
            checkFormFieldValueStringCoercion(value2);
          }
          return value2;
        default:
          return "";
      }
    }
    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    function checkControlledValueProps(tagName, props) {
      {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
          error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        }
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
          error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
        }
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function getTracker(node) {
      return node._valueTracker;
    }
    function detachTracker(node) {
      node._valueTracker = null;
    }
    function getValueFromNode(node) {
      var value2 = "";
      if (!node) {
        return value2;
      }
      if (isCheckable(node)) {
        value2 = node.checked ? "true" : "false";
      } else {
        value2 = node.value;
      }
      return value2;
    }
    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? "checked" : "value";
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      {
        checkFormFieldValueStringCoercion(node[valueField]);
      }
      var currentValue = "" + node[valueField];
      if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
        return;
      }
      var get3 = descriptor.get, set2 = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function() {
          return get3.call(this);
        },
        set: function(value2) {
          {
            checkFormFieldValueStringCoercion(value2);
          }
          currentValue = "" + value2;
          set2.call(this, value2);
        }
      });
      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function() {
          return currentValue;
        },
        setValue: function(value2) {
          {
            checkFormFieldValueStringCoercion(value2);
          }
          currentValue = "" + value2;
        },
        stopTracking: function() {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }
    function track(node) {
      if (getTracker(node)) {
        return;
      }
      node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }
      var tracker = getTracker(node);
      if (!tracker) {
        return true;
      }
      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);
      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }
      return false;
    }
    function getActiveElement(doc) {
      doc = doc || (typeof document !== "undefined" ? document : void 0);
      if (typeof doc === "undefined") {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
      var usesChecked = props.type === "checkbox" || props.type === "radio";
      return usesChecked ? props.checked != null : props.value != null;
    }
    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;
      var hostProps = assign({}, props, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });
      return hostProps;
    }
    function initWrapperState(element, props) {
      {
        checkControlledValueProps("input", props);
        if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
          error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
          error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node = element;
      var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }
    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;
      if (checked != null) {
        setValueForProperty(node, "checked", checked, false);
      }
    }
    function updateWrapper(element, props) {
      var node = element;
      {
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
          error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
          didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
          error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value2 = getToStringValue(props.value);
      var type = props.type;
      if (value2 != null) {
        if (type === "number") {
          if (value2 === 0 && node.value === "" || node.value != value2) {
            node.value = toString2(value2);
          }
        } else if (node.value !== toString2(value2)) {
          node.value = toString2(value2);
        }
      } else if (type === "submit" || type === "reset") {
        node.removeAttribute("value");
        return;
      }
      {
        if (props.hasOwnProperty("value")) {
          setDefaultValue(node, props.type, value2);
        } else if (props.hasOwnProperty("defaultValue")) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }
      {
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }
    function postMountWrapper(element, props, isHydrating2) {
      var node = element;
      if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
        var type = props.type;
        var isButton = type === "submit" || type === "reset";
        if (isButton && (props.value === void 0 || props.value === null)) {
          return;
        }
        var initialValue = toString2(node._wrapperState.initialValue);
        if (!isHydrating2) {
          {
            if (initialValue !== node.value) {
              node.value = initialValue;
            }
          }
        }
        {
          node.defaultValue = initialValue;
        }
      }
      var name = node.name;
      if (name !== "") {
        node.name = "";
      }
      {
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }
      if (name !== "") {
        node.name = name;
      }
    }
    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === "radio" && name != null) {
        var queryRoot = rootNode;
        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }
        {
          checkAttributeStringCoercion(name, "name");
        }
        var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
        for (var i2 = 0; i2 < group.length; i2++) {
          var otherNode = group[i2];
          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          }
          var otherProps = getFiberCurrentPropsFromNode(otherNode);
          if (!otherProps) {
            throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
          }
          updateValueIfChanged(otherNode);
          updateWrapper(otherNode, otherProps);
        }
      }
    }
    function setDefaultValue(node, type, value2) {
      if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
        if (value2 == null) {
          node.defaultValue = toString2(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString2(value2)) {
          node.defaultValue = toString2(value2);
        }
      }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    function validateProps(element, props) {
      {
        if (props.value == null) {
          if (typeof props.children === "object" && props.children !== null) {
            React2.Children.forEach(props.children, function(child) {
              if (child == null) {
                return;
              }
              if (typeof child === "string" || typeof child === "number") {
                return;
              }
              if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            });
          } else if (props.dangerouslySetInnerHTML != null) {
            if (!didWarnInvalidInnerHTML) {
              didWarnInvalidInnerHTML = true;
              error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
            }
          }
        }
        if (props.selected != null && !didWarnSelectedSetOnOption) {
          error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
          didWarnSelectedSetOnOption = true;
        }
      }
    }
    function postMountWrapper$1(element, props) {
      if (props.value != null) {
        element.setAttribute("value", toString2(getToStringValue(props.value)));
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray2(a) {
      return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    {
      didWarnValueDefaultValue$1 = false;
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      if (ownerName) {
        return "\n\nCheck the render method of `" + ownerName + "`.";
      }
      return "";
    }
    var valuePropNames = ["value", "defaultValue"];
    function checkSelectPropTypes(props) {
      {
        checkControlledValueProps("select", props);
        for (var i2 = 0; i2 < valuePropNames.length; i2++) {
          var propName = valuePropNames[i2];
          if (props[propName] == null) {
            continue;
          }
          var propNameIsArray = isArray2(props[propName]);
          if (props.multiple && !propNameIsArray) {
            error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
          } else if (!props.multiple && propNameIsArray) {
            error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
          }
        }
      }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options2 = node.options;
      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};
        for (var i2 = 0; i2 < selectedValues.length; i2++) {
          selectedValue["$" + selectedValues[i2]] = true;
        }
        for (var _i = 0; _i < options2.length; _i++) {
          var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
          if (options2[_i].selected !== selected) {
            options2[_i].selected = selected;
          }
          if (selected && setDefaultSelected) {
            options2[_i].defaultSelected = true;
          }
        }
      } else {
        var _selectedValue = toString2(getToStringValue(propValue));
        var defaultSelected = null;
        for (var _i2 = 0; _i2 < options2.length; _i2++) {
          if (options2[_i2].value === _selectedValue) {
            options2[_i2].selected = true;
            if (setDefaultSelected) {
              options2[_i2].defaultSelected = true;
            }
            return;
          }
          if (defaultSelected === null && !options2[_i2].disabled) {
            defaultSelected = options2[_i2];
          }
        }
        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    function getHostProps$1(element, props) {
      return assign({}, props, {
        value: void 0
      });
    }
    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }
      node._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
          error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
          didWarnValueDefaultValue$1 = true;
        }
      }
    }
    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value2 = props.value;
      if (value2 != null) {
        updateOptions(node, !!props.multiple, value2, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }
    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value2 = props.value;
      if (value2 != null) {
        updateOptions(node, !!props.multiple, value2, false);
      } else if (wasMultiple !== !!props.multiple) {
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
        }
      }
    }
    function restoreControlledState$1(element, props) {
      var node = element;
      var value2 = props.value;
      if (value2 != null) {
        updateOptions(node, !!props.multiple, value2, false);
      }
    }
    var didWarnValDefaultVal = false;
    function getHostProps$2(element, props) {
      var node = element;
      if (props.dangerouslySetInnerHTML != null) {
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      }
      var hostProps = assign({}, props, {
        value: void 0,
        defaultValue: void 0,
        children: toString2(node._wrapperState.initialValue)
      });
      return hostProps;
    }
    function initWrapperState$2(element, props) {
      var node = element;
      {
        checkControlledValueProps("textarea", props);
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
          error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value;
      if (initialValue == null) {
        var children = props.children, defaultValue = props.defaultValue;
        if (children != null) {
          {
            error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          }
          {
            if (defaultValue != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray2(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              children = children[0];
            }
            defaultValue = children;
          }
        }
        if (defaultValue == null) {
          defaultValue = "";
        }
        initialValue = defaultValue;
      }
      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }
    function updateWrapper$1(element, props) {
      var node = element;
      var value2 = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);
      if (value2 != null) {
        var newValue = toString2(value2);
        if (newValue !== node.value) {
          node.value = newValue;
        }
        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }
      if (defaultValue != null) {
        node.defaultValue = toString2(defaultValue);
      }
    }
    function postMountWrapper$3(element, props) {
      var node = element;
      var textContent = node.textContent;
      if (textContent === node._wrapperState.initialValue) {
        if (textContent !== "" && textContent !== null) {
          node.value = textContent;
        }
      }
    }
    function restoreControlledState$2(element, props) {
      updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
    var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
    var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
    function getIntrinsicNamespace(type) {
      switch (type) {
        case "svg":
          return SVG_NAMESPACE;
        case "math":
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE;
      }
    }
    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
        return getIntrinsicNamespace(type);
      }
      if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
        return HTML_NAMESPACE;
      }
      return parentNamespace;
    }
    var createMicrosoftUnsafeLocalFunction = function(func) {
      if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
        return function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    };
    var reusableSVGContainer;
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
      if (node.namespaceURI === SVG_NAMESPACE) {
        if (!("innerHTML" in node)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div");
          reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          var svgNode = reusableSVGContainer.firstChild;
          while (node.firstChild) {
            node.removeChild(node.firstChild);
          }
          while (svgNode.firstChild) {
            node.appendChild(svgNode.firstChild);
          }
          return;
        }
      }
      node.innerHTML = html;
    });
    var ELEMENT_NODE2 = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    var setTextContent = function(node, text) {
      if (text) {
        var firstChild = node.firstChild;
        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    };
    var shorthandToLonghand = {
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
    };
    var isUnitlessNumber = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    function prefixKey(prefix2, key) {
      return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    var prefixes = ["Webkit", "ms", "Moz", "O"];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix2) {
        isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
      });
    });
    function dangerousStyleValue(name, value2, isCustomProperty) {
      var isEmpty = value2 == null || typeof value2 === "boolean" || value2 === "";
      if (isEmpty) {
        return "";
      }
      if (!isCustomProperty && typeof value2 === "number" && value2 !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value2 + "px";
      }
      {
        checkCSSPropertyStringCoercion(value2, name);
      }
      return ("" + value2).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    var warnValidStyle = function() {
    };
    {
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;
      var camelize = function(string2) {
        return string2.replace(hyphenPattern, function(_, character) {
          return character.toUpperCase();
        });
      };
      var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error(
          "Unsupported style property %s. Did you mean %s?",
          name,
          camelize(name.replace(msPattern$1, "ms-"))
        );
      };
      var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
      };
      var warnStyleValueWithSemicolon = function(name, value2) {
        if (warnedStyleValues.hasOwnProperty(value2) && warnedStyleValues[value2]) {
          return;
        }
        warnedStyleValues[value2] = true;
        error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value2.replace(badStyleValueWithSemicolonPattern, ""));
      };
      var warnStyleValueIsNaN = function(name, value2) {
        if (warnedForNaNValue) {
          return;
        }
        warnedForNaNValue = true;
        error("`NaN` is an invalid value for the `%s` css style property.", name);
      };
      var warnStyleValueIsInfinity = function(name, value2) {
        if (warnedForInfinityValue) {
          return;
        }
        warnedForInfinityValue = true;
        error("`Infinity` is an invalid value for the `%s` css style property.", name);
      };
      warnValidStyle = function(name, value2) {
        if (name.indexOf("-") > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value2)) {
          warnStyleValueWithSemicolon(name, value2);
        }
        if (typeof value2 === "number") {
          if (isNaN(value2)) {
            warnStyleValueIsNaN(name, value2);
          } else if (!isFinite(value2)) {
            warnStyleValueIsInfinity(name, value2);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    function createDangerousStringForStyles(styles) {
      {
        var serialized = "";
        var delimiter = "";
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var styleValue = styles[styleName];
          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf("--") === 0;
            serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ";";
          }
        }
        return serialized || null;
      }
    }
    function setValueForStyles(node, styles) {
      var style2 = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty = styleName.indexOf("--") === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
        if (styleName === "float") {
          styleName = "cssFloat";
        }
        if (isCustomProperty) {
          style2.setProperty(styleName, styleValue);
        } else {
          style2[styleName] = styleValue;
        }
      }
    }
    function isValueEmpty(value2) {
      return value2 == null || typeof value2 === "boolean" || value2 === "";
    }
    function expandShorthandMap(styles) {
      var expanded = {};
      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];
        for (var i2 = 0; i2 < longhands.length; i2++) {
          expanded[longhands[i2]] = key;
        }
      }
      return expanded;
    }
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      {
        if (!nextStyles) {
          return;
        }
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for (var key in expandedUpdates) {
          var originalKey = expandedUpdates[key];
          var correctOriginalKey = expandedStyles[key];
          if (correctOriginalKey && originalKey !== correctOriginalKey) {
            var warningKey = originalKey + "," + correctOriginalKey;
            if (warnedAbout[warningKey]) {
              continue;
            }
            warnedAbout[warningKey] = true;
            error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
          }
        }
      }
    }
    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
    };
    var voidElementTags = assign({
      menuitem: true
    }, omittedCloseTags);
    var HTML2 = "__html";
    function assertValidProps(tag, props) {
      if (!props) {
        return;
      }
      if (voidElementTags[tag]) {
        if (props.children != null || props.dangerouslySetInnerHTML != null) {
          throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
      }
      if (props.dangerouslySetInnerHTML != null) {
        if (props.children != null) {
          throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        }
        if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML2 in props.dangerouslySetInnerHTML)) {
          throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
      }
      {
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
          error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        }
      }
      if (props.style != null && typeof props.style !== "object") {
        throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      }
    }
    function isCustomComponent(tagName, props) {
      if (tagName.indexOf("-") === -1) {
        return typeof props.is === "string";
      }
      switch (tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var possibleStandardNames = {
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    };
    var ariaProperties = {
      "aria-current": 0,
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      "aria-hidden": 0,
      "aria-invalid": 0,
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    function validateProperty(tagName, name) {
      {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
          return true;
        }
        if (rARIACamel.test(name)) {
          var ariaName = "aria-" + name.slice(4).toLowerCase();
          var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
          if (correctName == null) {
            error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
            warnedProperties[name] = true;
            return true;
          }
          if (name !== correctName) {
            error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
            warnedProperties[name] = true;
            return true;
          }
        }
        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase();
          var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
          if (standardName == null) {
            warnedProperties[name] = true;
            return false;
          }
          if (name !== standardName) {
            error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
            warnedProperties[name] = true;
            return true;
          }
        }
      }
      return true;
    }
    function warnInvalidARIAProps(type, props) {
      {
        var invalidProps = [];
        for (var key in props) {
          var isValid = validateProperty(type, key);
          if (!isValid) {
            invalidProps.push(key);
          }
        }
        var unknownPropString = invalidProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (invalidProps.length === 1) {
          error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        } else if (invalidProps.length > 1) {
          error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
    }
    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
      {
        if (type !== "input" && type !== "textarea" && type !== "select") {
          return;
        }
        if (props != null && props.value === null && !didWarnValueNull) {
          didWarnValueNull = true;
          if (type === "select" && props.multiple) {
            error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
          } else {
            error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
          }
        }
      }
    }
    var validateProperty$1 = function() {
    };
    {
      var warnedProperties$1 = {};
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      validateProperty$1 = function(tagName, name, value2, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
          error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (eventRegistry != null) {
          var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
          if (registrationNameDependencies2.hasOwnProperty(name)) {
            return true;
          }
          var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
          if (registrationName != null) {
            error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (EVENT_NAME_REGEX.test(name)) {
            error("Unknown event handler property `%s`. It will be ignored.", name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }
        if (lowerCasedName === "innerhtml") {
          error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === "aria") {
          error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === "is" && value2 !== null && value2 !== void 0 && typeof value2 !== "string") {
          error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value2);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value2 === "number" && isNaN(value2)) {
          error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
          warnedProperties$1[name] = true;
          return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name) {
            error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value2 === "boolean" && shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
          if (value2) {
            error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value2, name, name, value2, name);
          } else {
            error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value2, name, name, value2, name, name, name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        if (isReserved) {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        }
        if ((value2 === "false" || value2 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value2, name, value2 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value2);
          warnedProperties$1[name] = true;
          return true;
        }
        return true;
      };
    }
    var warnUnknownProperties = function(type, props, eventRegistry) {
      {
        var unknownProps = [];
        for (var key in props) {
          var isValid = validateProperty$1(type, key, props[key], eventRegistry);
          if (!isValid) {
            unknownProps.push(key);
          }
        }
        var unknownPropString = unknownProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (unknownProps.length === 1) {
          error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        } else if (unknownProps.length > 1) {
          error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      }
    };
    function validateProperties$2(type, props, eventRegistry) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 1 << 1;
    var IS_CAPTURE_PHASE = 1 << 2;
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
      {
        if (currentReplayingEvent !== null) {
          error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
      {
        if (currentReplayingEvent === null) {
          error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
      return event === currentReplayingEvent;
    }
    function getEventTarget(nativeEvent) {
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      }
      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);
      if (!internalInstance) {
        return;
      }
      if (typeof restoreImpl !== "function") {
        throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      }
      var stateNode = internalInstance.stateNode;
      if (stateNode) {
        var _props = getFiberCurrentPropsFromNode(stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
      }
    }
    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }
    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }
      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);
      if (queuedTargets) {
        for (var i2 = 0; i2 < queuedTargets.length; i2++) {
          restoreStateOfTarget(queuedTargets[i2]);
        }
      }
    }
    var batchedUpdatesImpl = function(fn, bookkeeping) {
      return fn(bookkeeping);
    };
    var flushSyncImpl = function() {
    };
    var isInsideEventHandler = false;
    function finishEventHandler() {
      var controlledComponentsHavePendingUpdates = needsStateRestore();
      if (controlledComponentsHavePendingUpdates) {
        flushSyncImpl();
        restoreStateIfNeeded();
      }
    }
    function batchedUpdates(fn, a, b) {
      if (isInsideEventHandler) {
        return fn(a, b);
      }
      isInsideEventHandler = true;
      try {
        return batchedUpdatesImpl(fn, a, b);
      } finally {
        isInsideEventHandler = false;
        finishEventHandler();
      }
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl;
      flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
      return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }
    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          return !!(props.disabled && isInteractive(type));
        default:
          return false;
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (stateNode === null) {
        return null;
      }
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (props === null) {
        return null;
      }
      var listener = props[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }
      if (listener && typeof listener !== "function") {
        throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
      }
      return listener;
    }
    var passiveBrowserEventsSupported = false;
    if (canUseDOM) {
      try {
        var options = {};
        Object.defineProperty(options, "passive", {
          get: function() {
            passiveBrowserEventsSupported = true;
          }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
      } catch (e) {
        passiveBrowserEventsSupported = false;
      }
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c2, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error2) {
        this.onError(error2);
      }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    {
      if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c2, d, e, f) {
          if (typeof document === "undefined" || document === null) {
            throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          }
          var evt = document.createEvent("Event");
          var didCall = false;
          var didError = true;
          var windowEvent = window.event;
          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          function restoreAfterDispatch() {
            fakeNode.removeEventListener(evtType, callCallback2, false);
            if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
              window.event = windowEvent;
            }
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback2() {
            didCall = true;
            restoreAfterDispatch();
            func.apply(context, funcArgs);
            didError = false;
          }
          var error2;
          var didSetError = false;
          var isCrossOriginError = false;
          function handleWindowError(event) {
            error2 = event.error;
            didSetError = true;
            if (error2 === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
            if (event.defaultPrevented) {
              if (error2 != null && typeof error2 === "object") {
                try {
                  error2._suppressLogging = true;
                } catch (inner) {
                }
              }
            }
          }
          var evtType = "react-" + (name ? name : "invokeguardedcallback");
          window.addEventListener("error", handleWindowError);
          fakeNode.addEventListener(evtType, callCallback2, false);
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);
          if (windowEventDescriptor) {
            Object.defineProperty(window, "event", windowEventDescriptor);
          }
          if (didCall && didError) {
            if (!didSetError) {
              error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
            } else if (isCrossOriginError) {
              error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
            }
            this.onError(error2);
          }
          window.removeEventListener("error", handleWindowError);
          if (!didCall) {
            restoreAfterDispatch();
            return invokeGuardedCallbackProd.apply(this, arguments);
          }
        };
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null;
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function(error2) {
        hasError = true;
        caughtError = error2;
      }
    };
    function invokeGuardedCallback(name, func, context, a, b, c2, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c2, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);
      if (hasError) {
        var error2 = clearCaughtError();
        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error2;
        }
      }
    }
    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error2 = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error2;
      }
    }
    function hasCaughtError() {
      return hasError;
    }
    function clearCaughtError() {
      if (hasError) {
        var error2 = caughtError;
        hasError = false;
        caughtError = null;
        return error2;
      } else {
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function get2(key) {
      return key._reactInternals;
    }
    function has(key) {
      return key._reactInternals !== void 0;
    }
    function set(key, value2) {
      key._reactInternals = value2;
    }
    var NoFlags = 0;
    var PerformedWork = 1;
    var Placement = 2;
    var Update = 4;
    var ChildDeletion = 16;
    var ContentReset = 32;
    var Callback = 64;
    var DidCapture = 128;
    var ForceClientRender = 256;
    var Ref = 512;
    var Snapshot = 1024;
    var Passive = 2048;
    var Hydrating = 4096;
    var Visibility = 8192;
    var StoreConsistency = 16384;
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
    var HostEffectMask = 32767;
    var Incomplete = 32768;
    var ShouldCapture = 65536;
    var ForceUpdateForLegacySuspense = 131072;
    var Forked = 1048576;
    var RefStatic = 2097152;
    var LayoutStatic = 4194304;
    var PassiveStatic = 8388608;
    var MountLayoutDev = 16777216;
    var MountPassiveDev = 33554432;
    var BeforeMutationMask = Update | Snapshot | 0;
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility;
    var PassiveMask = Passive | ChildDeletion;
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
      var node = fiber;
      var nearestMounted = fiber;
      if (!fiber.alternate) {
        var nextNode = node;
        do {
          node = nextNode;
          if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
            nearestMounted = node.return;
          }
          nextNode = node.return;
        } while (nextNode);
      } else {
        while (node.return) {
          node = node.return;
        }
      }
      if (node.tag === HostRoot) {
        return nearestMounted;
      }
      return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (fiber.tag === SuspenseComponent) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState === null) {
          var current2 = fiber.alternate;
          if (current2 !== null) {
            suspenseState = current2.memoizedState;
          }
        }
        if (suspenseState !== null) {
          return suspenseState.dehydrated;
        }
      }
      return null;
    }
    function getContainerFromFiber(fiber) {
      return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
      return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          if (!instance._warnedAboutRefsInRender) {
            error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
          }
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get2(component);
      if (!fiber) {
        return false;
      }
      return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber) {
        throw new Error("Unable to find node on an unmounted component.");
      }
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        var nearestMounted = getNearestMountedFiber(fiber);
        if (nearestMounted === null) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (nearestMounted !== fiber) {
          return null;
        }
        return fiber;
      }
      var a = fiber;
      var b = alternate;
      while (true) {
        var parentA = a.return;
        if (parentA === null) {
          break;
        }
        var parentB = parentA.alternate;
        if (parentB === null) {
          var nextParent = parentA.return;
          if (nextParent !== null) {
            a = b = nextParent;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a) {
              assertIsMounted(parentA);
              return fiber;
            }
            if (child === b) {
              assertIsMounted(parentA);
              return alternate;
            }
            child = child.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) {
          a = parentA;
          b = parentB;
        } else {
          var didFindChild = false;
          var _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
        }
        if (a.alternate !== b) {
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (a.tag !== HostRoot) {
        throw new Error("Unable to find node on an unmounted component.");
      }
      if (a.stateNode.current === a) {
        return fiber;
      }
      return alternate;
    }
    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
      if (node.tag === HostComponent || node.tag === HostText) {
        return node;
      }
      var child = node.child;
      while (child !== null) {
        var match = findCurrentHostFiberImpl(child);
        if (match !== null) {
          return match;
        }
        child = child.sibling;
      }
      return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
      if (node.tag === HostComponent || node.tag === HostText) {
        return node;
      }
      var child = node.child;
      while (child !== null) {
        if (child.tag !== HostPortal) {
          var match = findCurrentHostFiberWithNoPortalsImpl(child);
          if (match !== null) {
            return match;
          }
        }
        child = child.sibling;
      }
      return null;
    }
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
        return false;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) {
        return true;
      }
      if (!hook.supportsFiber) {
        {
          error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
        }
        return true;
      }
      try {
        if (enableSchedulingProfiler) {
          internals = assign({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          });
        }
        rendererID = hook.inject(internals);
        injectedHook = hook;
      } catch (err) {
        {
          error("React instrumentation encountered an error: %s.", err);
        }
      }
      if (hook.checkDCE) {
        return true;
      } else {
        return false;
      }
    }
    function onScheduleRoot(root3, children) {
      {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root3, children);
          } catch (err) {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onCommitRoot(root3, eventPriority) {
      if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
        try {
          var didError = (root3.current.flags & DidCapture) === DidCapture;
          if (enableProfilerTimer) {
            var schedulerPriority;
            switch (eventPriority) {
              case DiscreteEventPriority:
                schedulerPriority = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriority = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriority = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriority = IdlePriority;
                break;
              default:
                schedulerPriority = NormalPriority;
                break;
            }
            injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
          }
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onPostCommitRoot(root3) {
      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
        try {
          injectedHook.onPostCommitFiberRoot(rendererID, root3);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onCommitUnmount(fiber) {
      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
        try {
          injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
      {
        if (typeof unstable_yieldValue === "function") {
          unstable_setDisableYieldValue(newIsStrictMode);
          setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === "function") {
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
    }
    function injectProfilingHooks(profilingHooks) {
      injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
      {
        var map2 = /* @__PURE__ */ new Map();
        var lane = 1;
        for (var index3 = 0; index3 < TotalLanes; index3++) {
          var label = getLabelForLane(lane);
          map2.set(lane, label);
          lane *= 2;
        }
        return map2;
      }
    }
    function markCommitStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
          injectedProfilingHooks.markCommitStarted(lanes);
        }
      }
    }
    function markCommitStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
          injectedProfilingHooks.markCommitStopped();
        }
      }
    }
    function markComponentRenderStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
          injectedProfilingHooks.markComponentRenderStarted(fiber);
        }
      }
    }
    function markComponentRenderStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
          injectedProfilingHooks.markComponentRenderStopped();
        }
      }
    }
    function markComponentPassiveEffectMountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
          injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
        }
      }
    }
    function markComponentPassiveEffectMountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
          injectedProfilingHooks.markComponentPassiveEffectMountStopped();
        }
      }
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
          injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
        }
      }
    }
    function markComponentPassiveEffectUnmountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
          injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
        }
      }
    }
    function markComponentLayoutEffectMountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
          injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
        }
      }
    }
    function markComponentLayoutEffectMountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
          injectedProfilingHooks.markComponentLayoutEffectMountStopped();
        }
      }
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
          injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
        }
      }
    }
    function markComponentLayoutEffectUnmountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
          injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
        }
      }
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
          injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
        }
      }
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
          injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
        }
      }
    }
    function markLayoutEffectsStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
          injectedProfilingHooks.markLayoutEffectsStarted(lanes);
        }
      }
    }
    function markLayoutEffectsStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
          injectedProfilingHooks.markLayoutEffectsStopped();
        }
      }
    }
    function markPassiveEffectsStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
          injectedProfilingHooks.markPassiveEffectsStarted(lanes);
        }
      }
    }
    function markPassiveEffectsStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
          injectedProfilingHooks.markPassiveEffectsStopped();
        }
      }
    }
    function markRenderStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
          injectedProfilingHooks.markRenderStarted(lanes);
        }
      }
    }
    function markRenderYielded() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
          injectedProfilingHooks.markRenderYielded();
        }
      }
    }
    function markRenderStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
          injectedProfilingHooks.markRenderStopped();
        }
      }
    }
    function markRenderScheduled(lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
          injectedProfilingHooks.markRenderScheduled(lane);
        }
      }
    }
    function markForceUpdateScheduled(fiber, lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
          injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
        }
      }
    }
    function markStateUpdateScheduled(fiber, lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
          injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
        }
      }
    }
    var NoMode = 0;
    var ConcurrentMode = 1;
    var ProfileMode = 2;
    var StrictLegacyMode = 8;
    var StrictEffectsMode = 16;
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
      var asUint = x >>> 0;
      if (asUint === 0) {
        return 32;
      }
      return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    var TotalLanes = 31;
    var NoLanes = 0;
    var NoLane = 0;
    var SyncLane = 1;
    var InputContinuousHydrationLane = 2;
    var InputContinuousLane = 4;
    var DefaultHydrationLane = 8;
    var DefaultLane = 16;
    var TransitionHydrationLane = 32;
    var TransitionLanes = 4194240;
    var TransitionLane1 = 64;
    var TransitionLane2 = 128;
    var TransitionLane3 = 256;
    var TransitionLane4 = 512;
    var TransitionLane5 = 1024;
    var TransitionLane6 = 2048;
    var TransitionLane7 = 4096;
    var TransitionLane8 = 8192;
    var TransitionLane9 = 16384;
    var TransitionLane10 = 32768;
    var TransitionLane11 = 65536;
    var TransitionLane12 = 131072;
    var TransitionLane13 = 262144;
    var TransitionLane14 = 524288;
    var TransitionLane15 = 1048576;
    var TransitionLane16 = 2097152;
    var RetryLanes = 130023424;
    var RetryLane1 = 4194304;
    var RetryLane2 = 8388608;
    var RetryLane3 = 16777216;
    var RetryLane4 = 33554432;
    var RetryLane5 = 67108864;
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = 134217728;
    var NonIdleLanes = 268435455;
    var IdleHydrationLane = 268435456;
    var IdleLane = 536870912;
    var OffscreenLane = 1073741824;
    function getLabelForLane(lane) {
      {
        if (lane & SyncLane) {
          return "Sync";
        }
        if (lane & InputContinuousHydrationLane) {
          return "InputContinuousHydration";
        }
        if (lane & InputContinuousLane) {
          return "InputContinuous";
        }
        if (lane & DefaultHydrationLane) {
          return "DefaultHydration";
        }
        if (lane & DefaultLane) {
          return "Default";
        }
        if (lane & TransitionHydrationLane) {
          return "TransitionHydration";
        }
        if (lane & TransitionLanes) {
          return "Transition";
        }
        if (lane & RetryLanes) {
          return "Retry";
        }
        if (lane & SelectiveHydrationLane) {
          return "SelectiveHydration";
        }
        if (lane & IdleHydrationLane) {
          return "IdleHydration";
        }
        if (lane & IdleLane) {
          return "Idle";
        }
        if (lane & OffscreenLane) {
          return "Offscreen";
        }
      }
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
      switch (getHighestPriorityLane(lanes)) {
        case SyncLane:
          return SyncLane;
        case InputContinuousHydrationLane:
          return InputContinuousHydrationLane;
        case InputContinuousLane:
          return InputContinuousLane;
        case DefaultHydrationLane:
          return DefaultHydrationLane;
        case DefaultLane:
          return DefaultLane;
        case TransitionHydrationLane:
          return TransitionHydrationLane;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return lanes & TransitionLanes;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return lanes & RetryLanes;
        case SelectiveHydrationLane:
          return SelectiveHydrationLane;
        case IdleHydrationLane:
          return IdleHydrationLane;
        case IdleLane:
          return IdleLane;
        case OffscreenLane:
          return OffscreenLane;
        default:
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return lanes;
      }
    }
    function getNextLanes(root3, wipLanes) {
      var pendingLanes = root3.pendingLanes;
      if (pendingLanes === NoLanes) {
        return NoLanes;
      }
      var nextLanes = NoLanes;
      var suspendedLanes = root3.suspendedLanes;
      var pingedLanes = root3.pingedLanes;
      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
      if (nonIdlePendingLanes !== NoLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
        if (nonIdleUnblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
        } else {
          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
          if (nonIdlePingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
          }
        }
      } else {
        var unblockedLanes = pendingLanes & ~suspendedLanes;
        if (unblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(unblockedLanes);
        } else {
          if (pingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(pingedLanes);
          }
        }
      }
      if (nextLanes === NoLanes) {
        return NoLanes;
      }
      if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
        var nextLane = getHighestPriorityLane(nextLanes);
        var wipLane = getHighestPriorityLane(wipLanes);
        if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
          return wipLanes;
        }
      }
      if ((nextLanes & InputContinuousLane) !== NoLanes) {
        nextLanes |= pendingLanes & DefaultLane;
      }
      var entangledLanes = root3.entangledLanes;
      if (entangledLanes !== NoLanes) {
        var entanglements = root3.entanglements;
        var lanes = nextLanes & entangledLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          nextLanes |= entanglements[index3];
          lanes &= ~lane;
        }
      }
      return nextLanes;
    }
    function getMostRecentEventTime(root3, lanes) {
      var eventTimes = root3.eventTimes;
      var mostRecentEventTime = NoTimestamp;
      while (lanes > 0) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        var eventTime = eventTimes[index3];
        if (eventTime > mostRecentEventTime) {
          mostRecentEventTime = eventTime;
        }
        lanes &= ~lane;
      }
      return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case SyncLane:
        case InputContinuousHydrationLane:
        case InputContinuousLane:
          return currentTime + 250;
        case DefaultHydrationLane:
        case DefaultLane:
        case TransitionHydrationLane:
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return currentTime + 5e3;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return NoTimestamp;
        case SelectiveHydrationLane:
        case IdleHydrationLane:
        case IdleLane:
        case OffscreenLane:
          return NoTimestamp;
        default:
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return NoTimestamp;
      }
    }
    function markStarvedLanesAsExpired(root3, currentTime) {
      var pendingLanes = root3.pendingLanes;
      var suspendedLanes = root3.suspendedLanes;
      var pingedLanes = root3.pingedLanes;
      var expirationTimes = root3.expirationTimes;
      var lanes = pendingLanes;
      while (lanes > 0) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        var expirationTime = expirationTimes[index3];
        if (expirationTime === NoTimestamp) {
          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
            expirationTimes[index3] = computeExpirationTime(lane, currentTime);
          }
        } else if (expirationTime <= currentTime) {
          root3.expiredLanes |= lane;
        }
        lanes &= ~lane;
      }
    }
    function getHighestPriorityPendingLanes(root3) {
      return getHighestPriorityLanes(root3.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root3) {
      var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
      if (everythingButOffscreen !== NoLanes) {
        return everythingButOffscreen;
      }
      if (everythingButOffscreen & OffscreenLane) {
        return OffscreenLane;
      }
      return NoLanes;
    }
    function includesSyncLane(lanes) {
      return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
      return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
      return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
      return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
      return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root3, lanes) {
      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
      return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root3, lanes) {
      return (lanes & root3.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
      return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      if ((nextTransitionLane & TransitionLanes) === NoLanes) {
        nextTransitionLane = TransitionLane1;
      }
      return lane;
    }
    function claimNextRetryLane() {
      var lane = nextRetryLane;
      nextRetryLane <<= 1;
      if ((nextRetryLane & RetryLanes) === NoLanes) {
        nextRetryLane = RetryLane1;
      }
      return lane;
    }
    function getHighestPriorityLane(lanes) {
      return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
      return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
      return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
      return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
      return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set2, subset) {
      return (set2 & subset) === subset;
    }
    function mergeLanes(a, b) {
      return a | b;
    }
    function removeLanes(set2, subset) {
      return set2 & ~subset;
    }
    function intersectLanes(a, b) {
      return a & b;
    }
    function laneToLanes(lane) {
      return lane;
    }
    function higherPriorityLane(a, b) {
      return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
      var laneMap = [];
      for (var i2 = 0; i2 < TotalLanes; i2++) {
        laneMap.push(initial);
      }
      return laneMap;
    }
    function markRootUpdated(root3, updateLane, eventTime) {
      root3.pendingLanes |= updateLane;
      if (updateLane !== IdleLane) {
        root3.suspendedLanes = NoLanes;
        root3.pingedLanes = NoLanes;
      }
      var eventTimes = root3.eventTimes;
      var index3 = laneToIndex(updateLane);
      eventTimes[index3] = eventTime;
    }
    function markRootSuspended(root3, suspendedLanes) {
      root3.suspendedLanes |= suspendedLanes;
      root3.pingedLanes &= ~suspendedLanes;
      var expirationTimes = root3.expirationTimes;
      var lanes = suspendedLanes;
      while (lanes > 0) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        expirationTimes[index3] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootPinged(root3, pingedLanes, eventTime) {
      root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root3, remainingLanes) {
      var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
      root3.pendingLanes = remainingLanes;
      root3.suspendedLanes = NoLanes;
      root3.pingedLanes = NoLanes;
      root3.expiredLanes &= remainingLanes;
      root3.mutableReadLanes &= remainingLanes;
      root3.entangledLanes &= remainingLanes;
      var entanglements = root3.entanglements;
      var eventTimes = root3.eventTimes;
      var expirationTimes = root3.expirationTimes;
      var lanes = noLongerPendingLanes;
      while (lanes > 0) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        entanglements[index3] = NoLanes;
        eventTimes[index3] = NoTimestamp;
        expirationTimes[index3] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootEntangled(root3, entangledLanes) {
      var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
      var entanglements = root3.entanglements;
      var lanes = rootEntangledLanes;
      while (lanes) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        if (lane & entangledLanes | entanglements[index3] & entangledLanes) {
          entanglements[index3] |= entangledLanes;
        }
        lanes &= ~lane;
      }
    }
    function getBumpedLaneForHydration(root3, renderLanes2) {
      var renderLane = getHighestPriorityLane(renderLanes2);
      var lane;
      switch (renderLane) {
        case InputContinuousLane:
          lane = InputContinuousHydrationLane;
          break;
        case DefaultLane:
          lane = DefaultHydrationLane;
          break;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          lane = TransitionHydrationLane;
          break;
        case IdleLane:
          lane = IdleHydrationLane;
          break;
        default:
          lane = NoLane;
          break;
      }
      if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
        return NoLane;
      }
      return lane;
    }
    function addFiberToLanesMap(root3, fiber, lanes) {
      if (!isDevToolsPresent) {
        return;
      }
      var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
      while (lanes > 0) {
        var index3 = laneToIndex(lanes);
        var lane = 1 << index3;
        var updaters = pendingUpdatersLaneMap[index3];
        updaters.add(fiber);
        lanes &= ~lane;
      }
    }
    function movePendingFibersToMemoized(root3, lanes) {
      if (!isDevToolsPresent) {
        return;
      }
      var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
      var memoizedUpdaters = root3.memoizedUpdaters;
      while (lanes > 0) {
        var index3 = laneToIndex(lanes);
        var lane = 1 << index3;
        var updaters = pendingUpdatersLaneMap[index3];
        if (updaters.size > 0) {
          updaters.forEach(function(fiber) {
            var alternate = fiber.alternate;
            if (alternate === null || !memoizedUpdaters.has(alternate)) {
              memoizedUpdaters.add(fiber);
            }
          });
          updaters.clear();
        }
        lanes &= ~lane;
      }
    }
    function getTransitionsForLanes(root3, lanes) {
      {
        return null;
      }
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
      return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
      currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
      var previousPriority = currentUpdatePriority;
      try {
        currentUpdatePriority = priority;
        return fn();
      } finally {
        currentUpdatePriority = previousPriority;
      }
    }
    function higherEventPriority(a, b) {
      return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
      return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
      return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
      var lane = getHighestPriorityLane(lanes);
      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
        return DiscreteEventPriority;
      }
      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
        return ContinuousEventPriority;
      }
      if (includesNonIdleWork(lane)) {
        return DefaultEventPriority;
      }
      return IdleEventPriority;
    }
    function isRootDehydrated(root3) {
      var currentState = root3.current.memoizedState;
      return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
      _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
      _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
      attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
      attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
      getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
      attemptHydrationAtPriority = fn;
    }
    var hasScheduledReplayAttempt = false;
    var queuedDiscreteEvents = [];
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null;
    var queuedPointers = /* @__PURE__ */ new Map();
    var queuedPointerCaptures = /* @__PURE__ */ new Map();
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
      return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return {
        blockedOn,
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetContainers: [targetContainer]
      };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout": {
          var pointerId = nativeEvent.pointerId;
          queuedPointers.delete(pointerId);
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          var _pointerId = nativeEvent.pointerId;
          queuedPointerCaptures.delete(_pointerId);
          break;
        }
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn !== null) {
          var _fiber2 = getInstanceFromNode(blockedOn);
          if (_fiber2 !== null) {
            attemptContinuousHydration(_fiber2);
          }
        }
        return queuedEvent;
      }
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      var targetContainers = existingQueuedEvent.targetContainers;
      if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
        targetContainers.push(targetContainer);
      }
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      switch (domEventName) {
        case "focusin": {
          var focusEvent = nativeEvent;
          queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
          return true;
        }
        case "dragenter": {
          var dragEvent = nativeEvent;
          queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
          return true;
        }
        case "mouseover": {
          var mouseEvent = nativeEvent;
          queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
          return true;
        }
        case "pointerover": {
          var pointerEvent = nativeEvent;
          var pointerId = pointerEvent.pointerId;
          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
          return true;
        }
        case "gotpointercapture": {
          var _pointerEvent = nativeEvent;
          var _pointerId2 = _pointerEvent.pointerId;
          queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
          return true;
        }
      }
      return false;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted !== null) {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              queuedTarget.blockedOn = instance;
              attemptHydrationAtPriority(queuedTarget.priority, function() {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
              return;
            }
          } else if (tag === HostRoot) {
            var root3 = nearestMounted.stateNode;
            if (isRootDehydrated(root3)) {
              queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
              return;
            }
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
      var updatePriority = getCurrentUpdatePriority$1();
      var queuedTarget = {
        blockedOn: null,
        target,
        priority: updatePriority
      };
      var i2 = 0;
      for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
        if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
          break;
        }
      }
      queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
      if (i2 === 0) {
        attemptExplicitHydrationTarget(queuedTarget);
      }
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (queuedEvent.blockedOn !== null) {
        return false;
      }
      var targetContainers = queuedEvent.targetContainers;
      while (targetContainers.length > 0) {
        var targetContainer = targetContainers[0];
        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
        if (nextBlockedOn === null) {
          {
            var nativeEvent = queuedEvent.nativeEvent;
            var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone);
            nativeEvent.target.dispatchEvent(nativeEventClone);
            resetReplayingEvent();
          }
        } else {
          var _fiber3 = getInstanceFromNode(nextBlockedOn);
          if (_fiber3 !== null) {
            attemptContinuousHydration(_fiber3);
          }
          queuedEvent.blockedOn = nextBlockedOn;
          return false;
        }
        targetContainers.shift();
      }
      return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
      if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
        map2.delete(key);
      }
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = false;
      if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
        queuedFocus = null;
      }
      if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
        queuedDrag = null;
      }
      if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
        queuedMouse = null;
      }
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
        if (!hasScheduledReplayAttempt) {
          hasScheduledReplayAttempt = true;
          Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
        }
      }
    }
    function retryIfBlockedOn(unblocked) {
      if (queuedDiscreteEvents.length > 0) {
        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
        for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
          var queuedEvent = queuedDiscreteEvents[i2];
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
          }
        }
      }
      if (queuedFocus !== null) {
        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      }
      if (queuedDrag !== null) {
        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      }
      if (queuedMouse !== null) {
        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      }
      var unblock = function(queuedEvent2) {
        return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
      };
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
        var queuedTarget = queuedExplicitHydrationTargets[_i];
        if (queuedTarget.blockedOn === unblocked) {
          queuedTarget.blockedOn = null;
        }
      }
      while (queuedExplicitHydrationTargets.length > 0) {
        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
        if (nextExplicitTarget.blockedOn !== null) {
          break;
        } else {
          attemptExplicitHydrationTarget(nextExplicitTarget);
          if (nextExplicitTarget.blockedOn === null) {
            queuedExplicitHydrationTargets.shift();
          }
        }
      }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var _enabled = true;
    function setEnabled(enabled) {
      _enabled = !!enabled;
    }
    function isEnabled() {
      return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
      var eventPriority = getEventPriority(domEventName);
      var listenerWrapper;
      switch (eventPriority) {
        case DiscreteEventPriority:
          listenerWrapper = dispatchDiscreteEvent;
          break;
        case ContinuousEventPriority:
          listenerWrapper = dispatchContinuousEvent;
          break;
        case DefaultEventPriority:
        default:
          listenerWrapper = dispatchEvent;
          break;
      }
      return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(DiscreteEventPriority);
        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(ContinuousEventPriority);
        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (!_enabled) {
        return;
      }
      {
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      }
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      if (blockedOn === null) {
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
        clearIfContinuousEvent(domEventName, nativeEvent);
        return;
      }
      if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
        nativeEvent.stopPropagation();
        return;
      }
      clearIfContinuousEvent(domEventName, nativeEvent);
      if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
        while (blockedOn !== null) {
          var fiber = getInstanceFromNode(blockedOn);
          if (fiber !== null) {
            attemptSynchronousHydration(fiber);
          }
          var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (nextBlockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          }
          if (nextBlockedOn === blockedOn) {
            break;
          }
          blockedOn = nextBlockedOn;
        }
        if (blockedOn !== null) {
          nativeEvent.stopPropagation();
        }
        return;
      }
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null;
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return_targetInst = null;
      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted === null) {
          targetInst = null;
        } else {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              return instance;
            }
            targetInst = null;
          } else if (tag === HostRoot) {
            var root3 = nearestMounted.stateNode;
            if (isRootDehydrated(root3)) {
              return getContainerFromFiber(nearestMounted);
            }
            targetInst = null;
          } else if (nearestMounted !== targetInst) {
            targetInst = null;
          }
        }
      }
      return_targetInst = targetInst;
      return null;
    }
    function getEventPriority(domEventName) {
      switch (domEventName) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return DiscreteEventPriority;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return ContinuousEventPriority;
        case "message": {
          var schedulerPriority = getCurrentPriorityLevel();
          switch (schedulerPriority) {
            case ImmediatePriority:
              return DiscreteEventPriority;
            case UserBlockingPriority:
              return ContinuousEventPriority;
            case NormalPriority:
            case LowPriority:
              return DefaultEventPriority;
            case IdlePriority:
              return IdleEventPriority;
            default:
              return DefaultEventPriority;
          }
        }
        default:
          return DefaultEventPriority;
      }
    }
    function addEventBubbleListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, false);
      return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, true);
      return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        capture: true,
        passive
      });
      return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        passive
      });
      return listener;
    }
    var root2 = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
      root2 = nativeEventTarget;
      startText = getText();
      return true;
    }
    function reset() {
      root2 = null;
      startText = null;
      fallbackText = null;
    }
    function getData() {
      if (fallbackText) {
        return fallbackText;
      }
      var start;
      var startValue = startText;
      var startLength = startValue.length;
      var end;
      var endValue = getText();
      var endLength = endValue.length;
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
      var sliceTail = end > 1 ? 1 - end : void 0;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }
    function getText() {
      if ("value" in root2) {
        return root2.value;
      }
      return root2.textContent;
    }
    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;
      if ("charCode" in nativeEvent) {
        charCode = nativeEvent.charCode;
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        charCode = keyCode;
      }
      if (charCode === 10) {
        charCode = 13;
      }
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }
      return 0;
    }
    function functionThatReturnsTrue() {
      return true;
    }
    function functionThatReturnsFalse() {
      return false;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var _propName in Interface) {
          if (!Interface.hasOwnProperty(_propName)) {
            continue;
          }
          var normalize = Interface[_propName];
          if (normalize) {
            this[_propName] = normalize(nativeEvent);
          } else {
            this[_propName] = nativeEvent[_propName];
          }
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      assign(SyntheticBaseEvent.prototype, {
        preventDefault: function() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }
          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function() {
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }
          this.isPropagationStopped = functionThatReturnsTrue;
        },
        persist: function() {
        },
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    var EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
      view: 0,
      detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
      if (event !== lastMouseEvent) {
        if (lastMouseEvent && event.type === "mousemove") {
          lastMovementX = event.screenX - lastMouseEvent.screenX;
          lastMovementY = event.screenY - lastMouseEvent.screenY;
        } else {
          lastMovementX = 0;
          lastMovementY = 0;
        }
        lastMouseEvent = event;
      }
    }
    var MouseEventInterface = assign({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function(event) {
        if (event.relatedTarget === void 0)
          return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
        return event.relatedTarget;
      },
      movementX: function(event) {
        if ("movementX" in event) {
          return event.movementX;
        }
        updateMouseMovementPolyfillState(event);
        return lastMovementX;
      },
      movementY: function(event) {
        if ("movementY" in event) {
          return event.movementY;
        }
        return lastMovementY;
      }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    var DragEventInterface = assign({}, MouseEventInterface, {
      dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    var FocusEventInterface = assign({}, UIEventInterface, {
      relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    var AnimationEventInterface = assign({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    var ClipboardEventInterface = assign({}, EventInterface, {
      clipboardData: function(event) {
        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
      }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    var CompositionEventInterface = assign({}, EventInterface, {
      data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    var SyntheticInputEvent = SyntheticCompositionEvent;
    var normalizeKey = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var translateToKey = {
      "8": "Backspace",
      "9": "Tab",
      "12": "Clear",
      "13": "Enter",
      "16": "Shift",
      "17": "Control",
      "18": "Alt",
      "19": "Pause",
      "20": "CapsLock",
      "27": "Escape",
      "32": " ",
      "33": "PageUp",
      "34": "PageDown",
      "35": "End",
      "36": "Home",
      "37": "ArrowLeft",
      "38": "ArrowUp",
      "39": "ArrowRight",
      "40": "ArrowDown",
      "45": "Insert",
      "46": "Delete",
      "112": "F1",
      "113": "F2",
      "114": "F3",
      "115": "F4",
      "116": "F5",
      "117": "F6",
      "118": "F7",
      "119": "F8",
      "120": "F9",
      "121": "F10",
      "122": "F11",
      "123": "F12",
      "144": "NumLock",
      "145": "ScrollLock",
      "224": "Meta"
    };
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== "Unidentified") {
          return key;
        }
      }
      if (nativeEvent.type === "keypress") {
        var charCode = getEventCharCode(nativeEvent);
        return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
        return translateToKey[nativeEvent.keyCode] || "Unidentified";
      }
      return "";
    }
    var modifierKeyToProp = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    var KeyboardEventInterface = assign({}, UIEventInterface, {
      key: getEventKey,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      charCode: function(event) {
        if (event.type === "keypress") {
          return getEventCharCode(event);
        }
        return 0;
      },
      keyCode: function(event) {
        if (event.type === "keydown" || event.type === "keyup") {
          return event.keyCode;
        }
        return 0;
      },
      which: function(event) {
        if (event.type === "keypress") {
          return getEventCharCode(event);
        }
        if (event.type === "keydown" || event.type === "keyup") {
          return event.keyCode;
        }
        return 0;
      }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    var PointerEventInterface = assign({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    var TouchEventInterface = assign({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    var TransitionEventInterface = assign({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    var WheelEventInterface = assign({}, MouseEventInterface, {
      deltaX: function(event) {
        return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
      },
      deltaY: function(event) {
        return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [9, 13, 27, 32];
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
    var documentMode = null;
    if (canUseDOM && "documentMode" in document) {
      documentMode = document.documentMode;
    }
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
      registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
    var hasSpaceKeypress = false;
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    function getCompositionEventType(domEventName) {
      switch (domEventName) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    function isFallbackCompositionStart(domEventName, nativeEvent) {
      return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case "keyup":
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case "keydown":
          return nativeEvent.keyCode !== START_KEYCODE;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === "object" && "data" in detail) {
        return detail.data;
      }
      return null;
    }
    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === "ko";
    }
    var isComposing = false;
    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var eventType;
      var fallbackData;
      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(domEventName);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(domEventName, nativeEvent)) {
          eventType = "onCompositionStart";
        }
      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
        eventType = "onCompositionEnd";
      }
      if (!eventType) {
        return null;
      }
      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        if (!isComposing && eventType === "onCompositionStart") {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === "onCompositionEnd") {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
      if (listeners.length > 0) {
        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        });
        if (fallbackData) {
          event.data = fallbackData;
        } else {
          var customData = getDataFromCustomEvent(nativeEvent);
          if (customData !== null) {
            event.data = customData;
          }
        }
      }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }
          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;
        case "textInput":
          var chars = nativeEvent.data;
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }
          return chars;
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing) {
        if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }
        return null;
      }
      switch (domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (!isKeypressCommand(nativeEvent)) {
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var chars;
      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(domEventName, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
      }
      if (!chars) {
        return null;
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
      if (listeners.length > 0) {
        var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        });
        event.data = chars;
      }
    }
    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      "datetime-local": true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      if (nodeName === "input") {
        return !!supportedInputTypes[elem.type];
      }
      if (nodeName === "textarea") {
        return true;
      }
      return false;
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }
      var eventName = "on" + eventNameSuffix;
      var isSupported = eventName in document;
      if (!isSupported) {
        var element = document.createElement("div");
        element.setAttribute(eventName, "return;");
        isSupported = typeof element[eventName] === "function";
      }
      return isSupported;
    }
    function registerEvents$1() {
      registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      enqueueStateRestore(target);
      var listeners = accumulateTwoPhaseListeners(inst, "onChange");
      if (listeners.length > 0) {
        var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    var activeElement = null;
    var activeElementInst = null;
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === "select" || nodeName === "input" && elem.type === "file";
    }
    function manualDispatchChangeEvent(nativeEvent) {
      var dispatchQueue = [];
      createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
      batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if (domEventName === "change") {
        return targetInst;
      }
    }
    var isInputEventSupported = false;
    if (canUseDOM) {
      isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
    }
    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent("onpropertychange", handlePropertyChange);
    }
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent("onpropertychange", handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== "value") {
        return;
      }
      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      if (domEventName === "focusin") {
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (domEventName === "focusout") {
        stopWatchingForValueChange();
      }
    }
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
      if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
        return getInstIfValueChanged(activeElementInst);
      }
    }
    function shouldUseClickEvent(elem) {
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if (domEventName === "click") {
        return getInstIfValueChanged(targetInst);
      }
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if (domEventName === "input" || domEventName === "change") {
        return getInstIfValueChanged(targetInst);
      }
    }
    function handleControlledInputBlur(node) {
      var state = node._wrapperState;
      if (!state || !state.controlled || node.type !== "number") {
        return;
      }
      {
        setDefaultValue(node, "number", node.value);
      }
    }
    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(domEventName, targetInst);
        if (inst) {
          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
          return;
        }
      }
      if (handleEventFunc) {
        handleEventFunc(domEventName, targetNode, targetInst);
      }
      if (domEventName === "focusout") {
        handleControlledInputBlur(targetNode);
      }
    }
    function registerEvents$2() {
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
      registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
      registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
      registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    }
    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
      var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
      if (isOverEvent && !isReplayingEvent(nativeEvent)) {
        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
        if (related) {
          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
            return;
          }
        }
      }
      if (!isOutEvent && !isOverEvent) {
        return;
      }
      var win;
      if (nativeEventTarget.window === nativeEventTarget) {
        win = nativeEventTarget;
      } else {
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
      var from;
      var to;
      if (isOutEvent) {
        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
        from = targetInst;
        to = _related ? getClosestInstanceFromNode(_related) : null;
        if (to !== null) {
          var nearestMounted = getNearestMountedFiber(to);
          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
            to = null;
          }
        }
      } else {
        from = null;
        to = targetInst;
      }
      if (from === to) {
        return;
      }
      var SyntheticEventCtor = SyntheticMouseEvent;
      var leaveEventType = "onMouseLeave";
      var enterEventType = "onMouseEnter";
      var eventTypePrefix = "mouse";
      if (domEventName === "pointerout" || domEventName === "pointerover") {
        SyntheticEventCtor = SyntheticPointerEvent;
        leaveEventType = "onPointerLeave";
        enterEventType = "onPointerEnter";
        eventTypePrefix = "pointer";
      }
      var fromNode = from == null ? win : getNodeFromInstance(from);
      var toNode = to == null ? win : getNodeFromInstance(to);
      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
      leave.target = fromNode;
      leave.relatedTarget = toNode;
      var enter = null;
      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (nativeTargetInst === targetInst) {
        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
        enterEvent.target = toNode;
        enterEvent.relatedTarget = fromNode;
        enter = enterEvent;
      }
      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    function shallowEqual2(objA, objB) {
      if (objectIs(objA, objB)) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (var i2 = 0; i2 < keysA.length; i2++) {
        var currentKey = keysA[i2];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
          return false;
        }
      }
      return true;
    }
    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }
      return node;
    }
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
      }
    }
    function getNodeForCharacterOffset(root3, offset) {
      var node = getLeafNode(root3);
      var nodeStart = 0;
      var nodeEnd = 0;
      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;
          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node,
              offset: offset - nodeStart
            };
          }
          nodeStart = nodeEnd;
        }
        node = getLeafNode(getSiblingNode(node));
      }
    }
    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();
      if (!selection || selection.rangeCount === 0) {
        return null;
      }
      var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
      try {
        anchorNode.nodeType;
        focusNode.nodeType;
      } catch (e) {
        return null;
      }
      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;
      outer:
        while (true) {
          var next = null;
          while (true) {
            if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
              start = length + anchorOffset;
            }
            if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
              end = length + focusOffset;
            }
            if (node.nodeType === TEXT_NODE) {
              length += node.nodeValue.length;
            }
            if ((next = node.firstChild) === null) {
              break;
            }
            parentNode = node;
            node = next;
          }
          while (true) {
            if (node === outerNode) {
              break outer;
            }
            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
              start = length;
            }
            if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
              end = length;
            }
            if ((next = node.nextSibling) !== null) {
              break;
            }
            node = parentNode;
            parentNode = node.parentNode;
          }
          node = next;
        }
      if (start === -1 || end === -1) {
        return null;
      }
      return {
        start,
        end
      };
    }
    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window;
      if (!win.getSelection) {
        return;
      }
      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }
      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);
      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }
        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();
        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }
    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ("contains" in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
      try {
        return typeof iframe.contentWindow.location.href === "string";
      } catch (err) {
        return false;
      }
    }
    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();
      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win = element.contentWindow;
        } else {
          return element;
        }
        element = getActiveElement(win.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
      };
    }
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        }
        var ancestors = [];
        var ancestor = priorFocusedElem;
        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE2) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }
        if (typeof priorFocusedElem.focus === "function") {
          priorFocusedElem.focus();
        }
        for (var i2 = 0; i2 < ancestors.length; i2++) {
          var info = ancestors[i2];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    function getSelection(input) {
      var selection;
      if ("selectionStart" in input) {
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        selection = getOffsets(input);
      }
      return selection || {
        start: 0,
        end: 0
      };
    }
    function setSelection(input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (end === void 0) {
        end = start;
      }
      if ("selectionStart" in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
    function registerEvents$3() {
      registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    function getSelection$1(node) {
      if ("selectionStart" in node && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      var doc = getEventTargetDocument(nativeEventTarget);
      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return;
      }
      var currentSelection = getSelection$1(activeElement$1);
      if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.target = activeElement$1;
        }
      }
    }
    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case "focusin":
          if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case "focusout":
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        case "mousedown":
          mouseDown = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          mouseDown = false;
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case "selectionchange":
          if (skipSelectionChangeEvent) {
            break;
          }
        case "keydown":
        case "keyup":
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes2 = {};
      prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes2["Webkit" + styleProp] = "webkit" + eventName;
      prefixes2["Moz" + styleProp] = "moz" + eventName;
      return prefixes2;
    }
    var vendorPrefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      animationiteration: makePrefixMap("Animation", "AnimationIteration"),
      animationstart: makePrefixMap("Animation", "AnimationStart"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    var prefixedEventNames = {};
    var style = {};
    if (canUseDOM) {
      style = document.createElement("div").style;
      if (!("AnimationEvent" in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      }
      if (!("TransitionEvent" in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }
      var prefixMap = vendorPrefixes[eventName];
      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }
      return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend");
    var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
    var ANIMATION_START = getVendorPrefixedEventName("animationstart");
    var TRANSITION_END = getVendorPrefixedEventName("transitionend");
    var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
    var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName);
      registerTwoPhaseEvent(reactName, [domEventName]);
    }
    function registerSimpleEvents() {
      for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
        var eventName = simpleEventPluginEvents[i2];
        var domEventName = eventName.toLowerCase();
        var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
        registerSimpleEvent(domEventName, "on" + capitalizedEvent);
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (reactName === void 0) {
        return;
      }
      var SyntheticEventCtor = SyntheticEvent;
      var reactEventType = domEventName;
      switch (domEventName) {
        case "keypress":
          if (getEventCharCode(nativeEvent) === 0) {
            return;
          }
        case "keydown":
        case "keyup":
          SyntheticEventCtor = SyntheticKeyboardEvent;
          break;
        case "focusin":
          reactEventType = "focus";
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "focusout":
          reactEventType = "blur";
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "beforeblur":
        case "afterblur":
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "click":
          if (nativeEvent.button === 2) {
            return;
          }
        case "auxclick":
        case "dblclick":
        case "mousedown":
        case "mousemove":
        case "mouseup":
        case "mouseout":
        case "mouseover":
        case "contextmenu":
          SyntheticEventCtor = SyntheticMouseEvent;
          break;
        case "drag":
        case "dragend":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "dragstart":
        case "drop":
          SyntheticEventCtor = SyntheticDragEvent;
          break;
        case "touchcancel":
        case "touchend":
        case "touchmove":
        case "touchstart":
          SyntheticEventCtor = SyntheticTouchEvent;
          break;
        case ANIMATION_END:
        case ANIMATION_ITERATION:
        case ANIMATION_START:
          SyntheticEventCtor = SyntheticAnimationEvent;
          break;
        case TRANSITION_END:
          SyntheticEventCtor = SyntheticTransitionEvent;
          break;
        case "scroll":
          SyntheticEventCtor = SyntheticUIEvent;
          break;
        case "wheel":
          SyntheticEventCtor = SyntheticWheelEvent;
          break;
        case "copy":
        case "cut":
        case "paste":
          SyntheticEventCtor = SyntheticClipboardEvent;
          break;
        case "gotpointercapture":
        case "lostpointercapture":
        case "pointercancel":
        case "pointerdown":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "pointerup":
          SyntheticEventCtor = SyntheticPointerEvent;
          break;
      }
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      {
        var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
          var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: _event,
            listeners: _listeners
          });
        }
      }
    }
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
      if (shouldProcessPolyfillPlugins) {
        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
    }
    var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
    var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
      var type = event.type || "unknown-event";
      event.currentTarget = currentTarget;
      invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
      event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
      var previousInstance;
      if (inCapturePhase) {
        for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
          var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, listener, currentTarget);
          previousInstance = instance;
        }
      } else {
        for (var _i = 0; _i < dispatchListeners.length; _i++) {
          var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
          if (_instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, _listener, _currentTarget);
          previousInstance = _instance;
        }
      }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
        var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
      }
      rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var nativeEventTarget = getEventTarget(nativeEvent);
      var dispatchQueue = [];
      extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      {
        if (!nonDelegatedEvents.has(domEventName)) {
          error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        }
      }
      var isCapturePhaseListener = false;
      var listenerSet = getEventListenerSet(targetElement);
      var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      if (!listenerSet.has(listenerSetKey)) {
        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
        listenerSet.add(listenerSetKey);
      }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
          error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        }
      }
      var eventSystemFlags = 0;
      if (isCapturePhaseListener) {
        eventSystemFlags |= IS_CAPTURE_PHASE;
      }
      addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
          if (domEventName !== "selectionchange") {
            if (!nonDelegatedEvents.has(domEventName)) {
              listenToNativeEvent(domEventName, false, rootContainerElement);
            }
            listenToNativeEvent(domEventName, true, rootContainerElement);
          }
        });
        var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        if (ownerDocument !== null) {
          if (!ownerDocument[listeningMarker]) {
            ownerDocument[listeningMarker] = true;
            listenToNativeEvent("selectionchange", false, ownerDocument);
          }
        }
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
      var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
      var isPassiveListener = void 0;
      if (passiveBrowserEventsSupported) {
        if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
          isPassiveListener = true;
        }
      }
      targetContainer = targetContainer;
      if (isCapturePhaseListener) {
        if (isPassiveListener !== void 0) {
          addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          addEventCaptureListener(targetContainer, domEventName, listener);
        }
      } else {
        if (isPassiveListener !== void 0) {
          addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          addEventBubbleListener(targetContainer, domEventName, listener);
        }
      }
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
      return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var ancestorInst = targetInst;
      if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
        var targetContainerNode = targetContainer;
        if (targetInst !== null) {
          var node = targetInst;
          mainLoop:
            while (true) {
              if (node === null) {
                return;
              }
              var nodeTag = node.tag;
              if (nodeTag === HostRoot || nodeTag === HostPortal) {
                var container = node.stateNode.containerInfo;
                if (isMatchingRootContainer(container, targetContainerNode)) {
                  break;
                }
                if (nodeTag === HostPortal) {
                  var grandNode = node.return;
                  while (grandNode !== null) {
                    var grandTag = grandNode.tag;
                    if (grandTag === HostRoot || grandTag === HostPortal) {
                      var grandContainer = grandNode.stateNode.containerInfo;
                      if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                        return;
                      }
                    }
                    grandNode = grandNode.return;
                  }
                }
                while (container !== null) {
                  var parentNode = getClosestInstanceFromNode(container);
                  if (parentNode === null) {
                    return;
                  }
                  var parentTag = parentNode.tag;
                  if (parentTag === HostComponent || parentTag === HostText) {
                    node = ancestorInst = parentNode;
                    continue mainLoop;
                  }
                  container = container.parentNode;
                }
              }
              node = node.return;
            }
        }
      }
      batchedUpdates(function() {
        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {
        instance,
        listener,
        currentTarget
      };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
      var captureName = reactName !== null ? reactName + "Capture" : null;
      var reactEventName = inCapturePhase ? captureName : reactName;
      var listeners = [];
      var instance = targetFiber;
      var lastHostComponent = null;
      while (instance !== null) {
        var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
        if (tag === HostComponent && stateNode !== null) {
          lastHostComponent = stateNode;
          if (reactEventName !== null) {
            var listener = getListener(instance, reactEventName);
            if (listener != null) {
              listeners.push(createDispatchListener(instance, listener, lastHostComponent));
            }
          }
        }
        if (accumulateTargetOnly) {
          break;
        }
        instance = instance.return;
      }
      return listeners;
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      var captureName = reactName + "Capture";
      var listeners = [];
      var instance = targetFiber;
      while (instance !== null) {
        var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          var captureListener = getListener(instance, captureName);
          if (captureListener != null) {
            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
          }
          var bubbleListener = getListener(instance, reactName);
          if (bubbleListener != null) {
            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
        }
        instance = instance.return;
      }
      return listeners;
    }
    function getParent(inst) {
      if (inst === null) {
        return null;
      }
      do {
        inst = inst.return;
      } while (inst && inst.tag !== HostComponent);
      if (inst) {
        return inst;
      }
      return null;
    }
    function getLowestCommonAncestor(instA, instB) {
      var nodeA = instA;
      var nodeB = instB;
      var depthA = 0;
      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }
      var depthB = 0;
      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
        depthB++;
      }
      while (depthA - depthB > 0) {
        nodeA = getParent(nodeA);
        depthA--;
      }
      while (depthB - depthA > 0) {
        nodeB = getParent(nodeB);
        depthB--;
      }
      var depth = depthA;
      while (depth--) {
        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
          return nodeA;
        }
        nodeA = getParent(nodeA);
        nodeB = getParent(nodeB);
      }
      return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      var registrationName = event._reactName;
      var listeners = [];
      var instance = target;
      while (instance !== null) {
        if (instance === common) {
          break;
        }
        var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
        if (alternate !== null && alternate === common) {
          break;
        }
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          if (inCapturePhase) {
            var captureListener = getListener(instance, registrationName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
          } else if (!inCapturePhase) {
            var bubbleListener = getListener(instance, registrationName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
        }
        instance = instance.return;
      }
      if (listeners.length !== 0) {
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      if (from !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
      }
      if (to !== null && enterEvent !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
      }
    }
    function getListenerSetKey(domEventName, capture) {
      return domEventName + "__" + (capture ? "capture" : "bubble");
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
    var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
    var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
    var AUTOFOCUS = "autoFocus";
    var CHILDREN = "children";
    var STYLE = "style";
    var HTML$1 = "__html";
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    {
      warnedUnknownTags = {
        dialog: true,
        webview: true
      };
      validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
          registrationNameDependencies,
          possibleRegistrationNames
        });
      };
      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
      warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) {
          return;
        }
        didWarnInvalidHydration = true;
        error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };
      warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
          names.push(name);
        });
        error("Extra attributes from the server: %s", names);
      };
      warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) {
          error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        } else {
          error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
        }
      };
      normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
      {
        checkHtmlStringCoercion(markup);
      }
      var markupString = typeof markup === "string" ? markup : "" + markup;
      return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
      var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
      var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
      if (normalizedServerText === normalizedClientText) {
        return;
      }
      if (shouldWarnDev) {
        {
          if (!didWarnInvalidHydration) {
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          }
        }
      }
      if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
        throw new Error("Text content does not match server-rendered HTML.");
      }
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
      node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = nextProps[propKey];
        if (propKey === STYLE) {
          {
            if (nextProp) {
              Object.freeze(nextProp);
            }
          }
          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            var canSetTextContent = tag !== "textarea" || nextProp !== "";
            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === "number") {
            setTextContent(domElement, "" + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
        var propKey = updatePayload[i2];
        var propValue = updatePayload[i2 + 1];
        if (propKey === STYLE) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag;
      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement;
      var namespaceURI = parentNamespace;
      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }
      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props);
          if (!isCustomComponentTag && type !== type.toLowerCase()) {
            error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
          }
        }
        if (type === "script") {
          var div = ownerDocument.createElement("div");
          div.innerHTML = "<script><\/script>";
          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === "string") {
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          domElement = ownerDocument.createElement(type);
          if (type === "select") {
            var node = domElement;
            if (props.multiple) {
              node.multiple = true;
            } else if (props.size) {
              node.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }
      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
          }
        }
      }
      return domElement;
    }
    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);
      }
      var props;
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          props = rawProps;
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          props = rawProps;
          break;
        case "video":
        case "audio":
          for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
            listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
          }
          props = rawProps;
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          props = rawProps;
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          props = rawProps;
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          props = rawProps;
          break;
        case "input":
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          props = rawProps;
          break;
        case "select":
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        default:
          props = rawProps;
      }
      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
      switch (tag) {
        case "input":
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;
        case "textarea":
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case "option":
          postMountWrapper$1(domElement, rawProps);
          break;
        case "select":
          postMountWrapper$2(domElement, rawProps);
          break;
        default:
          if (typeof props.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
    }
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps;
      var nextProps;
      switch (tag) {
        case "input":
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;
        case "select":
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;
        case "textarea":
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;
        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;
          if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      assertValidProps(tag, nextProps);
      var propKey;
      var styleName;
      var styleUpdates = null;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = lastProps[propKey];
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = "";
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
          ;
        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : void 0;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE) {
          {
            if (nextProp) {
              Object.freeze(nextProp);
            }
          }
          if (lastProp) {
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }
              updatePayload.push(propKey, styleUpdates);
            }
            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, nextHtml);
            }
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string" || typeof nextProp === "number") {
            (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
          if (!updatePayload && lastProp !== nextProp) {
            updatePayload = [];
          }
        } else {
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }
      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
        }
        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
      }
      return updatePayload;
    }
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }
      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
      switch (tag) {
        case "input":
          updateWrapper(domElement, nextRawProps);
          break;
        case "textarea":
          updateWrapper$1(domElement, nextRawProps);
          break;
        case "select":
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }
    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }
        return possibleStandardNames[lowerCasedName] || null;
      }
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
      var isCustomComponentTag;
      var extraAttributeNames;
      {
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
      }
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "video":
        case "audio":
          for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
            listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
          }
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          break;
        case "input":
          initWrapperState(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          break;
        case "select":
          initWrapperState$1(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
      }
      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = /* @__PURE__ */ new Set();
        var attributes = domElement.attributes;
        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();
          switch (name) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;
      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = rawProps[propKey];
        if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            if (domElement.textContent !== nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              }
              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === "number") {
            if (domElement.textContent !== "" + nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              }
              updatePayload = [CHILDREN, "" + nextProp];
            }
          }
        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
        } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
          var serverValue = void 0;
          var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
          if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
            ;
          else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              var expectedHTML = normalizeHTML(domElement, nextHtml);
              if (expectedHTML !== serverHTML) {
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
            }
          } else if (propKey === STYLE) {
            extraAttributeNames.delete(propKey);
            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute("style");
              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);
            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;
            if (propertyInfo !== null) {
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;
              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }
              if (ownNamespace === HTML_NAMESPACE) {
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey) {
                  isMismatchDueToBadCasing = true;
                  extraAttributeNames.delete(standardName);
                }
                extraAttributeNames.delete(propKey);
              }
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }
            var dontWarnCustomElement = enableCustomElementPropertySupport;
            if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }
      {
        if (shouldWarnDev) {
          if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            warnForExtraAttributes(extraAttributeNames);
          }
        }
      }
      switch (tag) {
        case "input":
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;
        case "textarea":
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case "select":
        case "option":
          break;
        default:
          if (typeof rawProps.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }
    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === "") {
          return;
        }
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }
    function restoreControlledState$3(domElement, tag, props) {
      switch (tag) {
        case "input":
          restoreControlledState(domElement, props);
          return;
        case "textarea":
          restoreControlledState$2(domElement, props);
          return;
        case "select":
          restoreControlledState$1(domElement, props);
          return;
      }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    {
      var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
      var inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        "foreignObject",
        "desc",
        "title"
      ];
      var buttonScopeTags = inScopeTags.concat(["button"]);
      var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
          tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        }
        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === "form") {
          ancestorInfo.formTag = info;
        }
        if (tag === "a") {
          ancestorInfo.aTagInScope = info;
        }
        if (tag === "button") {
          ancestorInfo.buttonTagInScope = info;
        }
        if (tag === "nobr") {
          ancestorInfo.nobrTagInScope = info;
        }
        if (tag === "p") {
          ancestorInfo.pTagInButtonScope = info;
        }
        if (tag === "li") {
          ancestorInfo.listItemTagAutoclosing = info;
        }
        if (tag === "dd" || tag === "dt") {
          ancestorInfo.dlItemTagAutoclosing = info;
        }
        return ancestorInfo;
      };
      var isTagValidWithParent = function(tag, parentTag) {
        switch (parentTag) {
          case "select":
            return tag === "option" || tag === "optgroup" || tag === "#text";
          case "optgroup":
            return tag === "option" || tag === "#text";
          case "option":
            return tag === "#text";
          case "tr":
            return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
          case "colgroup":
            return tag === "col" || tag === "template";
          case "table":
            return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
          case "head":
            return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
          case "html":
            return tag === "head" || tag === "body" || tag === "frameset";
          case "frameset":
            return tag === "frame";
          case "#document":
            return tag === "html";
        }
        switch (tag) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
          case "rp":
          case "rt":
            return impliedEndTags.indexOf(parentTag) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return parentTag == null;
        }
        return true;
      };
      var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch (tag) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return ancestorInfo.pTagInButtonScope;
          case "form":
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case "li":
            return ancestorInfo.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return ancestorInfo.dlItemTagAutoclosing;
          case "button":
            return ancestorInfo.buttonTagInScope;
          case "a":
            return ancestorInfo.aTagInScope;
          case "nobr":
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      };
      var didWarn$1 = {};
      validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
          if (childTag != null) {
            error("validateDOMNesting: when childText is passed, childTag should be null");
          }
          childTag = "#text";
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) {
          return;
        }
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
        if (didWarn$1[warnKey]) {
          return;
        }
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = "";
        if (childTag === "#text") {
          if (/\S/.test(childText)) {
            tagDisplayName = "Text nodes";
          } else {
            tagDisplayName = "Whitespace text nodes";
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
          }
        } else {
          tagDisplayName = "<" + childTag + ">";
        }
        if (invalidParent) {
          var info = "";
          if (ancestorTag === "table" && childTag === "tr") {
            info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
          }
          error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else {
          error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
        }
      };
    }
    var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
    var SUSPENSE_START_DATA = "$";
    var SUSPENSE_END_DATA = "/$";
    var SUSPENSE_PENDING_START_DATA = "$?";
    var SUSPENSE_FALLBACK_START_DATA = "$!";
    var STYLE$1 = "style";
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
      var type;
      var namespace;
      var nodeType = rootContainerInstance.nodeType;
      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE: {
          type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
          var root3 = rootContainerInstance.documentElement;
          namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
          break;
        }
        default: {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
      }
      {
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getPublicInstance(instance) {
      return instance;
    }
    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      var activeInstance = null;
      setEnabled(false);
      return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      setEnabled(eventsEnabled);
      eventsEnabled = null;
      selectionInformation = null;
    }
    function createInstance2(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === "string" || typeof props.children === "number") {
          var string2 = "" + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string2, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }
    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!props.autoFocus;
        case "img":
          return true;
        default:
          return false;
      }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
          var string2 = "" + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string2, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
      return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }
    function getCurrentEventPriority() {
      var currentEvent = window.event;
      if (currentEvent === void 0) {
        return DefaultEventPriority;
      }
      return getEventPriority(currentEvent.type);
    }
    var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
    var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
    var noTimeout = -1;
    var localPromise = typeof Promise === "function" ? Promise : void 0;
    var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
      return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout;
    function handleErrorInNextTick(error2) {
      setTimeout(function() {
        throw error2;
      });
    }
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          if (newProps.autoFocus) {
            domElement.focus();
          }
          return;
        case "img": {
          if (newProps.src) {
            domElement.src = newProps.src;
          }
          return;
        }
      }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
      updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
      var parentNode;
      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      }
      var reactRootContainer = container._reactRootContainer;
      if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
        trapClickOnNonInteractiveElement(parentNode);
      }
    }
    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node = suspenseInstance;
      var depth = 0;
      do {
        var nextNode = node.nextSibling;
        parentInstance.removeChild(node);
        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
          var data2 = nextNode.data;
          if (data2 === SUSPENSE_END_DATA) {
            if (depth === 0) {
              parentInstance.removeChild(nextNode);
              retryIfBlockedOn(suspenseInstance);
              return;
            } else {
              depth--;
            }
          } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
            depth++;
          }
        }
        node = nextNode;
      } while (node);
      retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
      if (container.nodeType === COMMENT_NODE) {
        clearSuspenseBoundary(container.parentNode, suspenseInstance);
      } else if (container.nodeType === ELEMENT_NODE2) {
        clearSuspenseBoundary(container, suspenseInstance);
      }
      retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
      instance = instance;
      var style2 = instance.style;
      if (typeof style2.setProperty === "function") {
        style2.setProperty("display", "none", "important");
      } else {
        style2.display = "none";
      }
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = "";
    }
    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE$1];
      var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
      instance.style.display = dangerousStyleValue("display", display);
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainer(container) {
      if (container.nodeType === ELEMENT_NODE2) {
        container.textContent = "";
      } else if (container.nodeType === DOCUMENT_NODE) {
        if (container.documentElement) {
          container.removeChild(container.documentElement);
        }
      }
    }
    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE2 || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      }
      return instance;
    }
    function canHydrateTextInstance(instance, text) {
      if (text === "" || instance.nodeType !== TEXT_NODE) {
        return null;
      }
      return instance;
    }
    function canHydrateSuspenseInstance(instance) {
      if (instance.nodeType !== COMMENT_NODE) {
        return null;
      }
      return instance;
    }
    function isSuspenseInstancePending(instance) {
      return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
      return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance) {
      var dataset = instance.nextSibling && instance.nextSibling.dataset;
      var digest, message, stack;
      if (dataset) {
        digest = dataset.dgst;
        {
          message = dataset.msg;
          stack = dataset.stck;
        }
      }
      {
        return {
          message,
          digest,
          stack
        };
      }
    }
    function registerSuspenseInstanceRetry(instance, callback) {
      instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
      for (; node != null; node = node.nextSibling) {
        var nodeType = node.nodeType;
        if (nodeType === ELEMENT_NODE2 || nodeType === TEXT_NODE) {
          break;
        }
        if (nodeType === COMMENT_NODE) {
          var nodeData = node.data;
          if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
            break;
          }
          if (nodeData === SUSPENSE_END_DATA) {
            return null;
          }
        }
      }
      return node;
    }
    function getNextHydratableSibling(instance) {
      return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
      return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
      return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
      return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, instance);
      updateFiberProps(instance, props);
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node = suspenseInstance.nextSibling;
      var depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data2 = node.data;
          if (data2 === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node);
            } else {
              depth--;
            }
          } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
            depth++;
          }
        }
        node = node.nextSibling;
      }
      return null;
    }
    function getParentSuspenseInstance(targetInstance) {
      var node = targetInstance.previousSibling;
      var depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data2 = node.data;
          if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
            if (depth === 0) {
              return node;
            } else {
              depth--;
            }
          } else if (data2 === SUSPENSE_END_DATA) {
            depth++;
          }
        }
        node = node.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
      return parentType !== "head" && parentType !== "body";
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
      var shouldWarnDev = true;
      checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE2) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else if (instance.nodeType === COMMENT_NODE)
          ;
        else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
          if (instance.nodeType === ELEMENT_NODE2) {
            warnForDeletedHydratableElement(parentNode, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentNode, instance);
          }
        }
      }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          if (instance.nodeType === ELEMENT_NODE2) {
            warnForDeletedHydratableElement(parentInstance, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentInstance, instance);
          }
        }
      }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedElement(parentNode, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedText(parentNode, text);
      }
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedElement(parentInstance, type);
        }
      }
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedText(parentInstance, text);
        }
      }
    }
    function errorHydratingContainer(parentContainer) {
      {
        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
      }
    }
    function preparePortalMount(portalInstance) {
      listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = "__reactFiber$" + randomKey;
    var internalPropsKey = "__reactProps$" + randomKey;
    var internalContainerInstanceKey = "__reactContainer$" + randomKey;
    var internalEventHandlersKey = "__reactEvents$" + randomKey;
    var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
    var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    function detachDeletedInstance(node) {
      delete node[internalInstanceKey];
      delete node[internalPropsKey];
      delete node[internalEventHandlersKey];
      delete node[internalEventHandlerListenersKey];
      delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
      node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
      node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
      return !!node[internalContainerInstanceKey];
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) {
        return targetInst;
      }
      var parentNode = targetNode.parentNode;
      while (parentNode) {
        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
        if (targetInst) {
          var alternate = targetInst.alternate;
          if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
            var suspenseInstance = getParentSuspenseInstance(targetNode);
            while (suspenseInstance !== null) {
              var targetSuspenseInst = suspenseInstance[internalInstanceKey];
              if (targetSuspenseInst) {
                return targetSuspenseInst;
              }
              suspenseInstance = getParentSuspenseInstance(suspenseInstance);
            }
          }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node) {
      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
          return inst;
        } else {
          return null;
        }
      }
      return null;
    }
    function getNodeFromInstance(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        return inst.stateNode;
      }
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
      return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
      node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
      var elementListenerSet = node[internalEventHandlersKey];
      if (elementListenerSet === void 0) {
        elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
      }
      return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has2 = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error("Failed %s type: %s", location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var valueStack = [];
    var fiberStack;
    {
      fiberStack = [];
    }
    var index2 = -1;
    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }
    function pop(cursor, fiber) {
      if (index2 < 0) {
        {
          error("Unexpected pop.");
        }
        return;
      }
      {
        if (fiber !== fiberStack[index2]) {
          error("Unexpected Fiber popped.");
        }
      }
      cursor.current = valueStack[index2];
      valueStack[index2] = null;
      {
        fiberStack[index2] = null;
      }
      index2--;
    }
    function push(cursor, value2, fiber) {
      index2++;
      valueStack[index2] = cursor.current;
      {
        fiberStack[index2] = fiber;
      }
      cursor.current = value2;
    }
    var warnedAboutMissingGetChildContext;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    }
    var contextStackCursor = createCursor(emptyContextObject);
    var didPerformWorkStackCursor = createCursor(false);
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
      {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
          return previousContext;
        }
        return contextStackCursor.current;
      }
    }
    function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
      {
        var instance = workInProgress2.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }
    }
    function getMaskedContext(workInProgress2, unmaskedContext) {
      {
        var type = workInProgress2.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) {
          return emptyContextObject;
        }
        var instance = workInProgress2.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }
        var context = {};
        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }
        {
          var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name);
        }
        if (instance) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return context;
      }
    }
    function hasContextChanged() {
      {
        return didPerformWorkStackCursor.current;
      }
    }
    function isContextProvider(type) {
      {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== void 0;
      }
    }
    function popContext(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function popTopLevelContextObject(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
      {
        if (contextStackCursor.current !== emptyContextObject) {
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        }
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }
    }
    function processChildContext(fiber, type, parentContext) {
      {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        if (typeof instance.getChildContext !== "function") {
          {
            var componentName = getComponentNameFromFiber(fiber) || "Unknown";
            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
          }
          return parentContext;
        }
        var childContext = instance.getChildContext();
        for (var contextKey in childContext) {
          if (!(contextKey in childContextTypes)) {
            throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          }
        }
        {
          var name = getComponentNameFromFiber(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name);
        }
        return assign({}, parentContext, childContext);
      }
    }
    function pushContextProvider(workInProgress2) {
      {
        var instance = workInProgress2.stateNode;
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
        return true;
      }
    }
    function invalidateContextProvider(workInProgress2, type, didChange) {
      {
        var instance = workInProgress2.stateNode;
        if (!instance) {
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (didChange) {
          var mergedContext = processChildContext(workInProgress2, type, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress2);
          pop(contextStackCursor, workInProgress2);
          push(contextStackCursor, mergedContext, workInProgress2);
          push(didPerformWorkStackCursor, didChange, workInProgress2);
        } else {
          pop(didPerformWorkStackCursor, workInProgress2);
          push(didPerformWorkStackCursor, didChange, workInProgress2);
        }
      }
    }
    function findCurrentUnmaskedContext(fiber) {
      {
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        }
        var node = fiber;
        do {
          switch (node.tag) {
            case HostRoot:
              return node.stateNode.context;
            case ClassComponent: {
              var Component = node.type;
              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }
              break;
            }
          }
          node = node.return;
        } while (node !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
      if (syncQueue === null) {
        syncQueue = [callback];
      } else {
        syncQueue.push(callback);
      }
    }
    function scheduleLegacySyncCallback(callback) {
      includesLegacySyncCallbacks = true;
      scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
      if (includesLegacySyncCallbacks) {
        flushSyncCallbacks();
      }
    }
    function flushSyncCallbacks() {
      if (!isFlushingSyncQueue && syncQueue !== null) {
        isFlushingSyncQueue = true;
        var i2 = 0;
        var previousUpdatePriority = getCurrentUpdatePriority();
        try {
          var isSync = true;
          var queue = syncQueue;
          setCurrentUpdatePriority(DiscreteEventPriority);
          for (; i2 < queue.length; i2++) {
            var callback = queue[i2];
            do {
              callback = callback(isSync);
            } while (callback !== null);
          }
          syncQueue = null;
          includesLegacySyncCallbacks = false;
        } catch (error2) {
          if (syncQueue !== null) {
            syncQueue = syncQueue.slice(i2 + 1);
          }
          scheduleCallback(ImmediatePriority, flushSyncCallbacks);
          throw error2;
        } finally {
          setCurrentUpdatePriority(previousUpdatePriority);
          isFlushingSyncQueue = false;
        }
      }
      return null;
    }
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = "";
    function isForkedChild(workInProgress2) {
      warnIfNotHydrating();
      return (workInProgress2.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress2) {
      warnIfNotHydrating();
      return treeForkCount;
    }
    function getTreeId() {
      var overflow = treeContextOverflow;
      var idWithLeadingBit = treeContextId;
      var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
      return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress2, totalChildren) {
      warnIfNotHydrating();
      forkStack[forkStackIndex++] = treeForkCount;
      forkStack[forkStackIndex++] = treeForkProvider;
      treeForkProvider = workInProgress2;
      treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress2, totalChildren, index3) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextProvider = workInProgress2;
      var baseIdWithLeadingBit = treeContextId;
      var baseOverflow = treeContextOverflow;
      var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
      var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
      var slot = index3 + 1;
      var length = getBitLength(totalChildren) + baseLength;
      if (length > 30) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        var newOverflowBits = (1 << numberOfOverflowBits) - 1;
        var newOverflow = (baseId & newOverflowBits).toString(32);
        var restOfBaseId = baseId >> numberOfOverflowBits;
        var restOfBaseLength = baseLength - numberOfOverflowBits;
        var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
        var restOfNewBits = slot << restOfBaseLength;
        var id = restOfNewBits | restOfBaseId;
        var overflow = newOverflow + baseOverflow;
        treeContextId = 1 << restOfLength | id;
        treeContextOverflow = overflow;
      } else {
        var newBits = slot << baseLength;
        var _id = newBits | baseId;
        var _overflow = baseOverflow;
        treeContextId = 1 << length | _id;
        treeContextOverflow = _overflow;
      }
    }
    function pushMaterializedTreeId(workInProgress2) {
      warnIfNotHydrating();
      var returnFiber = workInProgress2.return;
      if (returnFiber !== null) {
        var numberOfForks = 1;
        var slotIndex = 0;
        pushTreeFork(workInProgress2, numberOfForks);
        pushTreeId(workInProgress2, numberOfForks, slotIndex);
      }
    }
    function getBitLength(number2) {
      return 32 - clz32(number2);
    }
    function getLeadingBit(id) {
      return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress2) {
      while (workInProgress2 === treeForkProvider) {
        treeForkProvider = forkStack[--forkStackIndex];
        forkStack[forkStackIndex] = null;
        treeForkCount = forkStack[--forkStackIndex];
        forkStack[forkStackIndex] = null;
      }
      while (workInProgress2 === treeContextProvider) {
        treeContextProvider = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
        treeContextOverflow = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
        treeContextId = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
      }
    }
    function getSuspendedTreeContext() {
      warnIfNotHydrating();
      if (treeContextProvider !== null) {
        return {
          id: treeContextId,
          overflow: treeContextOverflow
        };
      } else {
        return null;
      }
    }
    function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextId = suspendedContext.id;
      treeContextOverflow = suspendedContext.overflow;
      treeContextProvider = workInProgress2;
    }
    function warnIfNotHydrating() {
      {
        if (!getIsHydrating()) {
          error("Expected to be hydrating. This is a bug in React. Please file an issue.");
        }
      }
    }
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    var didSuspendOrErrorDEV = false;
    var hydrationErrors = null;
    function warnIfHydrating() {
      {
        if (isHydrating) {
          error("We should not be hydrating here. This is a bug in React. Please file a bug.");
        }
      }
    }
    function markDidThrowWhileHydratingDEV() {
      {
        didSuspendOrErrorDEV = true;
      }
    }
    function didSuspendOrErrorWhileHydratingDEV() {
      {
        return didSuspendOrErrorDEV;
      }
    }
    function enterHydrationState(fiber) {
      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      hydrationErrors = null;
      didSuspendOrErrorDEV = false;
      return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
      nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      hydrationErrors = null;
      didSuspendOrErrorDEV = false;
      if (treeContext !== null) {
        restoreSuspendedTreeContext(fiber, treeContext);
      }
      return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot: {
            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
            break;
          }
          case HostComponent: {
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotHydrateInstance(
              returnFiber.type,
              returnFiber.memoizedProps,
              returnFiber.stateNode,
              instance,
              isConcurrentMode
            );
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            if (suspenseState.dehydrated !== null)
              didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
            break;
          }
        }
      }
    }
    function deleteHydratableInstance(returnFiber, instance) {
      warnUnhydratedInstance(returnFiber, instance);
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      var deletions = returnFiber.deletions;
      if (deletions === null) {
        returnFiber.deletions = [childToDelete];
        returnFiber.flags |= ChildDeletion;
      } else {
        deletions.push(childToDelete);
      }
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
      {
        if (didSuspendOrErrorDEV) {
          return;
        }
        switch (returnFiber.tag) {
          case HostRoot: {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                fiber.pendingProps;
                didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                break;
            }
            break;
          }
          case HostComponent: {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent: {
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  _type,
                  _props,
                  isConcurrentMode
                );
                break;
              }
              case HostText: {
                var _text = fiber.pendingProps;
                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  _text,
                  _isConcurrentMode
                );
                break;
              }
            }
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            var _parentInstance = suspenseState.dehydrated;
            if (_parentInstance !== null)
              switch (fiber.tag) {
                case HostComponent:
                  var _type2 = fiber.type;
                  fiber.pendingProps;
                  didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                  break;
                case HostText:
                  var _text2 = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.flags = fiber.flags & ~Hydrating | Placement;
      warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent: {
          var type = fiber.type;
          fiber.pendingProps;
          var instance = canHydrateInstance(nextInstance, type);
          if (instance !== null) {
            fiber.stateNode = instance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(instance);
            return true;
          }
          return false;
        }
        case HostText: {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        case SuspenseComponent: {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              treeContext: getSuspendedTreeContext(),
              retryLane: OffscreenLane
            };
            fiber.memoizedState = suspenseState;
            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            dehydratedFragment.return = fiber;
            fiber.child = dehydratedFragment;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        default:
          return false;
      }
    }
    function shouldClientRenderOnMismatch(fiber) {
      return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }
      var nextInstance = nextHydratableInstance;
      if (!nextInstance) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnNonhydratedInstance(hydrationParentFiber, fiber);
          throwOnHydrationMismatch();
        }
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      var firstAttemptedInstance = nextInstance;
      if (!tryHydrate(fiber, nextInstance)) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnNonhydratedInstance(hydrationParentFiber, fiber);
          throwOnHydrationMismatch();
        }
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
        var prevHydrationParentFiber = hydrationParentFiber;
        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
      }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      var instance = fiber.stateNode;
      var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
      fiber.updateQueue = updatePayload;
      if (updatePayload !== null) {
        return true;
      }
      return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      if (shouldUpdate) {
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedContainerTextInstance(
                parentContainer,
                textInstance,
                textContent,
                isConcurrentMode
              );
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedTextInstance(
                parentType,
                parentProps,
                parentInstance,
                textInstance,
                textContent,
                _isConcurrentMode2
              );
              break;
            }
          }
        }
      }
      return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
      hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
      var parent = fiber.return;
      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
        parent = parent.return;
      }
      hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) {
        return false;
      }
      if (!isHydrating) {
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }
      if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
        var nextInstance = nextHydratableInstance;
        if (nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnIfUnhydratedTailNodes(fiber);
            throwOnHydrationMismatch();
          } else {
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
        }
      }
      popToNextHostParent(fiber);
      if (fiber.tag === SuspenseComponent) {
        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
      } else {
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      }
      return true;
    }
    function hasUnhydratedTailNodes() {
      return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        warnUnhydratedInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }
    function resetHydrationState() {
      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
      didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
      if (hydrationErrors !== null) {
        queueRecoverableErrors(hydrationErrors);
        hydrationErrors = null;
      }
    }
    function getIsHydrating() {
      return isHydrating;
    }
    function queueHydrationError(error2) {
      if (hydrationErrors === null) {
        hydrationErrors = [error2];
      } else {
        hydrationErrors.push(error2);
      }
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
      return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function(fiber, instance) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(fiber, instance) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while (node !== null) {
          if (node.mode & StrictLegacyMode) {
            maybeStrictRoot = node;
          }
          node = node.return;
        }
        return maybeStrictRoot;
      };
      var setToSortedString = function(set2) {
        var array2 = [];
        set2.forEach(function(value2) {
          array2.push(value2);
        });
        return array2.sort().join(", ");
      };
      var pendingComponentWillMountWarnings = [];
      var pendingUNSAFE_ComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUNSAFE_ComponentWillUpdateWarnings = [];
      var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }
        if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        }
        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        }
        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
          pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
          pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
          pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
        }
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
          error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
          error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
          error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
          warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
          warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
          warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
      };
      var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
          if (warningsForRoot === void 0) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }
          warningsForRoot.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
          if (fiberArray.length === 0) {
            return;
          }
          var firstFiber = fiberArray[0];
          var uniqueNames = /* @__PURE__ */ new Set();
          fiberArray.forEach(function(fiber) {
            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          try {
            setCurrentFiber(firstFiber);
            error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
          } finally {
            resetCurrentFiber();
          }
        });
      };
      ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      };
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        var props = assign({}, baseProps);
        var defaultProps = Component.defaultProps;
        for (var propName in defaultProps) {
          if (props[propName] === void 0) {
            props[propName] = defaultProps[propName];
          }
        }
        return props;
      }
      return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    {
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastFullyObservedContext = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }
    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function pushProvider(providerFiber, context, nextValue) {
      {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
            error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
          }
          context._currentRenderer = rendererSigil;
        }
      }
    }
    function popProvider(context, providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      {
        {
          context._currentValue = currentValue;
        }
      }
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
      var node = parent;
      while (node !== null) {
        var alternate = node.alternate;
        if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
          node.childLanes = mergeLanes(node.childLanes, renderLanes2);
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
        }
        if (node === propagationRoot) {
          break;
        }
        node = node.return;
      }
      {
        if (node !== propagationRoot) {
          error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function propagateContextChange(workInProgress2, context, renderLanes2) {
      {
        propagateContextChange_eager(workInProgress2, context, renderLanes2);
      }
    }
    function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
      var fiber = workInProgress2.child;
      if (fiber !== null) {
        fiber.return = workInProgress2;
      }
      while (fiber !== null) {
        var nextFiber = void 0;
        var list = fiber.dependencies;
        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.firstContext;
          while (dependency !== null) {
            if (dependency.context === context) {
              if (fiber.tag === ClassComponent) {
                var lane = pickArbitraryLane(renderLanes2);
                var update = createUpdate(NoTimestamp, lane);
                update.tag = ForceUpdate;
                var updateQueue = fiber.updateQueue;
                if (updateQueue === null)
                  ;
                else {
                  var sharedQueue = updateQueue.shared;
                  var pending = sharedQueue.pending;
                  if (pending === null) {
                    update.next = update;
                  } else {
                    update.next = pending.next;
                    pending.next = update;
                  }
                  sharedQueue.pending = update;
                }
              }
              fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
              list.lanes = mergeLanes(list.lanes, renderLanes2);
              break;
            }
            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
        } else if (fiber.tag === DehydratedFragment) {
          var parentSuspense = fiber.return;
          if (parentSuspense === null) {
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          }
          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
          var _alternate = parentSuspense.alternate;
          if (_alternate !== null) {
            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
          nextFiber = fiber.sibling;
        } else {
          nextFiber = fiber.child;
        }
        if (nextFiber !== null) {
          nextFiber.return = fiber;
        } else {
          nextFiber = fiber;
          while (nextFiber !== null) {
            if (nextFiber === workInProgress2) {
              nextFiber = null;
              break;
            }
            var sibling = nextFiber.sibling;
            if (sibling !== null) {
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            }
            nextFiber = nextFiber.return;
          }
        }
        fiber = nextFiber;
      }
    }
    function prepareToReadContext(workInProgress2, renderLanes2) {
      currentlyRenderingFiber = workInProgress2;
      lastContextDependency = null;
      lastFullyObservedContext = null;
      var dependencies = workInProgress2.dependencies;
      if (dependencies !== null) {
        {
          var firstContext = dependencies.firstContext;
          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes2)) {
              markWorkInProgressReceivedUpdate();
            }
            dependencies.firstContext = null;
          }
        }
      }
    }
    function readContext(context) {
      {
        if (isDisallowedContextReadInDEV) {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }
      }
      var value2 = context._currentValue;
      if (lastFullyObservedContext === context)
        ;
      else {
        var contextItem = {
          context,
          memoizedValue: value2,
          next: null
        };
        if (lastContextDependency === null) {
          if (currentlyRenderingFiber === null) {
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
          lastContextDependency = contextItem;
          currentlyRenderingFiber.dependencies = {
            lanes: NoLanes,
            firstContext: contextItem
          };
        } else {
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }
      return value2;
    }
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
      if (concurrentQueues === null) {
        concurrentQueues = [queue];
      } else {
        concurrentQueues.push(queue);
      }
    }
    function finishQueueingConcurrentUpdates() {
      if (concurrentQueues !== null) {
        for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
          var queue = concurrentQueues[i2];
          var lastInterleavedUpdate = queue.interleaved;
          if (lastInterleavedUpdate !== null) {
            queue.interleaved = null;
            var firstInterleavedUpdate = lastInterleavedUpdate.next;
            var lastPendingUpdate = queue.pending;
            if (lastPendingUpdate !== null) {
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = firstInterleavedUpdate;
              lastInterleavedUpdate.next = firstPendingUpdate;
            }
            queue.pending = lastInterleavedUpdate;
          }
        }
        concurrentQueues = null;
      }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
      var alternate = sourceFiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, lane);
      }
      {
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
      var node = sourceFiber;
      var parent = sourceFiber.return;
      while (parent !== null) {
        parent.childLanes = mergeLanes(parent.childLanes, lane);
        alternate = parent.alternate;
        if (alternate !== null) {
          alternate.childLanes = mergeLanes(alternate.childLanes, lane);
        } else {
          {
            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
        }
        node = parent;
        parent = parent.return;
      }
      if (node.tag === HostRoot) {
        var root3 = node.stateNode;
        return root3;
      } else {
        return null;
      }
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;
    }
    function initializeUpdateQueue(fiber) {
      var queue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: NoLanes
        },
        effects: null
      };
      fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress2) {
      var queue = workInProgress2.updateQueue;
      var currentQueue = current2.updateQueue;
      if (queue === currentQueue) {
        var clone2 = {
          baseState: currentQueue.baseState,
          firstBaseUpdate: currentQueue.firstBaseUpdate,
          lastBaseUpdate: currentQueue.lastBaseUpdate,
          shared: currentQueue.shared,
          effects: currentQueue.effects
        };
        workInProgress2.updateQueue = clone2;
      }
    }
    function createUpdate(eventTime, lane) {
      var update = {
        eventTime,
        lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
      return update;
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return null;
      }
      var sharedQueue = updateQueue.shared;
      {
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
          error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
          didWarnUpdateInsideUpdate = true;
        }
      }
      if (isUnsafeClassRenderPhaseUpdate()) {
        var pending = sharedQueue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        sharedQueue.pending = update;
        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
      } else {
        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
      }
    }
    function entangleTransitions(root3, fiber, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return;
      }
      var sharedQueue = updateQueue.shared;
      if (isTransitionLane(lane)) {
        var queueLanes = sharedQueue.lanes;
        queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        sharedQueue.lanes = newQueueLanes;
        markRootEntangled(root3, newQueueLanes);
      }
    }
    function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
      var queue = workInProgress2.updateQueue;
      var current2 = workInProgress2.alternate;
      if (current2 !== null) {
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var newFirst = null;
          var newLast = null;
          var firstBaseUpdate = queue.firstBaseUpdate;
          if (firstBaseUpdate !== null) {
            var update = firstBaseUpdate;
            do {
              var clone2 = {
                eventTime: update.eventTime,
                lane: update.lane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLast === null) {
                newFirst = newLast = clone2;
              } else {
                newLast.next = clone2;
                newLast = clone2;
              }
              update = update.next;
            } while (update !== null);
            if (newLast === null) {
              newFirst = newLast = capturedUpdate;
            } else {
              newLast.next = capturedUpdate;
              newLast = capturedUpdate;
            }
          } else {
            newFirst = newLast = capturedUpdate;
          }
          queue = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = queue;
          return;
        }
      }
      var lastBaseUpdate = queue.lastBaseUpdate;
      if (lastBaseUpdate === null) {
        queue.firstBaseUpdate = capturedUpdate;
      } else {
        lastBaseUpdate.next = capturedUpdate;
      }
      queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState: {
          var payload = update.payload;
          if (typeof payload === "function") {
            {
              enterDisallowedContextReadInDEV();
            }
            var nextState = payload.call(instance, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  payload.call(instance, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              exitDisallowedContextReadInDEV();
            }
            return nextState;
          }
          return payload;
        }
        case CaptureUpdate: {
          workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
        }
        case UpdateState: {
          var _payload = update.payload;
          var partialState;
          if (typeof _payload === "function") {
            {
              enterDisallowedContextReadInDEV();
            }
            partialState = _payload.call(instance, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  _payload.call(instance, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              exitDisallowedContextReadInDEV();
            }
          } else {
            partialState = _payload;
          }
          if (partialState === null || partialState === void 0) {
            return prevState;
          }
          return assign({}, prevState, partialState);
        }
        case ForceUpdate: {
          hasForceUpdate = true;
          return prevState;
        }
      }
      return prevState;
    }
    function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
      var queue = workInProgress2.updateQueue;
      hasForceUpdate = false;
      {
        currentlyProcessingQueue = queue.shared;
      }
      var firstBaseUpdate = queue.firstBaseUpdate;
      var lastBaseUpdate = queue.lastBaseUpdate;
      var pendingQueue = queue.shared.pending;
      if (pendingQueue !== null) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue;
        var firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        if (lastBaseUpdate === null) {
          firstBaseUpdate = firstPendingUpdate;
        } else {
          lastBaseUpdate.next = firstPendingUpdate;
        }
        lastBaseUpdate = lastPendingUpdate;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
          if (currentLastBaseUpdate !== lastBaseUpdate) {
            if (currentLastBaseUpdate === null) {
              currentQueue.firstBaseUpdate = firstPendingUpdate;
            } else {
              currentLastBaseUpdate.next = firstPendingUpdate;
            }
            currentQueue.lastBaseUpdate = lastPendingUpdate;
          }
        }
      }
      if (firstBaseUpdate !== null) {
        var newState = queue.baseState;
        var newLanes = NoLanes;
        var newBaseState = null;
        var newFirstBaseUpdate = null;
        var newLastBaseUpdate = null;
        var update = firstBaseUpdate;
        do {
          var updateLane = update.lane;
          var updateEventTime = update.eventTime;
          if (!isSubsetOfLanes(renderLanes2, updateLane)) {
            var clone2 = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            if (newLastBaseUpdate === null) {
              newFirstBaseUpdate = newLastBaseUpdate = clone2;
              newBaseState = newState;
            } else {
              newLastBaseUpdate = newLastBaseUpdate.next = clone2;
            }
            newLanes = mergeLanes(newLanes, updateLane);
          } else {
            if (newLastBaseUpdate !== null) {
              var _clone = {
                eventTime: updateEventTime,
                lane: NoLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate = newLastBaseUpdate.next = _clone;
            }
            newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
            var callback = update.callback;
            if (callback !== null && update.lane !== NoLane) {
              workInProgress2.flags |= Callback;
              var effects = queue.effects;
              if (effects === null) {
                queue.effects = [update];
              } else {
                effects.push(update);
              }
            }
          }
          update = update.next;
          if (update === null) {
            pendingQueue = queue.shared.pending;
            if (pendingQueue === null) {
              break;
            } else {
              var _lastPendingUpdate = pendingQueue;
              var _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null;
              update = _firstPendingUpdate;
              queue.lastBaseUpdate = _lastPendingUpdate;
              queue.shared.pending = null;
            }
          }
        } while (true);
        if (newLastBaseUpdate === null) {
          newBaseState = newState;
        }
        queue.baseState = newBaseState;
        queue.firstBaseUpdate = newFirstBaseUpdate;
        queue.lastBaseUpdate = newLastBaseUpdate;
        var lastInterleaved = queue.shared.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            newLanes = mergeLanes(newLanes, interleaved.lane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (firstBaseUpdate === null) {
          queue.shared.lanes = NoLanes;
        }
        markSkippedUpdateLanes(newLanes);
        workInProgress2.lanes = newLanes;
        workInProgress2.memoizedState = newState;
      }
      {
        currentlyProcessingQueue = null;
      }
    }
    function callCallback(callback, context) {
      if (typeof callback !== "function") {
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
      }
      callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
      var effects = finishedQueue.effects;
      finishedQueue.effects = null;
      if (effects !== null) {
        for (var i2 = 0; i2 < effects.length; i2++) {
          var effect = effects[i2];
          var callback = effect.callback;
          if (callback !== null) {
            effect.callback = null;
            callCallback(callback, instance);
          }
        }
      }
    }
    var fakeInternalInstance = {};
    var emptyRefsObject = new React2.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    {
      didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
      didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
      didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
      didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
      didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
      didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
      var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
      warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === "function") {
          return;
        }
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
      };
      warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === void 0) {
          var componentName = getComponentNameFromType(type) || "Component";
          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
          }
        }
      };
      Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: false,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      });
      Object.freeze(fakeInternalInstance);
    }
    function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress2.memoizedState;
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            partialState = getDerivedStateFromProps(nextProps, prevState);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
      }
      var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
      workInProgress2.memoizedState = memoizedState;
      if (workInProgress2.lanes === NoLanes) {
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = memoizedState;
      }
    }
    var classComponentUpdater = {
      isMounted,
      enqueueSetState: function(inst, payload, callback) {
        var fiber = get2(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.payload = payload;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "setState");
          }
          update.callback = callback;
        }
        var root3 = enqueueUpdate(fiber, update, lane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitions(root3, fiber, lane);
        }
        {
          markStateUpdateScheduled(fiber, lane);
        }
      },
      enqueueReplaceState: function(inst, payload, callback) {
        var fiber = get2(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ReplaceState;
        update.payload = payload;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "replaceState");
          }
          update.callback = callback;
        }
        var root3 = enqueueUpdate(fiber, update, lane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitions(root3, fiber, lane);
        }
        {
          markStateUpdateScheduled(fiber, lane);
        }
      },
      enqueueForceUpdate: function(inst, callback) {
        var fiber = get2(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ForceUpdate;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "forceUpdate");
          }
          update.callback = callback;
        }
        var root3 = enqueueUpdate(fiber, update, lane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitions(root3, fiber, lane);
        }
        {
          markForceUpdateScheduled(fiber, lane);
        }
      }
    };
    function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress2.stateNode;
      if (typeof instance.shouldComponentUpdate === "function") {
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          if (shouldUpdate === void 0) {
            error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
          }
        }
        return shouldUpdate;
      }
      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
      }
      return true;
    }
    function checkClassInstance(workInProgress2, ctor, newProps) {
      var instance = workInProgress2.stateNode;
      {
        var name = getComponentNameFromType(ctor) || "Component";
        var renderPresent = instance.render;
        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === "function") {
            error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
          } else {
            error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
          }
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
          error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        }
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
          error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        }
        if (instance.propTypes) {
          error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        }
        if (instance.contextType) {
          error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        }
        {
          if (instance.contextTypes) {
            error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
          }
          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
          }
        }
        if (typeof instance.componentShouldUpdate === "function") {
          error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
          error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
        }
        if (typeof instance.componentDidUnmount === "function") {
          error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        }
        if (typeof instance.componentDidReceiveProps === "function") {
          error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        }
        if (typeof instance.componentWillRecieveProps === "function") {
          error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        }
        if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
          error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        }
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== void 0 && hasMutatedProps) {
          error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        }
        if (instance.defaultProps) {
          error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === "function") {
          error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        }
        if (typeof instance.getDerivedStateFromError === "function") {
          error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        }
        if (typeof ctor.getSnapshotBeforeUpdate === "function") {
          error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        }
        var _state = instance.state;
        if (_state && (typeof _state !== "object" || isArray2(_state))) {
          error("%s.state: must be set to an object or null", name);
        }
        if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
          error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
    }
    function adoptClassInstance(workInProgress2, instance) {
      instance.updater = classComponentUpdater;
      workInProgress2.stateNode = instance;
      set(instance, workInProgress2);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }
    function constructClassInstance(workInProgress2, ctor, props) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = emptyContextObject;
      var contextType = ctor.contextType;
      {
        if ("contextType" in ctor) {
          var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            if (contextType === void 0) {
              addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
            } else if (typeof contextType !== "object") {
              addendum = " However, it is set to a " + typeof contextType + ".";
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = " Did you accidentally pass the Context.Provider instead?";
            } else if (contextType._context !== void 0) {
              addendum = " Did you accidentally pass the Context.Consumer instead?";
            } else {
              addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
            }
            error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
      }
      if (typeof contextType === "object" && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
      }
      var instance = new ctor(props, context);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            instance = new ctor(props, context);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      }
      var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
      adoptClassInstance(workInProgress2, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
          }
        }
        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = "componentWillMount";
          } else if (typeof instance.UNSAFE_componentWillMount === "function") {
            foundWillMountName = "UNSAFE_componentWillMount";
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = "componentWillReceiveProps";
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = "componentWillUpdate";
          } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
            foundWillUpdateName = "UNSAFE_componentWillUpdate";
          }
          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentNameFromType(ctor) || "Component";
            var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
            }
          }
        }
      }
      if (isLegacyContextConsumer) {
        cacheContext(workInProgress2, unmaskedContext, context);
      }
      return instance;
    }
    function callComponentWillMount(workInProgress2, instance) {
      var oldState = instance.state;
      if (typeof instance.componentWillMount === "function") {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === "function") {
        instance.UNSAFE_componentWillMount();
      }
      if (oldState !== instance.state) {
        {
          error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
      var oldState = instance.state;
      if (typeof instance.componentWillReceiveProps === "function") {
        instance.componentWillReceiveProps(newProps, nextContext);
      }
      if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }
      if (instance.state !== oldState) {
        {
          var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      {
        checkClassInstance(workInProgress2, ctor, newProps);
      }
      var instance = workInProgress2.stateNode;
      instance.props = newProps;
      instance.state = workInProgress2.memoizedState;
      instance.refs = emptyRefsObject;
      initializeUpdateQueue(workInProgress2);
      var contextType = ctor.contextType;
      if (typeof contextType === "object" && contextType !== null) {
        instance.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        instance.context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      {
        if (instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
          }
        }
        if (workInProgress2.mode & StrictLegacyMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
        }
        {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
        }
      }
      instance.state = workInProgress2.memoizedState;
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress2.memoizedState;
      }
      if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
        callComponentWillMount(workInProgress2, instance);
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        instance.state = workInProgress2.memoizedState;
      }
      if (typeof instance.componentDidMount === "function") {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        workInProgress2.flags |= fiberFlags;
      }
    }
    function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      var instance = workInProgress2.stateNode;
      var oldProps = workInProgress2.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState;
      var newState = instance.state = oldState;
      processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
      newState = workInProgress2.memoizedState;
      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress2.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
        }
        if (typeof instance.componentDidMount === "function") {
          var _fiberFlags = Update;
          {
            _fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            _fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= _fiberFlags;
        }
      } else {
        if (typeof instance.componentDidMount === "function") {
          var _fiberFlags2 = Update;
          {
            _fiberFlags2 |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            _fiberFlags2 |= MountLayoutDev;
          }
          workInProgress2.flags |= _fiberFlags2;
        }
        workInProgress2.memoizedProps = newProps;
        workInProgress2.memoizedState = newState;
      }
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }
    function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
      var instance = workInProgress2.stateNode;
      cloneUpdateQueue(current2, workInProgress2);
      var unresolvedOldProps = workInProgress2.memoizedProps;
      var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
      instance.props = oldProps;
      var unresolvedNewProps = workInProgress2.pendingProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState;
      var newState = instance.state = oldState;
      processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
      newState = workInProgress2.memoizedState;
      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
        if (typeof instance.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Snapshot;
          }
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress2.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
          if (typeof instance.componentWillUpdate === "function") {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillUpdate === "function") {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }
        }
        if (typeof instance.componentDidUpdate === "function") {
          workInProgress2.flags |= Update;
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          workInProgress2.flags |= Snapshot;
        }
      } else {
        if (typeof instance.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Snapshot;
          }
        }
        workInProgress2.memoizedProps = newProps;
        workInProgress2.memoizedState = newState;
      }
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefs = {};
      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};
      warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== "object") {
          return;
        }
        if (!child._store || child._store.validated || child.key != null) {
          return;
        }
        if (typeof child._store !== "object") {
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        }
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasKeyUseWarning[componentName]) {
          return;
        }
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
      };
    }
    function coerceRef(returnFiber, current2, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
        {
          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (!didWarnAboutStringRefs[componentName]) {
              {
                error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
              }
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
        if (element._owner) {
          var owner = element._owner;
          var inst;
          if (owner) {
            var ownerFiber = owner;
            if (ownerFiber.tag !== ClassComponent) {
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            }
            inst = ownerFiber.stateNode;
          }
          if (!inst) {
            throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
          }
          var resolvedInst = inst;
          {
            checkPropStringCoercion(mixedRef, "ref");
          }
          var stringRef = "" + mixedRef;
          if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
            return current2.ref;
          }
          var ref = function(value2) {
            var refs = resolvedInst.refs;
            if (refs === emptyRefsObject) {
              refs = resolvedInst.refs = {};
            }
            if (value2 === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value2;
            }
          };
          ref._stringRef = stringRef;
          return ref;
        } else {
          if (typeof mixedRef !== "string") {
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          }
          if (!element._owner) {
            throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
          }
        }
      }
      return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      var childString = Object.prototype.toString.call(newChild);
      throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
      {
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasFunctionTypeWarning[componentName]) {
          return;
        }
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function resolveLazy(lazyType) {
      var payload = lazyType._payload;
      var init2 = lazyType._init;
      return init2(payload);
    }
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          return;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          return null;
        }
        var childToDelete = currentFirstChild;
        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }
        return null;
      }
      function mapRemainingChildren(returnFiber, currentFirstChild) {
        var existingChildren = /* @__PURE__ */ new Map();
        var existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        var clone2 = createWorkInProgress(fiber, pendingProps);
        clone2.index = 0;
        clone2.sibling = null;
        return clone2;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          newFiber.flags |= Forked;
          return lastPlacedIndex;
        }
        var current2 = newFiber.alternate;
        if (current2 !== null) {
          var oldIndex = current2.index;
          if (oldIndex < lastPlacedIndex) {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          } else {
            return oldIndex;
          }
        } else {
          newFiber.flags |= Placement;
          return lastPlacedIndex;
        }
      }
      function placeSingleChild(newFiber) {
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.flags |= Placement;
        }
        return newFiber;
      }
      function updateTextNode(returnFiber, current2, textContent, lanes) {
        if (current2 === null || current2.tag !== HostText) {
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, textContent);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateElement(returnFiber, current2, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) {
          return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
        }
        if (current2 !== null) {
          if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
            var existing = useFiber(current2, element.props);
            existing.ref = coerceRef(returnFiber, current2, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          }
        }
        var created = createFiberFromElement(element, returnFiber.mode, lanes);
        created.ref = coerceRef(returnFiber, current2, element);
        created.return = returnFiber;
        return created;
      }
      function updatePortal(returnFiber, current2, portal, lanes) {
        if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, portal.children || []);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateFragment2(returnFiber, current2, fragment, lanes, key) {
        if (current2 === null || current2.tag !== Fragment2) {
          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, fragment);
          existing.return = returnFiber;
          return existing;
        }
      }
      function createChild(returnFiber, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
              _created.ref = coerceRef(returnFiber, null, newChild);
              _created.return = returnFiber;
              return _created;
            }
            case REACT_PORTAL_TYPE: {
              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              _created2.return = returnFiber;
              return _created2;
            }
            case REACT_LAZY_TYPE: {
              var payload = newChild._payload;
              var init2 = newChild._init;
              return createChild(returnFiber, init2(payload), lanes);
            }
          }
          if (isArray2(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
            _created3.return = returnFiber;
            return _created3;
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = oldFiber !== null ? oldFiber.key : null;
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          if (key !== null) {
            return null;
          }
          return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              if (newChild.key === key) {
                return updateElement(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
            case REACT_PORTAL_TYPE: {
              if (newChild.key === key) {
                return updatePortal(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
            case REACT_LAZY_TYPE: {
              var payload = newChild._payload;
              var init2 = newChild._init;
              return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
            }
          }
          if (isArray2(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }
            return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updateElement(returnFiber, _matchedFiber, newChild, lanes);
            }
            case REACT_PORTAL_TYPE: {
              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
            }
            case REACT_LAZY_TYPE:
              var payload = newChild._payload;
              var init2 = newChild._init;
              return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
          }
          if (isArray2(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function warnOnInvalidKey(child, knownKeys, returnFiber) {
        {
          if (typeof child !== "object" || child === null) {
            return knownKeys;
          }
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child, returnFiber);
              var key = child.key;
              if (typeof key !== "string") {
                break;
              }
              if (knownKeys === null) {
                knownKeys = /* @__PURE__ */ new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
              break;
            case REACT_LAZY_TYPE:
              var payload = child._payload;
              var init2 = child._init;
              warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
              break;
          }
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        {
          var knownKeys = null;
          for (var i2 = 0; i2 < newChildren.length; i2++) {
            var child = newChildren[i2];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) {
          deleteRemainingChildren(returnFiber, oldFiber);
          if (getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
            if (_newFiber === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }
            previousNewFiber = _newFiber;
          }
          if (getIsHydrating()) {
            var _numberOfForks = newIdx;
            pushTreeFork(returnFiber, _numberOfForks);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
          if (_newFiber2 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }
            previousNewFiber = _newFiber2;
          }
        }
        if (shouldTrackSideEffects) {
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        }
        if (getIsHydrating()) {
          var _numberOfForks2 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks2);
        }
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (typeof iteratorFn !== "function") {
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
            if (!didWarnAboutGenerators) {
              error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
            }
            didWarnAboutGenerators = true;
          }
          if (newChildrenIterable.entries === iteratorFn) {
            if (!didWarnAboutMaps) {
              error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
            }
            didWarnAboutMaps = true;
          }
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null;
            var _step = _newChildren.next();
            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        if (newChildren == null) {
          throw new Error("An iterable object provided no iterator.");
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();
        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done) {
          deleteRemainingChildren(returnFiber, oldFiber);
          if (getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, lanes);
            if (_newFiber3 === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }
            previousNewFiber = _newFiber3;
          }
          if (getIsHydrating()) {
            var _numberOfForks3 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks3);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }
            previousNewFiber = _newFiber4;
          }
        }
        if (shouldTrackSideEffects) {
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        }
        if (getIsHydrating()) {
          var _numberOfForks4 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks4);
        }
        return resultingFirstChild;
      }
      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent);
          existing.return = returnFiber;
          return existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
        var key = element.key;
        var child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              if (child.tag === Fragment2) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            } else {
              if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var _existing = useFiber(child, element.props);
                _existing.ref = coerceRef(returnFiber, child, element);
                _existing.return = returnFiber;
                {
                  _existing._debugSource = element._source;
                  _existing._debugOwner = element._owner;
                }
                return _existing;
              }
            }
            deleteRemainingChildren(returnFiber, child);
            break;
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }
      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
        var key = portal.key;
        var child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || []);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
        var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_LAZY_TYPE:
              var payload = newChild._payload;
              var init2 = newChild._init;
              return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
          }
          if (isArray2(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return reconcileChildFibers2;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current2, workInProgress2) {
      if (current2 !== null && workInProgress2.child !== current2.child) {
        throw new Error("Resuming work not yet implemented.");
      }
      if (workInProgress2.child === null) {
        return;
      }
      var currentChild = workInProgress2.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
      workInProgress2.child = newChild;
      newChild.return = workInProgress2;
      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
        newChild.return = workInProgress2;
      }
      newChild.sibling = null;
    }
    function resetChildFibers(workInProgress2, lanes) {
      var child = workInProgress2.child;
      while (child !== null) {
        resetWorkInProgress(child, lanes);
        child = child.sibling;
      }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c2) {
      if (c2 === NO_CONTEXT) {
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      }
      return c2;
    }
    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }
    function pushHostContext(fiber) {
      requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type);
      if (context === nextContext) {
        return;
      }
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0;
    var SubtreeSuspenseContextMask = 1;
    var InvisibleParentSuspenseContext = 1;
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
      return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
      return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
      return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
      return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
      push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
      pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
      var nextState = workInProgress2.memoizedState;
      if (nextState !== null) {
        if (nextState.dehydrated !== null) {
          return true;
        }
        return false;
      }
      workInProgress2.memoizedProps;
      {
        return true;
      }
    }
    function findFirstSuspended(row) {
      var node = row;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            var dehydrated = state.dehydrated;
            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
              return node;
            }
          }
        } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
          var didSuspend = (node.flags & DidCapture) !== NoFlags;
          if (didSuspend) {
            return node;
          }
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === row) {
          return null;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === row) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return null;
    }
    var NoFlags$1 = 0;
    var HasEffect = 1;
    var Insertion = 2;
    var Layout = 4;
    var Passive$1 = 8;
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
      for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
        var mutableSource = workInProgressSources[i2];
        {
          mutableSource._workInProgressVersionPrimary = null;
        }
      }
      workInProgressSources.length = 0;
    }
    function registerMutableSourceForHydration(root3, mutableSource) {
      var getVersion = mutableSource._getVersion;
      var version = getVersion(mutableSource._source);
      if (root3.mutableSourceEagerHydrationData == null) {
        root3.mutableSourceEagerHydrationData = [mutableSource, version];
      } else {
        root3.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    {
      didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
    }
    var renderLanes = NoLanes;
    var currentlyRenderingFiber$1 = null;
    var currentHook = null;
    var workInProgressHook = null;
    var didScheduleRenderPhaseUpdate = false;
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var localIdCounter = 0;
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25;
    var currentHookNameInDev = null;
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }
    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;
          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      {
        if (deps !== void 0 && deps !== null && !isArray2(deps)) {
          error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
        }
      }
    }
    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);
          if (hookTypesDev !== null) {
            var table = "";
            var secondColumnStart = 30;
            for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
              var oldHookName = hookTypesDev[i2];
              var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i2 + 1 + ". " + oldHookName;
              while (row.length < secondColumnStart) {
                row += " ";
              }
              row += newHookName + "\n";
              table += row;
            }
            error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
          }
        }
      }
    }
    function throwInvalidHookError() {
      throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      {
        if (ignorePreviousDependencies) {
          return false;
        }
      }
      if (prevDeps === null) {
        {
          error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
        }
        return false;
      }
      {
        if (nextDeps.length !== prevDeps.length) {
          error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        }
      }
      for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
        if (objectIs(nextDeps[i2], prevDeps[i2])) {
          continue;
        }
        return false;
      }
      return true;
    }
    function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress2;
      {
        hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
      }
      workInProgress2.memoizedState = null;
      workInProgress2.updateQueue = null;
      workInProgress2.lanes = NoLanes;
      {
        if (current2 !== null && current2.memoizedState !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, secondArg);
      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          numberOfReRenders += 1;
          {
            ignorePreviousDependencies = false;
          }
          currentHook = null;
          workInProgressHook = null;
          workInProgress2.updateQueue = null;
          {
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
          children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      {
        workInProgress2._debugHookTypes = hookTypesDev;
      }
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
          error("Internal React error: Expected static flag was missing. Please notify the React team.");
        }
      }
      didScheduleRenderPhaseUpdate = false;
      if (didRenderTooFewHooks) {
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      }
      return children;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = localIdCounter !== 0;
      localIdCounter = 0;
      return didRenderIdHook;
    }
    function bailoutHooks(current2, workInProgress2, lanes) {
      workInProgress2.updateQueue = current2.updateQueue;
      if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
        workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
      } else {
        workInProgress2.flags &= ~(Passive | Update);
      }
      current2.lanes = removeLanes(current2.lanes, lanes);
    }
    function resetHooksAfterThrow() {
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      if (didScheduleRenderPhaseUpdate) {
        var hook = currentlyRenderingFiber$1.memoizedState;
        while (hook !== null) {
          var queue = hook.queue;
          if (queue !== null) {
            queue.pending = null;
          }
          hook = hook.next;
        }
        didScheduleRenderPhaseUpdate = false;
      }
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
      }
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      if (workInProgressHook === null) {
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
      } else {
        workInProgressHook = workInProgressHook.next = hook;
      }
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      var nextCurrentHook;
      if (currentHook === null) {
        var current2 = currentlyRenderingFiber$1.alternate;
        if (current2 !== null) {
          nextCurrentHook = current2.memoizedState;
        } else {
          nextCurrentHook = null;
        }
      } else {
        nextCurrentHook = currentHook.next;
      }
      var nextWorkInProgressHook;
      if (workInProgressHook === null) {
        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
      } else {
        nextWorkInProgressHook = workInProgressHook.next;
      }
      if (nextWorkInProgressHook !== null) {
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
      } else {
        if (nextCurrentHook === null) {
          throw new Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
        } else {
          workInProgressHook = workInProgressHook.next = newHook;
        }
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function basicStateReducer(state, action) {
      return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init2) {
      var hook = mountWorkInProgressHook();
      var initialState2;
      if (init2 !== void 0) {
        initialState2 = init2(initialArg);
      } else {
        initialState2 = initialArg;
      }
      hook.memoizedState = hook.baseState = initialState2;
      var queue = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState2
      };
      hook.queue = queue;
      var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateReducer(reducer, initialArg, init2) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (queue === null) {
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      queue.lastRenderedReducer = reducer;
      var current2 = currentHook;
      var baseQueue = current2.baseQueue;
      var pendingQueue = queue.pending;
      if (pendingQueue !== null) {
        if (baseQueue !== null) {
          var baseFirst = baseQueue.next;
          var pendingFirst = pendingQueue.next;
          baseQueue.next = pendingFirst;
          pendingQueue.next = baseFirst;
        }
        {
          if (current2.baseQueue !== baseQueue) {
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
          }
        }
        current2.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }
      if (baseQueue !== null) {
        var first = baseQueue.next;
        var newState = current2.baseState;
        var newBaseState = null;
        var newBaseQueueFirst = null;
        var newBaseQueueLast = null;
        var update = first;
        do {
          var updateLane = update.lane;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            var clone2 = {
              lane: updateLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            };
            if (newBaseQueueLast === null) {
              newBaseQueueFirst = newBaseQueueLast = clone2;
              newBaseState = newState;
            } else {
              newBaseQueueLast = newBaseQueueLast.next = clone2;
            }
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
            markSkippedUpdateLanes(updateLane);
          } else {
            if (newBaseQueueLast !== null) {
              var _clone = {
                lane: NoLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast = newBaseQueueLast.next = _clone;
            }
            if (update.hasEagerState) {
              newState = update.eagerState;
            } else {
              var action = update.action;
              newState = reducer(newState, action);
            }
          }
          update = update.next;
        } while (update !== null && update !== first);
        if (newBaseQueueLast === null) {
          newBaseState = newState;
        } else {
          newBaseQueueLast.next = newBaseQueueFirst;
        }
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        hook.baseState = newBaseState;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = newState;
      }
      var lastInterleaved = queue.interleaved;
      if (lastInterleaved !== null) {
        var interleaved = lastInterleaved;
        do {
          var interleavedLane = interleaved.lane;
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
          markSkippedUpdateLanes(interleavedLane);
          interleaved = interleaved.next;
        } while (interleaved !== lastInterleaved);
      } else if (baseQueue === null) {
        queue.lanes = NoLanes;
      }
      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }
    function rerenderReducer(reducer, initialArg, init2) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (queue === null) {
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      queue.lastRenderedReducer = reducer;
      var dispatch = queue.dispatch;
      var lastRenderPhaseUpdate = queue.pending;
      var newState = hook.memoizedState;
      if (lastRenderPhaseUpdate !== null) {
        queue.pending = null;
        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        var update = firstRenderPhaseUpdate;
        do {
          var action = update.action;
          newState = reducer(newState, action);
          update = update.next;
        } while (update !== firstRenderPhaseUpdate);
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        if (hook.baseQueue === null) {
          hook.baseState = newState;
        }
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
      {
        return void 0;
      }
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
      {
        return void 0;
      }
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1;
      var hook = mountWorkInProgressHook();
      var nextSnapshot;
      var isHydrating2 = getIsHydrating();
      if (isHydrating2) {
        if (getServerSnapshot === void 0) {
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        }
        nextSnapshot = getServerSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            if (nextSnapshot !== getServerSnapshot()) {
              error("The result of getServerSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
      } else {
        nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var root3 = getWorkInProgressRoot();
        if (root3 === null) {
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        if (!includesBlockingLane(root3, renderLanes)) {
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
      }
      hook.memoizedState = nextSnapshot;
      var inst = {
        value: nextSnapshot,
        getSnapshot
      };
      hook.queue = inst;
      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      fiber.flags |= Passive;
      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
      return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1;
      var hook = updateWorkInProgressHook();
      var nextSnapshot = getSnapshot();
      {
        if (!didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          if (!objectIs(nextSnapshot, cachedSnapshot)) {
            error("The result of getSnapshot should be cached to avoid an infinite loop");
            didWarnUncachedGetSnapshot = true;
          }
        }
      }
      var prevSnapshot = hook.memoizedState;
      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
      if (snapshotChanged) {
        hook.memoizedState = nextSnapshot;
        markWorkInProgressReceivedUpdate();
      }
      var inst = hook.queue;
      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
        var root3 = getWorkInProgressRoot();
        if (root3 === null) {
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        if (!includesBlockingLane(root3, renderLanes)) {
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
      }
      return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= StoreConsistency;
      var check = {
        getSnapshot,
        value: renderedSnapshot
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.stores = [check];
      } else {
        var stores = componentUpdateQueue.stores;
        if (stores === null) {
          componentUpdateQueue.stores = [check];
        } else {
          stores.push(check);
        }
      }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      if (checkIfSnapshotChanged(inst)) {
        forceStoreRerender(fiber);
      }
    }
    function subscribeToStore(fiber, inst, subscribe) {
      var handleStoreChange = function() {
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      };
      return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      var prevValue = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(prevValue, nextValue);
      } catch (error2) {
        return true;
      }
    }
    function forceStoreRerender(fiber) {
      var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
      if (root3 !== null) {
        scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
      }
    }
    function mountState(initialState2) {
      var hook = mountWorkInProgressHook();
      if (typeof initialState2 === "function") {
        initialState2 = initialState2();
      }
      hook.memoizedState = hook.baseState = initialState2;
      var queue = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState2
      };
      hook.queue = queue;
      var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateState(initialState2) {
      return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState2) {
      return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag,
        create,
        destroy,
        deps,
        next: null
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var lastEffect = componentUpdateQueue.lastEffect;
        if (lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = lastEffect.next;
          lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }
      return effect;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      {
        var _ref2 = {
          current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
      }
    }
    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var destroy = void 0;
      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;
        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
            return;
          }
        }
      }
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
      } else {
        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
      }
    }
    function updateEffect(create, deps) {
      return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
      return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
      return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
      var fiberFlags = Update;
      {
        fiberFlags |= LayoutStatic;
      }
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }
      return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if (typeof ref === "function") {
        var refCallback = ref;
        var _inst = create();
        refCallback(_inst);
        return function() {
          refCallback(null);
        };
      } else if (ref !== null && ref !== void 0) {
        var refObject = ref;
        {
          if (!refObject.hasOwnProperty("current")) {
            error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
          }
        }
        var _inst2 = create();
        refObject.current = _inst2;
        return function() {
          refObject.current = null;
        };
      }
    }
    function mountImperativeHandle(ref, create, deps) {
      {
        if (typeof create !== "function") {
          error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        }
      }
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      var fiberFlags = Update;
      {
        fiberFlags |= LayoutStatic;
      }
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }
      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
      {
        if (typeof create !== "function") {
          error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        }
      }
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value2, formatterFn) {
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function mountDeferredValue(value2) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = value2;
      return value2;
    }
    function updateDeferredValue(value2) {
      var hook = updateWorkInProgressHook();
      var resolvedCurrentHook = currentHook;
      var prevValue = resolvedCurrentHook.memoizedState;
      return updateDeferredValueImpl(hook, prevValue, value2);
    }
    function rerenderDeferredValue(value2) {
      var hook = updateWorkInProgressHook();
      if (currentHook === null) {
        hook.memoizedState = value2;
        return value2;
      } else {
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value2);
      }
    }
    function updateDeferredValueImpl(hook, prevValue, value2) {
      var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
      if (shouldDeferValue) {
        if (!objectIs(value2, prevValue)) {
          var deferredLane = claimNextTransitionLane();
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
          markSkippedUpdateLanes(deferredLane);
          hook.baseState = true;
        }
        return prevValue;
      } else {
        if (hook.baseState) {
          hook.baseState = false;
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = value2;
        return value2;
      }
    }
    function startTransition(setPending, callback, options2) {
      var previousPriority = getCurrentUpdatePriority();
      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
      setPending(true);
      var prevTransition = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = {};
      var currentTransition = ReactCurrentBatchConfig$2.transition;
      {
        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
      }
      try {
        setPending(false);
        callback();
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$2.transition = prevTransition;
        {
          if (prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            if (updatedFibersCount > 10) {
              warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
            }
            currentTransition._updatedFibers.clear();
          }
        }
      }
    }
    function mountTransition() {
      var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
      var start = startTransition.bind(null, setPending);
      var hook = mountWorkInProgressHook();
      hook.memoizedState = start;
      return [isPending, start];
    }
    function updateTransition() {
      var _updateState = updateState(), isPending = _updateState[0];
      var hook = updateWorkInProgressHook();
      var start = hook.memoizedState;
      return [isPending, start];
    }
    function rerenderTransition() {
      var _rerenderState = rerenderState(), isPending = _rerenderState[0];
      var hook = updateWorkInProgressHook();
      var start = hook.memoizedState;
      return [isPending, start];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
      {
        return isUpdatingOpaqueValueInRenderPhase;
      }
    }
    function mountId() {
      var hook = mountWorkInProgressHook();
      var root3 = getWorkInProgressRoot();
      var identifierPrefix = root3.identifierPrefix;
      var id;
      if (getIsHydrating()) {
        var treeId = getTreeId();
        id = ":" + identifierPrefix + "R" + treeId;
        var localId = localIdCounter++;
        if (localId > 0) {
          id += "H" + localId.toString(32);
        }
        id += ":";
      } else {
        var globalClientId = globalClientIdCounter++;
        id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
      }
      hook.memoizedState = id;
      return id;
    }
    function updateId() {
      var hook = updateWorkInProgressHook();
      var id = hook.memoizedState;
      return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
      {
        if (typeof arguments[3] === "function") {
          error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        }
      }
      var lane = requestUpdateLane(fiber);
      var update = {
        lane,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue, update);
      } else {
        var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (root3 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitionUpdate(root3, queue, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
      {
        if (typeof arguments[3] === "function") {
          error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        }
      }
      var lane = requestUpdateLane(fiber);
      var update = {
        lane,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue, update);
      } else {
        var alternate = fiber.alternate;
        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
          var lastRenderedReducer = queue.lastRenderedReducer;
          if (lastRenderedReducer !== null) {
            var prevDispatcher;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }
            try {
              var currentState = queue.lastRenderedState;
              var eagerState = lastRenderedReducer(currentState, action);
              update.hasEagerState = true;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState)) {
                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                return;
              }
            } catch (error2) {
            } finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }
        var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (root3 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitionUpdate(root3, queue, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
      var pending = queue.pending;
      if (pending === null) {
        update.next = update;
      } else {
        update.next = pending.next;
        pending.next = update;
      }
      queue.pending = update;
    }
    function entangleTransitionUpdate(root3, queue, lane) {
      if (isTransitionLane(lane)) {
        var queueLanes = queue.lanes;
        queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        queue.lanes = newQueueLanes;
        markRootEntangled(root3, newQueueLanes);
      }
    }
    function markUpdateInDevTools(fiber, lane, action) {
      {
        markStateUpdateScheduled(fiber, lane);
      }
    }
    var ContextOnlyDispatcher = {
      readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    {
      var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      };
      var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init2) {
          currentHookNameInDev = "useReducer";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState2) {
          currentHookNameInDev = "useState";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value2, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value2) {
          currentHookNameInDev = "useDeferredValue";
          mountHookTypesDev();
          return mountDeferredValue(value2);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          mountHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          mountHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          mountHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init2) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState2) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value2, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value2) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return mountDeferredValue(value2);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init2) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState2) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value2, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value2) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return updateDeferredValue(value2);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init2) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState2) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderState(initialState2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value2, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value2) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return rerenderDeferredValue(value2);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init2) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState2) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value2, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value2) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDeferredValue(value2);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init2) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState2) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value2, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value2) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDeferredValue(value2);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init2) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState2) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderState(initialState2);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value2, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value2) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderDeferredValue(value2);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
    }
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
      return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
      {
        nestedUpdateScheduled = true;
      }
    }
    function resetNestedUpdateFlag() {
      {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
      }
    }
    function syncNestedUpdateFlag() {
      {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
      }
    }
    function getCommitTime() {
      return commitTime;
    }
    function recordCommitTime() {
      commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now$1();
      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = now$1();
      }
    }
    function stopProfilerTimerIfRunning(fiber) {
      profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (profilerStartTime >= 0) {
        var elapsedTime = now$1() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }
        profilerStartTime = -1;
      }
    }
    function recordLayoutEffectDuration(fiber) {
      if (layoutEffectStartTime >= 0) {
        var elapsedTime = now$1() - layoutEffectStartTime;
        layoutEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root3 = parentFiber.stateNode;
              root3.effectDuration += elapsedTime;
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              parentStateNode.effectDuration += elapsedTime;
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function recordPassiveEffectDuration(fiber) {
      if (passiveEffectStartTime >= 0) {
        var elapsedTime = now$1() - passiveEffectStartTime;
        passiveEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root3 = parentFiber.stateNode;
              if (root3 !== null) {
                root3.passiveEffectDuration += elapsedTime;
              }
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              if (parentStateNode !== null) {
                parentStateNode.passiveEffectDuration += elapsedTime;
              }
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function startLayoutEffectTimer() {
      layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
      passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
      var child = fiber.child;
      while (child) {
        fiber.actualDuration += child.actualDuration;
        child = child.sibling;
      }
    }
    function createCapturedValueAtFiber(value2, source) {
      return {
        value: value2,
        source,
        stack: getStackByFiberInDevAndProd(source),
        digest: null
      };
    }
    function createCapturedValue(value2, digest, stack) {
      return {
        value: value2,
        source: null,
        stack: stack != null ? stack : null,
        digest: digest != null ? digest : null
      };
    }
    function showErrorDialog(boundary, errorInfo) {
      return true;
    }
    function logCapturedError(boundary, errorInfo) {
      try {
        var logError = showErrorDialog(boundary, errorInfo);
        if (logError === false) {
          return;
        }
        var error2 = errorInfo.value;
        if (true) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          var componentStack = stack !== null ? stack : "";
          if (error2 != null && error2._suppressLogging) {
            if (boundary.tag === ClassComponent) {
              return;
            }
            console["error"](error2);
          }
          var componentName = source ? getComponentNameFromFiber(source) : null;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage;
          if (boundary.tag === HostRoot) {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
          } else {
            var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          }
          var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console["error"](combinedMessage);
        }
      } catch (e) {
        setTimeout(function() {
          throw e;
        });
      }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      update.payload = {
        element: null
      };
      var error2 = errorInfo.value;
      update.callback = function() {
        onUncaughtError(error2);
        logCapturedError(fiber, errorInfo);
      };
      return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === "function") {
        var error$1 = errorInfo.value;
        update.payload = function() {
          return getDerivedStateFromError(error$1);
        };
        update.callback = function() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          logCapturedError(fiber, errorInfo);
        };
      }
      var inst = fiber.stateNode;
      if (inst !== null && typeof inst.componentDidCatch === "function") {
        update.callback = function callback() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          logCapturedError(fiber, errorInfo);
          if (typeof getDerivedStateFromError !== "function") {
            markLegacyErrorBoundaryAsFailed(this);
          }
          var error$12 = errorInfo.value;
          var stack = errorInfo.stack;
          this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          });
          {
            if (typeof getDerivedStateFromError !== "function") {
              if (!includesSomeLane(fiber.lanes, SyncLane)) {
                error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
              }
            }
          }
        };
      }
      return update;
    }
    function attachPingListener(root3, wakeable, lanes) {
      var pingCache = root3.pingCache;
      var threadIDs;
      if (pingCache === null) {
        pingCache = root3.pingCache = new PossiblyWeakMap$1();
        threadIDs = /* @__PURE__ */ new Set();
        pingCache.set(wakeable, threadIDs);
      } else {
        threadIDs = pingCache.get(wakeable);
        if (threadIDs === void 0) {
          threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        }
      }
      if (!threadIDs.has(lanes)) {
        threadIDs.add(lanes);
        var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root3, lanes);
          }
        }
        wakeable.then(ping, ping);
      }
    }
    function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
      var wakeables = suspenseBoundary.updateQueue;
      if (wakeables === null) {
        var updateQueue = /* @__PURE__ */ new Set();
        updateQueue.add(wakeable);
        suspenseBoundary.updateQueue = updateQueue;
      } else {
        wakeables.add(wakeable);
      }
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
      var tag = sourceFiber.tag;
      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
        var currentSource = sourceFiber.alternate;
        if (currentSource) {
          sourceFiber.updateQueue = currentSource.updateQueue;
          sourceFiber.memoizedState = currentSource.memoizedState;
          sourceFiber.lanes = currentSource.lanes;
        } else {
          sourceFiber.updateQueue = null;
          sourceFiber.memoizedState = null;
        }
      }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
      var node = returnFiber;
      do {
        if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
          return node;
        }
        node = node.return;
      } while (node !== null);
      return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
        if (suspenseBoundary === returnFiber) {
          suspenseBoundary.flags |= ShouldCapture;
        } else {
          suspenseBoundary.flags |= DidCapture;
          sourceFiber.flags |= ForceUpdateForLegacySuspense;
          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;
            if (currentSourceFiber === null) {
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              var update = createUpdate(NoTimestamp, SyncLane);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update, SyncLane);
            }
          }
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
        }
        return suspenseBoundary;
      }
      suspenseBoundary.flags |= ShouldCapture;
      suspenseBoundary.lanes = rootRenderLanes;
      return suspenseBoundary;
    }
    function throwException(root3, returnFiber, sourceFiber, value2, rootRenderLanes) {
      sourceFiber.flags |= Incomplete;
      {
        if (isDevToolsPresent) {
          restorePendingUpdaters(root3, rootRenderLanes);
        }
      }
      if (value2 !== null && typeof value2 === "object" && typeof value2.then === "function") {
        var wakeable = value2;
        resetSuspendedComponent(sourceFiber);
        {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
          }
        }
        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
        if (suspenseBoundary !== null) {
          suspenseBoundary.flags &= ~ForceClientRender;
          markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
          if (suspenseBoundary.mode & ConcurrentMode) {
            attachPingListener(root3, wakeable, rootRenderLanes);
          }
          attachRetryListener(suspenseBoundary, root3, wakeable);
          return;
        } else {
          if (!includesSyncLane(rootRenderLanes)) {
            attachPingListener(root3, wakeable, rootRenderLanes);
            renderDidSuspendDelayIfPossible();
            return;
          }
          var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          value2 = uncaughtSuspenseError;
        }
      } else {
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
          markDidThrowWhileHydratingDEV();
          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (_suspenseBoundary !== null) {
            if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
              _suspenseBoundary.flags |= ForceClientRender;
            }
            markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
            queueHydrationError(createCapturedValueAtFiber(value2, sourceFiber));
            return;
          }
        }
      }
      value2 = createCapturedValueAtFiber(value2, sourceFiber);
      renderDidError(value2);
      var workInProgress2 = returnFiber;
      do {
        switch (workInProgress2.tag) {
          case HostRoot: {
            var _errorInfo = value2;
            workInProgress2.flags |= ShouldCapture;
            var lane = pickArbitraryLane(rootRenderLanes);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
            enqueueCapturedUpdate(workInProgress2, update);
            return;
          }
          case ClassComponent:
            var errorInfo = value2;
            var ctor = workInProgress2.type;
            var instance = workInProgress2.stateNode;
            if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress2.flags |= ShouldCapture;
              var _lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
              var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
              enqueueCapturedUpdate(workInProgress2, _update);
              return;
            }
            break;
        }
        workInProgress2 = workInProgress2.return;
      } while (workInProgress2 !== null);
    }
    function getSuspendedCache() {
      {
        return null;
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    {
      didWarnAboutBadClass = {};
      didWarnAboutModulePatternComponent = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
      didWarnAboutRevealOrder = {};
      didWarnAboutTailOptions = {};
    }
    function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
      if (current2 === null) {
        workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      } else {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
      }
    }
    function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
      workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
    }
    function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var render2 = Component.render;
      var ref = workInProgress2.ref;
      var nextChildren;
      var hasId;
      prepareToReadContext(workInProgress2, renderLanes2);
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
        hasId = checkDidRenderIdHook();
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      if (current2 !== null && !didReceiveUpdate) {
        bailoutHooks(current2, workInProgress2, renderLanes2);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      if (getIsHydrating() && hasId) {
        pushMaterializedTreeId(workInProgress2);
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      if (current2 === null) {
        var type = Component.type;
        if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
          var resolvedType = type;
          {
            resolvedType = resolveFunctionForHotReloading(type);
          }
          workInProgress2.tag = SimpleMemoComponent;
          workInProgress2.type = resolvedType;
          {
            validateFunctionComponentInDev(workInProgress2, type);
          }
          return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
        }
        {
          var innerPropTypes = type.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              "prop",
              getComponentNameFromType(type)
            );
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
        child.ref = workInProgress2.ref;
        child.return = workInProgress2;
        workInProgress2.child = child;
        return child;
      }
      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) {
          checkPropTypes(
            _innerPropTypes,
            nextProps,
            "prop",
            getComponentNameFromType(_type)
          );
        }
      }
      var currentChild = current2.child;
      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
      if (!hasScheduledUpdateOrContext) {
        var prevProps = currentChild.memoizedProps;
        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual2;
        if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
      }
      workInProgress2.flags |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps);
      newChild.ref = workInProgress2.ref;
      newChild.return = workInProgress2;
      workInProgress2.child = newChild;
      return newChild;
    }
    function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var outerMemoType = workInProgress2.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            var lazyComponent = outerMemoType;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            try {
              outerMemoType = init2(payload);
            } catch (x) {
              outerMemoType = null;
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) {
              checkPropTypes(
                outerPropTypes,
                nextProps,
                "prop",
                getComponentNameFromType(outerMemoType)
              );
            }
          }
        }
      }
      if (current2 !== null) {
        var prevProps = current2.memoizedProps;
        if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
          didReceiveUpdate = false;
          workInProgress2.pendingProps = nextProps = prevProps;
          if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
            workInProgress2.lanes = current2.lanes;
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            didReceiveUpdate = true;
          }
        }
      }
      return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
    }
    function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      var nextChildren = nextProps.children;
      var prevState = current2 !== null ? current2.memoizedState : null;
      if (nextProps.mode === "hidden" || enableLegacyHidden) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          var nextState = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = nextState;
          pushRenderLanes(workInProgress2, renderLanes2);
        } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
          var spawnedCachePool = null;
          var nextBaseLanes;
          if (prevState !== null) {
            var prevBaseLanes = prevState.baseLanes;
            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
          } else {
            nextBaseLanes = renderLanes2;
          }
          workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
          var _nextState = {
            baseLanes: nextBaseLanes,
            cachePool: spawnedCachePool,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState;
          workInProgress2.updateQueue = null;
          pushRenderLanes(workInProgress2, nextBaseLanes);
          return null;
        } else {
          var _nextState2 = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState2;
          var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
          pushRenderLanes(workInProgress2, subtreeRenderLanes2);
        }
      } else {
        var _subtreeRenderLanes;
        if (prevState !== null) {
          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
          workInProgress2.memoizedState = null;
        } else {
          _subtreeRenderLanes = renderLanes2;
        }
        pushRenderLanes(workInProgress2, _subtreeRenderLanes);
      }
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateFragment(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateMode(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps.children;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateProfiler(current2, workInProgress2, renderLanes2) {
      {
        workInProgress2.flags |= Update;
        {
          var stateNode = workInProgress2.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
      }
      var nextProps = workInProgress2.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function markRef(current2, workInProgress2) {
      var ref = workInProgress2.ref;
      if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
    }
    function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      var nextChildren;
      var hasId;
      prepareToReadContext(workInProgress2, renderLanes2);
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
        hasId = checkDidRenderIdHook();
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      if (current2 !== null && !didReceiveUpdate) {
        bailoutHooks(current2, workInProgress2, renderLanes2);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      if (getIsHydrating() && hasId) {
        pushMaterializedTreeId(workInProgress2);
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        switch (shouldError(workInProgress2)) {
          case false: {
            var _instance = workInProgress2.stateNode;
            var ctor = workInProgress2.type;
            var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
            var state = tempInstance.state;
            _instance.updater.enqueueSetState(_instance, state, null);
            break;
          }
          case true: {
            workInProgress2.flags |= DidCapture;
            workInProgress2.flags |= ShouldCapture;
            var error$1 = new Error("Simulated error coming from DevTools");
            var lane = pickArbitraryLane(renderLanes2);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
            enqueueCapturedUpdate(workInProgress2, update);
            break;
          }
        }
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress2);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var instance = workInProgress2.stateNode;
      var shouldUpdate;
      if (instance === null) {
        resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        shouldUpdate = true;
      } else if (current2 === null) {
        shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      } else {
        shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
      {
        var inst = workInProgress2.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
          if (!didWarnAboutReassigningProps) {
            error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
          }
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }
    function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
      markRef(current2, workInProgress2);
      var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (!shouldUpdate && !didCaptureError) {
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, false);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      var instance = workInProgress2.stateNode;
      ReactCurrentOwner$1.current = workInProgress2;
      var nextChildren;
      if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
        nextChildren = null;
        {
          stopProfilerTimerIfRunning();
        }
      } else {
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          setIsRendering(true);
          nextChildren = instance.render();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance.render();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
      }
      workInProgress2.flags |= PerformedWork;
      if (current2 !== null && didCaptureError) {
        forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
      } else {
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      workInProgress2.memoizedState = instance.state;
      if (hasContext) {
        invalidateContextProvider(workInProgress2, Component, true);
      }
      return workInProgress2.child;
    }
    function pushHostRootContext(workInProgress2) {
      var root3 = workInProgress2.stateNode;
      if (root3.pendingContext) {
        pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
      } else if (root3.context) {
        pushTopLevelContextObject(workInProgress2, root3.context, false);
      }
      pushHostContainer(workInProgress2, root3.containerInfo);
    }
    function updateHostRoot(current2, workInProgress2, renderLanes2) {
      pushHostRootContext(workInProgress2);
      if (current2 === null) {
        throw new Error("Should have a current fiber. This is a bug in React.");
      }
      var nextProps = workInProgress2.pendingProps;
      var prevState = workInProgress2.memoizedState;
      var prevChildren = prevState.element;
      cloneUpdateQueue(current2, workInProgress2);
      processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
      var nextState = workInProgress2.memoizedState;
      workInProgress2.stateNode;
      var nextChildren = nextState.element;
      if (prevState.isDehydrated) {
        var overrideState = {
          element: nextChildren,
          isDehydrated: false,
          cache: nextState.cache,
          pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
          transitions: nextState.transitions
        };
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = overrideState;
        workInProgress2.memoizedState = overrideState;
        if (workInProgress2.flags & ForceClientRender) {
          var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
        } else if (nextChildren !== prevChildren) {
          var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
        } else {
          enterHydrationState(workInProgress2);
          var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          workInProgress2.child = child;
          var node = child;
          while (node) {
            node.flags = node.flags & ~Placement | Hydrating;
            node = node.sibling;
          }
        }
      } else {
        resetHydrationState();
        if (nextChildren === prevChildren) {
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
      resetHydrationState();
      queueHydrationError(recoverableError);
      workInProgress2.flags |= ForceClientRender;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateHostComponent(current2, workInProgress2, renderLanes2) {
      pushHostContext(workInProgress2);
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
      }
      var type = workInProgress2.type;
      var nextProps = workInProgress2.pendingProps;
      var prevProps = current2 !== null ? current2.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);
      if (isDirectTextChild) {
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        workInProgress2.flags |= ContentReset;
      }
      markRef(current2, workInProgress2);
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateHostText(current2, workInProgress2) {
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
      }
      return null;
    }
    function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps;
      var lazyComponent = elementType;
      var payload = lazyComponent._payload;
      var init2 = lazyComponent._init;
      var Component = init2(payload);
      workInProgress2.type = Component;
      var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child;
      switch (resolvedTag) {
        case FunctionComponent: {
          {
            validateFunctionComponentInDev(workInProgress2, Component);
            workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
          }
          child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case ClassComponent: {
          {
            workInProgress2.type = Component = resolveClassForHotReloading(Component);
          }
          child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case ForwardRef: {
          {
            workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
          }
          child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case MemoComponent: {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = Component.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  resolvedProps,
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          child = updateMemoComponent(
            null,
            workInProgress2,
            Component,
            resolveDefaultProps(Component.type, resolvedProps),
            renderLanes2
          );
          return child;
        }
      }
      var hint = "";
      {
        if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
          hint = " Did you wrap a component in React.lazy() more than once?";
        }
      }
      throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      workInProgress2.tag = ClassComponent;
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress2);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      constructClassInstance(workInProgress2, Component, nextProps);
      mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
    }
    function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps;
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var value2;
      var hasId;
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        if (Component.prototype && typeof Component.prototype.render === "function") {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutBadClass[componentName]) {
            error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }
        if (workInProgress2.mode & StrictLegacyMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
        }
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress2;
        value2 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      workInProgress2.flags |= PerformedWork;
      {
        if (typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName]) {
            error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
            didWarnAboutModulePatternComponent[_componentName] = true;
          }
        }
      }
      if (typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0) {
        {
          var _componentName2 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName2]) {
            error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
            didWarnAboutModulePatternComponent[_componentName2] = true;
          }
        }
        workInProgress2.tag = ClassComponent;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        var hasContext = false;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        workInProgress2.memoizedState = value2.state !== null && value2.state !== void 0 ? value2.state : null;
        initializeUpdateQueue(workInProgress2);
        adoptClassInstance(workInProgress2, value2);
        mountClassInstance(workInProgress2, Component, props, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      } else {
        workInProgress2.tag = FunctionComponent;
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              value2 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        reconcileChildren(null, workInProgress2, value2, renderLanes2);
        {
          validateFunctionComponentInDev(workInProgress2, Component);
        }
        return workInProgress2.child;
      }
    }
    function validateFunctionComponentInDev(workInProgress2, Component) {
      {
        if (Component) {
          if (Component.childContextTypes) {
            error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
          }
        }
        if (workInProgress2.ref !== null) {
          var info = "";
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            info += "\n\nCheck the render method of `" + ownerName + "`.";
          }
          var warningKey = ownerName || "";
          var debugSource = workInProgress2._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
          }
          if (!didWarnAboutFunctionRefs[warningKey]) {
            didWarnAboutFunctionRefs[warningKey] = true;
            error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
          }
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
          var _componentName3 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
            error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
          }
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
          var _componentName4 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
            error("%s: Function components do not support contextType.", _componentName4);
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
          }
        }
      }
    }
    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes2) {
      return {
        baseLanes: renderLanes2,
        cachePool: getSuspendedCache(),
        transitions: null
      };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
      var cachePool = null;
      return {
        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
        cachePool,
        transitions: prevOffscreenState.transitions
      };
    }
    function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        var suspenseState = current2.memoizedState;
        if (suspenseState === null) {
          return false;
        }
      }
      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
      return removeLanes(current2.childLanes, renderLanes2);
    }
    function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      {
        if (shouldSuspend(workInProgress2)) {
          workInProgress2.flags |= DidCapture;
        }
      }
      var suspenseContext = suspenseStackCursor.current;
      var showFallback = false;
      var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
        showFallback = true;
        workInProgress2.flags &= ~DidCapture;
      } else {
        if (current2 === null || current2.memoizedState !== null) {
          {
            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
          }
        }
      }
      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      pushSuspenseContext(workInProgress2, suspenseContext);
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
        var suspenseState = workInProgress2.memoizedState;
        if (suspenseState !== null) {
          var dehydrated = suspenseState.dehydrated;
          if (dehydrated !== null) {
            return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
          }
        }
        var nextPrimaryChildren = nextProps.children;
        var nextFallbackChildren = nextProps.fallback;
        if (showFallback) {
          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
          var primaryChildFragment = workInProgress2.child;
          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackFragment;
        } else {
          return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
        }
      } else {
        var prevState = current2.memoizedState;
        if (prevState !== null) {
          var _dehydrated = prevState.dehydrated;
          if (_dehydrated !== null) {
            return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
          }
        }
        if (showFallback) {
          var _nextFallbackChildren = nextProps.fallback;
          var _nextPrimaryChildren = nextProps.children;
          var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
          var _primaryChildFragment2 = workInProgress2.child;
          var prevOffscreenState = current2.child.memoizedState;
          _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackChildFragment;
        } else {
          var _nextPrimaryChildren2 = nextProps.children;
          var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
          workInProgress2.memoizedState = null;
          return _primaryChildFragment3;
        }
      }
    }
    function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      };
      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
      primaryChildFragment.return = workInProgress2;
      workInProgress2.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var progressedPrimaryFragment = workInProgress2.child;
      var primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      };
      var primaryChildFragment;
      var fallbackChildFragment;
      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress2.mode & ProfileMode) {
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = 0;
          primaryChildFragment.treeBaseDuration = 0;
        }
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      } else {
        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      }
      primaryChildFragment.return = workInProgress2;
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
      return createWorkInProgress(current2, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
      var currentPrimaryChildFragment = current2.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
        mode: "visible",
        children: primaryChildren
      });
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        primaryChildFragment.lanes = renderLanes2;
      }
      primaryChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = null;
      if (currentFallbackChildFragment !== null) {
        var deletions = workInProgress2.deletions;
        if (deletions === null) {
          workInProgress2.deletions = [currentFallbackChildFragment];
          workInProgress2.flags |= ChildDeletion;
        } else {
          deletions.push(currentFallbackChildFragment);
        }
      }
      workInProgress2.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var currentPrimaryChildFragment = current2.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      };
      var primaryChildFragment;
      if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
        var progressedPrimaryFragment = workInProgress2.child;
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress2.mode & ProfileMode) {
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
        }
        workInProgress2.deletions = null;
      } else {
        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
      }
      var fallbackChildFragment;
      if (currentFallbackChildFragment !== null) {
        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
      } else {
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
      }
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
      if (recoverableError !== null) {
        queueHydrationError(recoverableError);
      }
      reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      var nextProps = workInProgress2.pendingProps;
      var primaryChildren = nextProps.children;
      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
      primaryChildFragment.flags |= Placement;
      workInProgress2.memoizedState = null;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var fiberMode = workInProgress2.mode;
      var primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      };
      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
      var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
      fallbackChildFragment.flags |= Placement;
      primaryChildFragment.return = workInProgress2;
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      }
      return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        {
          error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
        }
        workInProgress2.lanes = laneToLanes(SyncLane);
      } else if (isSuspenseInstanceFallback(suspenseInstance)) {
        workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
      } else {
        workInProgress2.lanes = laneToLanes(OffscreenLane);
      }
      return null;
    }
    function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
      if (!didSuspend) {
        warnIfHydrating();
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          return retrySuspenseComponentWithoutHydrating(
            current2,
            workInProgress2,
            renderLanes2,
            null
          );
        }
        if (isSuspenseInstanceFallback(suspenseInstance)) {
          var digest, message, stack;
          {
            var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
            digest = _getSuspenseInstanceF.digest;
            message = _getSuspenseInstanceF.message;
            stack = _getSuspenseInstanceF.stack;
          }
          var error2;
          if (message) {
            error2 = new Error(message);
          } else {
            error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
          }
          var capturedValue = createCapturedValue(error2, digest, stack);
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
        }
        var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
        if (didReceiveUpdate || hasContextChanged2) {
          var root3 = getWorkInProgressRoot();
          if (root3 !== null) {
            var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
              suspenseState.retryLane = attemptHydrationAtLane;
              var eventTime = NoTimestamp;
              enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
              scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
            }
          }
          renderDidSuspendDelayIfPossible();
          var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
        } else if (isSuspenseInstancePending(suspenseInstance)) {
          workInProgress2.flags |= DidCapture;
          workInProgress2.child = current2.child;
          var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
          registerSuspenseInstanceRetry(suspenseInstance, retry);
          return null;
        } else {
          reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Hydrating;
          return primaryChildFragment;
        }
      } else {
        if (workInProgress2.flags & ForceClientRender) {
          workInProgress2.flags &= ~ForceClientRender;
          var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
        } else if (workInProgress2.memoizedState !== null) {
          workInProgress2.child = current2.child;
          workInProgress2.flags |= DidCapture;
          return null;
        } else {
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
          var _primaryChildFragment4 = workInProgress2.child;
          _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackChildFragment;
        }
      }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
      fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
      }
      scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
      var node = firstChild;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          }
        } else if (node.tag === SuspenseListComponent) {
          scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === workInProgress2) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress2) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    function findLastContentRow(firstChild) {
      var row = firstChild;
      var lastContentRow = null;
      while (row !== null) {
        var currentRow = row.alternate;
        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
          lastContentRow = row;
        }
        row = row.sibling;
      }
      return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
      {
        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
          didWarnAboutRevealOrder[revealOrder] = true;
          if (typeof revealOrder === "string") {
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              case "forward":
              case "backward": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              default:
                error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          } else {
            error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
          }
        }
      }
    }
    function validateTailOptions(tailMode, revealOrder) {
      {
        if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
          if (tailMode !== "collapsed" && tailMode !== "hidden") {
            didWarnAboutTailOptions[tailMode] = true;
            error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
          } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
            didWarnAboutTailOptions[tailMode] = true;
            error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
          }
        }
      }
    }
    function validateSuspenseListNestedChild(childSlot, index3) {
      {
        var isAnArray = isArray2(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
        if (isAnArray || isIterable) {
          var type = isAnArray ? "array" : "iterable";
          error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
          return false;
        }
      }
      return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
      {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
          if (isArray2(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              if (!validateSuspenseListNestedChild(children[i2], i2)) {
                return;
              }
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator) {
                var step = childrenIterator.next();
                var _i = 0;
                for (; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) {
                    return;
                  }
                  _i++;
                }
              }
            } else {
              error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
          }
        }
      }
    }
    function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
      var renderState = workInProgress2.memoizedState;
      if (renderState === null) {
        workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        };
      } else {
        renderState.isBackwards = isBackwards;
        renderState.rendering = null;
        renderState.renderingStartTime = 0;
        renderState.last = lastContentRow;
        renderState.tail = tail;
        renderState.tailMode = tailMode;
      }
    }
    function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      var revealOrder = nextProps.revealOrder;
      var tailMode = nextProps.tail;
      var newChildren = nextProps.children;
      validateRevealOrder(revealOrder);
      validateTailOptions(tailMode, revealOrder);
      validateSuspenseListChildren(newChildren, revealOrder);
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      var suspenseContext = suspenseStackCursor.current;
      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      if (shouldForceFallback) {
        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
        workInProgress2.flags |= DidCapture;
      } else {
        var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
        if (didSuspendBefore) {
          propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      }
      pushSuspenseContext(workInProgress2, suspenseContext);
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        workInProgress2.memoizedState = null;
      } else {
        switch (revealOrder) {
          case "forwards": {
            var lastContentRow = findLastContentRow(workInProgress2.child);
            var tail;
            if (lastContentRow === null) {
              tail = workInProgress2.child;
              workInProgress2.child = null;
            } else {
              tail = lastContentRow.sibling;
              lastContentRow.sibling = null;
            }
            initSuspenseListRenderState(
              workInProgress2,
              false,
              tail,
              lastContentRow,
              tailMode
            );
            break;
          }
          case "backwards": {
            var _tail = null;
            var row = workInProgress2.child;
            workInProgress2.child = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                workInProgress2.child = row;
                break;
              }
              var nextRow = row.sibling;
              row.sibling = _tail;
              _tail = row;
              row = nextRow;
            }
            initSuspenseListRenderState(
              workInProgress2,
              true,
              _tail,
              null,
              tailMode
            );
            break;
          }
          case "together": {
            initSuspenseListRenderState(
              workInProgress2,
              false,
              null,
              null,
              void 0
            );
            break;
          }
          default: {
            workInProgress2.memoizedState = null;
          }
        }
      }
      return workInProgress2.child;
    }
    function updatePortalComponent(current2, workInProgress2, renderLanes2) {
      pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
      var nextChildren = workInProgress2.pendingProps;
      if (current2 === null) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      } else {
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current2, workInProgress2, renderLanes2) {
      var providerType = workInProgress2.type;
      var context = providerType._context;
      var newProps = workInProgress2.pendingProps;
      var oldProps = workInProgress2.memoizedProps;
      var newValue = newProps.value;
      {
        if (!("value" in newProps)) {
          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
            hasWarnedAboutUsingNoValuePropOnContextProvider = true;
            error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
          }
        }
        var providerPropTypes = workInProgress2.type.propTypes;
        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        }
      }
      pushProvider(workInProgress2, context, newValue);
      {
        if (oldProps !== null) {
          var oldValue = oldProps.value;
          if (objectIs(oldValue, newValue)) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          } else {
            propagateContextChange(workInProgress2, context, renderLanes2);
          }
        }
      }
      var newChildren = newProps.children;
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current2, workInProgress2, renderLanes2) {
      var context = workInProgress2.type;
      {
        if (context._context === void 0) {
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress2.pendingProps;
      var render2 = newProps.children;
      {
        if (typeof render2 !== "function") {
          error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        }
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var newValue = readContext(context);
      {
        markComponentRenderStarted(workInProgress2);
      }
      var newChildren;
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        newChildren = render2(newValue);
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      return workInProgress2.child;
    }
    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        if (current2 !== null) {
          current2.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
      }
    }
    function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        workInProgress2.dependencies = current2.dependencies;
      }
      {
        stopProfilerTimerIfRunning();
      }
      markSkippedUpdateLanes(workInProgress2.lanes);
      if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
        {
          return null;
        }
      }
      cloneChildFibers(current2, workInProgress2);
      return workInProgress2.child;
    }
    function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
      {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) {
          throw new Error("Cannot swap the root fiber.");
        }
        current2.alternate = null;
        oldWorkInProgress.alternate = null;
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref;
        if (oldWorkInProgress === returnFiber.child) {
          returnFiber.child = newWorkInProgress;
        } else {
          var prevSibling = returnFiber.child;
          if (prevSibling === null) {
            throw new Error("Expected parent to have a child.");
          }
          while (prevSibling.sibling !== oldWorkInProgress) {
            prevSibling = prevSibling.sibling;
            if (prevSibling === null) {
              throw new Error("Expected to find the previous sibling.");
            }
          }
          prevSibling.sibling = newWorkInProgress;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [current2];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(current2);
        }
        newWorkInProgress.flags |= Placement;
        return newWorkInProgress;
      }
    }
    function checkScheduledUpdateOrContext(current2, renderLanes2) {
      var updateLanes = current2.lanes;
      if (includesSomeLane(updateLanes, renderLanes2)) {
        return true;
      }
      return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
      switch (workInProgress2.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress2);
          workInProgress2.stateNode;
          resetHydrationState();
          break;
        case HostComponent:
          pushHostContext(workInProgress2);
          break;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            pushContextProvider(workInProgress2);
          }
          break;
        }
        case HostPortal:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          break;
        case ContextProvider: {
          var newValue = workInProgress2.memoizedProps.value;
          var context = workInProgress2.type._context;
          pushProvider(workInProgress2, context, newValue);
          break;
        }
        case Profiler:
          {
            var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (hasChildWork) {
              workInProgress2.flags |= Update;
            }
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          break;
        case SuspenseComponent: {
          var state = workInProgress2.memoizedState;
          if (state !== null) {
            if (state.dehydrated !== null) {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              workInProgress2.flags |= DidCapture;
              return null;
            }
            var primaryChildFragment = workInProgress2.child;
            var primaryChildLanes = primaryChildFragment.childLanes;
            if (includesSomeLane(renderLanes2, primaryChildLanes)) {
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              if (child !== null) {
                return child.sibling;
              } else {
                return null;
              }
            }
          } else {
            pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
          }
          break;
        }
        case SuspenseListComponent: {
          var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
          var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
          if (didSuspendBefore) {
            if (_hasChildWork) {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= DidCapture;
          }
          var renderState = workInProgress2.memoizedState;
          if (renderState !== null) {
            renderState.rendering = null;
            renderState.tail = null;
            renderState.lastEffect = null;
          }
          pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
          if (_hasChildWork) {
            break;
          } else {
            return null;
          }
        }
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          workInProgress2.lanes = NoLanes;
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
      }
      return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
    }
    function beginWork(current2, workInProgress2, renderLanes2) {
      {
        if (workInProgress2._debugNeedsRemount && current2 !== null) {
          return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
        }
      }
      if (current2 !== null) {
        var oldProps = current2.memoizedProps;
        var newProps = workInProgress2.pendingProps;
        if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
          didReceiveUpdate = true;
        } else {
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
            didReceiveUpdate = false;
            return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
          }
          if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            didReceiveUpdate = true;
          } else {
            didReceiveUpdate = false;
          }
        }
      } else {
        didReceiveUpdate = false;
        if (getIsHydrating() && isForkedChild(workInProgress2)) {
          var slotIndex = workInProgress2.index;
          var numberOfForks = getForksAtLevel();
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      workInProgress2.lanes = NoLanes;
      switch (workInProgress2.tag) {
        case IndeterminateComponent: {
          return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
        }
        case LazyComponent: {
          var elementType = workInProgress2.elementType;
          return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
        }
        case FunctionComponent: {
          var Component = workInProgress2.type;
          var unresolvedProps = workInProgress2.pendingProps;
          var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
          return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
        }
        case ClassComponent: {
          var _Component = workInProgress2.type;
          var _unresolvedProps = workInProgress2.pendingProps;
          var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
          return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
        }
        case HostRoot:
          return updateHostRoot(current2, workInProgress2, renderLanes2);
        case HostComponent:
          return updateHostComponent(current2, workInProgress2, renderLanes2);
        case HostText:
          return updateHostText(current2, workInProgress2);
        case SuspenseComponent:
          return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
        case HostPortal:
          return updatePortalComponent(current2, workInProgress2, renderLanes2);
        case ForwardRef: {
          var type = workInProgress2.type;
          var _unresolvedProps2 = workInProgress2.pendingProps;
          var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
          return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
        }
        case Fragment2:
          return updateFragment(current2, workInProgress2, renderLanes2);
        case Mode:
          return updateMode(current2, workInProgress2, renderLanes2);
        case Profiler:
          return updateProfiler(current2, workInProgress2, renderLanes2);
        case ContextProvider:
          return updateContextProvider(current2, workInProgress2, renderLanes2);
        case ContextConsumer:
          return updateContextConsumer(current2, workInProgress2, renderLanes2);
        case MemoComponent: {
          var _type2 = workInProgress2.type;
          var _unresolvedProps3 = workInProgress2.pendingProps;
          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = _type2.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  _resolvedProps3,
                  "prop",
                  getComponentNameFromType(_type2)
                );
              }
            }
          }
          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
          return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
        }
        case SimpleMemoComponent: {
          return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        }
        case IncompleteClassComponent: {
          var _Component2 = workInProgress2.type;
          var _unresolvedProps4 = workInProgress2.pendingProps;
          var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
          return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
        }
        case SuspenseListComponent: {
          return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
        }
        case ScopeComponent: {
          break;
        }
        case OffscreenComponent: {
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress2) {
      workInProgress2.flags |= Update;
    }
    function markRef$1(workInProgress2) {
      workInProgress2.flags |= Ref;
      {
        workInProgress2.flags |= RefStatic;
      }
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    {
      appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        var node = workInProgress2.child;
        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal)
            ;
          else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      };
      updateHostContainer = function(current2, workInProgress2) {
      };
      updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
        var oldProps = current2.memoizedProps;
        if (oldProps === newProps) {
          return;
        }
        var instance = workInProgress2.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        workInProgress2.updateQueue = updatePayload;
        if (updatePayload) {
          markUpdate(workInProgress2);
        }
      };
      updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        if (oldText !== newText) {
          markUpdate(workInProgress2);
        }
      };
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (getIsHydrating()) {
        return;
      }
      switch (renderState.tailMode) {
        case "hidden": {
          var tailNode = renderState.tail;
          var lastTailNode = null;
          while (tailNode !== null) {
            if (tailNode.alternate !== null) {
              lastTailNode = tailNode;
            }
            tailNode = tailNode.sibling;
          }
          if (lastTailNode === null) {
            renderState.tail = null;
          } else {
            lastTailNode.sibling = null;
          }
          break;
        }
        case "collapsed": {
          var _tailNode = renderState.tail;
          var _lastTailNode = null;
          while (_tailNode !== null) {
            if (_tailNode.alternate !== null) {
              _lastTailNode = _tailNode;
            }
            _tailNode = _tailNode.sibling;
          }
          if (_lastTailNode === null) {
            if (!hasRenderedATailFallback && renderState.tail !== null) {
              renderState.tail.sibling = null;
            } else {
              renderState.tail = null;
            }
          } else {
            _lastTailNode.sibling = null;
          }
          break;
        }
      }
    }
    function bubbleProperties(completedWork) {
      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
      var newChildLanes = NoLanes;
      var subtreeFlags = NoFlags;
      if (!didBailout) {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var child = completedWork.child;
          while (child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
            subtreeFlags |= child.subtreeFlags;
            subtreeFlags |= child.flags;
            actualDuration += child.actualDuration;
            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }
          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
            subtreeFlags |= _child.subtreeFlags;
            subtreeFlags |= _child.flags;
            _child.return = completedWork;
            _child = _child.sibling;
          }
        }
        completedWork.subtreeFlags |= subtreeFlags;
      } else {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var _treeBaseDuration = completedWork.selfBaseDuration;
          var _child2 = completedWork.child;
          while (_child2 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
            subtreeFlags |= _child2.subtreeFlags & StaticMask;
            subtreeFlags |= _child2.flags & StaticMask;
            _treeBaseDuration += _child2.treeBaseDuration;
            _child2 = _child2.sibling;
          }
          completedWork.treeBaseDuration = _treeBaseDuration;
        } else {
          var _child3 = completedWork.child;
          while (_child3 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
            subtreeFlags |= _child3.subtreeFlags & StaticMask;
            subtreeFlags |= _child3.flags & StaticMask;
            _child3.return = completedWork;
            _child3 = _child3.sibling;
          }
        }
        completedWork.subtreeFlags |= subtreeFlags;
      }
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
      if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
        warnIfUnhydratedTailNodes(workInProgress2);
        resetHydrationState();
        workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
        return false;
      }
      var wasHydrated = popHydrationState(workInProgress2);
      if (nextState !== null && nextState.dehydrated !== null) {
        if (current2 === null) {
          if (!wasHydrated) {
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
          }
          prepareToHydrateHostSuspenseInstance(workInProgress2);
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              var isTimedOutSuspense = nextState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = workInProgress2.child;
                if (primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return false;
        } else {
          resetHydrationState();
          if ((workInProgress2.flags & DidCapture) === NoFlags) {
            workInProgress2.memoizedState = null;
          }
          workInProgress2.flags |= Update;
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              var _isTimedOutSuspense = nextState !== null;
              if (_isTimedOutSuspense) {
                var _primaryChildFragment = workInProgress2.child;
                if (_primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return false;
        }
      } else {
        upgradeHydrationErrorsToRecoverable();
        return true;
      }
    }
    function completeWork(current2, workInProgress2, renderLanes2) {
      var newProps = workInProgress2.pendingProps;
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case IndeterminateComponent:
        case LazyComponent:
        case SimpleMemoComponent:
        case FunctionComponent:
        case ForwardRef:
        case Fragment2:
        case Mode:
        case Profiler:
        case ContextConsumer:
        case MemoComponent:
          bubbleProperties(workInProgress2);
          return null;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress2);
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostRoot: {
          var fiberRoot = workInProgress2.stateNode;
          popHostContainer(workInProgress2);
          popTopLevelContextObject(workInProgress2);
          resetWorkInProgressVersions();
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }
          if (current2 === null || current2.child === null) {
            var wasHydrated = popHydrationState(workInProgress2);
            if (wasHydrated) {
              markUpdate(workInProgress2);
            } else {
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                  workInProgress2.flags |= Snapshot;
                  upgradeHydrationErrorsToRecoverable();
                }
              }
            }
          }
          updateHostContainer(current2, workInProgress2);
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress2.type;
          if (current2 !== null && workInProgress2.stateNode != null) {
            updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
            if (current2.ref !== workInProgress2.ref) {
              markRef$1(workInProgress2);
            }
          } else {
            if (!newProps) {
              if (workInProgress2.stateNode === null) {
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            var currentHostContext = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress2);
            if (_wasHydrated) {
              if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                markUpdate(workInProgress2);
              }
            } else {
              var instance = createInstance2(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
              appendAllChildren(instance, workInProgress2, false, false);
              workInProgress2.stateNode = instance;
              if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress2);
              }
            }
            if (workInProgress2.ref !== null) {
              markRef$1(workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostText: {
          var newText = newProps;
          if (current2 && workInProgress2.stateNode != null) {
            var oldText = current2.memoizedProps;
            updateHostText$1(current2, workInProgress2, oldText, newText);
          } else {
            if (typeof newText !== "string") {
              if (workInProgress2.stateNode === null) {
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext = getHostContext();
            var _wasHydrated2 = popHydrationState(workInProgress2);
            if (_wasHydrated2) {
              if (prepareToHydrateHostTextInstance(workInProgress2)) {
                markUpdate(workInProgress2);
              }
            } else {
              workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var nextState = workInProgress2.memoizedState;
          if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
            var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
            if (!fallthroughToNormalSuspensePath) {
              if (workInProgress2.flags & ShouldCapture) {
                return workInProgress2;
              } else {
                return null;
              }
            }
          }
          if ((workInProgress2.flags & DidCapture) !== NoFlags) {
            workInProgress2.lanes = renderLanes2;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          var nextDidTimeout = nextState !== null;
          var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
          if (nextDidTimeout !== prevDidTimeout) {
            if (nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              _offscreenFiber2.flags |= Visibility;
              if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
          }
          var wakeables = workInProgress2.updateQueue;
          if (wakeables !== null) {
            workInProgress2.flags |= Update;
          }
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              if (nextDidTimeout) {
                var primaryChildFragment = workInProgress2.child;
                if (primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return null;
        }
        case HostPortal:
          popHostContainer(workInProgress2);
          updateHostContainer(current2, workInProgress2);
          if (current2 === null) {
            preparePortalMount(workInProgress2.stateNode.containerInfo);
          }
          bubbleProperties(workInProgress2);
          return null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          popProvider(context, workInProgress2);
          bubbleProperties(workInProgress2);
          return null;
        case IncompleteClassComponent: {
          var _Component = workInProgress2.type;
          if (isContextProvider(_Component)) {
            popContext(workInProgress2);
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            bubbleProperties(workInProgress2);
            return null;
          }
          var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
          var renderedTail = renderState.rendering;
          if (renderedTail === null) {
            if (!didSuspendAlready) {
              var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
              if (!cannotBeSuspended) {
                var row = workInProgress2.child;
                while (row !== null) {
                  var suspended = findFirstSuspended(row);
                  if (suspended !== null) {
                    didSuspendAlready = true;
                    workInProgress2.flags |= DidCapture;
                    cutOffTailIfNeeded(renderState, false);
                    var newThenables = suspended.updateQueue;
                    if (newThenables !== null) {
                      workInProgress2.updateQueue = newThenables;
                      workInProgress2.flags |= Update;
                    }
                    workInProgress2.subtreeFlags = NoFlags;
                    resetChildFibers(workInProgress2, renderLanes2);
                    pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                    return workInProgress2.child;
                  }
                  row = row.sibling;
                }
              }
              if (renderState.tail !== null && now() > getRenderTargetTime()) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                workInProgress2.lanes = SomeRetryLane;
              }
            } else {
              cutOffTailIfNeeded(renderState, false);
            }
          } else {
            if (!didSuspendAlready) {
              var _suspended = findFirstSuspended(renderedTail);
              if (_suspended !== null) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                var _newThenables = _suspended.updateQueue;
                if (_newThenables !== null) {
                  workInProgress2.updateQueue = _newThenables;
                  workInProgress2.flags |= Update;
                }
                cutOffTailIfNeeded(renderState, true);
                if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
              } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                workInProgress2.lanes = SomeRetryLane;
              }
            }
            if (renderState.isBackwards) {
              renderedTail.sibling = workInProgress2.child;
              workInProgress2.child = renderedTail;
            } else {
              var previousSibling = renderState.last;
              if (previousSibling !== null) {
                previousSibling.sibling = renderedTail;
              } else {
                workInProgress2.child = renderedTail;
              }
              renderState.last = renderedTail;
            }
          }
          if (renderState.tail !== null) {
            var next = renderState.tail;
            renderState.rendering = next;
            renderState.tail = next.sibling;
            renderState.renderingStartTime = now();
            next.sibling = null;
            var suspenseContext = suspenseStackCursor.current;
            if (didSuspendAlready) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            } else {
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            return next;
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case ScopeComponent: {
          break;
        }
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          popRenderLanes(workInProgress2);
          var _nextState = workInProgress2.memoizedState;
          var nextIsHidden = _nextState !== null;
          if (current2 !== null) {
            var _prevState = current2.memoizedState;
            var prevIsHidden = _prevState !== null;
            if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
              workInProgress2.flags |= Visibility;
            }
          }
          if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
            bubbleProperties(workInProgress2);
          } else {
            if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
              bubbleProperties(workInProgress2);
              {
                if (workInProgress2.subtreeFlags & (Placement | Update)) {
                  workInProgress2.flags |= Visibility;
                }
              }
            }
          }
          return null;
        }
        case CacheComponent: {
          return null;
        }
        case TracingMarkerComponent: {
          return null;
        }
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(current2, workInProgress2, renderLanes2) {
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress2);
          }
          var flags = workInProgress2.flags;
          if (flags & ShouldCapture) {
            workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          return null;
        }
        case HostRoot: {
          workInProgress2.stateNode;
          popHostContainer(workInProgress2);
          popTopLevelContextObject(workInProgress2);
          resetWorkInProgressVersions();
          var _flags = workInProgress2.flags;
          if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
            workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
            return workInProgress2;
          }
          return null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          return null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (workInProgress2.alternate === null) {
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            }
            resetHydrationState();
          }
          var _flags2 = workInProgress2.flags;
          if (_flags2 & ShouldCapture) {
            workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          return null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          return null;
        }
        case HostPortal:
          popHostContainer(workInProgress2);
          return null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          popProvider(context, workInProgress2);
          return null;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(workInProgress2);
          return null;
        case CacheComponent:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case ClassComponent: {
          var childContextTypes = interruptedWork.type.childContextTypes;
          if (childContextTypes !== null && childContextTypes !== void 0) {
            popContext(interruptedWork);
          }
          break;
        }
        case HostRoot: {
          interruptedWork.stateNode;
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          resetWorkInProgressVersions();
          break;
        }
        case HostComponent: {
          popHostContext(interruptedWork);
          break;
        }
        case HostPortal:
          popHostContainer(interruptedWork);
          break;
        case SuspenseComponent:
          popSuspenseContext(interruptedWork);
          break;
        case SuspenseListComponent:
          popSuspenseContext(interruptedWork);
          break;
        case ContextProvider:
          var context = interruptedWork.type._context;
          popProvider(context, interruptedWork);
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(interruptedWork);
          break;
      }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
    }
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
    var nextEffect = null;
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error2) {
      {
        invokeGuardedCallback(null, function() {
          throw error2;
        });
        clearCaughtError();
      }
    }
    var callComponentWillUnmountWithTimer = function(current2, instance) {
      instance.props = current2.memoizedProps;
      instance.state = current2.memoizedState;
      if (current2.mode & ProfileMode) {
        try {
          startLayoutEffectTimer();
          instance.componentWillUnmount();
        } finally {
          recordLayoutEffectDuration(current2);
        }
      } else {
        instance.componentWillUnmount();
      }
    };
    function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
      try {
        commitHookEffectListMount(Layout, current2);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
      try {
        callComponentWillUnmountWithTimer(current2, instance);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
      try {
        instance.componentDidMount();
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyAttachRef(current2, nearestMountedAncestor) {
      try {
        commitAttachRef(current2);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyDetachRef(current2, nearestMountedAncestor) {
      var ref = current2.ref;
      if (ref !== null) {
        if (typeof ref === "function") {
          var retVal;
          try {
            if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(null);
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              retVal = ref(null);
            }
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
          {
            if (typeof retVal === "function") {
              error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
            }
          }
        } else {
          ref.current = null;
        }
      }
    }
    function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
      try {
        destroy();
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root3, firstChild) {
      prepareForCommit(root3.containerInfo);
      nextEffect = firstChild;
      commitBeforeMutationEffects_begin();
      var shouldFire = shouldFireAfterActiveInstanceBlur;
      shouldFireAfterActiveInstanceBlur = false;
      return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var child = fiber.child;
        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitBeforeMutationEffects_complete();
        }
      }
    }
    function commitBeforeMutationEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          commitBeforeMutationEffectsOnFiber(fiber);
        } catch (error2) {
          captureCommitPhaseError(fiber, fiber.return, error2);
        }
        resetCurrentFiber();
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
      var current2 = finishedWork.alternate;
      var flags = finishedWork.flags;
      if ((flags & Snapshot) !== NoFlags) {
        setCurrentFiber(finishedWork);
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            break;
          }
          case ClassComponent: {
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              var prevState = current2.memoizedState;
              var instance = finishedWork.stateNode;
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                }
              }
              var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
              {
                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                  didWarnSet.add(finishedWork.type);
                  error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                }
              }
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          }
          case HostRoot: {
            {
              var root3 = finishedWork.stateNode;
              clearContainer(root3.containerInfo);
            }
            break;
          }
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            break;
          default: {
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        resetCurrentFiber();
      }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & flags) === flags) {
            var destroy = effect.destroy;
            effect.destroy = void 0;
            if (destroy !== void 0) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectUnmountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectUnmountStarted(finishedWork);
                }
              }
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectUnmountStopped();
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectUnmountStopped();
                }
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitHookEffectListMount(flags, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & flags) === flags) {
            {
              if ((flags & Passive$1) !== NoFlags$1) {
                markComponentPassiveEffectMountStarted(finishedWork);
              } else if ((flags & Layout) !== NoFlags$1) {
                markComponentLayoutEffectMountStarted(finishedWork);
              }
            }
            var create = effect.create;
            {
              if ((flags & Insertion) !== NoFlags$1) {
                setIsRunningInsertionEffect(true);
              }
            }
            effect.destroy = create();
            {
              if ((flags & Insertion) !== NoFlags$1) {
                setIsRunningInsertionEffect(false);
              }
            }
            {
              if ((flags & Passive$1) !== NoFlags$1) {
                markComponentPassiveEffectMountStopped();
              } else if ((flags & Layout) !== NoFlags$1) {
                markComponentLayoutEffectMountStopped();
              }
            }
            {
              var destroy = effect.destroy;
              if (destroy !== void 0 && typeof destroy !== "function") {
                var hookName = void 0;
                if ((effect.tag & Layout) !== NoFlags) {
                  hookName = "useLayoutEffect";
                } else if ((effect.tag & Insertion) !== NoFlags) {
                  hookName = "useInsertionEffect";
                } else {
                  hookName = "useEffect";
                }
                var addendum = void 0;
                if (destroy === null) {
                  addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                } else if (typeof destroy.then === "function") {
                  addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                } else {
                  addendum = " You returned: " + destroy;
                }
                error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
      {
        if ((finishedWork.flags & Update) !== NoFlags) {
          switch (finishedWork.tag) {
            case Profiler: {
              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
              var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
              var commitTime2 = getCommitTime();
              var phase = finishedWork.alternate === null ? "mount" : "update";
              {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onPostCommit === "function") {
                onPostCommit(id, phase, passiveEffectDuration, commitTime2);
              }
              var parentFiber = finishedWork.return;
              outer:
                while (parentFiber !== null) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root3 = parentFiber.stateNode;
                      root3.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
              break;
            }
          }
        }
      }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
      if ((finishedWork.flags & LayoutMask) !== NoFlags) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
            }
            break;
          }
          case ClassComponent: {
            var instance = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (!offscreenSubtreeWasHidden) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      instance.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance);
            }
            break;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            break;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current2 === null && finishedWork.flags & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            break;
          }
          case HostText: {
            break;
          }
          case HostPortal: {
            break;
          }
          case Profiler: {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
              var effectDuration = finishedWork.stateNode.effectDuration;
              var commitTime2 = getCommitTime();
              var phase = current2 === null ? "mount" : "update";
              {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onRender === "function") {
                onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
              }
              {
                if (typeof onCommit === "function") {
                  onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                }
                enqueuePendingPassiveProfilerEffect(finishedWork);
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root3 = parentFiber.stateNode;
                        root3.effectDuration += effectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += effectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
              }
            }
            break;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
          case TracingMarkerComponent: {
            break;
          }
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (!offscreenSubtreeWasHidden) {
        {
          if (finishedWork.flags & Ref) {
            commitAttachRef(finishedWork);
          }
        }
      }
    }
    function reappearLayoutEffectsOnFiber(node) {
      switch (node.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (node.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            } finally {
              recordLayoutEffectDuration(node);
            }
          } else {
            safelyCallCommitHookLayoutEffectListMount(node, node.return);
          }
          break;
        }
        case ClassComponent: {
          var instance = node.stateNode;
          if (typeof instance.componentDidMount === "function") {
            safelyCallComponentDidMount(node, node.return, instance);
          }
          safelyAttachRef(node, node.return);
          break;
        }
        case HostComponent: {
          safelyAttachRef(node, node.return);
          break;
        }
      }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      var hostSubtreeRoot = null;
      {
        var node = finishedWork;
        while (true) {
          if (node.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node;
              try {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else if (node.tag === HostText) {
            if (hostSubtreeRoot === null) {
              try {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
            ;
          else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }
            if (hostSubtreeRoot === node) {
              hostSubtreeRoot = null;
            }
            node = node.return;
          }
          if (hostSubtreeRoot === node) {
            hostSubtreeRoot = null;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse;
        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;
          default:
            instanceToUse = instance;
        }
        if (typeof ref === "function") {
          var retVal;
          if (finishedWork.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              retVal = ref(instanceToUse);
            } finally {
              recordLayoutEffectDuration(finishedWork);
            }
          } else {
            retVal = ref(instanceToUse);
          }
          {
            if (typeof retVal === "function") {
              error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            }
          }
        } else {
          {
            if (!ref.hasOwnProperty("current")) {
              error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }
    function detachFiberMutation(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.return = null;
      }
      fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null) {
        fiber.alternate = null;
        detachFiberAfterEffects(alternate);
      }
      {
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        if (fiber.tag === HostComponent) {
          var hostInstance = fiber.stateNode;
          if (hostInstance !== null) {
            detachDeletedInstance(hostInstance);
          }
        }
        fiber.stateNode = null;
        {
          fiber._debugOwner = null;
        }
        {
          fiber.return = null;
          fiber.dependencies = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.stateNode = null;
          fiber.updateQueue = null;
        }
      }
    }
    function getHostParentFiber(fiber) {
      var parent = fiber.return;
      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }
        parent = parent.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
      var node = fiber;
      siblings:
        while (true) {
          while (node.sibling === null) {
            if (node.return === null || isHostParent(node.return)) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
          while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
            if (node.flags & Placement) {
              continue siblings;
            }
            if (node.child === null || node.tag === HostPortal) {
              continue siblings;
            } else {
              node.child.return = node;
              node = node.child;
            }
          }
          if (!(node.flags & Placement)) {
            return node.stateNode;
          }
        }
    }
    function commitPlacement(finishedWork) {
      var parentFiber = getHostParentFiber(finishedWork);
      switch (parentFiber.tag) {
        case HostComponent: {
          var parent = parentFiber.stateNode;
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, before, parent);
          break;
        }
        case HostRoot:
        case HostPortal: {
          var _parent = parentFiber.stateNode.containerInfo;
          var _before = getHostSibling(finishedWork);
          insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node.stateNode;
        if (before) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          appendChildToContainer(parent, stateNode);
        }
      } else if (tag === HostPortal)
        ;
      else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNodeIntoContainer(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node.stateNode;
        if (before) {
          insertBefore(parent, stateNode, before);
        } else {
          appendChild(parent, stateNode);
        }
      } else if (tag === HostPortal)
        ;
      else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNode(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNode(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root3, returnFiber, deletedFiber) {
      {
        var parent = returnFiber;
        findParent:
          while (parent !== null) {
            switch (parent.tag) {
              case HostComponent: {
                hostParent = parent.stateNode;
                hostParentIsContainer = false;
                break findParent;
              }
              case HostRoot: {
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break findParent;
              }
              case HostPortal: {
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break findParent;
              }
            }
            parent = parent.return;
          }
        if (hostParent === null) {
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
      }
      detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
      var child = parent.child;
      while (child !== null) {
        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
        child = child.sibling;
      }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
      onCommitUnmount(deletedFiber);
      switch (deletedFiber.tag) {
        case HostComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
          }
        }
        case HostText: {
          {
            var prevHostParent = hostParent;
            var prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (hostParent !== null) {
              if (hostParentIsContainer) {
                removeChildFromContainer(hostParent, deletedFiber.stateNode);
              } else {
                removeChild(hostParent, deletedFiber.stateNode);
              }
            }
          }
          return;
        }
        case DehydratedFragment: {
          {
            if (hostParent !== null) {
              if (hostParentIsContainer) {
                clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
              } else {
                clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
              }
            }
          }
          return;
        }
        case HostPortal: {
          {
            var _prevHostParent = hostParent;
            var _prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = true;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = _prevHostParent;
            hostParentIsContainer = _prevHostParentIsContainer;
          }
          return;
        }
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          if (!offscreenSubtreeWasHidden) {
            var updateQueue = deletedFiber.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                  if (destroy !== void 0) {
                    if ((tag & Insertion) !== NoFlags$1) {
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                    } else if ((tag & Layout) !== NoFlags$1) {
                      {
                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                      }
                      if (deletedFiber.mode & ProfileMode) {
                        startLayoutEffectTimer();
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        recordLayoutEffectDuration(deletedFiber);
                      } else {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      }
                      {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ClassComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var instance = deletedFiber.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ScopeComponent: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case OffscreenComponent: {
          if (deletedFiber.mode & ConcurrentMode) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          }
          break;
        }
        default: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
      }
    }
    function commitSuspenseCallback(finishedWork) {
      finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState === null) {
        var current2 = finishedWork.alternate;
        if (current2 !== null) {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var suspenseInstance = prevState.dehydrated;
            if (suspenseInstance !== null) {
              commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
    }
    function attachSuspenseRetryListeners(finishedWork) {
      var wakeables = finishedWork.updateQueue;
      if (wakeables !== null) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        if (retryCache === null) {
          retryCache = finishedWork.stateNode = new PossiblyWeakSet();
        }
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            retryCache.add(wakeable);
            {
              if (isDevToolsPresent) {
                if (inProgressLanes !== null && inProgressRoot !== null) {
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                } else {
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                }
              }
            }
            wakeable.then(retry, retry);
          }
        });
      }
    }
    function commitMutationEffects(root3, finishedWork, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root3;
      setCurrentFiber(finishedWork);
      commitMutationEffectsOnFiber(finishedWork, root3);
      setCurrentFiber(finishedWork);
      inProgressLanes = null;
      inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
      var deletions = parentFiber.deletions;
      if (deletions !== null) {
        for (var i2 = 0; i2 < deletions.length; i2++) {
          var childToDelete = deletions[i2];
          try {
            commitDeletionEffects(root3, parentFiber, childToDelete);
          } catch (error2) {
            captureCommitPhaseError(childToDelete, parentFiber, error2);
          }
        }
      }
      var prevDebugFiber = getCurrentFiber();
      if (parentFiber.subtreeFlags & MutationMask) {
        var child = parentFiber.child;
        while (child !== null) {
          setCurrentFiber(child);
          commitMutationEffectsOnFiber(child, root3);
          child = child.sibling;
        }
      }
      setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
      var current2 = finishedWork.alternate;
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            try {
              commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
              commitHookEffectListMount(Insertion | HasEffect, finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              recordLayoutEffectDuration(finishedWork);
            } else {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          }
          return;
        }
        case ClassComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Ref) {
            if (current2 !== null) {
              safelyDetachRef(current2, current2.return);
            }
          }
          return;
        }
        case HostComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Ref) {
            if (current2 !== null) {
              safelyDetachRef(current2, current2.return);
            }
          }
          {
            if (finishedWork.flags & ContentReset) {
              var instance = finishedWork.stateNode;
              try {
                resetTextContent(instance);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
            if (flags & Update) {
              var _instance4 = finishedWork.stateNode;
              if (_instance4 != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  try {
                    commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
            }
          }
          return;
        }
        case HostText: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            {
              if (finishedWork.stateNode === null) {
                throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              try {
                commitTextUpdate(textInstance, oldText, newText);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          }
          return;
        }
        case HostRoot: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            {
              if (current2 !== null) {
                var prevRootState = current2.memoizedState;
                if (prevRootState.isDehydrated) {
                  try {
                    commitHydratedContainer(root3.containerInfo);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
            }
          }
          return;
        }
        case HostPortal: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          return;
        }
        case SuspenseComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          var offscreenFiber = finishedWork.child;
          if (offscreenFiber.flags & Visibility) {
            var offscreenInstance = offscreenFiber.stateNode;
            var newState = offscreenFiber.memoizedState;
            var isHidden = newState !== null;
            offscreenInstance.isHidden = isHidden;
            if (isHidden) {
              var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
              if (!wasHidden) {
                markCommitTimeOfFallback();
              }
            }
          }
          if (flags & Update) {
            try {
              commitSuspenseCallback(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case OffscreenComponent: {
          var _wasHidden = current2 !== null && current2.memoizedState !== null;
          if (finishedWork.mode & ConcurrentMode) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
            recursivelyTraverseMutationEffects(root3, finishedWork);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else {
            recursivelyTraverseMutationEffects(root3, finishedWork);
          }
          commitReconciliationEffects(finishedWork);
          if (flags & Visibility) {
            var _offscreenInstance = finishedWork.stateNode;
            var _newState = finishedWork.memoizedState;
            var _isHidden = _newState !== null;
            var offscreenBoundary = finishedWork;
            _offscreenInstance.isHidden = _isHidden;
            {
              if (_isHidden) {
                if (!_wasHidden) {
                  if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                    nextEffect = offscreenBoundary;
                    var offscreenChild = offscreenBoundary.child;
                    while (offscreenChild !== null) {
                      nextEffect = offscreenChild;
                      disappearLayoutEffects_begin(offscreenChild);
                      offscreenChild = offscreenChild.sibling;
                    }
                  }
                }
              }
            }
            {
              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
            }
          }
          return;
        }
        case SuspenseListComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case ScopeComponent: {
          return;
        }
        default: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          return;
        }
      }
    }
    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      if (flags & Placement) {
        try {
          commitPlacement(finishedWork);
        } catch (error2) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
        }
        finishedWork.flags &= ~Placement;
      }
      if (flags & Hydrating) {
        finishedWork.flags &= ~Hydrating;
      }
    }
    function commitLayoutEffects(finishedWork, root3, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root3;
      nextEffect = finishedWork;
      commitLayoutEffects_begin(finishedWork, root3, committedLanes);
      inProgressLanes = null;
      inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
      var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent && isModernRoot) {
          var isHidden = fiber.memoizedState !== null;
          var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
          if (newOffscreenSubtreeIsHidden) {
            commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
            continue;
          } else {
            var current2 = fiber.alternate;
            var wasHidden = current2 !== null && current2.memoizedState !== null;
            var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
            if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
              nextEffect = fiber;
              reappearLayoutEffects_begin(fiber);
            }
            var child = firstChild;
            while (child !== null) {
              nextEffect = child;
              commitLayoutEffects_begin(
                child,
                root3,
                committedLanes
              );
              child = child.sibling;
            }
            nextEffect = fiber;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
            continue;
          }
        }
        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
        }
      }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & LayoutMask) !== NoFlags) {
          var current2 = fiber.alternate;
          setCurrentFiber(fiber);
          try {
            commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (fiber.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              } finally {
                recordLayoutEffectDuration(fiber);
              }
            } else {
              commitHookEffectListUnmount(Layout, fiber, fiber.return);
            }
            break;
          }
          case ClassComponent: {
            safelyDetachRef(fiber, fiber.return);
            var instance = fiber.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            }
            break;
          }
          case HostComponent: {
            safelyDetachRef(fiber, fiber.return);
            break;
          }
          case OffscreenComponent: {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              disappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
            break;
          }
        }
        if (firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          disappearLayoutEffects_complete(subtreeRoot);
        }
      }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent) {
          var isHidden = fiber.memoizedState !== null;
          if (isHidden) {
            reappearLayoutEffects_complete(subtreeRoot);
            continue;
          }
        }
        if (firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          reappearLayoutEffects_complete(subtreeRoot);
        }
      }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          reappearLayoutEffectsOnFiber(fiber);
        } catch (error2) {
          captureCommitPhaseError(fiber, fiber.return, error2);
        }
        resetCurrentFiber();
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
      nextEffect = finishedWork;
      commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
        }
      }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          try {
            commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            } finally {
              recordPassiveEffectDuration(finishedWork);
            }
          } else {
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          }
          break;
        }
      }
    }
    function commitPassiveUnmountEffects(firstChild) {
      nextEffect = firstChild;
      commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var child = fiber.child;
        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
          var deletions = fiber.deletions;
          if (deletions !== null) {
            for (var i2 = 0; i2 < deletions.length; i2++) {
              var fiberToDelete = deletions[i2];
              nextEffect = fiberToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
            }
            {
              var previousFiber = fiber.alternate;
              if (previousFiber !== null) {
                var detachedChild = previousFiber.child;
                if (detachedChild !== null) {
                  previousFiber.child = null;
                  do {
                    var detachedSibling = detachedChild.sibling;
                    detachedChild.sibling = null;
                    detachedChild = detachedSibling;
                  } while (detachedChild !== null);
                }
              }
            }
            nextEffect = fiber;
          }
        }
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitPassiveUnmountEffects_complete();
        }
      }
    }
    function commitPassiveUnmountEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          commitPassiveUnmountOnFiber(fiber);
          resetCurrentFiber();
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            recordPassiveEffectDuration(finishedWork);
          } else {
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
          }
          break;
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
        resetCurrentFiber();
        var child = fiber.child;
        if (child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var sibling = fiber.sibling;
        var returnFiber = fiber.return;
        {
          detachFiberAfterEffects(fiber);
          if (fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
        }
        if (sibling !== null) {
          sibling.return = returnFiber;
          nextEffect = sibling;
          return;
        }
        nextEffect = returnFiber;
      }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
      switch (current2.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (current2.mode & ProfileMode) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            recordPassiveEffectDuration(current2);
          } else {
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
          }
          break;
        }
      }
    }
    function invokeLayoutEffectMountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Layout | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
    }
    function invokePassiveEffectMountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            }
            break;
          }
        }
      }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
          }
        }
      }
    }
    if (typeof Symbol === "function" && Symbol.for) {
      var symbolFor = Symbol.for;
      symbolFor("selector.component");
      symbolFor("selector.has_pseudo_class");
      symbolFor("selector.role");
      symbolFor("selector.test_id");
      symbolFor("selector.text");
    }
    var commitHooks = [];
    function onCommitRoot$1() {
      {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
      {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
        var jestIsDefined = typeof jest !== "undefined";
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
      }
    }
    function isConcurrentActEnvironment() {
      {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
          error("The current testing environment is not configured to support act(...)");
        }
        return isReactActEnvironmentGlobal;
      }
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = 0;
    var BatchedContext = 1;
    var RenderContext = 2;
    var CommitContext = 4;
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6;
    var executionContext = NoContext;
    var workInProgressRoot = null;
    var workInProgress = null;
    var workInProgressRootRenderLanes = NoLanes;
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes);
    var workInProgressRootExitStatus = RootInProgress;
    var workInProgressRootFatalError = null;
    var workInProgressRootSkippedLanes = NoLanes;
    var workInProgressRootInterleavedUpdatedLanes = NoLanes;
    var workInProgressRootPingedLanes = NoLanes;
    var workInProgressRootConcurrentErrors = null;
    var workInProgressRootRecoverableErrors = null;
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    var workInProgressRootRenderTargetTime = Infinity;
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
      return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var pendingPassiveTransitions = null;
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null;
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
      return workInProgressRoot;
    }
    function requestEventTime() {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        return now();
      }
      if (currentEventTime !== NoTimestamp) {
        return currentEventTime;
      }
      currentEventTime = now();
      return currentEventTime;
    }
    function requestUpdateLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode) {
        return SyncLane;
      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
        return pickArbitraryLane(workInProgressRootRenderLanes);
      }
      var isTransition = requestCurrentTransition() !== NoTransition;
      if (isTransition) {
        if (ReactCurrentBatchConfig$3.transition !== null) {
          var transition = ReactCurrentBatchConfig$3.transition;
          if (!transition._updatedFibers) {
            transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          transition._updatedFibers.add(fiber);
        }
        if (currentEventTransitionLane === NoLane) {
          currentEventTransitionLane = claimNextTransitionLane();
        }
        return currentEventTransitionLane;
      }
      var updateLane = getCurrentUpdatePriority();
      if (updateLane !== NoLane) {
        return updateLane;
      }
      var eventLane = getCurrentEventPriority();
      return eventLane;
    }
    function requestRetryLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode) {
        return SyncLane;
      }
      return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
      checkForNestedUpdates();
      {
        if (isRunningInsertionEffect) {
          error("useInsertionEffect must not schedule updates.");
        }
      }
      {
        if (isFlushingPassiveEffects) {
          didScheduleUpdateDuringPassiveEffects = true;
        }
      }
      markRootUpdated(root3, lane, eventTime);
      if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
        warnAboutRenderPhaseUpdatesInDEV(fiber);
      } else {
        {
          if (isDevToolsPresent) {
            addFiberToLanesMap(root3, fiber, lane);
          }
        }
        warnIfUpdatesNotWrappedWithActDEV(fiber);
        if (root3 === workInProgressRoot) {
          if ((executionContext & RenderContext) === NoContext) {
            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
          }
          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            markRootSuspended$1(root3, workInProgressRootRenderLanes);
          }
        }
        ensureRootIsScheduled(root3, eventTime);
        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
          resetRenderTimer();
          flushSyncCallbacksOnlyInLegacyMode();
        }
      }
    }
    function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
      var current2 = root3.current;
      current2.lanes = lane;
      markRootUpdated(root3, lane, eventTime);
      ensureRootIsScheduled(root3, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
      return (executionContext & RenderContext) !== NoContext;
    }
    function ensureRootIsScheduled(root3, currentTime) {
      var existingCallbackNode = root3.callbackNode;
      markStarvedLanesAsExpired(root3, currentTime);
      var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (nextLanes === NoLanes) {
        if (existingCallbackNode !== null) {
          cancelCallback$1(existingCallbackNode);
        }
        root3.callbackNode = null;
        root3.callbackPriority = NoLane;
        return;
      }
      var newCallbackPriority = getHighestPriorityLane(nextLanes);
      var existingCallbackPriority = root3.callbackPriority;
      if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
        {
          if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
            error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return;
      }
      if (existingCallbackNode != null) {
        cancelCallback$1(existingCallbackNode);
      }
      var newCallbackNode;
      if (newCallbackPriority === SyncLane) {
        if (root3.tag === LegacyRoot) {
          if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
            ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
          }
          scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
        } else {
          scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        }
        {
          if (ReactCurrentActQueue$1.current !== null) {
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
          } else {
            scheduleMicrotask(function() {
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            });
          }
        }
        newCallbackNode = null;
      } else {
        var schedulerPriorityLevel;
        switch (lanesToEventPriority(nextLanes)) {
          case DiscreteEventPriority:
            schedulerPriorityLevel = ImmediatePriority;
            break;
          case ContinuousEventPriority:
            schedulerPriorityLevel = UserBlockingPriority;
            break;
          case DefaultEventPriority:
            schedulerPriorityLevel = NormalPriority;
            break;
          case IdleEventPriority:
            schedulerPriorityLevel = IdlePriority;
            break;
          default:
            schedulerPriorityLevel = NormalPriority;
            break;
        }
        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
      }
      root3.callbackPriority = newCallbackPriority;
      root3.callbackNode = newCallbackNode;
    }
    function performConcurrentWorkOnRoot(root3, didTimeout) {
      {
        resetNestedUpdateFlag();
      }
      currentEventTime = NoTimestamp;
      currentEventTransitionLane = NoLanes;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      var originalCallbackNode = root3.callbackNode;
      var didFlushPassiveEffects = flushPassiveEffects();
      if (didFlushPassiveEffects) {
        if (root3.callbackNode !== originalCallbackNode) {
          return null;
        }
      }
      var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (lanes === NoLanes) {
        return null;
      }
      var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
      if (exitStatus !== RootInProgress) {
        if (exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root3, NoLanes);
          markRootSuspended$1(root3, lanes);
          ensureRootIsScheduled(root3, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          markRootSuspended$1(root3, lanes);
        } else {
          var renderWasConcurrent = !includesBlockingLane(root3, lanes);
          var finishedWork = root3.current.alternate;
          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
            exitStatus = renderRootSync(root3, lanes);
            if (exitStatus === RootErrored) {
              var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (_errorRetryLanes !== NoLanes) {
                lanes = _errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var _fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw _fatalError;
            }
          }
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          finishConcurrentRender(root3, exitStatus, lanes);
        }
      }
      ensureRootIsScheduled(root3, now());
      if (root3.callbackNode === originalCallbackNode) {
        return performConcurrentWorkOnRoot.bind(null, root3);
      }
      return null;
    }
    function recoverFromConcurrentError(root3, errorRetryLanes) {
      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
      if (isRootDehydrated(root3)) {
        var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
        rootWorkInProgress.flags |= ForceClientRender;
        {
          errorHydratingContainer(root3.containerInfo);
        }
      }
      var exitStatus = renderRootSync(root3, errorRetryLanes);
      if (exitStatus !== RootErrored) {
        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
        workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
        if (errorsFromSecondAttempt !== null) {
          queueRecoverableErrors(errorsFromSecondAttempt);
        }
      }
      return exitStatus;
    }
    function queueRecoverableErrors(errors) {
      if (workInProgressRootRecoverableErrors === null) {
        workInProgressRootRecoverableErrors = errors;
      } else {
        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
      }
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
      switch (exitStatus) {
        case RootInProgress:
        case RootFatalErrored: {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        case RootErrored: {
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspended: {
          markRootSuspended$1(root3, lanes);
          if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
            if (msUntilTimeout > 10) {
              var nextLanes = getNextLanes(root3, NoLanes);
              if (nextLanes !== NoLanes) {
                break;
              }
              var suspendedLanes = root3.suspendedLanes;
              if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                requestEventTime();
                markRootPinged(root3, suspendedLanes);
                break;
              }
              root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
              break;
            }
          }
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspendedWithDelay: {
          markRootSuspended$1(root3, lanes);
          if (includesOnlyTransitions(lanes)) {
            break;
          }
          if (!shouldForceFlushFallbacksInDEV()) {
            var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
            var eventTimeMs = mostRecentEventTime;
            var timeElapsedMs = now() - eventTimeMs;
            var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
            if (_msUntilTimeout > 10) {
              root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
              break;
            }
          }
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootCompleted: {
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        default: {
          throw new Error("Unknown root exit status.");
        }
      }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      var node = finishedWork;
      while (true) {
        if (node.flags & StoreConsistency) {
          var updateQueue = node.updateQueue;
          if (updateQueue !== null) {
            var checks = updateQueue.stores;
            if (checks !== null) {
              for (var i2 = 0; i2 < checks.length; i2++) {
                var check = checks[i2];
                var getSnapshot = check.getSnapshot;
                var renderedValue = check.value;
                try {
                  if (!objectIs(getSnapshot(), renderedValue)) {
                    return false;
                  }
                } catch (error2) {
                  return false;
                }
              }
            }
          }
        }
        var child = node.child;
        if (node.subtreeFlags & StoreConsistency && child !== null) {
          child.return = node;
          node = child;
          continue;
        }
        if (node === finishedWork) {
          return true;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return true;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return true;
    }
    function markRootSuspended$1(root3, suspendedLanes) {
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
      markRootSuspended(root3, suspendedLanes);
    }
    function performSyncWorkOnRoot(root3) {
      {
        syncNestedUpdateFlag();
      }
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      flushPassiveEffects();
      var lanes = getNextLanes(root3, NoLanes);
      if (!includesSomeLane(lanes, SyncLane)) {
        ensureRootIsScheduled(root3, now());
        return null;
      }
      var exitStatus = renderRootSync(root3, lanes);
      if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
        if (errorRetryLanes !== NoLanes) {
          lanes = errorRetryLanes;
          exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
        }
      }
      if (exitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        prepareFreshStack(root3, NoLanes);
        markRootSuspended$1(root3, lanes);
        ensureRootIsScheduled(root3, now());
        throw fatalError;
      }
      if (exitStatus === RootDidNotComplete) {
        throw new Error("Root did not complete. This is a bug in React.");
      }
      var finishedWork = root3.current.alternate;
      root3.finishedWork = finishedWork;
      root3.finishedLanes = lanes;
      commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
      ensureRootIsScheduled(root3, now());
      return null;
    }
    function flushRoot(root3, lanes) {
      if (lanes !== NoLanes) {
        markRootEntangled(root3, mergeLanes(lanes, SyncLane));
        ensureRootIsScheduled(root3, now());
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          resetRenderTimer();
          flushSyncCallbacks();
        }
      }
    }
    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
          resetRenderTimer();
          flushSyncCallbacksOnlyInLegacyMode();
        }
      }
    }
    function discreteUpdates(fn, a, b, c2, d) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        return fn(a, b, c2, d);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
        if (executionContext === NoContext) {
          resetRenderTimer();
        }
      }
    }
    function flushSync(fn) {
      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
        flushPassiveEffects();
      }
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      var previousPriority = getCurrentUpdatePriority();
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        if (fn) {
          return fn();
        } else {
          return void 0;
        }
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
        executionContext = prevExecutionContext;
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushSyncCallbacks();
        }
      }
    }
    function isAlreadyRendering() {
      return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
    }
    function popRenderLanes(fiber) {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
      root3.finishedWork = null;
      root3.finishedLanes = NoLanes;
      var timeoutHandle = root3.timeoutHandle;
      if (timeoutHandle !== noTimeout) {
        root3.timeoutHandle = noTimeout;
        cancelTimeout(timeoutHandle);
      }
      if (workInProgress !== null) {
        var interruptedWork = workInProgress.return;
        while (interruptedWork !== null) {
          var current2 = interruptedWork.alternate;
          unwindInterruptedWork(current2, interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }
      workInProgressRoot = root3;
      var rootWorkInProgress = createWorkInProgress(root3.current, null);
      workInProgress = rootWorkInProgress;
      workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
      workInProgressRootExitStatus = RootInProgress;
      workInProgressRootFatalError = null;
      workInProgressRootSkippedLanes = NoLanes;
      workInProgressRootInterleavedUpdatedLanes = NoLanes;
      workInProgressRootPingedLanes = NoLanes;
      workInProgressRootConcurrentErrors = null;
      workInProgressRootRecoverableErrors = null;
      finishQueueingConcurrentUpdates();
      {
        ReactStrictModeWarnings.discardPendingWarnings();
      }
      return rootWorkInProgress;
    }
    function handleError(root3, thrownValue) {
      do {
        var erroredWork = workInProgress;
        try {
          resetContextDependencies();
          resetHooksAfterThrow();
          resetCurrentFiber();
          ReactCurrentOwner$2.current = null;
          if (erroredWork === null || erroredWork.return === null) {
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            workInProgress = null;
            return;
          }
          if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
          }
          if (enableSchedulingProfiler) {
            markComponentRenderStopped();
            if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
              var wakeable = thrownValue;
              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
            } else {
              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
            }
          }
          throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          thrownValue = yetAnotherThrownValue;
          if (workInProgress === erroredWork && erroredWork !== null) {
            erroredWork = erroredWork.return;
            workInProgress = erroredWork;
          } else {
            erroredWork = workInProgress;
          }
          continue;
        }
        return;
      } while (true);
    }
    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      if (prevDispatcher === null) {
        return ContextOnlyDispatcher;
      } else {
        return prevDispatcher;
      }
    }
    function popDispatcher(prevDispatcher) {
      ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
      globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
      if (workInProgressRootExitStatus === RootInProgress) {
        workInProgressRootExitStatus = RootSuspended;
      }
    }
    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      }
      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
    }
    function renderDidError(error2) {
      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
        workInProgressRootExitStatus = RootErrored;
      }
      if (workInProgressRootConcurrentErrors === null) {
        workInProgressRootConcurrentErrors = [error2];
      } else {
        workInProgressRootConcurrentErrors.push(error2);
      }
    }
    function renderHasNotSuspendedYet() {
      return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root3, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root3.memoizedUpdaters;
            if (memoizedUpdaters.size > 0) {
              restorePendingUpdaters(root3, workInProgressRootRenderLanes);
              memoizedUpdaters.clear();
            }
            movePendingFibersToMemoized(root3, lanes);
          }
        }
        workInProgressTransitions = getTransitionsForLanes();
        prepareFreshStack(root3, lanes);
      }
      {
        markRenderStarted(lanes);
      }
      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root3, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);
      if (workInProgress !== null) {
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      }
      {
        markRenderStopped();
      }
      workInProgressRoot = null;
      workInProgressRootRenderLanes = NoLanes;
      return workInProgressRootExitStatus;
    }
    function workLoopSync() {
      while (workInProgress !== null) {
        performUnitOfWork(workInProgress);
      }
    }
    function renderRootConcurrent(root3, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root3.memoizedUpdaters;
            if (memoizedUpdaters.size > 0) {
              restorePendingUpdaters(root3, workInProgressRootRenderLanes);
              memoizedUpdaters.clear();
            }
            movePendingFibersToMemoized(root3, lanes);
          }
        }
        workInProgressTransitions = getTransitionsForLanes();
        resetRenderTimer();
        prepareFreshStack(root3, lanes);
      }
      {
        markRenderStarted(lanes);
      }
      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root3, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      popDispatcher(prevDispatcher);
      executionContext = prevExecutionContext;
      if (workInProgress !== null) {
        {
          markRenderYielded();
        }
        return RootInProgress;
      } else {
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
    }
    function workLoopConcurrent() {
      while (workInProgress !== null && !shouldYield()) {
        performUnitOfWork(workInProgress);
      }
    }
    function performUnitOfWork(unitOfWork) {
      var current2 = unitOfWork.alternate;
      setCurrentFiber(unitOfWork);
      var next;
      if ((unitOfWork.mode & ProfileMode) !== NoMode) {
        startProfilerTimer(unitOfWork);
        next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
      } else {
        next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
      }
      resetCurrentFiber();
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      if (next === null) {
        completeUnitOfWork(unitOfWork);
      } else {
        workInProgress = next;
      }
      ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        var current2 = completedWork.alternate;
        var returnFiber = completedWork.return;
        if ((completedWork.flags & Incomplete) === NoFlags) {
          setCurrentFiber(completedWork);
          var next = void 0;
          if ((completedWork.mode & ProfileMode) === NoMode) {
            next = completeWork(current2, completedWork, subtreeRenderLanes);
          } else {
            startProfilerTimer(completedWork);
            next = completeWork(current2, completedWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
          }
          resetCurrentFiber();
          if (next !== null) {
            workInProgress = next;
            return;
          }
        } else {
          var _next = unwindWork(current2, completedWork);
          if (_next !== null) {
            _next.flags &= HostEffectMask;
            workInProgress = _next;
            return;
          }
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            var actualDuration = completedWork.actualDuration;
            var child = completedWork.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
          }
          if (returnFiber !== null) {
            returnFiber.flags |= Incomplete;
            returnFiber.subtreeFlags = NoFlags;
            returnFiber.deletions = null;
          } else {
            workInProgressRootExitStatus = RootDidNotComplete;
            workInProgress = null;
            return;
          }
        }
        var siblingFiber = completedWork.sibling;
        if (siblingFiber !== null) {
          workInProgress = siblingFiber;
          return;
        }
        completedWork = returnFiber;
        workInProgress = completedWork;
      } while (completedWork !== null);
      if (workInProgressRootExitStatus === RootInProgress) {
        workInProgressRootExitStatus = RootCompleted;
      }
    }
    function commitRoot(root3, recoverableErrors, transitions) {
      var previousUpdateLanePriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
      } finally {
        ReactCurrentBatchConfig$3.transition = prevTransition;
        setCurrentUpdatePriority(previousUpdateLanePriority);
      }
      return null;
    }
    function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
      do {
        flushPassiveEffects();
      } while (rootWithPendingPassiveEffects !== null);
      flushRenderPhaseStrictModeWarningsInDEV();
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      var finishedWork = root3.finishedWork;
      var lanes = root3.finishedLanes;
      {
        markCommitStarted(lanes);
      }
      if (finishedWork === null) {
        {
          markCommitStopped();
        }
        return null;
      } else {
        {
          if (lanes === NoLanes) {
            error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
          }
        }
      }
      root3.finishedWork = null;
      root3.finishedLanes = NoLanes;
      if (finishedWork === root3.current) {
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      }
      root3.callbackNode = null;
      root3.callbackPriority = NoLane;
      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
      markRootFinished(root3, remainingLanes);
      if (root3 === workInProgressRoot) {
        workInProgressRoot = null;
        workInProgress = null;
        workInProgressRootRenderLanes = NoLanes;
      }
      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          pendingPassiveTransitions = transitions;
          scheduleCallback$1(NormalPriority, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      if (subtreeHasEffects || rootHasEffect) {
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        ReactCurrentBatchConfig$3.transition = null;
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(DiscreteEventPriority);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        ReactCurrentOwner$2.current = null;
        commitBeforeMutationEffects(root3, finishedWork);
        {
          recordCommitTime();
        }
        commitMutationEffects(root3, finishedWork, lanes);
        resetAfterCommit(root3.containerInfo);
        root3.current = finishedWork;
        {
          markLayoutEffectsStarted(lanes);
        }
        commitLayoutEffects(finishedWork, root3, lanes);
        {
          markLayoutEffectsStopped();
        }
        requestPaint();
        executionContext = prevExecutionContext;
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
      } else {
        root3.current = finishedWork;
        {
          recordCommitTime();
        }
      }
      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
      if (rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = false;
        rootWithPendingPassiveEffects = root3;
        pendingPassiveEffectsLanes = lanes;
      } else {
        {
          nestedPassiveUpdateCount = 0;
          rootWithPassiveNestedUpdates = null;
        }
      }
      remainingLanes = root3.pendingLanes;
      if (remainingLanes === NoLanes) {
        legacyErrorBoundariesThatAlreadyFailed = null;
      }
      {
        if (!rootDidHavePassiveEffects) {
          commitDoubleInvokeEffectsInDEV(root3.current, false);
        }
      }
      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
      {
        if (isDevToolsPresent) {
          root3.memoizedUpdaters.clear();
        }
      }
      {
        onCommitRoot$1();
      }
      ensureRootIsScheduled(root3, now());
      if (recoverableErrors !== null) {
        var onRecoverableError = root3.onRecoverableError;
        for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
          var recoverableError = recoverableErrors[i2];
          var componentStack = recoverableError.stack;
          var digest = recoverableError.digest;
          onRecoverableError(recoverableError.value, {
            componentStack,
            digest
          });
        }
      }
      if (hasUncaughtError) {
        hasUncaughtError = false;
        var error$1 = firstUncaughtError;
        firstUncaughtError = null;
        throw error$1;
      }
      if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
        flushPassiveEffects();
      }
      remainingLanes = root3.pendingLanes;
      if (includesSomeLane(remainingLanes, SyncLane)) {
        {
          markNestedUpdateScheduled();
        }
        if (root3 === rootWithNestedUpdates) {
          nestedUpdateCount++;
        } else {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = root3;
        }
      } else {
        nestedUpdateCount = 0;
      }
      flushSyncCallbacks();
      {
        markCommitStopped();
      }
      return null;
    }
    function flushPassiveEffects() {
      if (rootWithPendingPassiveEffects !== null) {
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(priority);
          return flushPassiveEffectsImpl();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        }
      }
      return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
      {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback$1(NormalPriority, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
    }
    function flushPassiveEffectsImpl() {
      if (rootWithPendingPassiveEffects === null) {
        return false;
      }
      var transitions = pendingPassiveTransitions;
      pendingPassiveTransitions = null;
      var root3 = rootWithPendingPassiveEffects;
      var lanes = pendingPassiveEffectsLanes;
      rootWithPendingPassiveEffects = null;
      pendingPassiveEffectsLanes = NoLanes;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Cannot flush passive effects while already rendering.");
      }
      {
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
      }
      {
        markPassiveEffectsStarted(lanes);
      }
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      commitPassiveUnmountEffects(root3.current);
      commitPassiveMountEffects(root3, root3.current, lanes, transitions);
      {
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for (var i2 = 0; i2 < profilerEffects.length; i2++) {
          var _fiber = profilerEffects[i2];
          commitPassiveEffectDurations(root3, _fiber);
        }
      }
      {
        markPassiveEffectsStopped();
      }
      {
        commitDoubleInvokeEffectsInDEV(root3.current, true);
      }
      executionContext = prevExecutionContext;
      flushSyncCallbacks();
      {
        if (didScheduleUpdateDuringPassiveEffects) {
          if (root3 === rootWithPassiveNestedUpdates) {
            nestedPassiveUpdateCount++;
          } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = root3;
          }
        } else {
          nestedPassiveUpdateCount = 0;
        }
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
      }
      onPostCommitRoot(root3);
      {
        var stateNode = root3.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
      }
      return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }
    function prepareToThrowUncaughtError(error2) {
      if (!hasUncaughtError) {
        hasUncaughtError = true;
        firstUncaughtError = error2;
      }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
      var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
      var root3 = enqueueUpdate(rootFiber, update, SyncLane);
      var eventTime = requestEventTime();
      if (root3 !== null) {
        markRootUpdated(root3, SyncLane, eventTime);
        ensureRootIsScheduled(root3, eventTime);
      }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
      {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
      }
      if (sourceFiber.tag === HostRoot) {
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
        return;
      }
      var fiber = null;
      {
        fiber = nearestMountedAncestor;
      }
      while (fiber !== null) {
        if (fiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
          return;
        } else if (fiber.tag === ClassComponent) {
          var ctor = fiber.type;
          var instance = fiber.stateNode;
          if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(fiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
            return;
          }
        }
        fiber = fiber.return;
      }
      {
        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
      }
    }
    function pingSuspendedRoot(root3, wakeable, pingedLanes) {
      var pingCache = root3.pingCache;
      if (pingCache !== null) {
        pingCache.delete(wakeable);
      }
      var eventTime = requestEventTime();
      markRootPinged(root3, pingedLanes);
      warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
      if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
          prepareFreshStack(root3, NoLanes);
        } else {
          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
      }
      ensureRootIsScheduled(root3, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      if (retryLane === NoLane) {
        retryLane = requestRetryLane(boundaryFiber);
      }
      var eventTime = requestEventTime();
      var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
      if (root3 !== null) {
        markRootUpdated(root3, retryLane, eventTime);
        ensureRootIsScheduled(root3, eventTime);
      }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState;
      var retryLane = NoLane;
      if (suspenseState !== null) {
        retryLane = suspenseState.retryLane;
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = NoLane;
      var retryCache;
      switch (boundaryFiber.tag) {
        case SuspenseComponent:
          retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          break;
        case SuspenseListComponent:
          retryCache = boundaryFiber.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      if (retryCache !== null) {
        retryCache.delete(wakeable);
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function jnd(timeElapsed) {
      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = null;
        throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      }
      {
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
          nestedPassiveUpdateCount = 0;
          rootWithPassiveNestedUpdates = null;
          error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
      }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
      {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        {
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
      }
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
      {
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        }
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        }
        resetCurrentFiber();
      }
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
      {
        var current2 = firstChild;
        var subtreeRoot = null;
        while (current2 !== null) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
            current2 = current2.child;
          } else {
            if ((current2.flags & fiberFlags) !== NoFlags) {
              invokeEffectFn(current2);
            }
            if (current2.sibling !== null) {
              current2 = current2.sibling;
            } else {
              current2 = subtreeRoot = current2.return;
            }
          }
        }
      }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      {
        if ((executionContext & RenderContext) !== NoContext) {
          return;
        }
        if (!(fiber.mode & ConcurrentMode)) {
          return;
        }
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
          return;
        }
        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
            return;
          }
          didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else {
          didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
        }
        var previousFiber = current;
        try {
          setCurrentFiber(fiber);
          error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
    var beginWork$1;
    {
      var dummyFiber = null;
      beginWork$1 = function(current2, unitOfWork, lanes) {
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
          return beginWork(current2, unitOfWork, lanes);
        } catch (originalError) {
          if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
            throw originalError;
          }
          resetContextDependencies();
          resetHooksAfterThrow();
          unwindInterruptedWork(current2, unitOfWork);
          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
          if (unitOfWork.mode & ProfileMode) {
            startProfilerTimer(unitOfWork);
          }
          invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
          if (hasCaughtError()) {
            var replayError = clearCaughtError();
            if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
              originalError._suppressLogging = true;
            }
          }
          throw originalError;
        }
      };
    }
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    {
      didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
    }
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
      {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
              var dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
            case ClassComponent: {
              if (!didWarnAboutUpdateInRender) {
                error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                didWarnAboutUpdateInRender = true;
              }
              break;
            }
          }
        }
      }
    }
    function restorePendingUpdaters(root3, lanes) {
      {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root3.memoizedUpdaters;
          memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root3, schedulingFiber, lanes);
          });
        }
      }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
      {
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
          actQueue.push(callback);
          return fakeActCallbackNode;
        } else {
          return scheduleCallback(priorityLevel, callback);
        }
      }
    }
    function cancelCallback$1(callbackNode) {
      if (callbackNode === fakeActCallbackNode) {
        return;
      }
      return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
      return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
      {
        if (fiber.mode & ConcurrentMode) {
          if (!isConcurrentActEnvironment()) {
            return;
          }
        } else {
          if (!isLegacyActEnvironment()) {
            return;
          }
          if (executionContext !== NoContext) {
            return;
          }
          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
            return;
          }
        }
        if (ReactCurrentActQueue$1.current === null) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
      {
        if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
          error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
        }
      }
    }
    function setIsRunningInsertionEffect(isRunning) {
      {
        isRunningInsertionEffect = isRunning;
      }
    }
    var resolveFamily = null;
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
      {
        resolveFamily = handler;
      }
    };
    function resolveFunctionForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }
        var family = resolveFamily(type);
        if (family === void 0) {
          return type;
        }
        return family.current;
      }
    }
    function resolveClassForHotReloading(type) {
      return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }
        var family = resolveFamily(type);
        if (family === void 0) {
          if (type !== null && type !== void 0 && typeof type.render === "function") {
            var currentRender = resolveFunctionForHotReloading(type.render);
            if (type.render !== currentRender) {
              var syntheticType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: currentRender
              };
              if (type.displayName !== void 0) {
                syntheticType.displayName = type.displayName;
              }
              return syntheticType;
            }
          }
          return type;
        }
        return family.current;
      }
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      {
        if (resolveFamily === null) {
          return false;
        }
        var prevType = fiber.elementType;
        var nextType = element.type;
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
        switch (fiber.tag) {
          case ClassComponent: {
            if (typeof nextType === "function") {
              needsCompareFamilies = true;
            }
            break;
          }
          case FunctionComponent: {
            if (typeof nextType === "function") {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          case ForwardRef: {
            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          case MemoComponent:
          case SimpleMemoComponent: {
            if ($$typeofNextType === REACT_MEMO_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          default:
            return false;
        }
        if (needsCompareFamilies) {
          var prevFamily = resolveFamily(prevType);
          if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
            return true;
          }
        }
        return false;
      }
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      {
        if (resolveFamily === null) {
          return;
        }
        if (typeof WeakSet !== "function") {
          return;
        }
        if (failedBoundaries === null) {
          failedBoundaries = /* @__PURE__ */ new WeakSet();
        }
        failedBoundaries.add(fiber);
      }
    }
    var scheduleRefresh = function(root3, update) {
      {
        if (resolveFamily === null) {
          return;
        }
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
          scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
        });
      }
    };
    var scheduleRoot = function(root3, element) {
      {
        if (root3.context !== emptyContextObject) {
          return;
        }
        flushPassiveEffects();
        flushSync(function() {
          updateContainer(element, root3, null, null);
        });
      }
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        if (resolveFamily === null) {
          throw new Error("Expected resolveFamily to be set during hot reload.");
        }
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
          var family = resolveFamily(candidateType);
          if (family !== void 0) {
            if (staleFamilies.has(family)) {
              needsRemount = true;
            } else if (updatedFamilies.has(family)) {
              if (tag === ClassComponent) {
                needsRemount = true;
              } else {
                needsRender = true;
              }
            }
          }
        }
        if (failedBoundaries !== null) {
          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
            needsRemount = true;
          }
        }
        if (needsRemount) {
          fiber._debugNeedsRemount = true;
        }
        if (needsRemount || needsRender) {
          var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (_root !== null) {
            scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
          }
        }
        if (child !== null && !needsRemount) {
          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        }
        if (sibling !== null) {
          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
    }
    var findHostInstancesForRefresh = function(root3, families) {
      {
        var hostInstances = /* @__PURE__ */ new Set();
        var types = new Set(families.map(function(family) {
          return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
        return hostInstances;
      }
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
      {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        var didMatch = false;
        if (candidateType !== null) {
          if (types.has(candidateType)) {
            didMatch = true;
          }
        }
        if (didMatch) {
          findHostInstancesForFiberShallowly(fiber, hostInstances);
        } else {
          if (child !== null) {
            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
          }
        }
        if (sibling !== null) {
          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
        }
      }
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) {
          return;
        }
        var node = fiber;
        while (true) {
          switch (node.tag) {
            case HostComponent:
              hostInstances.add(node.stateNode);
              return;
            case HostPortal:
              hostInstances.add(node.stateNode.containerInfo);
              return;
            case HostRoot:
              hostInstances.add(node.stateNode.containerInfo);
              return;
          }
          if (node.return === null) {
            throw new Error("Expected to reach root first.");
          }
          node = node.return;
        }
      }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var node = fiber;
        var foundHostInstances = false;
        while (true) {
          if (node.tag === HostComponent) {
            foundHostInstances = true;
            hostInstances.add(node.stateNode);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === fiber) {
            return foundHostInstances;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === fiber) {
              return foundHostInstances;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      return false;
    }
    var hasBadMapPolyfill;
    {
      hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
        /* @__PURE__ */ new Set([nonExtensibleObject]);
      } catch (e) {
        hasBadMapPolyfill = true;
      }
    }
    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null;
      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.dependencies = null;
      this.mode = mode;
      this.flags = NoFlags;
      this.subtreeFlags = NoFlags;
      this.deletions = null;
      this.lanes = NoLanes;
      this.childLanes = NoLanes;
      this.alternate = null;
      {
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN;
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }
      {
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
          Object.preventExtensions(this);
        }
      }
    }
    var createFiber = function(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
      return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
    }
    function resolveLazyComponentTag(Component) {
      if (typeof Component === "function") {
        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== void 0 && Component !== null) {
        var $$typeof = Component.$$typeof;
        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }
        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }
      return IndeterminateComponent;
    }
    function createWorkInProgress(current2, pendingProps) {
      var workInProgress2 = current2.alternate;
      if (workInProgress2 === null) {
        workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
        workInProgress2.elementType = current2.elementType;
        workInProgress2.type = current2.type;
        workInProgress2.stateNode = current2.stateNode;
        {
          workInProgress2._debugSource = current2._debugSource;
          workInProgress2._debugOwner = current2._debugOwner;
          workInProgress2._debugHookTypes = current2._debugHookTypes;
        }
        workInProgress2.alternate = current2;
        current2.alternate = workInProgress2;
      } else {
        workInProgress2.pendingProps = pendingProps;
        workInProgress2.type = current2.type;
        workInProgress2.flags = NoFlags;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.deletions = null;
        {
          workInProgress2.actualDuration = 0;
          workInProgress2.actualStartTime = -1;
        }
      }
      workInProgress2.flags = current2.flags & StaticMask;
      workInProgress2.childLanes = current2.childLanes;
      workInProgress2.lanes = current2.lanes;
      workInProgress2.child = current2.child;
      workInProgress2.memoizedProps = current2.memoizedProps;
      workInProgress2.memoizedState = current2.memoizedState;
      workInProgress2.updateQueue = current2.updateQueue;
      var currentDependencies = current2.dependencies;
      workInProgress2.dependencies = currentDependencies === null ? null : {
        lanes: currentDependencies.lanes,
        firstContext: currentDependencies.firstContext
      };
      workInProgress2.sibling = current2.sibling;
      workInProgress2.index = current2.index;
      workInProgress2.ref = current2.ref;
      {
        workInProgress2.selfBaseDuration = current2.selfBaseDuration;
        workInProgress2.treeBaseDuration = current2.treeBaseDuration;
      }
      {
        workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case ClassComponent:
            workInProgress2.type = resolveClassForHotReloading(current2.type);
            break;
          case ForwardRef:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
            break;
        }
      }
      return workInProgress2;
    }
    function resetWorkInProgress(workInProgress2, renderLanes2) {
      workInProgress2.flags &= StaticMask | Placement;
      var current2 = workInProgress2.alternate;
      if (current2 === null) {
        workInProgress2.childLanes = NoLanes;
        workInProgress2.lanes = renderLanes2;
        workInProgress2.child = null;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.memoizedProps = null;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.dependencies = null;
        workInProgress2.stateNode = null;
        {
          workInProgress2.selfBaseDuration = 0;
          workInProgress2.treeBaseDuration = 0;
        }
      } else {
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.deletions = null;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.type = current2.type;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
      }
      return workInProgress2;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
      var mode;
      if (tag === ConcurrentRoot) {
        mode = ConcurrentMode;
        if (isStrictMode === true) {
          mode |= StrictLegacyMode;
          {
            mode |= StrictEffectsMode;
          }
        }
      } else {
        mode = NoMode;
      }
      if (isDevToolsPresent) {
        mode |= ProfileMode;
      }
      return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
      var fiberTag = IndeterminateComponent;
      var resolvedType = type;
      if (typeof type === "function") {
        if (shouldConstruct$1(type)) {
          fiberTag = ClassComponent;
          {
            resolvedType = resolveClassForHotReloading(resolvedType);
          }
        } else {
          {
            resolvedType = resolveFunctionForHotReloading(resolvedType);
          }
        }
      } else if (typeof type === "string") {
        fiberTag = HostComponent;
      } else {
        getTag:
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictLegacyMode;
              if ((mode & ConcurrentMode) !== NoMode) {
                mode |= StrictEffectsMode;
              }
              break;
            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_SCOPE_TYPE:
            case REACT_CACHE_TYPE:
            case REACT_TRACING_MARKER_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            default: {
              if (typeof type === "object" && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    {
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    }
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }
              var info = "";
              {
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
            }
          }
      }
      var fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.lanes = lanes;
      {
        fiber._debugOwner = owner;
      }
      return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      var fiber = createFiber(Fragment2, elements, key, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
      {
        if (typeof pendingProps.id !== "string") {
          error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.lanes = lanes;
      {
        fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        };
      }
      return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
      fiber.elementType = REACT_SUSPENSE_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
      fiber.elementType = REACT_OFFSCREEN_TYPE;
      fiber.lanes = lanes;
      var primaryChildInstance = {
        isHidden: false
      };
      fiber.stateNode = primaryChildInstance;
      return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoMode);
      fiber.elementType = "DELETED";
      return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
      var fiber = createFiber(DehydratedFragment, null, null, NoMode);
      fiber.stateNode = dehydratedNode;
      return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.lanes = lanes;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
      };
      return fiber;
    }
    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        target = createFiber(IndeterminateComponent, null, null, NoMode);
      }
      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.dependencies = source.dependencies;
      target.mode = source.mode;
      target.flags = source.flags;
      target.subtreeFlags = source.subtreeFlags;
      target.deletions = source.deletions;
      target.lanes = source.lanes;
      target.childLanes = source.childLanes;
      target.alternate = source.alternate;
      {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugNeedsRemount = source._debugNeedsRemount;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.pendingChildren = null;
      this.current = null;
      this.pingCache = null;
      this.finishedWork = null;
      this.timeoutHandle = noTimeout;
      this.context = null;
      this.pendingContext = null;
      this.callbackNode = null;
      this.callbackPriority = NoLane;
      this.eventTimes = createLaneMap(NoLanes);
      this.expirationTimes = createLaneMap(NoTimestamp);
      this.pendingLanes = NoLanes;
      this.suspendedLanes = NoLanes;
      this.pingedLanes = NoLanes;
      this.expiredLanes = NoLanes;
      this.mutableReadLanes = NoLanes;
      this.finishedLanes = NoLanes;
      this.entangledLanes = NoLanes;
      this.entanglements = createLaneMap(NoLanes);
      this.identifierPrefix = identifierPrefix;
      this.onRecoverableError = onRecoverableError;
      {
        this.mutableSourceEagerHydrationData = null;
      }
      {
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
      }
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for (var _i = 0; _i < TotalLanes; _i++) {
          pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
        }
      }
      {
        switch (tag) {
          case ConcurrentRoot:
            this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
            break;
          case LegacyRoot:
            this._debugRootType = hydrate2 ? "hydrate()" : "render()";
            break;
        }
      }
    }
    function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
      root3.current = uninitializedFiber;
      uninitializedFiber.stateNode = root3;
      {
        var _initialState = {
          element: initialChildren,
          isDehydrated: hydrate2,
          cache: null,
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
      }
      initializeUpdateQueue(uninitializedFiber);
      return root3;
    }
    var ReactVersion = "18.2.0";
    function createPortal(children, containerInfo, implementation) {
      var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      {
        checkKeyStringCoercion(key);
      }
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }
      var fiber = get2(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);
      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;
        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }
      return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get2(component);
        if (fiber === void 0) {
          if (typeof component.render === "function") {
            throw new Error("Unable to find node on an unmounted component.");
          } else {
            var keys = Object.keys(component).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
          }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.mode & StrictLegacyMode) {
          var componentName = getComponentNameFromFiber(fiber) || "Component";
          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;
            var previousFiber = current;
            try {
              setCurrentFiber(hostFiber);
              if (fiber.mode & StrictLegacyMode) {
                error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              } else {
                error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              }
            } finally {
              if (previousFiber) {
                setCurrentFiber(previousFiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        return hostFiber.stateNode;
      }
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = false;
      var initialChildren = null;
      return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = true;
      var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      root3.context = getContextForSubtree(null);
      var current2 = root3.current;
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(current2);
      var update = createUpdate(eventTime, lane);
      update.callback = callback !== void 0 && callback !== null ? callback : null;
      enqueueUpdate(current2, update, lane);
      scheduleInitialHydrationOnRoot(root3, lane, eventTime);
      return root3;
    }
    function updateContainer(element, container, parentComponent, callback) {
      {
        onScheduleRoot(container, element);
      }
      var current$1 = container.current;
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(current$1);
      {
        markRenderScheduled(lane);
      }
      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }
      {
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
        }
      }
      var update = createUpdate(eventTime, lane);
      update.payload = {
        element
      };
      callback = callback === void 0 ? null : callback;
      if (callback !== null) {
        {
          if (typeof callback !== "function") {
            error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
          }
        }
        update.callback = callback;
      }
      var root3 = enqueueUpdate(current$1, update, lane);
      if (root3 !== null) {
        scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
        entangleTransitions(root3, current$1, lane);
      }
      return lane;
    }
    function getPublicRootInstance(container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    }
    function attemptSynchronousHydration$1(fiber) {
      switch (fiber.tag) {
        case HostRoot: {
          var root3 = fiber.stateNode;
          if (isRootDehydrated(root3)) {
            var lanes = getHighestPriorityPendingLanes(root3);
            flushRoot(root3, lanes);
          }
          break;
        }
        case SuspenseComponent: {
          flushSync(function() {
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
            }
          });
          var retryLane = SyncLane;
          markRetryLaneIfNotHydrated(fiber, retryLane);
          break;
        }
      }
    }
    function markRetryLaneImpl(fiber, retryLane) {
      var suspenseState = fiber.memoizedState;
      if (suspenseState !== null && suspenseState.dehydrated !== null) {
        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
      }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      var alternate = fiber.alternate;
      if (alternate) {
        markRetryLaneImpl(alternate, retryLane);
      }
    }
    function attemptContinuousHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        return;
      }
      var lane = SelectiveHydrationLane;
      var root3 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root3 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        return;
      }
      var lane = requestUpdateLane(fiber);
      var root3 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root3 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
      return null;
    };
    function shouldError(fiber) {
      return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
      return false;
    };
    function shouldSuspend(fiber) {
      return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    {
      var copyWithDeleteImpl = function(obj, path, index3) {
        var key = path[index3];
        var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
        if (index3 + 1 === path.length) {
          if (isArray2(updated)) {
            updated.splice(key, 1);
          } else {
            delete updated[key];
          }
          return updated;
        }
        updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
        return updated;
      };
      var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
      };
      var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
        var oldKey = oldPath[index3];
        var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
        if (index3 + 1 === oldPath.length) {
          var newKey = newPath[index3];
          updated[newKey] = updated[oldKey];
          if (isArray2(updated)) {
            updated.splice(oldKey, 1);
          } else {
            delete updated[oldKey];
          }
        } else {
          updated[oldKey] = copyWithRenameImpl(
            obj[oldKey],
            oldPath,
            newPath,
            index3 + 1
          );
        }
        return updated;
      };
      var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
          warn("copyWithRename() expects paths of the same length");
          return;
        } else {
          for (var i2 = 0; i2 < newPath.length - 1; i2++) {
            if (oldPath[i2] !== newPath[i2]) {
              warn("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
          }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      };
      var copyWithSetImpl = function(obj, path, index3, value2) {
        if (index3 >= path.length) {
          return value2;
        }
        var key = path[index3];
        var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value2);
        return updated;
      };
      var copyWithSet = function(obj, path, value2) {
        return copyWithSetImpl(obj, path, 0, value2);
      };
      var findHook = function(fiber, id) {
        var currentHook2 = fiber.memoizedState;
        while (currentHook2 !== null && id > 0) {
          currentHook2 = currentHook2.next;
          id--;
        }
        return currentHook2;
      };
      overrideHookState = function(fiber, id, path, value2) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithSet(hook.memoizedState, path, value2);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithDelete(hook.memoizedState, path);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideProps = function(fiber, path, value2) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value2);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
        }
      };
      overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
        }
      };
      overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
        }
      };
      scheduleUpdate = function(fiber) {
        var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
        }
      };
      setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
      };
      setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
    }
    function findHostInstanceByFiber(fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
      return null;
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals({
        bundleType: devToolsConfig.bundleType,
        version: devToolsConfig.version,
        rendererPackageName: devToolsConfig.rendererPackageName,
        rendererConfig: devToolsConfig.rendererConfig,
        overrideHookState,
        overrideHookStateDeletePath,
        overrideHookStateRenamePath,
        overrideProps,
        overridePropsDeletePath,
        overridePropsRenamePath,
        setErrorHandler,
        setSuspenseHandler,
        scheduleUpdate,
        currentDispatcherRef: ReactCurrentDispatcher2,
        findHostInstanceByFiber,
        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
        findHostInstancesForRefresh,
        scheduleRefresh,
        scheduleRoot,
        setRefreshHandler,
        getCurrentFiber: getCurrentFiberForDevTools,
        reconcilerVersion: ReactVersion
      });
    }
    var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
      console["error"](error2);
    };
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
      var root3 = this._internalRoot;
      if (root3 === null) {
        throw new Error("Cannot update an unmounted root.");
      }
      {
        if (typeof arguments[1] === "function") {
          error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        } else if (isValidContainer(arguments[1])) {
          error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        } else if (typeof arguments[1] !== "undefined") {
          error("You passed a second argument to root.render(...) but it only accepts one argument.");
        }
        var container = root3.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(root3.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
          }
        }
      }
      updateContainer(children, root3, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
      {
        if (typeof arguments[0] === "function") {
          error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        }
      }
      var root3 = this._internalRoot;
      if (root3 !== null) {
        this._internalRoot = null;
        var container = root3.containerInfo;
        {
          if (isAlreadyRendering()) {
            error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
          }
        }
        flushSync(function() {
          updateContainer(null, root3, null, null);
        });
        unmarkContainerAsRoot(container);
      }
    };
    function createRoot(container, options2) {
      if (!isValidContainer(container)) {
        throw new Error("createRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      var isStrictMode = false;
      var concurrentUpdatesByDefaultOverride = false;
      var identifierPrefix = "";
      var onRecoverableError = defaultOnRecoverableError;
      if (options2 !== null && options2 !== void 0) {
        {
          if (options2.hydrate) {
            warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
          } else {
            if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
              error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            }
          }
        }
        if (options2.unstable_strictMode === true) {
          isStrictMode = true;
        }
        if (options2.identifierPrefix !== void 0) {
          identifierPrefix = options2.identifierPrefix;
        }
        if (options2.onRecoverableError !== void 0) {
          onRecoverableError = options2.onRecoverableError;
        }
        if (options2.transitionCallbacks !== void 0) {
          options2.transitionCallbacks;
        }
      }
      var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root3.current, container);
      var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
      listenToAllSupportedEvents(rootContainerElement);
      return new ReactDOMRoot(root3);
    }
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
      if (target) {
        queueExplicitHydrationTarget(target);
      }
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options2) {
      if (!isValidContainer(container)) {
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      {
        if (initialChildren === void 0) {
          error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        }
      }
      var hydrationCallbacks = options2 != null ? options2 : null;
      var mutableSources = options2 != null && options2.hydratedSources || null;
      var isStrictMode = false;
      var concurrentUpdatesByDefaultOverride = false;
      var identifierPrefix = "";
      var onRecoverableError = defaultOnRecoverableError;
      if (options2 !== null && options2 !== void 0) {
        if (options2.unstable_strictMode === true) {
          isStrictMode = true;
        }
        if (options2.identifierPrefix !== void 0) {
          identifierPrefix = options2.identifierPrefix;
        }
        if (options2.onRecoverableError !== void 0) {
          onRecoverableError = options2.onRecoverableError;
        }
      }
      var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root3.current, container);
      listenToAllSupportedEvents(container);
      if (mutableSources) {
        for (var i2 = 0; i2 < mutableSources.length; i2++) {
          var mutableSource = mutableSources[i2];
          registerMutableSourceForHydration(root3, mutableSource);
        }
      }
      return new ReactDOMHydrationRoot(root3);
    }
    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE2 || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    }
    function isValidContainerLegacy(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE2 || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
    }
    function warnIfReactDOMContainerInDEV(container) {
      {
        if (container.nodeType === ELEMENT_NODE2 && container.tagName && container.tagName.toUpperCase() === "BODY") {
          error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        }
        if (isContainerMarkedAsRoot(container)) {
          if (container._reactRootContainer) {
            error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
          } else {
            error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
          }
        }
      }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    {
      topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
          }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
          error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        }
        if (container.nodeType === ELEMENT_NODE2 && container.tagName && container.tagName.toUpperCase() === "BODY") {
          error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
        }
      };
    }
    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }
      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }
    function noopOnRecoverableError() {
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
      if (isHydrationContainer) {
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(root3);
            originalCallback.call(instance);
          };
        }
        var root3 = createHydrationContainer(
          initialChildren,
          callback,
          container,
          LegacyRoot,
          null,
          false,
          false,
          "",
          noopOnRecoverableError
        );
        container._reactRootContainer = root3;
        markContainerAsRoot(root3.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        flushSync();
        return root3;
      } else {
        var rootSibling;
        while (rootSibling = container.lastChild) {
          container.removeChild(rootSibling);
        }
        if (typeof callback === "function") {
          var _originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(_root);
            _originalCallback.call(instance);
          };
        }
        var _root = createContainer(
          container,
          LegacyRoot,
          null,
          false,
          false,
          "",
          noopOnRecoverableError
        );
        container._reactRootContainer = _root;
        markContainerAsRoot(_root.current, container);
        var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(_rootContainerElement);
        flushSync(function() {
          updateContainer(initialChildren, _root, parentComponent, callback);
        });
        return _root;
      }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
      {
        if (callback !== null && typeof callback !== "function") {
          error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
      }
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
      }
      var maybeRoot = container._reactRootContainer;
      var root3;
      if (!maybeRoot) {
        root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
      } else {
        root3 = maybeRoot;
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(root3);
            originalCallback.call(instance);
          };
        }
        updateContainer(children, root3, parentComponent, callback);
      }
      return getPublicRootInstance(root3);
    }
    function findDOMNode(componentOrElement) {
      {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
          var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
          if (!warnedAboutRefsInRender) {
            error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
          }
          owner.stateNode._warnedAboutRefsInRender = true;
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (componentOrElement.nodeType === ELEMENT_NODE2) {
        return componentOrElement;
      }
      {
        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
      }
    }
    function hydrate(element, container, callback) {
      {
        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
      {
        error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      {
        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(containerNode)) {
        throw new Error("Target container is not a DOM element.");
      }
      if (parentComponent == null || !has(parentComponent)) {
        throw new Error("parentComponent must be a valid React Component");
      }
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
      if (!isValidContainerLegacy(container)) {
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        }
      }
      if (container._reactRootContainer) {
        {
          var rootEl = getReactRootElementInContainer(container);
          var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
          if (renderedByDifferentReact) {
            error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
          }
        }
        flushSync(function() {
          legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
            container._reactRootContainer = null;
            unmarkContainerAsRoot(container);
          });
        });
        return true;
      } else {
        {
          var _rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
          var isContainerReactRoot = container.nodeType === ELEMENT_NODE2 && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
          if (hasNonRootReactChild) {
            error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
          }
        }
        return false;
      }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    {
      if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
        error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      }
    }
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!isValidContainer(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
      usingClientEntryPoint: false,
      Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
    };
    function createRoot$1(container, options2) {
      {
        if (!Internals.usingClientEntryPoint && true) {
          error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        }
      }
      return createRoot(container, options2);
    }
    function hydrateRoot$1(container, initialChildren, options2) {
      {
        if (!Internals.usingClientEntryPoint && true) {
          error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        }
      }
      return hydrateRoot(container, initialChildren, options2);
    }
    function flushSync$1(fn) {
      {
        if (isAlreadyRendering()) {
          error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        }
      }
      return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: "react-dom"
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
          var protocol = window.location.protocol;
          if (/^(https?|file):$/.test(protocol)) {
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
          }
        }
      }
    }
    reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    reactDom_development.createPortal = createPortal$1;
    reactDom_development.createRoot = createRoot$1;
    reactDom_development.findDOMNode = findDOMNode;
    reactDom_development.flushSync = flushSync$1;
    reactDom_development.hydrate = hydrate;
    reactDom_development.hydrateRoot = hydrateRoot$1;
    reactDom_development.render = render;
    reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
    reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
    reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    reactDom_development.version = ReactVersion;
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }
  })();
}
(function(module2) {
  {
    module2.exports = reactDom_development;
  }
})(reactDom);
var m = reactDom.exports;
{
  var i$1 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  client.createRoot = function(c2, o) {
    i$1.usingClientEntryPoint = true;
    try {
      return m.createRoot(c2, o);
    } finally {
      i$1.usingClientEntryPoint = false;
    }
  };
  client.hydrateRoot = function(c2, h, o) {
    i$1.usingClientEntryPoint = true;
    try {
      return m.hydrateRoot(c2, h, o);
    } finally {
      i$1.usingClientEntryPoint = false;
    }
  };
}
const css = '/*\r\n! tailwindcss v3.2.4 | MIT License | https://tailwindcss.com\r\n*/\r\n\r\n/*\r\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\r\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\r\n*/\r\n\r\n*,\r\n::before,\r\n::after {\r\n  box-sizing: border-box;\r\n  /* 1 */\r\n  border-width: 0;\r\n  /* 2 */\r\n  border-style: solid;\r\n  /* 2 */\r\n  border-color: #e5e7eb;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\n1. Use a consistent sensible line-height in all browsers.\r\n2. Prevent adjustments of font size after orientation changes in iOS.\r\n3. Use a more readable tab size.\r\n4. Use the user\'s configured `sans` font-family by default.\r\n5. Use the user\'s configured `sans` font-feature-settings by default.\r\n*/\r\n\r\nhtml {\r\n  line-height: 1.5;\r\n  /* 1 */\r\n  -webkit-text-size-adjust: 100%;\r\n  /* 2 */\r\n  -moz-tab-size: 4;\r\n  /* 3 */\r\n  -o-tab-size: 4;\r\n  tab-size: 4;\r\n  /* 3 */\r\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\r\n  /* 4 */\r\n  font-feature-settings: normal;\r\n  /* 5 */\r\n}\r\n\r\n/*\r\n1. Remove the margin in all browsers.\r\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\r\n*/\r\n\r\nbody {\r\n  margin: 0;\r\n  /* 1 */\r\n  line-height: inherit;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\n1. Add the correct height in Firefox.\r\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\r\n3. Ensure horizontal rules are visible by default.\r\n*/\r\n\r\nhr {\r\n  height: 0;\r\n  /* 1 */\r\n  color: inherit;\r\n  /* 2 */\r\n  border-top-width: 1px;\r\n  /* 3 */\r\n}\r\n\r\n/*\r\nAdd the correct text decoration in Chrome, Edge, and Safari.\r\n*/\r\n\r\nabbr:where([title]) {\r\n  -webkit-text-decoration: underline dotted;\r\n  text-decoration: underline dotted;\r\n}\r\n\r\n/*\r\nRemove the default font size and weight for headings.\r\n*/\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  font-size: inherit;\r\n  font-weight: inherit;\r\n}\r\n\r\n/*\r\nReset links to optimize for opt-in styling instead of opt-out.\r\n*/\r\n\r\na {\r\n  color: inherit;\r\n  text-decoration: inherit;\r\n}\r\n\r\n/*\r\nAdd the correct font weight in Edge and Safari.\r\n*/\r\n\r\nb,\r\nstrong {\r\n  font-weight: bolder;\r\n}\r\n\r\n/*\r\n1. Use the user\'s configured `mono` font family by default.\r\n2. Correct the odd `em` font sizing in all browsers.\r\n*/\r\n\r\ncode,\r\nkbd,\r\nsamp,\r\npre {\r\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\r\n  /* 1 */\r\n  font-size: 1em;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nAdd the correct font size in all browsers.\r\n*/\r\n\r\nsmall {\r\n  font-size: 80%;\r\n}\r\n\r\n/*\r\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\r\n*/\r\n\r\nsub,\r\nsup {\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  position: relative;\r\n  vertical-align: baseline;\r\n}\r\n\r\nsub {\r\n  bottom: -0.25em;\r\n}\r\n\r\nsup {\r\n  top: -0.5em;\r\n}\r\n\r\n/*\r\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\r\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\r\n3. Remove gaps between table borders by default.\r\n*/\r\n\r\ntable {\r\n  text-indent: 0;\r\n  /* 1 */\r\n  border-color: inherit;\r\n  /* 2 */\r\n  border-collapse: collapse;\r\n  /* 3 */\r\n}\r\n\r\n/*\r\n1. Change the font styles in all browsers.\r\n2. Remove the margin in Firefox and Safari.\r\n3. Remove default padding in all browsers.\r\n*/\r\n\r\nbutton,\r\ninput,\r\noptgroup,\r\nselect,\r\ntextarea {\r\n  font-family: inherit;\r\n  /* 1 */\r\n  font-size: 100%;\r\n  /* 1 */\r\n  font-weight: inherit;\r\n  /* 1 */\r\n  line-height: inherit;\r\n  /* 1 */\r\n  color: inherit;\r\n  /* 1 */\r\n  margin: 0;\r\n  /* 2 */\r\n  padding: 0;\r\n  /* 3 */\r\n}\r\n\r\n/*\r\nRemove the inheritance of text transform in Edge and Firefox.\r\n*/\r\n\r\nbutton,\r\nselect {\r\n  text-transform: none;\r\n}\r\n\r\n/*\r\n1. Correct the inability to style clickable types in iOS and Safari.\r\n2. Remove default button styles.\r\n*/\r\n\r\nbutton,\r\n[type=\'button\'],\r\n[type=\'reset\'],\r\n[type=\'submit\'] {\r\n  -webkit-appearance: button;\r\n  /* 1 */\r\n  background-color: transparent;\r\n  /* 2 */\r\n  background-image: none;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nUse the modern Firefox focus style for all focusable elements.\r\n*/\r\n\r\n:-moz-focusring {\r\n  outline: auto;\r\n}\r\n\r\n/*\r\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\r\n*/\r\n\r\n:-moz-ui-invalid {\r\n  box-shadow: none;\r\n}\r\n\r\n/*\r\nAdd the correct vertical alignment in Chrome and Firefox.\r\n*/\r\n\r\nprogress {\r\n  vertical-align: baseline;\r\n}\r\n\r\n/*\r\nCorrect the cursor style of increment and decrement buttons in Safari.\r\n*/\r\n\r\n::-webkit-inner-spin-button,\r\n::-webkit-outer-spin-button {\r\n  height: auto;\r\n}\r\n\r\n/*\r\n1. Correct the odd appearance in Chrome and Safari.\r\n2. Correct the outline style in Safari.\r\n*/\r\n\r\n[type=\'search\'] {\r\n  -webkit-appearance: textfield;\r\n  /* 1 */\r\n  outline-offset: -2px;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nRemove the inner padding in Chrome and Safari on macOS.\r\n*/\r\n\r\n::-webkit-search-decoration {\r\n  -webkit-appearance: none;\r\n}\r\n\r\n/*\r\n1. Correct the inability to style clickable types in iOS and Safari.\r\n2. Change font properties to `inherit` in Safari.\r\n*/\r\n\r\n::-webkit-file-upload-button {\r\n  -webkit-appearance: button;\r\n  /* 1 */\r\n  font: inherit;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nAdd the correct display in Chrome and Safari.\r\n*/\r\n\r\nsummary {\r\n  display: list-item;\r\n}\r\n\r\n/*\r\nRemoves the default spacing and border for appropriate elements.\r\n*/\r\n\r\nblockquote,\r\ndl,\r\ndd,\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6,\r\nhr,\r\nfigure,\r\np,\r\npre {\r\n  margin: 0;\r\n}\r\n\r\nfieldset {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nlegend {\r\n  padding: 0;\r\n}\r\n\r\nol,\r\nul,\r\nmenu {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n/*\r\nPrevent resizing textareas horizontally by default.\r\n*/\r\n\r\ntextarea {\r\n  resize: vertical;\r\n}\r\n\r\n/*\r\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\r\n2. Set the default placeholder color to the user\'s configured gray 400 color.\r\n*/\r\n\r\ninput::-moz-placeholder,\r\ntextarea::-moz-placeholder {\r\n  opacity: 1;\r\n  /* 1 */\r\n  color: #9ca3af;\r\n  /* 2 */\r\n}\r\n\r\ninput::placeholder,\r\ntextarea::placeholder {\r\n  opacity: 1;\r\n  /* 1 */\r\n  color: #9ca3af;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nSet the default cursor for buttons.\r\n*/\r\n\r\nbutton,\r\n[role="button"] {\r\n  cursor: pointer;\r\n}\r\n\r\n/*\r\nMake sure disabled buttons don\'t get the pointer cursor.\r\n*/\r\n\r\n:disabled {\r\n  cursor: default;\r\n}\r\n\r\n/*\r\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\r\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\r\n   This can trigger a poorly considered lint error in some tools but is included by design.\r\n*/\r\n\r\nimg,\r\nsvg,\r\nvideo,\r\ncanvas,\r\naudio,\r\niframe,\r\nembed,\r\nobject {\r\n  display: block;\r\n  /* 1 */\r\n  vertical-align: middle;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\r\n*/\r\n\r\nimg,\r\nvideo {\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n\r\n/* Make elements with the HTML hidden attribute stay hidden by default */\r\n\r\n[hidden] {\r\n  display: none;\r\n}\r\n\r\n.container {\r\n  width: 100%;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n  .container {\r\n    max-width: 640px;\r\n  }\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .container {\r\n    max-width: 768px;\r\n  }\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  .container {\r\n    max-width: 1024px;\r\n  }\r\n}\r\n\r\n@media (min-width: 1280px) {\r\n  .container {\r\n    max-width: 1280px;\r\n  }\r\n}\r\n\r\n@media (min-width: 1536px) {\r\n  .container {\r\n    max-width: 1536px;\r\n  }\r\n}\r\n\r\n.fixed {\r\n  position: fixed;\r\n}\r\n\r\n.absolute {\r\n  position: absolute;\r\n}\r\n\r\n.relative {\r\n  position: relative;\r\n}\r\n\r\n.top-0 {\r\n  top: 0px;\r\n}\r\n\r\n.bottom-0 {\r\n  bottom: 0px;\r\n}\r\n\r\n.left-0 {\r\n  left: 0px;\r\n}\r\n\r\n.right-0 {\r\n  right: 0px;\r\n}\r\n\r\n.z-10 {\r\n  z-index: 10;\r\n}\r\n\r\n.z-20 {\r\n  z-index: 20;\r\n}\r\n\r\n.flex {\r\n  display: flex;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.h-full {\r\n  height: 100%;\r\n}\r\n\r\n.h-32 {\r\n  height: 8rem;\r\n}\r\n\r\n.h-1\\/3 {\r\n  height: 33.333333%;\r\n}\r\n\r\n.w-full {\r\n  width: 100%;\r\n}\r\n\r\n.w-1\\/4 {\r\n  width: 25%;\r\n}\r\n\r\n.w-4\\/5 {\r\n  width: 80%;\r\n}\r\n\r\n.w-32 {\r\n  width: 8rem;\r\n}\r\n\r\n.w-1\\/3 {\r\n  width: 33.333333%;\r\n}\r\n\r\n.w-3\\/4 {\r\n  width: 75%;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.animate-spin {\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.cursor-pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.flex-col {\r\n  flex-direction: column;\r\n}\r\n\r\n.flex-wrap {\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.items-center {\r\n  align-items: center;\r\n}\r\n\r\n.justify-center {\r\n  justify-content: center;\r\n}\r\n\r\n.justify-between {\r\n  justify-content: space-between;\r\n}\r\n\r\n.justify-evenly {\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.gap-1 {\r\n  gap: 0.25rem;\r\n}\r\n\r\n.gap-2 {\r\n  gap: 0.5rem;\r\n}\r\n\r\n.gap-8 {\r\n  gap: 2rem;\r\n}\r\n\r\n.gap-3 {\r\n  gap: 0.75rem;\r\n}\r\n\r\n.overflow-auto {\r\n  overflow: auto;\r\n}\r\n\r\n.rounded {\r\n  border-radius: 0.25rem;\r\n}\r\n\r\n.rounded-full {\r\n  border-radius: 9999px;\r\n}\r\n\r\n.border {\r\n  border-width: 1px;\r\n}\r\n\r\n.border-2 {\r\n  border-width: 2px;\r\n}\r\n\r\n.border-8 {\r\n  border-width: 8px;\r\n}\r\n\r\n.p-3 {\r\n  padding: 0.75rem;\r\n}\r\n\r\n.p-4 {\r\n  padding: 1rem;\r\n}\r\n\r\n.p-0\\.5 {\r\n  padding: 0.125rem;\r\n}\r\n\r\n.p-0 {\r\n  padding: 0px;\r\n}\r\n\r\n.p-2 {\r\n  padding: 0.5rem;\r\n}\r\n\r\n.text-xl {\r\n  font-size: 1.25rem;\r\n  line-height: 1.75rem;\r\n}\r\n\r\n.text-2xl {\r\n  font-size: 1.5rem;\r\n  line-height: 2rem;\r\n}\r\n\r\n.font-bold {\r\n  font-weight: 700;\r\n}\r\n\r\n*::-webkit-scrollbar {\r\n  width: 8px;\r\n}\r\n\r\n*::-webkit-scrollbar-track {\r\n  box-shadow: inset 0 0 4px #fefefe;\r\n  border-radius: 4px;\r\n}\r\n\r\n*::-webkit-scrollbar-thumb {\r\n  background-color: #5d402d;\r\n  outline: 1px solid #5d402d;\r\n  border-radius: 4px;\r\n}\r\n\r\n:root {\r\n  font-family: Inter, Avenir, Helvetica, Arial, sans-serif;\r\n  color: rgba(255, 255, 255, 0.87);\r\n  background-color: #242424;\r\n  color-scheme: light dark;\r\n  font-synthesis: none;\r\n  text-rendering: optimizeLegibility;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  -webkit-text-size-adjust: 100%;\r\n}\r\n\r\n#root {\r\n  color: rgba(255, 255, 255, 0.87);\r\n  width: 100vw;\r\n  height: 100vh;\r\n  margin: 0;\r\n  border: 0;\r\n}\r\n\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: "Roboto", BlinkMacSystemFont, "Segoe UI", "Oxygen", "Ubuntu",\r\n    "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  height: 100%;\r\n  width: 100%;\r\n  background-color: black;\r\n}\r\n\r\nbody:before {\r\n  content: \'\';\r\n  background-repeat: repeat;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: -1;\r\n\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\r\n    monospace;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}';
function styleInject(css2, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css2 || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css2;
  } else {
    style.appendChild(document.createTextNode(css2));
  }
}
const DndContext = react.exports.createContext({
  dragDropManager: void 0
});
var jsxRuntime = { exports: {} };
var reactJsxRuntime_development = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
{
  (function() {
    var React2 = react.exports;
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format2) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format2, args);
        }
      }
    }
    function printWarning(level, format2, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format2 += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format2);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var enableScopeAPI = false;
    var enableCacheElement = false;
    var enableTransitionTracing = false;
    var enableLegacyHidden = false;
    var enableDebugTracing = false;
    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    }
    function isValidElementType(type) {
      if (typeof type === "string" || typeof type === "function") {
        return true;
      }
      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (typeof type === "object" && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
          return true;
        }
      }
      return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            try {
              return getComponentNameFromType(init2(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    var assign = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
          }
        }
        return "\n" + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c2 = controlLines.length - 1;
          while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
            c2--;
          }
          for (; s >= 1 && c2 >= 0; s--, c2--) {
            if (sampleLines[s] !== controlLines[c2]) {
              if (s !== 1 || c2 !== 1) {
                do {
                  s--;
                  c2--;
                  if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c2 >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error("Failed %s type: %s", location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray2(a) {
      return isArrayImpl(a);
    }
    function typeName(value2) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value2[Symbol.toStringTag] || value2.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value2) {
      {
        try {
          testStringCoercion(value2);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value2) {
      return "" + value2;
    }
    function checkKeyStringCoercion(value2) {
      {
        if (willCoercionThrow(value2)) {
          error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value2));
          return testStringCoercion(value2);
        }
      }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== void 0;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== void 0;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self2) {
      {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
    }
    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
    }
    var ReactElement = function(type, key, ref, self2, source, owner, props) {
      var element = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref,
        props,
        _owner: owner
      };
      {
        element._store = {};
        Object.defineProperty(element._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        Object.defineProperty(element, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self2
        });
        Object.defineProperty(element, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    function jsxDEV(type, config, maybeKey, source, self2) {
      {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        if (maybeKey !== void 0) {
          {
            checkKeyStringCoercion(maybeKey);
          }
          key = "" + maybeKey;
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = "" + config.key;
        }
        if (hasValidRef(config)) {
          ref = config.ref;
          warnIfStringRefCannotBeAutoConverted(config, self2);
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        if (key || ref) {
          var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function isValidElement(object) {
      {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
    }
    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
    }
    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
    }
    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    function validateChildKeys(node, parentType) {
      {
        if (typeof node !== "object") {
          return;
        }
        if (isArray2(node)) {
          for (var i2 = 0; i2 < node.length; i2++) {
            var child = node[i2];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
    }
    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === void 0 || typeof type === "string") {
          return;
        }
        var propTypes;
        if (typeof type === "function") {
          propTypes = type.propTypes;
        } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          var _name = getComponentNameFromType(type);
          error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
          error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
    }
    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i2 = 0; i2 < keys.length; i2++) {
          var key = keys[i2];
          if (key !== "children" && key !== "key") {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error("Invalid attribute `ref` supplied to `React.Fragment`.");
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
      {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendum(source);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray2(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self2);
        if (element == null) {
          return element;
        }
        if (validType) {
          var children = props.children;
          if (children !== void 0) {
            if (isStaticChildren) {
              if (isArray2(children)) {
                for (var i2 = 0; i2 < children.length; i2++) {
                  validateChildKeys(children[i2], type);
                }
                if (Object.freeze) {
                  Object.freeze(children);
                }
              } else {
                error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              }
            } else {
              validateChildKeys(children, type);
            }
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
    }
    function jsxWithValidationStatic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, true);
      }
    }
    function jsxWithValidationDynamic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, false);
      }
    }
    var jsx2 = jsxWithValidationDynamic;
    var jsxs2 = jsxWithValidationStatic;
    reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
    reactJsxRuntime_development.jsx = jsx2;
    reactJsxRuntime_development.jsxs = jsxs2;
  })();
}
(function(module2) {
  {
    module2.exports = reactJsxRuntime_development;
  }
})(jsxRuntime);
const Fragment = jsxRuntime.exports.Fragment;
const jsx = jsxRuntime.exports.jsx;
const jsxs = jsxRuntime.exports.jsxs;
var $$observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var randomString = function randomString2() {
  return Math.random().toString(36).substring(7).split("").join(".");
};
var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
function isPlainObject$1(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}
function miniKindOf(val) {
  if (val === void 0)
    return "undefined";
  if (val === null)
    return "null";
  var type = typeof val;
  switch (type) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function": {
      return type;
    }
  }
  if (Array.isArray(val))
    return "array";
  if (isDate$1(val))
    return "date";
  if (isError(val))
    return "error";
  var constructorName = ctorName(val);
  switch (constructorName) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return constructorName;
  }
  return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function ctorName(val) {
  return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isError(val) {
  return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate$1(val) {
  if (val instanceof Date)
    return true;
  return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function kindOf(val) {
  var typeOfVal = typeof val;
  {
    typeOfVal = miniKindOf(val);
  }
  return typeOfVal;
}
function createStore(reducer, preloadedState, enhancer) {
  var _ref2;
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error("Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
    }
    return enhancer(createStore)(reducer, preloadedState);
  }
  if (typeof reducer !== "function") {
    throw new Error("Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
  }
  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    }
    return currentState;
  }
  function subscribe(listener) {
    if (typeof listener !== "function") {
      throw new Error("Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
    }
    if (isDispatching) {
      throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    }
    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index2 = nextListeners.indexOf(listener);
      nextListeners.splice(index2, 1);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject$1(action)) {
      throw new Error("Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
    }
    if (typeof action.type === "undefined") {
      throw new Error('Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    }
    if (isDispatching) {
      throw new Error("Reducers may not dispatch actions.");
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    var listeners = currentListeners = nextListeners;
    for (var i2 = 0; i2 < listeners.length; i2++) {
      var listener = listeners[i2];
      listener();
    }
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error("Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
    }
    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  function observable() {
    var _ref;
    var outerSubscribe = subscribe;
    return _ref = {
      subscribe: function subscribe2(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error("Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
        }
        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }
        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      }
    }, _ref[$$observable] = function() {
      return this;
    }, _ref;
  }
  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch,
    subscribe,
    getState,
    replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}
function warning(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e) {
  }
}
function isCrushed() {
}
if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
  warning('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
}
function invariant(condition, format2, ...args) {
  if (isProduction()) {
    if (format2 === void 0) {
      throw new Error("invariant requires an error message argument");
    }
  }
  if (!condition) {
    let error;
    if (format2 === void 0) {
      error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
    } else {
      let argIndex = 0;
      error = new Error(format2.replace(/%s/g, function() {
        return args[argIndex++];
      }));
      error.name = "Invariant Violation";
    }
    error.framesToPop = 1;
    throw error;
  }
}
function isProduction() {
  return typeof process !== "undefined" && process.env["NODE_ENV"] === "production";
}
function get(obj, path, defaultValue) {
  return path.split(".").reduce(
    (a, c2) => a && a[c2] ? a[c2] : defaultValue || null,
    obj
  );
}
function without$1(items, item) {
  return items.filter(
    (i2) => i2 !== item
  );
}
function isObject$2(input) {
  return typeof input === "object";
}
function xor(itemsA, itemsB) {
  const map2 = /* @__PURE__ */ new Map();
  const insertItem = (item) => {
    map2.set(item, map2.has(item) ? map2.get(item) + 1 : 1);
  };
  itemsA.forEach(insertItem);
  itemsB.forEach(insertItem);
  const result = [];
  map2.forEach((count, key) => {
    if (count === 1) {
      result.push(key);
    }
  });
  return result;
}
function intersection(itemsA, itemsB) {
  return itemsA.filter(
    (t) => itemsB.indexOf(t) > -1
  );
}
const INIT_COORDS = "dnd-core/INIT_COORDS";
const BEGIN_DRAG = "dnd-core/BEGIN_DRAG";
const PUBLISH_DRAG_SOURCE = "dnd-core/PUBLISH_DRAG_SOURCE";
const HOVER = "dnd-core/HOVER";
const DROP = "dnd-core/DROP";
const END_DRAG = "dnd-core/END_DRAG";
function setClientOffset(clientOffset, sourceClientOffset) {
  return {
    type: INIT_COORDS,
    payload: {
      sourceClientOffset: sourceClientOffset || null,
      clientOffset: clientOffset || null
    }
  };
}
const ResetCoordinatesAction = {
  type: INIT_COORDS,
  payload: {
    clientOffset: null,
    sourceClientOffset: null
  }
};
function createBeginDrag(manager) {
  return function beginDrag(sourceIds = [], options = {
    publishSource: true
  }) {
    const { publishSource = true, clientOffset, getSourceClientOffset: getSourceClientOffset2 } = options;
    const monitor = manager.getMonitor();
    const registry2 = manager.getRegistry();
    manager.dispatch(setClientOffset(clientOffset));
    verifyInvariants$1(sourceIds, monitor, registry2);
    const sourceId = getDraggableSource(sourceIds, monitor);
    if (sourceId == null) {
      manager.dispatch(ResetCoordinatesAction);
      return;
    }
    let sourceClientOffset = null;
    if (clientOffset) {
      if (!getSourceClientOffset2) {
        throw new Error("getSourceClientOffset must be defined");
      }
      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset2);
      sourceClientOffset = getSourceClientOffset2(sourceId);
    }
    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));
    const source = registry2.getSource(sourceId);
    const item = source.beginDrag(monitor, sourceId);
    if (item == null) {
      return void 0;
    }
    verifyItemIsObject(item);
    registry2.pinSource(sourceId);
    const itemType = registry2.getSourceType(sourceId);
    return {
      type: BEGIN_DRAG,
      payload: {
        itemType,
        item,
        sourceId,
        clientOffset: clientOffset || null,
        sourceClientOffset: sourceClientOffset || null,
        isSourcePublic: !!publishSource
      }
    };
  };
}
function verifyInvariants$1(sourceIds, monitor, registry2) {
  invariant(!monitor.isDragging(), "Cannot call beginDrag while dragging.");
  sourceIds.forEach(function(sourceId) {
    invariant(registry2.getSource(sourceId), "Expected sourceIds to be registered.");
  });
}
function verifyGetSourceClientOffsetIsFunction(getSourceClientOffset2) {
  invariant(typeof getSourceClientOffset2 === "function", "When clientOffset is provided, getSourceClientOffset must be a function.");
}
function verifyItemIsObject(item) {
  invariant(isObject$2(item), "Item must be an object.");
}
function getDraggableSource(sourceIds, monitor) {
  let sourceId = null;
  for (let i2 = sourceIds.length - 1; i2 >= 0; i2--) {
    if (monitor.canDragSource(sourceIds[i2])) {
      sourceId = sourceIds[i2];
      break;
    }
  }
  return sourceId;
}
function _defineProperty$4(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _objectSpread$4(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _defineProperty$4(target, key, source[key]);
    });
  }
  return target;
}
function createDrop(manager) {
  return function drop(options = {}) {
    const monitor = manager.getMonitor();
    const registry2 = manager.getRegistry();
    verifyInvariants(monitor);
    const targetIds = getDroppableTargets(monitor);
    targetIds.forEach((targetId, index2) => {
      const dropResult = determineDropResult(targetId, index2, registry2, monitor);
      const action = {
        type: DROP,
        payload: {
          dropResult: _objectSpread$4({}, options, dropResult)
        }
      };
      manager.dispatch(action);
    });
  };
}
function verifyInvariants(monitor) {
  invariant(monitor.isDragging(), "Cannot call drop while not dragging.");
  invariant(!monitor.didDrop(), "Cannot call drop twice during one drag operation.");
}
function determineDropResult(targetId, index2, registry2, monitor) {
  const target = registry2.getTarget(targetId);
  let dropResult = target ? target.drop(monitor, targetId) : void 0;
  verifyDropResultType(dropResult);
  if (typeof dropResult === "undefined") {
    dropResult = index2 === 0 ? {} : monitor.getDropResult();
  }
  return dropResult;
}
function verifyDropResultType(dropResult) {
  invariant(typeof dropResult === "undefined" || isObject$2(dropResult), "Drop result must either be an object or undefined.");
}
function getDroppableTargets(monitor) {
  const targetIds = monitor.getTargetIds().filter(monitor.canDropOnTarget, monitor);
  targetIds.reverse();
  return targetIds;
}
function createEndDrag(manager) {
  return function endDrag() {
    const monitor = manager.getMonitor();
    const registry2 = manager.getRegistry();
    verifyIsDragging(monitor);
    const sourceId = monitor.getSourceId();
    if (sourceId != null) {
      const source = registry2.getSource(sourceId, true);
      source.endDrag(monitor, sourceId);
      registry2.unpinSource();
    }
    return {
      type: END_DRAG
    };
  };
}
function verifyIsDragging(monitor) {
  invariant(monitor.isDragging(), "Cannot call endDrag while not dragging.");
}
function matchesType(targetType, draggedItemType) {
  if (draggedItemType === null) {
    return targetType === null;
  }
  return Array.isArray(targetType) ? targetType.some(
    (t) => t === draggedItemType
  ) : targetType === draggedItemType;
}
function createHover(manager) {
  return function hover(targetIdsArg, { clientOffset } = {}) {
    verifyTargetIdsIsArray(targetIdsArg);
    const targetIds = targetIdsArg.slice(0);
    const monitor = manager.getMonitor();
    const registry2 = manager.getRegistry();
    const draggedItemType = monitor.getItemType();
    removeNonMatchingTargetIds(targetIds, registry2, draggedItemType);
    checkInvariants(targetIds, monitor, registry2);
    hoverAllTargets(targetIds, monitor, registry2);
    return {
      type: HOVER,
      payload: {
        targetIds,
        clientOffset: clientOffset || null
      }
    };
  };
}
function verifyTargetIdsIsArray(targetIdsArg) {
  invariant(Array.isArray(targetIdsArg), "Expected targetIds to be an array.");
}
function checkInvariants(targetIds, monitor, registry2) {
  invariant(monitor.isDragging(), "Cannot call hover while not dragging.");
  invariant(!monitor.didDrop(), "Cannot call hover after drop.");
  for (let i2 = 0; i2 < targetIds.length; i2++) {
    const targetId = targetIds[i2];
    invariant(targetIds.lastIndexOf(targetId) === i2, "Expected targetIds to be unique in the passed array.");
    const target = registry2.getTarget(targetId);
    invariant(target, "Expected targetIds to be registered.");
  }
}
function removeNonMatchingTargetIds(targetIds, registry2, draggedItemType) {
  for (let i2 = targetIds.length - 1; i2 >= 0; i2--) {
    const targetId = targetIds[i2];
    const targetType = registry2.getTargetType(targetId);
    if (!matchesType(targetType, draggedItemType)) {
      targetIds.splice(i2, 1);
    }
  }
}
function hoverAllTargets(targetIds, monitor, registry2) {
  targetIds.forEach(function(targetId) {
    const target = registry2.getTarget(targetId);
    target.hover(monitor, targetId);
  });
}
function createPublishDragSource(manager) {
  return function publishDragSource() {
    const monitor = manager.getMonitor();
    if (monitor.isDragging()) {
      return {
        type: PUBLISH_DRAG_SOURCE
      };
    }
    return;
  };
}
function createDragDropActions(manager) {
  return {
    beginDrag: createBeginDrag(manager),
    publishDragSource: createPublishDragSource(manager),
    hover: createHover(manager),
    drop: createDrop(manager),
    endDrag: createEndDrag(manager)
  };
}
class DragDropManagerImpl {
  receiveBackend(backend) {
    this.backend = backend;
  }
  getMonitor() {
    return this.monitor;
  }
  getBackend() {
    return this.backend;
  }
  getRegistry() {
    return this.monitor.registry;
  }
  getActions() {
    const manager = this;
    const { dispatch } = this.store;
    function bindActionCreator(actionCreator) {
      return (...args) => {
        const action = actionCreator.apply(manager, args);
        if (typeof action !== "undefined") {
          dispatch(action);
        }
      };
    }
    const actions = createDragDropActions(this);
    return Object.keys(actions).reduce((boundActions, key) => {
      const action = actions[key];
      boundActions[key] = bindActionCreator(action);
      return boundActions;
    }, {});
  }
  dispatch(action) {
    this.store.dispatch(action);
  }
  constructor(store, monitor) {
    this.isSetUp = false;
    this.handleRefCountChange = () => {
      const shouldSetUp = this.store.getState().refCount > 0;
      if (this.backend) {
        if (shouldSetUp && !this.isSetUp) {
          this.backend.setup();
          this.isSetUp = true;
        } else if (!shouldSetUp && this.isSetUp) {
          this.backend.teardown();
          this.isSetUp = false;
        }
      }
    };
    this.store = store;
    this.monitor = monitor;
    store.subscribe(this.handleRefCountChange);
  }
}
function add(a, b) {
  return {
    x: a.x + b.x,
    y: a.y + b.y
  };
}
function subtract(a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y
  };
}
function getSourceClientOffset(state) {
  const { clientOffset, initialClientOffset, initialSourceClientOffset } = state;
  if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {
    return null;
  }
  return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);
}
function getDifferenceFromInitialOffset(state) {
  const { clientOffset, initialClientOffset } = state;
  if (!clientOffset || !initialClientOffset) {
    return null;
  }
  return subtract(clientOffset, initialClientOffset);
}
const NONE = [];
const ALL = [];
NONE.__IS_NONE__ = true;
ALL.__IS_ALL__ = true;
function areDirty(dirtyIds, handlerIds) {
  if (dirtyIds === NONE) {
    return false;
  }
  if (dirtyIds === ALL || typeof handlerIds === "undefined") {
    return true;
  }
  const commonIds = intersection(handlerIds, dirtyIds);
  return commonIds.length > 0;
}
class DragDropMonitorImpl {
  subscribeToStateChange(listener, options = {}) {
    const { handlerIds } = options;
    invariant(typeof listener === "function", "listener must be a function.");
    invariant(typeof handlerIds === "undefined" || Array.isArray(handlerIds), "handlerIds, when specified, must be an array of strings.");
    let prevStateId = this.store.getState().stateId;
    const handleChange = () => {
      const state = this.store.getState();
      const currentStateId = state.stateId;
      try {
        const canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !areDirty(state.dirtyHandlerIds, handlerIds);
        if (!canSkipListener) {
          listener();
        }
      } finally {
        prevStateId = currentStateId;
      }
    };
    return this.store.subscribe(handleChange);
  }
  subscribeToOffsetChange(listener) {
    invariant(typeof listener === "function", "listener must be a function.");
    let previousState = this.store.getState().dragOffset;
    const handleChange = () => {
      const nextState = this.store.getState().dragOffset;
      if (nextState === previousState) {
        return;
      }
      previousState = nextState;
      listener();
    };
    return this.store.subscribe(handleChange);
  }
  canDragSource(sourceId) {
    if (!sourceId) {
      return false;
    }
    const source = this.registry.getSource(sourceId);
    invariant(source, `Expected to find a valid source. sourceId=${sourceId}`);
    if (this.isDragging()) {
      return false;
    }
    return source.canDrag(this, sourceId);
  }
  canDropOnTarget(targetId) {
    if (!targetId) {
      return false;
    }
    const target = this.registry.getTarget(targetId);
    invariant(target, `Expected to find a valid target. targetId=${targetId}`);
    if (!this.isDragging() || this.didDrop()) {
      return false;
    }
    const targetType = this.registry.getTargetType(targetId);
    const draggedItemType = this.getItemType();
    return matchesType(targetType, draggedItemType) && target.canDrop(this, targetId);
  }
  isDragging() {
    return Boolean(this.getItemType());
  }
  isDraggingSource(sourceId) {
    if (!sourceId) {
      return false;
    }
    const source = this.registry.getSource(sourceId, true);
    invariant(source, `Expected to find a valid source. sourceId=${sourceId}`);
    if (!this.isDragging() || !this.isSourcePublic()) {
      return false;
    }
    const sourceType = this.registry.getSourceType(sourceId);
    const draggedItemType = this.getItemType();
    if (sourceType !== draggedItemType) {
      return false;
    }
    return source.isDragging(this, sourceId);
  }
  isOverTarget(targetId, options = {
    shallow: false
  }) {
    if (!targetId) {
      return false;
    }
    const { shallow } = options;
    if (!this.isDragging()) {
      return false;
    }
    const targetType = this.registry.getTargetType(targetId);
    const draggedItemType = this.getItemType();
    if (draggedItemType && !matchesType(targetType, draggedItemType)) {
      return false;
    }
    const targetIds = this.getTargetIds();
    if (!targetIds.length) {
      return false;
    }
    const index2 = targetIds.indexOf(targetId);
    if (shallow) {
      return index2 === targetIds.length - 1;
    } else {
      return index2 > -1;
    }
  }
  getItemType() {
    return this.store.getState().dragOperation.itemType;
  }
  getItem() {
    return this.store.getState().dragOperation.item;
  }
  getSourceId() {
    return this.store.getState().dragOperation.sourceId;
  }
  getTargetIds() {
    return this.store.getState().dragOperation.targetIds;
  }
  getDropResult() {
    return this.store.getState().dragOperation.dropResult;
  }
  didDrop() {
    return this.store.getState().dragOperation.didDrop;
  }
  isSourcePublic() {
    return Boolean(this.store.getState().dragOperation.isSourcePublic);
  }
  getInitialClientOffset() {
    return this.store.getState().dragOffset.initialClientOffset;
  }
  getInitialSourceClientOffset() {
    return this.store.getState().dragOffset.initialSourceClientOffset;
  }
  getClientOffset() {
    return this.store.getState().dragOffset.clientOffset;
  }
  getSourceClientOffset() {
    return getSourceClientOffset(this.store.getState().dragOffset);
  }
  getDifferenceFromInitialOffset() {
    return getDifferenceFromInitialOffset(this.store.getState().dragOffset);
  }
  constructor(store, registry2) {
    this.store = store;
    this.registry = registry2;
  }
}
const scope = typeof global !== "undefined" ? global : self;
const BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
function makeRequestCallFromTimer(callback) {
  return function requestCall() {
    const timeoutHandle = setTimeout(handleTimer, 0);
    const intervalHandle = setInterval(handleTimer, 50);
    function handleTimer() {
      clearTimeout(timeoutHandle);
      clearInterval(intervalHandle);
      callback();
    }
  };
}
function makeRequestCallFromMutationObserver(callback) {
  let toggle = 1;
  const observer = new BrowserMutationObserver(callback);
  const node = document.createTextNode("");
  observer.observe(node, {
    characterData: true
  });
  return function requestCall() {
    toggle = -toggle;
    node.data = toggle;
  };
}
const makeRequestCall = typeof BrowserMutationObserver === "function" ? makeRequestCallFromMutationObserver : makeRequestCallFromTimer;
class AsapQueue {
  enqueueTask(task) {
    const { queue: q, requestFlush } = this;
    if (!q.length) {
      requestFlush();
      this.flushing = true;
    }
    q[q.length] = task;
  }
  constructor() {
    this.queue = [];
    this.pendingErrors = [];
    this.flushing = false;
    this.index = 0;
    this.capacity = 1024;
    this.flush = () => {
      const { queue: q } = this;
      while (this.index < q.length) {
        const currentIndex = this.index;
        this.index++;
        q[currentIndex].call();
        if (this.index > this.capacity) {
          for (let scan = 0, newLength = q.length - this.index; scan < newLength; scan++) {
            q[scan] = q[scan + this.index];
          }
          q.length -= this.index;
          this.index = 0;
        }
      }
      q.length = 0;
      this.index = 0;
      this.flushing = false;
    };
    this.registerPendingError = (err) => {
      this.pendingErrors.push(err);
      this.requestErrorThrow();
    };
    this.requestFlush = makeRequestCall(this.flush);
    this.requestErrorThrow = makeRequestCallFromTimer(() => {
      if (this.pendingErrors.length) {
        throw this.pendingErrors.shift();
      }
    });
  }
}
class RawTask {
  call() {
    try {
      this.task && this.task();
    } catch (error) {
      this.onError(error);
    } finally {
      this.task = null;
      this.release(this);
    }
  }
  constructor(onError, release) {
    this.onError = onError;
    this.release = release;
    this.task = null;
  }
}
class TaskFactory {
  create(task) {
    const tasks = this.freeTasks;
    const t1 = tasks.length ? tasks.pop() : new RawTask(
      this.onError,
      (t) => tasks[tasks.length] = t
    );
    t1.task = task;
    return t1;
  }
  constructor(onError) {
    this.onError = onError;
    this.freeTasks = [];
  }
}
const asapQueue = new AsapQueue();
const taskFactory = new TaskFactory(asapQueue.registerPendingError);
function asap(task) {
  asapQueue.enqueueTask(taskFactory.create(task));
}
const ADD_SOURCE = "dnd-core/ADD_SOURCE";
const ADD_TARGET = "dnd-core/ADD_TARGET";
const REMOVE_SOURCE = "dnd-core/REMOVE_SOURCE";
const REMOVE_TARGET = "dnd-core/REMOVE_TARGET";
function addSource(sourceId) {
  return {
    type: ADD_SOURCE,
    payload: {
      sourceId
    }
  };
}
function addTarget(targetId) {
  return {
    type: ADD_TARGET,
    payload: {
      targetId
    }
  };
}
function removeSource(sourceId) {
  return {
    type: REMOVE_SOURCE,
    payload: {
      sourceId
    }
  };
}
function removeTarget(targetId) {
  return {
    type: REMOVE_TARGET,
    payload: {
      targetId
    }
  };
}
function validateSourceContract(source) {
  invariant(typeof source.canDrag === "function", "Expected canDrag to be a function.");
  invariant(typeof source.beginDrag === "function", "Expected beginDrag to be a function.");
  invariant(typeof source.endDrag === "function", "Expected endDrag to be a function.");
}
function validateTargetContract(target) {
  invariant(typeof target.canDrop === "function", "Expected canDrop to be a function.");
  invariant(typeof target.hover === "function", "Expected hover to be a function.");
  invariant(typeof target.drop === "function", "Expected beginDrag to be a function.");
}
function validateType(type, allowArray) {
  if (allowArray && Array.isArray(type)) {
    type.forEach(
      (t) => validateType(t, false)
    );
    return;
  }
  invariant(typeof type === "string" || typeof type === "symbol", allowArray ? "Type can only be a string, a symbol, or an array of either." : "Type can only be a string or a symbol.");
}
var HandlerRole;
(function(HandlerRole2) {
  HandlerRole2["SOURCE"] = "SOURCE";
  HandlerRole2["TARGET"] = "TARGET";
})(HandlerRole || (HandlerRole = {}));
let nextUniqueId = 0;
function getNextUniqueId() {
  return nextUniqueId++;
}
function getNextHandlerId(role) {
  const id = getNextUniqueId().toString();
  switch (role) {
    case HandlerRole.SOURCE:
      return `S${id}`;
    case HandlerRole.TARGET:
      return `T${id}`;
    default:
      throw new Error(`Unknown Handler Role: ${role}`);
  }
}
function parseRoleFromHandlerId(handlerId) {
  switch (handlerId[0]) {
    case "S":
      return HandlerRole.SOURCE;
    case "T":
      return HandlerRole.TARGET;
    default:
      throw new Error(`Cannot parse handler ID: ${handlerId}`);
  }
}
function mapContainsValue(map2, searchValue) {
  const entries = map2.entries();
  let isDone = false;
  do {
    const { done, value: [, value2] } = entries.next();
    if (value2 === searchValue) {
      return true;
    }
    isDone = !!done;
  } while (!isDone);
  return false;
}
class HandlerRegistryImpl {
  addSource(type, source) {
    validateType(type);
    validateSourceContract(source);
    const sourceId = this.addHandler(HandlerRole.SOURCE, type, source);
    this.store.dispatch(addSource(sourceId));
    return sourceId;
  }
  addTarget(type, target) {
    validateType(type, true);
    validateTargetContract(target);
    const targetId = this.addHandler(HandlerRole.TARGET, type, target);
    this.store.dispatch(addTarget(targetId));
    return targetId;
  }
  containsHandler(handler) {
    return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);
  }
  getSource(sourceId, includePinned = false) {
    invariant(this.isSourceId(sourceId), "Expected a valid source ID.");
    const isPinned = includePinned && sourceId === this.pinnedSourceId;
    const source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);
    return source;
  }
  getTarget(targetId) {
    invariant(this.isTargetId(targetId), "Expected a valid target ID.");
    return this.dropTargets.get(targetId);
  }
  getSourceType(sourceId) {
    invariant(this.isSourceId(sourceId), "Expected a valid source ID.");
    return this.types.get(sourceId);
  }
  getTargetType(targetId) {
    invariant(this.isTargetId(targetId), "Expected a valid target ID.");
    return this.types.get(targetId);
  }
  isSourceId(handlerId) {
    const role = parseRoleFromHandlerId(handlerId);
    return role === HandlerRole.SOURCE;
  }
  isTargetId(handlerId) {
    const role = parseRoleFromHandlerId(handlerId);
    return role === HandlerRole.TARGET;
  }
  removeSource(sourceId) {
    invariant(this.getSource(sourceId), "Expected an existing source.");
    this.store.dispatch(removeSource(sourceId));
    asap(() => {
      this.dragSources.delete(sourceId);
      this.types.delete(sourceId);
    });
  }
  removeTarget(targetId) {
    invariant(this.getTarget(targetId), "Expected an existing target.");
    this.store.dispatch(removeTarget(targetId));
    this.dropTargets.delete(targetId);
    this.types.delete(targetId);
  }
  pinSource(sourceId) {
    const source = this.getSource(sourceId);
    invariant(source, "Expected an existing source.");
    this.pinnedSourceId = sourceId;
    this.pinnedSource = source;
  }
  unpinSource() {
    invariant(this.pinnedSource, "No source is pinned at the time.");
    this.pinnedSourceId = null;
    this.pinnedSource = null;
  }
  addHandler(role, type, handler) {
    const id = getNextHandlerId(role);
    this.types.set(id, type);
    if (role === HandlerRole.SOURCE) {
      this.dragSources.set(id, handler);
    } else if (role === HandlerRole.TARGET) {
      this.dropTargets.set(id, handler);
    }
    return id;
  }
  constructor(store) {
    this.types = /* @__PURE__ */ new Map();
    this.dragSources = /* @__PURE__ */ new Map();
    this.dropTargets = /* @__PURE__ */ new Map();
    this.pinnedSourceId = null;
    this.pinnedSource = null;
    this.store = store;
  }
}
const strictEquality = (a, b) => a === b;
function areCoordsEqual(offsetA, offsetB) {
  if (!offsetA && !offsetB) {
    return true;
  } else if (!offsetA || !offsetB) {
    return false;
  } else {
    return offsetA.x === offsetB.x && offsetA.y === offsetB.y;
  }
}
function areArraysEqual(a, b, isEqual = strictEquality) {
  if (a.length !== b.length) {
    return false;
  }
  for (let i2 = 0; i2 < a.length; ++i2) {
    if (!isEqual(a[i2], b[i2])) {
      return false;
    }
  }
  return true;
}
function reduce$5(_state = NONE, action) {
  switch (action.type) {
    case HOVER:
      break;
    case ADD_SOURCE:
    case ADD_TARGET:
    case REMOVE_TARGET:
    case REMOVE_SOURCE:
      return NONE;
    case BEGIN_DRAG:
    case PUBLISH_DRAG_SOURCE:
    case END_DRAG:
    case DROP:
    default:
      return ALL;
  }
  const { targetIds = [], prevTargetIds = [] } = action.payload;
  const result = xor(targetIds, prevTargetIds);
  const didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);
  if (!didChange) {
    return NONE;
  }
  const prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];
  const innermostTargetId = targetIds[targetIds.length - 1];
  if (prevInnermostTargetId !== innermostTargetId) {
    if (prevInnermostTargetId) {
      result.push(prevInnermostTargetId);
    }
    if (innermostTargetId) {
      result.push(innermostTargetId);
    }
  }
  return result;
}
function _defineProperty$3(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _objectSpread$3(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    });
  }
  return target;
}
const initialState$1 = {
  initialSourceClientOffset: null,
  initialClientOffset: null,
  clientOffset: null
};
function reduce$4(state = initialState$1, action) {
  const { payload } = action;
  switch (action.type) {
    case INIT_COORDS:
    case BEGIN_DRAG:
      return {
        initialSourceClientOffset: payload.sourceClientOffset,
        initialClientOffset: payload.clientOffset,
        clientOffset: payload.clientOffset
      };
    case HOVER:
      if (areCoordsEqual(state.clientOffset, payload.clientOffset)) {
        return state;
      }
      return _objectSpread$3({}, state, {
        clientOffset: payload.clientOffset
      });
    case END_DRAG:
    case DROP:
      return initialState$1;
    default:
      return state;
  }
}
function _defineProperty$2(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _objectSpread$2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _defineProperty$2(target, key, source[key]);
    });
  }
  return target;
}
const initialState = {
  itemType: null,
  item: null,
  sourceId: null,
  targetIds: [],
  dropResult: null,
  didDrop: false,
  isSourcePublic: null
};
function reduce$3(state = initialState, action) {
  const { payload } = action;
  switch (action.type) {
    case BEGIN_DRAG:
      return _objectSpread$2({}, state, {
        itemType: payload.itemType,
        item: payload.item,
        sourceId: payload.sourceId,
        isSourcePublic: payload.isSourcePublic,
        dropResult: null,
        didDrop: false
      });
    case PUBLISH_DRAG_SOURCE:
      return _objectSpread$2({}, state, {
        isSourcePublic: true
      });
    case HOVER:
      return _objectSpread$2({}, state, {
        targetIds: payload.targetIds
      });
    case REMOVE_TARGET:
      if (state.targetIds.indexOf(payload.targetId) === -1) {
        return state;
      }
      return _objectSpread$2({}, state, {
        targetIds: without$1(state.targetIds, payload.targetId)
      });
    case DROP:
      return _objectSpread$2({}, state, {
        dropResult: payload.dropResult,
        didDrop: true,
        targetIds: []
      });
    case END_DRAG:
      return _objectSpread$2({}, state, {
        itemType: null,
        item: null,
        sourceId: null,
        dropResult: null,
        didDrop: false,
        isSourcePublic: null,
        targetIds: []
      });
    default:
      return state;
  }
}
function reduce$2(state = 0, action) {
  switch (action.type) {
    case ADD_SOURCE:
    case ADD_TARGET:
      return state + 1;
    case REMOVE_SOURCE:
    case REMOVE_TARGET:
      return state - 1;
    default:
      return state;
  }
}
function reduce$1(state = 0) {
  return state + 1;
}
function _defineProperty$1(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _objectSpread$1(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    });
  }
  return target;
}
function reduce(state = {}, action) {
  return {
    dirtyHandlerIds: reduce$5(state.dirtyHandlerIds, {
      type: action.type,
      payload: _objectSpread$1({}, action.payload, {
        prevTargetIds: get(state, "dragOperation.targetIds", [])
      })
    }),
    dragOffset: reduce$4(state.dragOffset, action),
    refCount: reduce$2(state.refCount, action),
    dragOperation: reduce$3(state.dragOperation, action),
    stateId: reduce$1(state.stateId)
  };
}
function createDragDropManager(backendFactory, globalContext = void 0, backendOptions = {}, debugMode = false) {
  const store = makeStoreInstance(debugMode);
  const monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store));
  const manager = new DragDropManagerImpl(store, monitor);
  const backend = backendFactory(manager, globalContext, backendOptions);
  manager.receiveBackend(backend);
  return manager;
}
function makeStoreInstance(debugMode) {
  const reduxDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__;
  return createStore(reduce, debugMode && reduxDevTools && reduxDevTools({
    name: "dnd-core",
    instanceId: "dnd-core"
  }));
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key = sourceSymbolKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
let refCount = 0;
const INSTANCE_SYM = Symbol.for("__REACT_DND_CONTEXT_INSTANCE__");
var DndProvider = /* @__PURE__ */ react.exports.memo(function DndProvider2(_param) {
  var { children } = _param, props = _objectWithoutProperties(_param, [
    "children"
  ]);
  const [manager, isGlobalInstance] = getDndContextValue(props);
  react.exports.useEffect(() => {
    if (isGlobalInstance) {
      const context = getGlobalContext();
      ++refCount;
      return () => {
        if (--refCount === 0) {
          context[INSTANCE_SYM] = null;
        }
      };
    }
    return;
  }, []);
  return /* @__PURE__ */ jsx(DndContext.Provider, {
    value: manager,
    children
  });
});
function getDndContextValue(props) {
  if ("manager" in props) {
    const manager2 = {
      dragDropManager: props.manager
    };
    return [
      manager2,
      false
    ];
  }
  const manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);
  const isGlobalInstance = !props.context;
  return [
    manager,
    isGlobalInstance
  ];
}
function createSingletonDndContext(backend, context = getGlobalContext(), options, debugMode) {
  const ctx = context;
  if (!ctx[INSTANCE_SYM]) {
    ctx[INSTANCE_SYM] = {
      dragDropManager: createDragDropManager(backend, context, options, debugMode)
    };
  }
  return ctx[INSTANCE_SYM];
}
function getGlobalContext() {
  return typeof global !== "undefined" ? global : window;
}
var fastDeepEqual = function equal(a, b) {
  if (a === b)
    return true;
  if (a && b && typeof a == "object" && typeof b == "object") {
    if (a.constructor !== b.constructor)
      return false;
    var length, i2, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length)
        return false;
      for (i2 = length; i2-- !== 0; )
        if (!equal(a[i2], b[i2]))
          return false;
      return true;
    }
    if (a.constructor === RegExp)
      return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf)
      return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString)
      return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length)
      return false;
    for (i2 = length; i2-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(b, keys[i2]))
        return false;
    for (i2 = length; i2-- !== 0; ) {
      var key = keys[i2];
      if (!equal(a[key], b[key]))
        return false;
    }
    return true;
  }
  return a !== a && b !== b;
};
const useIsomorphicLayoutEffect = typeof window !== "undefined" ? react.exports.useLayoutEffect : react.exports.useEffect;
function useCollector(monitor, collect, onUpdate) {
  const [collected, setCollected] = react.exports.useState(
    () => collect(monitor)
  );
  const updateCollected = react.exports.useCallback(() => {
    const nextValue = collect(monitor);
    if (!fastDeepEqual(collected, nextValue)) {
      setCollected(nextValue);
      if (onUpdate) {
        onUpdate();
      }
    }
  }, [
    collected,
    monitor,
    onUpdate
  ]);
  useIsomorphicLayoutEffect(updateCollected);
  return [
    collected,
    updateCollected
  ];
}
function useMonitorOutput(monitor, collect, onCollect) {
  const [collected, updateCollected] = useCollector(monitor, collect, onCollect);
  useIsomorphicLayoutEffect(function subscribeToMonitorStateChange() {
    const handlerId = monitor.getHandlerId();
    if (handlerId == null) {
      return;
    }
    return monitor.subscribeToStateChange(updateCollected, {
      handlerIds: [
        handlerId
      ]
    });
  }, [
    monitor,
    updateCollected
  ]);
  return collected;
}
function useCollectedProps(collector, monitor, connector) {
  return useMonitorOutput(
    monitor,
    collector || (() => ({})),
    () => connector.reconnect()
  );
}
function useOptionalFactory(arg, deps) {
  const memoDeps = [
    ...deps || []
  ];
  if (deps == null && typeof arg !== "function") {
    memoDeps.push(arg);
  }
  return react.exports.useMemo(() => {
    return typeof arg === "function" ? arg() : arg;
  }, memoDeps);
}
function useConnectDragSource(connector) {
  return react.exports.useMemo(
    () => connector.hooks.dragSource(),
    [
      connector
    ]
  );
}
function useConnectDragPreview(connector) {
  return react.exports.useMemo(
    () => connector.hooks.dragPreview(),
    [
      connector
    ]
  );
}
let isCallingCanDrag = false;
let isCallingIsDragging = false;
class DragSourceMonitorImpl {
  receiveHandlerId(sourceId) {
    this.sourceId = sourceId;
  }
  getHandlerId() {
    return this.sourceId;
  }
  canDrag() {
    invariant(!isCallingCanDrag, "You may not call monitor.canDrag() inside your canDrag() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");
    try {
      isCallingCanDrag = true;
      return this.internalMonitor.canDragSource(this.sourceId);
    } finally {
      isCallingCanDrag = false;
    }
  }
  isDragging() {
    if (!this.sourceId) {
      return false;
    }
    invariant(!isCallingIsDragging, "You may not call monitor.isDragging() inside your isDragging() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");
    try {
      isCallingIsDragging = true;
      return this.internalMonitor.isDraggingSource(this.sourceId);
    } finally {
      isCallingIsDragging = false;
    }
  }
  subscribeToStateChange(listener, options) {
    return this.internalMonitor.subscribeToStateChange(listener, options);
  }
  isDraggingSource(sourceId) {
    return this.internalMonitor.isDraggingSource(sourceId);
  }
  isOverTarget(targetId, options) {
    return this.internalMonitor.isOverTarget(targetId, options);
  }
  getTargetIds() {
    return this.internalMonitor.getTargetIds();
  }
  isSourcePublic() {
    return this.internalMonitor.isSourcePublic();
  }
  getSourceId() {
    return this.internalMonitor.getSourceId();
  }
  subscribeToOffsetChange(listener) {
    return this.internalMonitor.subscribeToOffsetChange(listener);
  }
  canDragSource(sourceId) {
    return this.internalMonitor.canDragSource(sourceId);
  }
  canDropOnTarget(targetId) {
    return this.internalMonitor.canDropOnTarget(targetId);
  }
  getItemType() {
    return this.internalMonitor.getItemType();
  }
  getItem() {
    return this.internalMonitor.getItem();
  }
  getDropResult() {
    return this.internalMonitor.getDropResult();
  }
  didDrop() {
    return this.internalMonitor.didDrop();
  }
  getInitialClientOffset() {
    return this.internalMonitor.getInitialClientOffset();
  }
  getInitialSourceClientOffset() {
    return this.internalMonitor.getInitialSourceClientOffset();
  }
  getSourceClientOffset() {
    return this.internalMonitor.getSourceClientOffset();
  }
  getClientOffset() {
    return this.internalMonitor.getClientOffset();
  }
  getDifferenceFromInitialOffset() {
    return this.internalMonitor.getDifferenceFromInitialOffset();
  }
  constructor(manager) {
    this.sourceId = null;
    this.internalMonitor = manager.getMonitor();
  }
}
let isCallingCanDrop = false;
class DropTargetMonitorImpl {
  receiveHandlerId(targetId) {
    this.targetId = targetId;
  }
  getHandlerId() {
    return this.targetId;
  }
  subscribeToStateChange(listener, options) {
    return this.internalMonitor.subscribeToStateChange(listener, options);
  }
  canDrop() {
    if (!this.targetId) {
      return false;
    }
    invariant(!isCallingCanDrop, "You may not call monitor.canDrop() inside your canDrop() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor");
    try {
      isCallingCanDrop = true;
      return this.internalMonitor.canDropOnTarget(this.targetId);
    } finally {
      isCallingCanDrop = false;
    }
  }
  isOver(options) {
    if (!this.targetId) {
      return false;
    }
    return this.internalMonitor.isOverTarget(this.targetId, options);
  }
  getItemType() {
    return this.internalMonitor.getItemType();
  }
  getItem() {
    return this.internalMonitor.getItem();
  }
  getDropResult() {
    return this.internalMonitor.getDropResult();
  }
  didDrop() {
    return this.internalMonitor.didDrop();
  }
  getInitialClientOffset() {
    return this.internalMonitor.getInitialClientOffset();
  }
  getInitialSourceClientOffset() {
    return this.internalMonitor.getInitialSourceClientOffset();
  }
  getSourceClientOffset() {
    return this.internalMonitor.getSourceClientOffset();
  }
  getClientOffset() {
    return this.internalMonitor.getClientOffset();
  }
  getDifferenceFromInitialOffset() {
    return this.internalMonitor.getDifferenceFromInitialOffset();
  }
  constructor(manager) {
    this.targetId = null;
    this.internalMonitor = manager.getMonitor();
  }
}
function registerTarget(type, target, manager) {
  const registry2 = manager.getRegistry();
  const targetId = registry2.addTarget(type, target);
  return [
    targetId,
    () => registry2.removeTarget(targetId)
  ];
}
function registerSource(type, source, manager) {
  const registry2 = manager.getRegistry();
  const sourceId = registry2.addSource(type, source);
  return [
    sourceId,
    () => registry2.removeSource(sourceId)
  ];
}
function shallowEqual(objA, objB, compare, compareContext) {
  let compareResult = compare ? compare.call(compareContext, objA, objB) : void 0;
  if (compareResult !== void 0) {
    return !!compareResult;
  }
  if (objA === objB) {
    return true;
  }
  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }
  const keysA = Object.keys(objA);
  const keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  const bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
  for (let idx = 0; idx < keysA.length; idx++) {
    const key = keysA[idx];
    if (!bHasOwnProperty(key)) {
      return false;
    }
    const valueA = objA[key];
    const valueB = objB[key];
    compareResult = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
    if (compareResult === false || compareResult === void 0 && valueA !== valueB) {
      return false;
    }
  }
  return true;
}
function isRef(obj) {
  return obj !== null && typeof obj === "object" && Object.prototype.hasOwnProperty.call(obj, "current");
}
function throwIfCompositeComponentElement(element) {
  if (typeof element.type === "string") {
    return;
  }
  const displayName = element.type.displayName || element.type.name || "the component";
  throw new Error(`Only native element nodes can now be passed to React DnD connectors.You can either wrap ${displayName} into a <div>, or turn it into a drag source or a drop target itself.`);
}
function wrapHookToRecognizeElement(hook) {
  return (elementOrNode = null, options = null) => {
    if (!react.exports.isValidElement(elementOrNode)) {
      const node = elementOrNode;
      hook(node, options);
      return node;
    }
    const element = elementOrNode;
    throwIfCompositeComponentElement(element);
    const ref = options ? (node) => hook(node, options) : hook;
    return cloneWithRef(element, ref);
  };
}
function wrapConnectorHooks(hooks) {
  const wrappedHooks = {};
  Object.keys(hooks).forEach((key) => {
    const hook = hooks[key];
    if (key.endsWith("Ref")) {
      wrappedHooks[key] = hooks[key];
    } else {
      const wrappedHook = wrapHookToRecognizeElement(hook);
      wrappedHooks[key] = () => wrappedHook;
    }
  });
  return wrappedHooks;
}
function setRef(ref, node) {
  if (typeof ref === "function") {
    ref(node);
  } else {
    ref.current = node;
  }
}
function cloneWithRef(element, newRef) {
  const previousRef = element.ref;
  invariant(typeof previousRef !== "string", "Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs");
  if (!previousRef) {
    return react.exports.cloneElement(element, {
      ref: newRef
    });
  } else {
    return react.exports.cloneElement(element, {
      ref: (node) => {
        setRef(previousRef, node);
        setRef(newRef, node);
      }
    });
  }
}
class SourceConnector {
  receiveHandlerId(newHandlerId) {
    if (this.handlerId === newHandlerId) {
      return;
    }
    this.handlerId = newHandlerId;
    this.reconnect();
  }
  get connectTarget() {
    return this.dragSource;
  }
  get dragSourceOptions() {
    return this.dragSourceOptionsInternal;
  }
  set dragSourceOptions(options) {
    this.dragSourceOptionsInternal = options;
  }
  get dragPreviewOptions() {
    return this.dragPreviewOptionsInternal;
  }
  set dragPreviewOptions(options) {
    this.dragPreviewOptionsInternal = options;
  }
  reconnect() {
    const didChange = this.reconnectDragSource();
    this.reconnectDragPreview(didChange);
  }
  reconnectDragSource() {
    const dragSource = this.dragSource;
    const didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();
    if (didChange) {
      this.disconnectDragSource();
    }
    if (!this.handlerId) {
      return didChange;
    }
    if (!dragSource) {
      this.lastConnectedDragSource = dragSource;
      return didChange;
    }
    if (didChange) {
      this.lastConnectedHandlerId = this.handlerId;
      this.lastConnectedDragSource = dragSource;
      this.lastConnectedDragSourceOptions = this.dragSourceOptions;
      this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);
    }
    return didChange;
  }
  reconnectDragPreview(forceDidChange = false) {
    const dragPreview = this.dragPreview;
    const didChange = forceDidChange || this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();
    if (didChange) {
      this.disconnectDragPreview();
    }
    if (!this.handlerId) {
      return;
    }
    if (!dragPreview) {
      this.lastConnectedDragPreview = dragPreview;
      return;
    }
    if (didChange) {
      this.lastConnectedHandlerId = this.handlerId;
      this.lastConnectedDragPreview = dragPreview;
      this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;
      this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);
    }
  }
  didHandlerIdChange() {
    return this.lastConnectedHandlerId !== this.handlerId;
  }
  didConnectedDragSourceChange() {
    return this.lastConnectedDragSource !== this.dragSource;
  }
  didConnectedDragPreviewChange() {
    return this.lastConnectedDragPreview !== this.dragPreview;
  }
  didDragSourceOptionsChange() {
    return !shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);
  }
  didDragPreviewOptionsChange() {
    return !shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);
  }
  disconnectDragSource() {
    if (this.dragSourceUnsubscribe) {
      this.dragSourceUnsubscribe();
      this.dragSourceUnsubscribe = void 0;
    }
  }
  disconnectDragPreview() {
    if (this.dragPreviewUnsubscribe) {
      this.dragPreviewUnsubscribe();
      this.dragPreviewUnsubscribe = void 0;
      this.dragPreviewNode = null;
      this.dragPreviewRef = null;
    }
  }
  get dragSource() {
    return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;
  }
  get dragPreview() {
    return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;
  }
  clearDragSource() {
    this.dragSourceNode = null;
    this.dragSourceRef = null;
  }
  clearDragPreview() {
    this.dragPreviewNode = null;
    this.dragPreviewRef = null;
  }
  constructor(backend) {
    this.hooks = wrapConnectorHooks({
      dragSource: (node, options) => {
        this.clearDragSource();
        this.dragSourceOptions = options || null;
        if (isRef(node)) {
          this.dragSourceRef = node;
        } else {
          this.dragSourceNode = node;
        }
        this.reconnectDragSource();
      },
      dragPreview: (node, options) => {
        this.clearDragPreview();
        this.dragPreviewOptions = options || null;
        if (isRef(node)) {
          this.dragPreviewRef = node;
        } else {
          this.dragPreviewNode = node;
        }
        this.reconnectDragPreview();
      }
    });
    this.handlerId = null;
    this.dragSourceRef = null;
    this.dragSourceOptionsInternal = null;
    this.dragPreviewRef = null;
    this.dragPreviewOptionsInternal = null;
    this.lastConnectedHandlerId = null;
    this.lastConnectedDragSource = null;
    this.lastConnectedDragSourceOptions = null;
    this.lastConnectedDragPreview = null;
    this.lastConnectedDragPreviewOptions = null;
    this.backend = backend;
  }
}
class TargetConnector {
  get connectTarget() {
    return this.dropTarget;
  }
  reconnect() {
    const didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();
    if (didChange) {
      this.disconnectDropTarget();
    }
    const dropTarget = this.dropTarget;
    if (!this.handlerId) {
      return;
    }
    if (!dropTarget) {
      this.lastConnectedDropTarget = dropTarget;
      return;
    }
    if (didChange) {
      this.lastConnectedHandlerId = this.handlerId;
      this.lastConnectedDropTarget = dropTarget;
      this.lastConnectedDropTargetOptions = this.dropTargetOptions;
      this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);
    }
  }
  receiveHandlerId(newHandlerId) {
    if (newHandlerId === this.handlerId) {
      return;
    }
    this.handlerId = newHandlerId;
    this.reconnect();
  }
  get dropTargetOptions() {
    return this.dropTargetOptionsInternal;
  }
  set dropTargetOptions(options) {
    this.dropTargetOptionsInternal = options;
  }
  didHandlerIdChange() {
    return this.lastConnectedHandlerId !== this.handlerId;
  }
  didDropTargetChange() {
    return this.lastConnectedDropTarget !== this.dropTarget;
  }
  didOptionsChange() {
    return !shallowEqual(this.lastConnectedDropTargetOptions, this.dropTargetOptions);
  }
  disconnectDropTarget() {
    if (this.unsubscribeDropTarget) {
      this.unsubscribeDropTarget();
      this.unsubscribeDropTarget = void 0;
    }
  }
  get dropTarget() {
    return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;
  }
  clearDropTarget() {
    this.dropTargetRef = null;
    this.dropTargetNode = null;
  }
  constructor(backend) {
    this.hooks = wrapConnectorHooks({
      dropTarget: (node, options) => {
        this.clearDropTarget();
        this.dropTargetOptions = options;
        if (isRef(node)) {
          this.dropTargetRef = node;
        } else {
          this.dropTargetNode = node;
        }
        this.reconnect();
      }
    });
    this.handlerId = null;
    this.dropTargetRef = null;
    this.dropTargetOptionsInternal = null;
    this.lastConnectedHandlerId = null;
    this.lastConnectedDropTarget = null;
    this.lastConnectedDropTargetOptions = null;
    this.backend = backend;
  }
}
function useDragDropManager() {
  const { dragDropManager } = react.exports.useContext(DndContext);
  invariant(dragDropManager != null, "Expected drag drop context");
  return dragDropManager;
}
function useDragSourceConnector(dragSourceOptions, dragPreviewOptions) {
  const manager = useDragDropManager();
  const connector = react.exports.useMemo(
    () => new SourceConnector(manager.getBackend()),
    [
      manager
    ]
  );
  useIsomorphicLayoutEffect(() => {
    connector.dragSourceOptions = dragSourceOptions || null;
    connector.reconnect();
    return () => connector.disconnectDragSource();
  }, [
    connector,
    dragSourceOptions
  ]);
  useIsomorphicLayoutEffect(() => {
    connector.dragPreviewOptions = dragPreviewOptions || null;
    connector.reconnect();
    return () => connector.disconnectDragPreview();
  }, [
    connector,
    dragPreviewOptions
  ]);
  return connector;
}
function useDragSourceMonitor() {
  const manager = useDragDropManager();
  return react.exports.useMemo(
    () => new DragSourceMonitorImpl(manager),
    [
      manager
    ]
  );
}
class DragSourceImpl {
  beginDrag() {
    const spec = this.spec;
    const monitor = this.monitor;
    let result = null;
    if (typeof spec.item === "object") {
      result = spec.item;
    } else if (typeof spec.item === "function") {
      result = spec.item(monitor);
    } else {
      result = {};
    }
    return result !== null && result !== void 0 ? result : null;
  }
  canDrag() {
    const spec = this.spec;
    const monitor = this.monitor;
    if (typeof spec.canDrag === "boolean") {
      return spec.canDrag;
    } else if (typeof spec.canDrag === "function") {
      return spec.canDrag(monitor);
    } else {
      return true;
    }
  }
  isDragging(globalMonitor, target) {
    const spec = this.spec;
    const monitor = this.monitor;
    const { isDragging } = spec;
    return isDragging ? isDragging(monitor) : target === globalMonitor.getSourceId();
  }
  endDrag() {
    const spec = this.spec;
    const monitor = this.monitor;
    const connector = this.connector;
    const { end } = spec;
    if (end) {
      end(monitor.getItem(), monitor);
    }
    connector.reconnect();
  }
  constructor(spec, monitor, connector) {
    this.spec = spec;
    this.monitor = monitor;
    this.connector = connector;
  }
}
function useDragSource(spec, monitor, connector) {
  const handler = react.exports.useMemo(
    () => new DragSourceImpl(spec, monitor, connector),
    [
      monitor,
      connector
    ]
  );
  react.exports.useEffect(() => {
    handler.spec = spec;
  }, [
    spec
  ]);
  return handler;
}
function useDragType(spec) {
  return react.exports.useMemo(() => {
    const result = spec.type;
    invariant(result != null, "spec.type must be defined");
    return result;
  }, [
    spec
  ]);
}
function useRegisteredDragSource(spec, monitor, connector) {
  const manager = useDragDropManager();
  const handler = useDragSource(spec, monitor, connector);
  const itemType = useDragType(spec);
  useIsomorphicLayoutEffect(function registerDragSource() {
    if (itemType != null) {
      const [handlerId, unregister] = registerSource(itemType, handler, manager);
      monitor.receiveHandlerId(handlerId);
      connector.receiveHandlerId(handlerId);
      return unregister;
    }
    return;
  }, [
    manager,
    monitor,
    connector,
    handler,
    itemType
  ]);
}
function useDrag(specArg, deps) {
  const spec = useOptionalFactory(specArg, deps);
  invariant(!spec.begin, `useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)`);
  const monitor = useDragSourceMonitor();
  const connector = useDragSourceConnector(spec.options, spec.previewOptions);
  useRegisteredDragSource(spec, monitor, connector);
  return [
    useCollectedProps(spec.collect, monitor, connector),
    useConnectDragSource(connector),
    useConnectDragPreview(connector)
  ];
}
function useConnectDropTarget(connector) {
  return react.exports.useMemo(
    () => connector.hooks.dropTarget(),
    [
      connector
    ]
  );
}
function useDropTargetConnector(options) {
  const manager = useDragDropManager();
  const connector = react.exports.useMemo(
    () => new TargetConnector(manager.getBackend()),
    [
      manager
    ]
  );
  useIsomorphicLayoutEffect(() => {
    connector.dropTargetOptions = options || null;
    connector.reconnect();
    return () => connector.disconnectDropTarget();
  }, [
    options
  ]);
  return connector;
}
function useDropTargetMonitor() {
  const manager = useDragDropManager();
  return react.exports.useMemo(
    () => new DropTargetMonitorImpl(manager),
    [
      manager
    ]
  );
}
function useAccept(spec) {
  const { accept } = spec;
  return react.exports.useMemo(() => {
    invariant(spec.accept != null, "accept must be defined");
    return Array.isArray(accept) ? accept : [
      accept
    ];
  }, [
    accept
  ]);
}
class DropTargetImpl {
  canDrop() {
    const spec = this.spec;
    const monitor = this.monitor;
    return spec.canDrop ? spec.canDrop(monitor.getItem(), monitor) : true;
  }
  hover() {
    const spec = this.spec;
    const monitor = this.monitor;
    if (spec.hover) {
      spec.hover(monitor.getItem(), monitor);
    }
  }
  drop() {
    const spec = this.spec;
    const monitor = this.monitor;
    if (spec.drop) {
      return spec.drop(monitor.getItem(), monitor);
    }
    return;
  }
  constructor(spec, monitor) {
    this.spec = spec;
    this.monitor = monitor;
  }
}
function useDropTarget(spec, monitor) {
  const dropTarget = react.exports.useMemo(
    () => new DropTargetImpl(spec, monitor),
    [
      monitor
    ]
  );
  react.exports.useEffect(() => {
    dropTarget.spec = spec;
  }, [
    spec
  ]);
  return dropTarget;
}
function useRegisteredDropTarget(spec, monitor, connector) {
  const manager = useDragDropManager();
  const dropTarget = useDropTarget(spec, monitor);
  const accept = useAccept(spec);
  useIsomorphicLayoutEffect(function registerDropTarget() {
    const [handlerId, unregister] = registerTarget(accept, dropTarget, manager);
    monitor.receiveHandlerId(handlerId);
    connector.receiveHandlerId(handlerId);
    return unregister;
  }, [
    manager,
    monitor,
    dropTarget,
    connector,
    accept.map(
      (a) => a.toString()
    ).join("|")
  ]);
}
function useDrop(specArg, deps) {
  const spec = useOptionalFactory(specArg, deps);
  const monitor = useDropTargetMonitor();
  const connector = useDropTargetConnector(spec.options);
  useRegisteredDropTarget(spec, monitor, connector);
  return [
    useCollectedProps(spec.collect, monitor, connector),
    useConnectDropTarget(connector)
  ];
}
function memoize(fn) {
  let result = null;
  const memoized = () => {
    if (result == null) {
      result = fn();
    }
    return result;
  };
  return memoized;
}
function without(items, item) {
  return items.filter(
    (i2) => i2 !== item
  );
}
function union(itemsA, itemsB) {
  const set = /* @__PURE__ */ new Set();
  const insertItem = (item) => set.add(item);
  itemsA.forEach(insertItem);
  itemsB.forEach(insertItem);
  const result = [];
  set.forEach(
    (key) => result.push(key)
  );
  return result;
}
class EnterLeaveCounter {
  enter(enteringNode) {
    const previousLength = this.entered.length;
    const isNodeEntered = (node) => this.isNodeInDocument(node) && (!node.contains || node.contains(enteringNode));
    this.entered = union(this.entered.filter(isNodeEntered), [
      enteringNode
    ]);
    return previousLength === 0 && this.entered.length > 0;
  }
  leave(leavingNode) {
    const previousLength = this.entered.length;
    this.entered = without(this.entered.filter(this.isNodeInDocument), leavingNode);
    return previousLength > 0 && this.entered.length === 0;
  }
  reset() {
    this.entered = [];
  }
  constructor(isNodeInDocument) {
    this.entered = [];
    this.isNodeInDocument = isNodeInDocument;
  }
}
class NativeDragSource {
  initializeExposedProperties() {
    Object.keys(this.config.exposeProperties).forEach((property) => {
      Object.defineProperty(this.item, property, {
        configurable: true,
        enumerable: true,
        get() {
          console.warn(`Browser doesn't allow reading "${property}" until the drop event.`);
          return null;
        }
      });
    });
  }
  loadDataTransfer(dataTransfer) {
    if (dataTransfer) {
      const newProperties = {};
      Object.keys(this.config.exposeProperties).forEach((property) => {
        const propertyFn = this.config.exposeProperties[property];
        if (propertyFn != null) {
          newProperties[property] = {
            value: propertyFn(dataTransfer, this.config.matchesTypes),
            configurable: true,
            enumerable: true
          };
        }
      });
      Object.defineProperties(this.item, newProperties);
    }
  }
  canDrag() {
    return true;
  }
  beginDrag() {
    return this.item;
  }
  isDragging(monitor, handle) {
    return handle === monitor.getSourceId();
  }
  endDrag() {
  }
  constructor(config) {
    this.config = config;
    this.item = {};
    this.initializeExposedProperties();
  }
}
const FILE = "__NATIVE_FILE__";
const URL$4 = "__NATIVE_URL__";
const TEXT = "__NATIVE_TEXT__";
const HTML = "__NATIVE_HTML__";
const NativeTypes = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  FILE,
  URL: URL$4,
  TEXT,
  HTML
}, Symbol.toStringTag, { value: "Module" }));
function getDataFromDataTransfer(dataTransfer, typesToTry, defaultValue) {
  const result = typesToTry.reduce(
    (resultSoFar, typeToTry) => resultSoFar || dataTransfer.getData(typeToTry),
    ""
  );
  return result != null ? result : defaultValue;
}
const nativeTypesConfig = {
  [FILE]: {
    exposeProperties: {
      files: (dataTransfer) => Array.prototype.slice.call(dataTransfer.files),
      items: (dataTransfer) => dataTransfer.items,
      dataTransfer: (dataTransfer) => dataTransfer
    },
    matchesTypes: [
      "Files"
    ]
  },
  [HTML]: {
    exposeProperties: {
      html: (dataTransfer, matchesTypes) => getDataFromDataTransfer(dataTransfer, matchesTypes, ""),
      dataTransfer: (dataTransfer) => dataTransfer
    },
    matchesTypes: [
      "Html",
      "text/html"
    ]
  },
  [URL$4]: {
    exposeProperties: {
      urls: (dataTransfer, matchesTypes) => getDataFromDataTransfer(dataTransfer, matchesTypes, "").split("\n"),
      dataTransfer: (dataTransfer) => dataTransfer
    },
    matchesTypes: [
      "Url",
      "text/uri-list"
    ]
  },
  [TEXT]: {
    exposeProperties: {
      text: (dataTransfer, matchesTypes) => getDataFromDataTransfer(dataTransfer, matchesTypes, ""),
      dataTransfer: (dataTransfer) => dataTransfer
    },
    matchesTypes: [
      "Text",
      "text/plain"
    ]
  }
};
function createNativeDragSource(type, dataTransfer) {
  const config = nativeTypesConfig[type];
  if (!config) {
    throw new Error(`native type ${type} has no configuration`);
  }
  const result = new NativeDragSource(config);
  result.loadDataTransfer(dataTransfer);
  return result;
}
function matchNativeItemType(dataTransfer) {
  if (!dataTransfer) {
    return null;
  }
  const dataTransferTypes = Array.prototype.slice.call(dataTransfer.types || []);
  return Object.keys(nativeTypesConfig).filter((nativeItemType) => {
    const typeConfig = nativeTypesConfig[nativeItemType];
    if (!(typeConfig === null || typeConfig === void 0 ? void 0 : typeConfig.matchesTypes)) {
      return false;
    }
    return typeConfig.matchesTypes.some(
      (t) => dataTransferTypes.indexOf(t) > -1
    );
  })[0] || null;
}
const isFirefox = memoize(
  () => /firefox/i.test(navigator.userAgent)
);
const isSafari = memoize(
  () => Boolean(window.safari)
);
class MonotonicInterpolant {
  interpolate(x) {
    const { xs, ys, c1s, c2s, c3s } = this;
    let i2 = xs.length - 1;
    if (x === xs[i2]) {
      return ys[i2];
    }
    let low = 0;
    let high = c3s.length - 1;
    let mid;
    while (low <= high) {
      mid = Math.floor(0.5 * (low + high));
      const xHere = xs[mid];
      if (xHere < x) {
        low = mid + 1;
      } else if (xHere > x) {
        high = mid - 1;
      } else {
        return ys[mid];
      }
    }
    i2 = Math.max(0, high);
    const diff = x - xs[i2];
    const diffSq = diff * diff;
    return ys[i2] + c1s[i2] * diff + c2s[i2] * diffSq + c3s[i2] * diff * diffSq;
  }
  constructor(xs, ys) {
    const { length } = xs;
    const indexes = [];
    for (let i2 = 0; i2 < length; i2++) {
      indexes.push(i2);
    }
    indexes.sort(
      (a, b) => xs[a] < xs[b] ? -1 : 1
    );
    const dxs = [];
    const ms = [];
    let dx;
    let dy;
    for (let i1 = 0; i1 < length - 1; i1++) {
      dx = xs[i1 + 1] - xs[i1];
      dy = ys[i1 + 1] - ys[i1];
      dxs.push(dx);
      ms.push(dy / dx);
    }
    const c1s = [
      ms[0]
    ];
    for (let i2 = 0; i2 < dxs.length - 1; i2++) {
      const m22 = ms[i2];
      const mNext = ms[i2 + 1];
      if (m22 * mNext <= 0) {
        c1s.push(0);
      } else {
        dx = dxs[i2];
        const dxNext = dxs[i2 + 1];
        const common = dx + dxNext;
        c1s.push(3 * common / ((common + dxNext) / m22 + (common + dx) / mNext));
      }
    }
    c1s.push(ms[ms.length - 1]);
    const c2s = [];
    const c3s = [];
    let m2;
    for (let i3 = 0; i3 < c1s.length - 1; i3++) {
      m2 = ms[i3];
      const c1 = c1s[i3];
      const invDx = 1 / dxs[i3];
      const common = c1 + c1s[i3 + 1] - m2 - m2;
      c2s.push((m2 - c1 - common) * invDx);
      c3s.push(common * invDx * invDx);
    }
    this.xs = xs;
    this.ys = ys;
    this.c1s = c1s;
    this.c2s = c2s;
    this.c3s = c3s;
  }
}
const ELEMENT_NODE = 1;
function getNodeClientOffset(node) {
  const el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;
  if (!el) {
    return null;
  }
  const { top, left } = el.getBoundingClientRect();
  return {
    x: left,
    y: top
  };
}
function getEventClientOffset(e) {
  return {
    x: e.clientX,
    y: e.clientY
  };
}
function isImageNode(node) {
  var ref;
  return node.nodeName === "IMG" && (isFirefox() || !((ref = document.documentElement) === null || ref === void 0 ? void 0 : ref.contains(node)));
}
function getDragPreviewSize(isImage2, dragPreview, sourceWidth, sourceHeight) {
  let dragPreviewWidth = isImage2 ? dragPreview.width : sourceWidth;
  let dragPreviewHeight = isImage2 ? dragPreview.height : sourceHeight;
  if (isSafari() && isImage2) {
    dragPreviewHeight /= window.devicePixelRatio;
    dragPreviewWidth /= window.devicePixelRatio;
  }
  return {
    dragPreviewWidth,
    dragPreviewHeight
  };
}
function getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint) {
  const isImage2 = isImageNode(dragPreview);
  const dragPreviewNode = isImage2 ? sourceNode : dragPreview;
  const dragPreviewNodeOffsetFromClient = getNodeClientOffset(dragPreviewNode);
  const offsetFromDragPreview = {
    x: clientOffset.x - dragPreviewNodeOffsetFromClient.x,
    y: clientOffset.y - dragPreviewNodeOffsetFromClient.y
  };
  const { offsetWidth: sourceWidth, offsetHeight: sourceHeight } = sourceNode;
  const { anchorX, anchorY } = anchorPoint;
  const { dragPreviewWidth, dragPreviewHeight } = getDragPreviewSize(isImage2, dragPreview, sourceWidth, sourceHeight);
  const calculateYOffset = () => {
    const interpolantY = new MonotonicInterpolant([
      0,
      0.5,
      1
    ], [
      offsetFromDragPreview.y,
      offsetFromDragPreview.y / sourceHeight * dragPreviewHeight,
      offsetFromDragPreview.y + dragPreviewHeight - sourceHeight
    ]);
    let y = interpolantY.interpolate(anchorY);
    if (isSafari() && isImage2) {
      y += (window.devicePixelRatio - 1) * dragPreviewHeight;
    }
    return y;
  };
  const calculateXOffset = () => {
    const interpolantX = new MonotonicInterpolant([
      0,
      0.5,
      1
    ], [
      offsetFromDragPreview.x,
      offsetFromDragPreview.x / sourceWidth * dragPreviewWidth,
      offsetFromDragPreview.x + dragPreviewWidth - sourceWidth
    ]);
    return interpolantX.interpolate(anchorX);
  };
  const { offsetX, offsetY } = offsetPoint;
  const isManualOffsetX = offsetX === 0 || offsetX;
  const isManualOffsetY = offsetY === 0 || offsetY;
  return {
    x: isManualOffsetX ? offsetX : calculateXOffset(),
    y: isManualOffsetY ? offsetY : calculateYOffset()
  };
}
class OptionsReader {
  get window() {
    if (this.globalContext) {
      return this.globalContext;
    } else if (typeof window !== "undefined") {
      return window;
    }
    return void 0;
  }
  get document() {
    var ref;
    if ((ref = this.globalContext) === null || ref === void 0 ? void 0 : ref.document) {
      return this.globalContext.document;
    } else if (this.window) {
      return this.window.document;
    } else {
      return void 0;
    }
  }
  get rootElement() {
    var ref;
    return ((ref = this.optionsArgs) === null || ref === void 0 ? void 0 : ref.rootElement) || this.window;
  }
  constructor(globalContext, options) {
    this.ownerDocument = null;
    this.globalContext = globalContext;
    this.optionsArgs = options;
  }
}
function _defineProperty(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _defineProperty(target, key, source[key]);
    });
  }
  return target;
}
class HTML5BackendImpl {
  profile() {
    var ref, ref1;
    return {
      sourcePreviewNodes: this.sourcePreviewNodes.size,
      sourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,
      sourceNodeOptions: this.sourceNodeOptions.size,
      sourceNodes: this.sourceNodes.size,
      dragStartSourceIds: ((ref = this.dragStartSourceIds) === null || ref === void 0 ? void 0 : ref.length) || 0,
      dropTargetIds: this.dropTargetIds.length,
      dragEnterTargetIds: this.dragEnterTargetIds.length,
      dragOverTargetIds: ((ref1 = this.dragOverTargetIds) === null || ref1 === void 0 ? void 0 : ref1.length) || 0
    };
  }
  get window() {
    return this.options.window;
  }
  get document() {
    return this.options.document;
  }
  get rootElement() {
    return this.options.rootElement;
  }
  setup() {
    const root2 = this.rootElement;
    if (root2 === void 0) {
      return;
    }
    if (root2.__isReactDndBackendSetUp) {
      throw new Error("Cannot have two HTML5 backends at the same time.");
    }
    root2.__isReactDndBackendSetUp = true;
    this.addEventListeners(root2);
  }
  teardown() {
    const root2 = this.rootElement;
    if (root2 === void 0) {
      return;
    }
    root2.__isReactDndBackendSetUp = false;
    this.removeEventListeners(this.rootElement);
    this.clearCurrentDragSourceNode();
    if (this.asyncEndDragFrameId) {
      var ref;
      (ref = this.window) === null || ref === void 0 ? void 0 : ref.cancelAnimationFrame(this.asyncEndDragFrameId);
    }
  }
  connectDragPreview(sourceId, node, options) {
    this.sourcePreviewNodeOptions.set(sourceId, options);
    this.sourcePreviewNodes.set(sourceId, node);
    return () => {
      this.sourcePreviewNodes.delete(sourceId);
      this.sourcePreviewNodeOptions.delete(sourceId);
    };
  }
  connectDragSource(sourceId, node, options) {
    this.sourceNodes.set(sourceId, node);
    this.sourceNodeOptions.set(sourceId, options);
    const handleDragStart = (e) => this.handleDragStart(e, sourceId);
    const handleSelectStart = (e) => this.handleSelectStart(e);
    node.setAttribute("draggable", "true");
    node.addEventListener("dragstart", handleDragStart);
    node.addEventListener("selectstart", handleSelectStart);
    return () => {
      this.sourceNodes.delete(sourceId);
      this.sourceNodeOptions.delete(sourceId);
      node.removeEventListener("dragstart", handleDragStart);
      node.removeEventListener("selectstart", handleSelectStart);
      node.setAttribute("draggable", "false");
    };
  }
  connectDropTarget(targetId, node) {
    const handleDragEnter = (e) => this.handleDragEnter(e, targetId);
    const handleDragOver = (e) => this.handleDragOver(e, targetId);
    const handleDrop = (e) => this.handleDrop(e, targetId);
    node.addEventListener("dragenter", handleDragEnter);
    node.addEventListener("dragover", handleDragOver);
    node.addEventListener("drop", handleDrop);
    return () => {
      node.removeEventListener("dragenter", handleDragEnter);
      node.removeEventListener("dragover", handleDragOver);
      node.removeEventListener("drop", handleDrop);
    };
  }
  addEventListeners(target) {
    if (!target.addEventListener) {
      return;
    }
    target.addEventListener("dragstart", this.handleTopDragStart);
    target.addEventListener("dragstart", this.handleTopDragStartCapture, true);
    target.addEventListener("dragend", this.handleTopDragEndCapture, true);
    target.addEventListener("dragenter", this.handleTopDragEnter);
    target.addEventListener("dragenter", this.handleTopDragEnterCapture, true);
    target.addEventListener("dragleave", this.handleTopDragLeaveCapture, true);
    target.addEventListener("dragover", this.handleTopDragOver);
    target.addEventListener("dragover", this.handleTopDragOverCapture, true);
    target.addEventListener("drop", this.handleTopDrop);
    target.addEventListener("drop", this.handleTopDropCapture, true);
  }
  removeEventListeners(target) {
    if (!target.removeEventListener) {
      return;
    }
    target.removeEventListener("dragstart", this.handleTopDragStart);
    target.removeEventListener("dragstart", this.handleTopDragStartCapture, true);
    target.removeEventListener("dragend", this.handleTopDragEndCapture, true);
    target.removeEventListener("dragenter", this.handleTopDragEnter);
    target.removeEventListener("dragenter", this.handleTopDragEnterCapture, true);
    target.removeEventListener("dragleave", this.handleTopDragLeaveCapture, true);
    target.removeEventListener("dragover", this.handleTopDragOver);
    target.removeEventListener("dragover", this.handleTopDragOverCapture, true);
    target.removeEventListener("drop", this.handleTopDrop);
    target.removeEventListener("drop", this.handleTopDropCapture, true);
  }
  getCurrentSourceNodeOptions() {
    const sourceId = this.monitor.getSourceId();
    const sourceNodeOptions = this.sourceNodeOptions.get(sourceId);
    return _objectSpread({
      dropEffect: this.altKeyPressed ? "copy" : "move"
    }, sourceNodeOptions || {});
  }
  getCurrentDropEffect() {
    if (this.isDraggingNativeItem()) {
      return "copy";
    }
    return this.getCurrentSourceNodeOptions().dropEffect;
  }
  getCurrentSourcePreviewNodeOptions() {
    const sourceId = this.monitor.getSourceId();
    const sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId);
    return _objectSpread({
      anchorX: 0.5,
      anchorY: 0.5,
      captureDraggingState: false
    }, sourcePreviewNodeOptions || {});
  }
  isDraggingNativeItem() {
    const itemType = this.monitor.getItemType();
    return Object.keys(NativeTypes).some(
      (key) => NativeTypes[key] === itemType
    );
  }
  beginDragNativeItem(type, dataTransfer) {
    this.clearCurrentDragSourceNode();
    this.currentNativeSource = createNativeDragSource(type, dataTransfer);
    this.currentNativeHandle = this.registry.addSource(type, this.currentNativeSource);
    this.actions.beginDrag([
      this.currentNativeHandle
    ]);
  }
  setCurrentDragSourceNode(node) {
    this.clearCurrentDragSourceNode();
    this.currentDragSourceNode = node;
    const MOUSE_MOVE_TIMEOUT = 1e3;
    this.mouseMoveTimeoutTimer = setTimeout(() => {
      var ref;
      return (ref = this.rootElement) === null || ref === void 0 ? void 0 : ref.addEventListener("mousemove", this.endDragIfSourceWasRemovedFromDOM, true);
    }, MOUSE_MOVE_TIMEOUT);
  }
  clearCurrentDragSourceNode() {
    if (this.currentDragSourceNode) {
      this.currentDragSourceNode = null;
      if (this.rootElement) {
        var ref;
        (ref = this.window) === null || ref === void 0 ? void 0 : ref.clearTimeout(this.mouseMoveTimeoutTimer || void 0);
        this.rootElement.removeEventListener("mousemove", this.endDragIfSourceWasRemovedFromDOM, true);
      }
      this.mouseMoveTimeoutTimer = null;
      return true;
    }
    return false;
  }
  handleDragStart(e, sourceId) {
    if (e.defaultPrevented) {
      return;
    }
    if (!this.dragStartSourceIds) {
      this.dragStartSourceIds = [];
    }
    this.dragStartSourceIds.unshift(sourceId);
  }
  handleDragEnter(_e, targetId) {
    this.dragEnterTargetIds.unshift(targetId);
  }
  handleDragOver(_e, targetId) {
    if (this.dragOverTargetIds === null) {
      this.dragOverTargetIds = [];
    }
    this.dragOverTargetIds.unshift(targetId);
  }
  handleDrop(_e, targetId) {
    this.dropTargetIds.unshift(targetId);
  }
  constructor(manager, globalContext, options) {
    this.sourcePreviewNodes = /* @__PURE__ */ new Map();
    this.sourcePreviewNodeOptions = /* @__PURE__ */ new Map();
    this.sourceNodes = /* @__PURE__ */ new Map();
    this.sourceNodeOptions = /* @__PURE__ */ new Map();
    this.dragStartSourceIds = null;
    this.dropTargetIds = [];
    this.dragEnterTargetIds = [];
    this.currentNativeSource = null;
    this.currentNativeHandle = null;
    this.currentDragSourceNode = null;
    this.altKeyPressed = false;
    this.mouseMoveTimeoutTimer = null;
    this.asyncEndDragFrameId = null;
    this.dragOverTargetIds = null;
    this.lastClientOffset = null;
    this.hoverRafId = null;
    this.getSourceClientOffset = (sourceId) => {
      const source = this.sourceNodes.get(sourceId);
      return source && getNodeClientOffset(source) || null;
    };
    this.endDragNativeItem = () => {
      if (!this.isDraggingNativeItem()) {
        return;
      }
      this.actions.endDrag();
      if (this.currentNativeHandle) {
        this.registry.removeSource(this.currentNativeHandle);
      }
      this.currentNativeHandle = null;
      this.currentNativeSource = null;
    };
    this.isNodeInDocument = (node) => {
      return Boolean(node && this.document && this.document.body && this.document.body.contains(node));
    };
    this.endDragIfSourceWasRemovedFromDOM = () => {
      const node = this.currentDragSourceNode;
      if (node == null || this.isNodeInDocument(node)) {
        return;
      }
      if (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {
        this.actions.endDrag();
      }
      this.cancelHover();
    };
    this.scheduleHover = (dragOverTargetIds) => {
      if (this.hoverRafId === null && typeof requestAnimationFrame !== "undefined") {
        this.hoverRafId = requestAnimationFrame(() => {
          if (this.monitor.isDragging()) {
            this.actions.hover(dragOverTargetIds || [], {
              clientOffset: this.lastClientOffset
            });
          }
          this.hoverRafId = null;
        });
      }
    };
    this.cancelHover = () => {
      if (this.hoverRafId !== null && typeof cancelAnimationFrame !== "undefined") {
        cancelAnimationFrame(this.hoverRafId);
        this.hoverRafId = null;
      }
    };
    this.handleTopDragStartCapture = () => {
      this.clearCurrentDragSourceNode();
      this.dragStartSourceIds = [];
    };
    this.handleTopDragStart = (e) => {
      if (e.defaultPrevented) {
        return;
      }
      const { dragStartSourceIds } = this;
      this.dragStartSourceIds = null;
      const clientOffset = getEventClientOffset(e);
      if (this.monitor.isDragging()) {
        this.actions.endDrag();
        this.cancelHover();
      }
      this.actions.beginDrag(dragStartSourceIds || [], {
        publishSource: false,
        getSourceClientOffset: this.getSourceClientOffset,
        clientOffset
      });
      const { dataTransfer } = e;
      const nativeType = matchNativeItemType(dataTransfer);
      if (this.monitor.isDragging()) {
        if (dataTransfer && typeof dataTransfer.setDragImage === "function") {
          const sourceId = this.monitor.getSourceId();
          const sourceNode = this.sourceNodes.get(sourceId);
          const dragPreview = this.sourcePreviewNodes.get(sourceId) || sourceNode;
          if (dragPreview) {
            const { anchorX, anchorY, offsetX, offsetY } = this.getCurrentSourcePreviewNodeOptions();
            const anchorPoint = {
              anchorX,
              anchorY
            };
            const offsetPoint = {
              offsetX,
              offsetY
            };
            const dragPreviewOffset = getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint);
            dataTransfer.setDragImage(dragPreview, dragPreviewOffset.x, dragPreviewOffset.y);
          }
        }
        try {
          dataTransfer === null || dataTransfer === void 0 ? void 0 : dataTransfer.setData("application/json", {});
        } catch (err) {
        }
        this.setCurrentDragSourceNode(e.target);
        const { captureDraggingState } = this.getCurrentSourcePreviewNodeOptions();
        if (!captureDraggingState) {
          setTimeout(
            () => this.actions.publishDragSource(),
            0
          );
        } else {
          this.actions.publishDragSource();
        }
      } else if (nativeType) {
        this.beginDragNativeItem(nativeType);
      } else if (dataTransfer && !dataTransfer.types && (e.target && !e.target.hasAttribute || !e.target.hasAttribute("draggable"))) {
        return;
      } else {
        e.preventDefault();
      }
    };
    this.handleTopDragEndCapture = () => {
      if (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {
        this.actions.endDrag();
      }
      this.cancelHover();
    };
    this.handleTopDragEnterCapture = (e) => {
      this.dragEnterTargetIds = [];
      if (this.isDraggingNativeItem()) {
        var ref;
        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);
      }
      const isFirstEnter = this.enterLeaveCounter.enter(e.target);
      if (!isFirstEnter || this.monitor.isDragging()) {
        return;
      }
      const { dataTransfer } = e;
      const nativeType = matchNativeItemType(dataTransfer);
      if (nativeType) {
        this.beginDragNativeItem(nativeType, dataTransfer);
      }
    };
    this.handleTopDragEnter = (e) => {
      const { dragEnterTargetIds } = this;
      this.dragEnterTargetIds = [];
      if (!this.monitor.isDragging()) {
        return;
      }
      this.altKeyPressed = e.altKey;
      if (dragEnterTargetIds.length > 0) {
        this.actions.hover(dragEnterTargetIds, {
          clientOffset: getEventClientOffset(e)
        });
      }
      const canDrop = dragEnterTargetIds.some(
        (targetId) => this.monitor.canDropOnTarget(targetId)
      );
      if (canDrop) {
        e.preventDefault();
        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = this.getCurrentDropEffect();
        }
      }
    };
    this.handleTopDragOverCapture = (e) => {
      this.dragOverTargetIds = [];
      if (this.isDraggingNativeItem()) {
        var ref;
        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);
      }
    };
    this.handleTopDragOver = (e) => {
      const { dragOverTargetIds } = this;
      this.dragOverTargetIds = [];
      if (!this.monitor.isDragging()) {
        e.preventDefault();
        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = "none";
        }
        return;
      }
      this.altKeyPressed = e.altKey;
      this.lastClientOffset = getEventClientOffset(e);
      this.scheduleHover(dragOverTargetIds);
      const canDrop = (dragOverTargetIds || []).some(
        (targetId) => this.monitor.canDropOnTarget(targetId)
      );
      if (canDrop) {
        e.preventDefault();
        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = this.getCurrentDropEffect();
        }
      } else if (this.isDraggingNativeItem()) {
        e.preventDefault();
      } else {
        e.preventDefault();
        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = "none";
        }
      }
    };
    this.handleTopDragLeaveCapture = (e) => {
      if (this.isDraggingNativeItem()) {
        e.preventDefault();
      }
      const isLastLeave = this.enterLeaveCounter.leave(e.target);
      if (!isLastLeave) {
        return;
      }
      if (this.isDraggingNativeItem()) {
        setTimeout(
          () => this.endDragNativeItem(),
          0
        );
      }
      this.cancelHover();
    };
    this.handleTopDropCapture = (e) => {
      this.dropTargetIds = [];
      if (this.isDraggingNativeItem()) {
        var ref;
        e.preventDefault();
        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);
      } else if (matchNativeItemType(e.dataTransfer)) {
        e.preventDefault();
      }
      this.enterLeaveCounter.reset();
    };
    this.handleTopDrop = (e) => {
      const { dropTargetIds } = this;
      this.dropTargetIds = [];
      this.actions.hover(dropTargetIds, {
        clientOffset: getEventClientOffset(e)
      });
      this.actions.drop({
        dropEffect: this.getCurrentDropEffect()
      });
      if (this.isDraggingNativeItem()) {
        this.endDragNativeItem();
      } else if (this.monitor.isDragging()) {
        this.actions.endDrag();
      }
      this.cancelHover();
    };
    this.handleSelectStart = (e) => {
      const target = e.target;
      if (typeof target.dragDrop !== "function") {
        return;
      }
      if (target.tagName === "INPUT" || target.tagName === "SELECT" || target.tagName === "TEXTAREA" || target.isContentEditable) {
        return;
      }
      e.preventDefault();
      target.dragDrop();
    };
    this.options = new OptionsReader(globalContext, options);
    this.actions = manager.getActions();
    this.monitor = manager.getMonitor();
    this.registry = manager.getRegistry();
    this.enterLeaveCounter = new EnterLeaveCounter(this.isNodeInDocument);
  }
}
const HTML5Backend = function createBackend(manager, context, options) {
  return new HTML5BackendImpl(manager, context, options);
};
const tradeBoxNum = 5;
const inventoryBoxNum = 180;
const pageBoxNum = 60;
const tradePageBoxNum = 36;
const itemTypes = {
  LAYER1: "layer1"
};
var dist = {};
var registries = {};
var nfts_registry = {};
var axios$2 = { exports: {} };
var axios$1 = { exports: {} };
var bind$2 = function bind2(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i2 = 0; i2 < args.length; i2++) {
      args[i2] = arguments[i2];
    }
    return fn.apply(thisArg, args);
  };
};
var bind$1 = bind$2;
var toString = Object.prototype.toString;
function isArray(val) {
  return toString.call(val) === "[object Array]";
}
function isUndefined(val) {
  return typeof val === "undefined";
}
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
function isArrayBuffer(val) {
  return toString.call(val) === "[object ArrayBuffer]";
}
function isFormData(val) {
  return typeof FormData !== "undefined" && val instanceof FormData;
}
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}
function isString(val) {
  return typeof val === "string";
}
function isNumber(val) {
  return typeof val === "number";
}
function isObject$1(val) {
  return val !== null && typeof val === "object";
}
function isPlainObject(val) {
  if (toString.call(val) !== "[object Object]") {
    return false;
  }
  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
function isDate(val) {
  return toString.call(val) === "[object Date]";
}
function isFile(val) {
  return toString.call(val) === "[object File]";
}
function isBlob(val) {
  return toString.call(val) === "[object Blob]";
}
function isFunction(val) {
  return toString.call(val) === "[object Function]";
}
function isStream(val) {
  return isObject$1(val) && isFunction(val.pipe);
}
function isURLSearchParams(val) {
  return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
}
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
function isStandardBrowserEnv() {
  if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function forEach(obj, fn) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (var i2 = 0, l = obj.length; i2 < l; i2++) {
      fn.call(null, obj[i2], i2, obj);
    }
  } else {
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
function merge() {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }
  for (var i2 = 0, l = arguments.length; i2 < l; i2++) {
    forEach(arguments[i2], assignValue);
  }
  return result;
}
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === "function") {
      a[key] = bind$1(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}
function stripBOM(content) {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
}
var utils$c = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isObject: isObject$1,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isFunction,
  isStream,
  isURLSearchParams,
  isStandardBrowserEnv,
  forEach,
  merge,
  extend,
  trim,
  stripBOM
};
var utils$b = utils$c;
function encode$4(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL$1 = function buildURL2(url2, params, paramsSerializer) {
  if (!params) {
    return url2;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$b.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils$b.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === "undefined") {
        return;
      }
      if (utils$b.isArray(val)) {
        key = key + "[]";
      } else {
        val = [val];
      }
      utils$b.forEach(val, function parseValue(v) {
        if (utils$b.isDate(v)) {
          v = v.toISOString();
        } else if (utils$b.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode$4(key) + "=" + encode$4(v));
      });
    });
    serializedParams = parts.join("&");
  }
  if (serializedParams) {
    var hashmarkIndex = url2.indexOf("#");
    if (hashmarkIndex !== -1) {
      url2 = url2.slice(0, hashmarkIndex);
    }
    url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url2;
};
var utils$a = utils$c;
function InterceptorManager$1() {
  this.handlers = [];
}
InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled,
    rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};
InterceptorManager$1.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
InterceptorManager$1.prototype.forEach = function forEach2(fn) {
  utils$a.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};
var InterceptorManager_1 = InterceptorManager$1;
var utils$9 = utils$c;
var normalizeHeaderName = function normalizeHeaderName2(headers, normalizedName) {
  utils$9.forEach(headers, function processHeader(value2, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value2;
      delete headers[name];
    }
  });
};
var enhanceError = function enhanceError2(error, config, code2, request2, response) {
  error.config = config;
  if (code2) {
    error.code = code2;
  }
  error.request = request2;
  error.response = response;
  error.isAxiosError = true;
  error.toJSON = function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};
var createError;
var hasRequiredCreateError;
function requireCreateError() {
  if (hasRequiredCreateError)
    return createError;
  hasRequiredCreateError = 1;
  var enhanceError$1 = enhanceError;
  createError = function createError2(message, config, code2, request2, response) {
    var error = new Error(message);
    return enhanceError$1(error, config, code2, request2, response);
  };
  return createError;
}
var settle;
var hasRequiredSettle;
function requireSettle() {
  if (hasRequiredSettle)
    return settle;
  hasRequiredSettle = 1;
  var createError2 = requireCreateError();
  settle = function settle2(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError2(
        "Request failed with status code " + response.status,
        response.config,
        null,
        response.request,
        response
      ));
    }
  };
  return settle;
}
var cookies;
var hasRequiredCookies;
function requireCookies() {
  if (hasRequiredCookies)
    return cookies;
  hasRequiredCookies = 1;
  var utils2 = utils$c;
  cookies = utils2.isStandardBrowserEnv() ? function standardBrowserEnv() {
    return {
      write: function write(name, value2, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + "=" + encodeURIComponent(value2));
        if (utils2.isNumber(expires)) {
          cookie.push("expires=" + new Date(expires).toGMTString());
        }
        if (utils2.isString(path)) {
          cookie.push("path=" + path);
        }
        if (utils2.isString(domain)) {
          cookie.push("domain=" + domain);
        }
        if (secure === true) {
          cookie.push("secure");
        }
        document.cookie = cookie.join("; ");
      },
      read: function read(name) {
        var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove: function remove(name) {
        this.write(name, "", Date.now() - 864e5);
      }
    };
  }() : function nonStandardBrowserEnv() {
    return {
      write: function write() {
      },
      read: function read() {
        return null;
      },
      remove: function remove() {
      }
    };
  }();
  return cookies;
}
var isAbsoluteURL;
var hasRequiredIsAbsoluteURL;
function requireIsAbsoluteURL() {
  if (hasRequiredIsAbsoluteURL)
    return isAbsoluteURL;
  hasRequiredIsAbsoluteURL = 1;
  isAbsoluteURL = function isAbsoluteURL2(url2) {
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url2);
  };
  return isAbsoluteURL;
}
var combineURLs;
var hasRequiredCombineURLs;
function requireCombineURLs() {
  if (hasRequiredCombineURLs)
    return combineURLs;
  hasRequiredCombineURLs = 1;
  combineURLs = function combineURLs2(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  };
  return combineURLs;
}
var buildFullPath;
var hasRequiredBuildFullPath;
function requireBuildFullPath() {
  if (hasRequiredBuildFullPath)
    return buildFullPath;
  hasRequiredBuildFullPath = 1;
  var isAbsoluteURL2 = requireIsAbsoluteURL();
  var combineURLs2 = requireCombineURLs();
  buildFullPath = function buildFullPath2(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL2(requestedURL)) {
      return combineURLs2(baseURL, requestedURL);
    }
    return requestedURL;
  };
  return buildFullPath;
}
var parseHeaders;
var hasRequiredParseHeaders;
function requireParseHeaders() {
  if (hasRequiredParseHeaders)
    return parseHeaders;
  hasRequiredParseHeaders = 1;
  var utils2 = utils$c;
  var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ];
  parseHeaders = function parseHeaders2(headers) {
    var parsed = {};
    var key;
    var val;
    var i2;
    if (!headers) {
      return parsed;
    }
    utils2.forEach(headers.split("\n"), function parser2(line) {
      i2 = line.indexOf(":");
      key = utils2.trim(line.substr(0, i2)).toLowerCase();
      val = utils2.trim(line.substr(i2 + 1));
      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }
        if (key === "set-cookie") {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      }
    });
    return parsed;
  };
  return parseHeaders;
}
var isURLSameOrigin;
var hasRequiredIsURLSameOrigin;
function requireIsURLSameOrigin() {
  if (hasRequiredIsURLSameOrigin)
    return isURLSameOrigin;
  hasRequiredIsURLSameOrigin = 1;
  var utils2 = utils$c;
  isURLSameOrigin = utils2.isStandardBrowserEnv() ? function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    function resolveURL(url2) {
      var href = url2;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin2(requestURL) {
      var parsed = utils2.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }() : function nonStandardBrowserEnv() {
    return function isURLSameOrigin2() {
      return true;
    };
  }();
  return isURLSameOrigin;
}
var Cancel_1;
var hasRequiredCancel;
function requireCancel() {
  if (hasRequiredCancel)
    return Cancel_1;
  hasRequiredCancel = 1;
  function Cancel2(message) {
    this.message = message;
  }
  Cancel2.prototype.toString = function toString2() {
    return "Cancel" + (this.message ? ": " + this.message : "");
  };
  Cancel2.prototype.__CANCEL__ = true;
  Cancel_1 = Cancel2;
  return Cancel_1;
}
var xhr;
var hasRequiredXhr;
function requireXhr() {
  if (hasRequiredXhr)
    return xhr;
  hasRequiredXhr = 1;
  var utils2 = utils$c;
  var settle2 = requireSettle();
  var cookies2 = requireCookies();
  var buildURL3 = buildURL$1;
  var buildFullPath2 = requireBuildFullPath();
  var parseHeaders2 = requireParseHeaders();
  var isURLSameOrigin2 = requireIsURLSameOrigin();
  var createError2 = requireCreateError();
  var defaults2 = requireDefaults();
  var Cancel2 = requireCancel();
  xhr = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;
      var responseType = config.responseType;
      var onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }
        if (config.signal) {
          config.signal.removeEventListener("abort", onCanceled);
        }
      }
      if (utils2.isFormData(requestData)) {
        delete requestHeaders["Content-Type"];
      }
      var request2 = new XMLHttpRequest();
      if (config.auth) {
        var username = config.auth.username || "";
        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
        requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
      }
      var fullPath = buildFullPath2(config.baseURL, config.url);
      request2.open(config.method.toUpperCase(), buildURL3(fullPath, config.params, config.paramsSerializer), true);
      request2.timeout = config.timeout;
      function onloadend() {
        if (!request2) {
          return;
        }
        var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders2(request2.getAllResponseHeaders()) : null;
        var responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
        var response = {
          data: responseData,
          status: request2.status,
          statusText: request2.statusText,
          headers: responseHeaders,
          config,
          request: request2
        };
        settle2(function _resolve(value2) {
          resolve(value2);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request2 = null;
      }
      if ("onloadend" in request2) {
        request2.onloadend = onloadend;
      } else {
        request2.onreadystatechange = function handleLoad() {
          if (!request2 || request2.readyState !== 4) {
            return;
          }
          if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request2.onabort = function handleAbort() {
        if (!request2) {
          return;
        }
        reject(createError2("Request aborted", config, "ECONNABORTED", request2));
        request2 = null;
      };
      request2.onerror = function handleError() {
        reject(createError2("Network Error", config, null, request2));
        request2 = null;
      };
      request2.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
        var transitional2 = config.transitional || defaults2.transitional;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(createError2(
          timeoutErrorMessage,
          config,
          transitional2.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
          request2
        ));
        request2 = null;
      };
      if (utils2.isStandardBrowserEnv()) {
        var xsrfValue = (config.withCredentials || isURLSameOrigin2(fullPath)) && config.xsrfCookieName ? cookies2.read(config.xsrfCookieName) : void 0;
        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }
      if ("setRequestHeader" in request2) {
        utils2.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
            delete requestHeaders[key];
          } else {
            request2.setRequestHeader(key, val);
          }
        });
      }
      if (!utils2.isUndefined(config.withCredentials)) {
        request2.withCredentials = !!config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request2.responseType = config.responseType;
      }
      if (typeof config.onDownloadProgress === "function") {
        request2.addEventListener("progress", config.onDownloadProgress);
      }
      if (typeof config.onUploadProgress === "function" && request2.upload) {
        request2.upload.addEventListener("progress", config.onUploadProgress);
      }
      if (config.cancelToken || config.signal) {
        onCanceled = function(cancel) {
          if (!request2) {
            return;
          }
          reject(!cancel || cancel && cancel.type ? new Cancel2("canceled") : cancel);
          request2.abort();
          request2 = null;
        };
        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
      }
      if (!requestData) {
        requestData = null;
      }
      request2.send(requestData);
    });
  };
  return xhr;
}
var defaults_1;
var hasRequiredDefaults;
function requireDefaults() {
  if (hasRequiredDefaults)
    return defaults_1;
  hasRequiredDefaults = 1;
  var utils2 = utils$c;
  var normalizeHeaderName$1 = normalizeHeaderName;
  var enhanceError$1 = enhanceError;
  var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
  };
  function setContentTypeIfUnset(headers, value2) {
    if (!utils2.isUndefined(headers) && utils2.isUndefined(headers["Content-Type"])) {
      headers["Content-Type"] = value2;
    }
  }
  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") {
      adapter = requireXhr();
    } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
      adapter = requireXhr();
    }
    return adapter;
  }
  function stringifySafely(rawValue, parser2, encoder2) {
    if (utils2.isString(rawValue)) {
      try {
        (parser2 || JSON.parse)(rawValue);
        return utils2.trim(rawValue);
      } catch (e) {
        if (e.name !== "SyntaxError") {
          throw e;
        }
      }
    }
    return (encoder2 || JSON.stringify)(rawValue);
  }
  var defaults2 = {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: getDefaultAdapter(),
    transformRequest: [function transformRequest(data2, headers) {
      normalizeHeaderName$1(headers, "Accept");
      normalizeHeaderName$1(headers, "Content-Type");
      if (utils2.isFormData(data2) || utils2.isArrayBuffer(data2) || utils2.isBuffer(data2) || utils2.isStream(data2) || utils2.isFile(data2) || utils2.isBlob(data2)) {
        return data2;
      }
      if (utils2.isArrayBufferView(data2)) {
        return data2.buffer;
      }
      if (utils2.isURLSearchParams(data2)) {
        setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
        return data2.toString();
      }
      if (utils2.isObject(data2) || headers && headers["Content-Type"] === "application/json") {
        setContentTypeIfUnset(headers, "application/json");
        return stringifySafely(data2);
      }
      return data2;
    }],
    transformResponse: [function transformResponse(data2) {
      var transitional2 = this.transitional || defaults2.transitional;
      var silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      var forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
      if (strictJSONParsing || forcedJSONParsing && utils2.isString(data2) && data2.length) {
        try {
          return JSON.parse(data2);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === "SyntaxError") {
              throw enhanceError$1(e, this, "E_JSON_PARSE");
            }
            throw e;
          }
        }
      }
      return data2;
    }],
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    }
  };
  utils2.forEach(["delete", "get", "head"], function forEachMethodNoData2(method2) {
    defaults2.headers[method2] = {};
  });
  utils2.forEach(["post", "put", "patch"], function forEachMethodWithData2(method2) {
    defaults2.headers[method2] = utils2.merge(DEFAULT_CONTENT_TYPE);
  });
  defaults_1 = defaults2;
  return defaults_1;
}
var utils$8 = utils$c;
var defaults$2 = requireDefaults();
var transformData$1 = function transformData2(data2, headers, fns) {
  var context = this || defaults$2;
  utils$8.forEach(fns, function transform(fn) {
    data2 = fn.call(context, data2, headers);
  });
  return data2;
};
var isCancel$1;
var hasRequiredIsCancel;
function requireIsCancel() {
  if (hasRequiredIsCancel)
    return isCancel$1;
  hasRequiredIsCancel = 1;
  isCancel$1 = function isCancel2(value2) {
    return !!(value2 && value2.__CANCEL__);
  };
  return isCancel$1;
}
var utils$7 = utils$c;
var transformData = transformData$1;
var isCancel = requireIsCancel();
var defaults$1 = requireDefaults();
var Cancel = requireCancel();
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new Cancel("canceled");
  }
}
var dispatchRequest$1 = function dispatchRequest2(config) {
  throwIfCancellationRequested(config);
  config.headers = config.headers || {};
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );
  config.headers = utils$7.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );
  utils$7.forEach(
    ["delete", "get", "head", "post", "put", "patch", "common"],
    function cleanHeaderConfig(method2) {
      delete config.headers[method2];
    }
  );
  var adapter = config.adapter || defaults$1.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }
    return Promise.reject(reason);
  });
};
var utils$6 = utils$c;
var mergeConfig$2 = function mergeConfig2(config1, config2) {
  config2 = config2 || {};
  var config = {};
  function getMergedValue(target, source) {
    if (utils$6.isPlainObject(target) && utils$6.isPlainObject(source)) {
      return utils$6.merge(target, source);
    } else if (utils$6.isPlainObject(source)) {
      return utils$6.merge({}, source);
    } else if (utils$6.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(prop) {
    if (!utils$6.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils$6.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function valueFromConfig2(prop) {
    if (!utils$6.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    }
  }
  function defaultToConfig2(prop) {
    if (!utils$6.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    } else if (!utils$6.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  var mergeMap = {
    "url": valueFromConfig2,
    "method": valueFromConfig2,
    "data": valueFromConfig2,
    "baseURL": defaultToConfig2,
    "transformRequest": defaultToConfig2,
    "transformResponse": defaultToConfig2,
    "paramsSerializer": defaultToConfig2,
    "timeout": defaultToConfig2,
    "timeoutMessage": defaultToConfig2,
    "withCredentials": defaultToConfig2,
    "adapter": defaultToConfig2,
    "responseType": defaultToConfig2,
    "xsrfCookieName": defaultToConfig2,
    "xsrfHeaderName": defaultToConfig2,
    "onUploadProgress": defaultToConfig2,
    "onDownloadProgress": defaultToConfig2,
    "decompress": defaultToConfig2,
    "maxContentLength": defaultToConfig2,
    "maxBodyLength": defaultToConfig2,
    "transport": defaultToConfig2,
    "httpAgent": defaultToConfig2,
    "httpsAgent": defaultToConfig2,
    "cancelToken": defaultToConfig2,
    "socketPath": defaultToConfig2,
    "responseEncoding": defaultToConfig2,
    "validateStatus": mergeDirectKeys
  };
  utils$6.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge2 = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge2(prop);
    utils$6.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
};
var data;
var hasRequiredData;
function requireData() {
  if (hasRequiredData)
    return data;
  hasRequiredData = 1;
  data = {
    "version": "0.24.0"
  };
  return data;
}
var VERSION = requireData().version;
var validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i2) {
  validators$1[type] = function validator2(thing) {
    return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators$1.transitional = function transitional(validator2, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return function(value2, opt, opts) {
    if (validator2 === false) {
      throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value2, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new TypeError("options must be an object");
  }
  var keys = Object.keys(options);
  var i2 = keys.length;
  while (i2-- > 0) {
    var opt = keys[i2];
    var validator2 = schema[opt];
    if (validator2) {
      var value2 = options[opt];
      var result = value2 === void 0 || validator2(value2, opt, options);
      if (result !== true) {
        throw new TypeError("option " + opt + " must be " + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error("Unknown option " + opt);
    }
  }
}
var validator$1 = {
  assertOptions,
  validators: validators$1
};
var utils$5 = utils$c;
var buildURL = buildURL$1;
var InterceptorManager = InterceptorManager_1;
var dispatchRequest = dispatchRequest$1;
var mergeConfig$1 = mergeConfig$2;
var validator = validator$1;
var validators = validator.validators;
function Axios$1(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
Axios$1.prototype.request = function request(config) {
  if (typeof config === "string") {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }
  config = mergeConfig$1(this.defaults, config);
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = "get";
  }
  var transitional2 = config.transitional;
  if (transitional2 !== void 0) {
    validator.assertOptions(transitional2, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
      return;
    }
    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;
  if (!synchronousRequestInterceptors) {
    var chain2 = [dispatchRequest, void 0];
    Array.prototype.unshift.apply(chain2, requestInterceptorChain);
    chain2 = chain2.concat(responseInterceptorChain);
    promise = Promise.resolve(config);
    while (chain2.length) {
      promise = promise.then(chain2.shift(), chain2.shift());
    }
    return promise;
  }
  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }
  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }
  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }
  return promise;
};
Axios$1.prototype.getUri = function getUri(config) {
  config = mergeConfig$1(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
utils$5.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method2) {
  Axios$1.prototype[method2] = function(url2, config) {
    return this.request(mergeConfig$1(config || {}, {
      method: method2,
      url: url2,
      data: (config || {}).data
    }));
  };
});
utils$5.forEach(["post", "put", "patch"], function forEachMethodWithData(method2) {
  Axios$1.prototype[method2] = function(url2, data2, config) {
    return this.request(mergeConfig$1(config || {}, {
      method: method2,
      url: url2,
      data: data2
    }));
  };
});
var Axios_1 = Axios$1;
var CancelToken_1;
var hasRequiredCancelToken;
function requireCancelToken() {
  if (hasRequiredCancelToken)
    return CancelToken_1;
  hasRequiredCancelToken = 1;
  var Cancel2 = requireCancel();
  function CancelToken(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    var token2 = this;
    this.promise.then(function(cancel) {
      if (!token2._listeners)
        return;
      var i2;
      var l = token2._listeners.length;
      for (i2 = 0; i2 < l; i2++) {
        token2._listeners[i2](cancel);
      }
      token2._listeners = null;
    });
    this.promise.then = function(onfulfilled) {
      var _resolve;
      var promise = new Promise(function(resolve) {
        token2.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token2.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message) {
      if (token2.reason) {
        return;
      }
      token2.reason = new Cancel2(message);
      resolvePromise(token2.reason);
    });
  }
  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };
  CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  };
  CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    var index2 = this._listeners.indexOf(listener);
    if (index2 !== -1) {
      this._listeners.splice(index2, 1);
    }
  };
  CancelToken.source = function source() {
    var cancel;
    var token2 = new CancelToken(function executor(c2) {
      cancel = c2;
    });
    return {
      token: token2,
      cancel
    };
  };
  CancelToken_1 = CancelToken;
  return CancelToken_1;
}
var spread;
var hasRequiredSpread;
function requireSpread() {
  if (hasRequiredSpread)
    return spread;
  hasRequiredSpread = 1;
  spread = function spread2(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };
  return spread;
}
var isAxiosError;
var hasRequiredIsAxiosError;
function requireIsAxiosError() {
  if (hasRequiredIsAxiosError)
    return isAxiosError;
  hasRequiredIsAxiosError = 1;
  isAxiosError = function isAxiosError2(payload) {
    return typeof payload === "object" && payload.isAxiosError === true;
  };
  return isAxiosError;
}
var utils$4 = utils$c;
var bind = bind$2;
var Axios = Axios_1;
var mergeConfig = mergeConfig$2;
var defaults = requireDefaults();
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);
  utils$4.extend(instance, Axios.prototype, context);
  utils$4.extend(instance, context);
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults);
axios.Axios = Axios;
axios.Cancel = requireCancel();
axios.CancelToken = requireCancelToken();
axios.isCancel = requireIsCancel();
axios.VERSION = requireData().version;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = requireSpread();
axios.isAxiosError = requireIsAxiosError();
axios$1.exports = axios;
axios$1.exports.default = axios;
(function(module2) {
  module2.exports = axios$1.exports;
})(axios$2);
var buffer$1 = {};
var base64Js = {};
base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
  var len2 = b64.length;
  if (len2 % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1)
    validLen = len2;
  var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i2;
  for (i2 = 0; i2 < len2; i2 += 4) {
    tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
    arr[curByte++] = tmp >> 16 & 255;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i2 = start; i2 < end; i2 += 3) {
    tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len2 = uint8.length;
  var extraBytes = len2 % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
    parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len2 - 1];
    parts.push(
      lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
    parts.push(
      lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
    );
  }
  return parts.join("");
}
var ieee754$1 = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
ieee754$1.read = function(buffer2, offset, isLE, mLen, nBytes) {
  var e, m2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i2 = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer2[offset + i2];
  i2 += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
  }
  m2 = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m2 = m2 * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
  }
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m2 ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m2 = m2 + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m2 * Math.pow(2, e - mLen);
};
ieee754$1.write = function(buffer2, value2, offset, isLE, mLen, nBytes) {
  var e, m2, c2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i2 = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value2 < 0 || value2 === 0 && 1 / value2 < 0 ? 1 : 0;
  value2 = Math.abs(value2);
  if (isNaN(value2) || value2 === Infinity) {
    m2 = isNaN(value2) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value2) / Math.LN2);
    if (value2 * (c2 = Math.pow(2, -e)) < 1) {
      e--;
      c2 *= 2;
    }
    if (e + eBias >= 1) {
      value2 += rt / c2;
    } else {
      value2 += rt * Math.pow(2, 1 - eBias);
    }
    if (value2 * c2 >= 2) {
      e++;
      c2 /= 2;
    }
    if (e + eBias >= eMax) {
      m2 = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m2 = (value2 * c2 - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m2 = value2 * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer2[offset + i2] = m2 & 255, i2 += d, m2 /= 256, mLen -= 8) {
  }
  e = e << mLen | m2;
  eLen += mLen;
  for (; eLen > 0; buffer2[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
  }
  buffer2[offset + i2 - d] |= s * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(exports2) {
  const base64 = base64Js;
  const ieee7542 = ieee754$1;
  const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports2.Buffer = Buffer2;
  exports2.SlowBuffer = SlowBuffer;
  exports2.INSPECT_MAX_BYTES = 50;
  const K_MAX_LENGTH = 2147483647;
  exports2.kMaxLength = K_MAX_LENGTH;
  Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
    console.error(
      "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
    );
  }
  function typedArraySupport() {
    try {
      const arr = new Uint8Array(1);
      const proto = { foo: function() {
        return 42;
      } };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(Buffer2.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this))
        return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer2.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this))
        return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function Buffer2(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer2.poolSize = 8192;
  function from(value2, encodingOrOffset, length) {
    if (typeof value2 === "string") {
      return fromString(value2, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value2)) {
      return fromArrayView(value2);
    }
    if (value2 == null) {
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value2
      );
    }
    if (isInstance(value2, ArrayBuffer) || value2 && isInstance(value2.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value2, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value2, SharedArrayBuffer) || value2 && isInstance(value2.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value2, encodingOrOffset, length);
    }
    if (typeof value2 === "number") {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    }
    const valueOf = value2.valueOf && value2.valueOf();
    if (valueOf != null && valueOf !== value2) {
      return Buffer2.from(valueOf, encodingOrOffset, length);
    }
    const b = fromObject(value2);
    if (b)
      return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value2[Symbol.toPrimitive] === "function") {
      return Buffer2.from(value2[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    }
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value2
    );
  }
  Buffer2.from = function(value2, encodingOrOffset, length) {
    return from(value2, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer2, Uint8Array);
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }
  Buffer2.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  Buffer2.allocUnsafe = function(size) {
    return allocUnsafe(size);
  };
  Buffer2.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
  };
  function fromString(string2, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer2.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    const length = byteLength2(string2, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string2, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array2) {
    const length = array2.length < 0 ? 0 : checked(array2.length) | 0;
    const buf = createBuffer(length);
    for (let i2 = 0; i2 < length; i2 += 1) {
      buf[i2] = array2[i2] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      const copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array2, byteOffset, length) {
    if (byteOffset < 0 || array2.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array2.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    let buf;
    if (byteOffset === void 0 && length === void 0) {
      buf = new Uint8Array(array2);
    } else if (length === void 0) {
      buf = new Uint8Array(array2, byteOffset);
    } else {
      buf = new Uint8Array(array2, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer2.isBuffer(obj)) {
      const len2 = checked(obj.length) | 0;
      const buf = createBuffer(len2);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len2);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer2.alloc(+length);
  }
  Buffer2.isBuffer = function isBuffer2(b) {
    return b != null && b._isBuffer === true && b !== Buffer2.prototype;
  };
  Buffer2.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array))
      a = Buffer2.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array))
      b = Buffer2.from(b, b.offset, b.byteLength);
    if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    }
    if (a === b)
      return 0;
    let x = a.length;
    let y = b.length;
    for (let i2 = 0, len2 = Math.min(x, y); i2 < len2; ++i2) {
      if (a[i2] !== b[i2]) {
        x = a[i2];
        y = b[i2];
        break;
      }
    }
    if (x < y)
      return -1;
    if (y < x)
      return 1;
    return 0;
  };
  Buffer2.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer2.concat = function concat2(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer2.alloc(0);
    }
    let i2;
    if (length === void 0) {
      length = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        length += list[i2].length;
      }
    }
    const buffer2 = Buffer2.allocUnsafe(length);
    let pos = 0;
    for (i2 = 0; i2 < list.length; ++i2) {
      let buf = list[i2];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer2.length) {
          if (!Buffer2.isBuffer(buf))
            buf = Buffer2.from(buf);
          buf.copy(buffer2, pos);
        } else {
          Uint8Array.prototype.set.call(
            buffer2,
            buf,
            pos
          );
        }
      } else if (!Buffer2.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer2, pos);
      }
      pos += buf.length;
    }
    return buffer2;
  };
  function byteLength2(string2, encoding) {
    if (Buffer2.isBuffer(string2)) {
      return string2.length;
    }
    if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
      return string2.byteLength;
    }
    if (typeof string2 !== "string") {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
      );
    }
    const len2 = string2.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len2 === 0)
      return 0;
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len2;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string2).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len2 * 2;
        case "hex":
          return len2 >>> 1;
        case "base64":
          return base64ToBytes(string2).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string2).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.byteLength = byteLength2;
  function slowToString(encoding, start, end) {
    let loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding)
      encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.prototype._isBuffer = true;
  function swap(b, n, m2) {
    const i2 = b[n];
    b[n] = b[m2];
    b[m2] = i2;
  }
  Buffer2.prototype.swap16 = function swap16() {
    const len2 = this.length;
    if (len2 % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (let i2 = 0; i2 < len2; i2 += 2) {
      swap(this, i2, i2 + 1);
    }
    return this;
  };
  Buffer2.prototype.swap32 = function swap32() {
    const len2 = this.length;
    if (len2 % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (let i2 = 0; i2 < len2; i2 += 4) {
      swap(this, i2, i2 + 3);
      swap(this, i2 + 1, i2 + 2);
    }
    return this;
  };
  Buffer2.prototype.swap64 = function swap64() {
    const len2 = this.length;
    if (len2 % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (let i2 = 0; i2 < len2; i2 += 8) {
      swap(this, i2, i2 + 7);
      swap(this, i2 + 1, i2 + 6);
      swap(this, i2 + 2, i2 + 5);
      swap(this, i2 + 3, i2 + 4);
    }
    return this;
  };
  Buffer2.prototype.toString = function toString2() {
    const length = this.length;
    if (length === 0)
      return "";
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
  Buffer2.prototype.equals = function equals(b) {
    if (!Buffer2.isBuffer(b))
      throw new TypeError("Argument must be a Buffer");
    if (this === b)
      return true;
    return Buffer2.compare(this, b) === 0;
  };
  Buffer2.prototype.inspect = function inspect() {
    let str = "";
    const max = exports2.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max)
      str += " ... ";
    return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) {
    Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
  }
  Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer2.from(target, target.offset, target.byteLength);
    }
    if (!Buffer2.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
      );
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target)
      return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len2 = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for (let i2 = 0; i2 < len2; ++i2) {
      if (thisCopy[i2] !== targetCopy[i2]) {
        x = thisCopy[i2];
        y = targetCopy[i2];
        break;
      }
    }
    if (x < y)
      return -1;
    if (y < x)
      return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
    if (buffer2.length === 0)
      return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer2.length - 1;
    }
    if (byteOffset < 0)
      byteOffset = buffer2.length + byteOffset;
    if (byteOffset >= buffer2.length) {
      if (dir)
        return -1;
      else
        byteOffset = buffer2.length - 1;
    } else if (byteOffset < 0) {
      if (dir)
        byteOffset = 0;
      else
        return -1;
    }
    if (typeof val === "string") {
      val = Buffer2.from(val, encoding);
    }
    if (Buffer2.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i3) {
      if (indexSize === 1) {
        return buf[i3];
      } else {
        return buf.readUInt16BE(i3 * indexSize);
      }
    }
    let i2;
    if (dir) {
      let foundIndex = -1;
      for (i2 = byteOffset; i2 < arrLength; i2++) {
        if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
          if (foundIndex === -1)
            foundIndex = i2;
          if (i2 - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1)
            i2 -= i2 - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength)
        byteOffset = arrLength - valLength;
      for (i2 = byteOffset; i2 >= 0; i2--) {
        let found = true;
        for (let j = 0; j < valLength; j++) {
          if (read(arr, i2 + j) !== read(val, j)) {
            found = false;
            break;
          }
        }
        if (found)
          return i2;
      }
    }
    return -1;
  }
  Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string2, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    const strLen = string2.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    let i2;
    for (i2 = 0; i2 < length; ++i2) {
      const parsed = parseInt(string2.substr(i2 * 2, 2), 16);
      if (numberIsNaN(parsed))
        return i2;
      buf[offset + i2] = parsed;
    }
    return i2;
  }
  function utf8Write(buf, string2, offset, length) {
    return blitBuffer(utf8ToBytes(string2, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string2, offset, length) {
    return blitBuffer(asciiToBytes(string2), buf, offset, length);
  }
  function base64Write(buf, string2, offset, length) {
    return blitBuffer(base64ToBytes(string2), buf, offset, length);
  }
  function ucs2Write(buf, string2, offset, length) {
    return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
  }
  Buffer2.prototype.write = function write(string2, offset, length, encoding) {
    if (offset === void 0) {
      encoding = "utf8";
      length = this.length;
      offset = 0;
    } else if (length === void 0 && typeof offset === "string") {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === void 0)
          encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    }
    const remaining = this.length - offset;
    if (length === void 0 || length > remaining)
      length = remaining;
    if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding)
      encoding = "utf8";
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string2, offset, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string2, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string2, offset, length);
        case "base64":
          return base64Write(this, string2, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string2, offset, length);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer2.prototype.toJSON = function toJSON() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i2 = start;
    while (i2 < end) {
      const firstByte = buf[i2];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i2 + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i2 + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i2 + 1];
            thirdByte = buf[i2 + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i2 + 1];
            thirdByte = buf[i2 + 2];
            fourthByte = buf[i2 + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i2 += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  const MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len2 = codePoints.length;
    if (len2 <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i2 = 0;
    while (i2 < len2) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i2 = start; i2 < end; ++i2) {
      ret += String.fromCharCode(buf[i2] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i2 = start; i2 < end; ++i2) {
      ret += String.fromCharCode(buf[i2]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    const len2 = buf.length;
    if (!start || start < 0)
      start = 0;
    if (!end || end < 0 || end > len2)
      end = len2;
    let out = "";
    for (let i2 = start; i2 < end; ++i2) {
      out += hexSliceLookupTable[buf[i2]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    const bytes2 = buf.slice(start, end);
    let res = "";
    for (let i2 = 0; i2 < bytes2.length - 1; i2 += 2) {
      res += String.fromCharCode(bytes2[i2] + bytes2[i2 + 1] * 256);
    }
    return res;
  }
  Buffer2.prototype.slice = function slice(start, end) {
    const len2 = this.length;
    start = ~~start;
    end = end === void 0 ? len2 : ~~end;
    if (start < 0) {
      start += len2;
      if (start < 0)
        start = 0;
    } else if (start > len2) {
      start = len2;
    }
    if (end < 0) {
      end += len2;
      if (end < 0)
        end = 0;
    } else if (end > len2) {
      end = len2;
    }
    if (end < start)
      end = start;
    const newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer2.prototype);
    return newBuf;
  };
  function checkOffset(offset, ext2, length) {
    if (offset % 1 !== 0 || offset < 0)
      throw new RangeError("offset is not uint");
    if (offset + ext2 > length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE2(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i2 = 0;
    while (++i2 < byteLength3 && (mul *= 256)) {
      val += this[offset + i2] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength3, this.length);
    }
    let val = this[offset + --byteLength3];
    let mul = 1;
    while (byteLength3 > 0 && (mul *= 256)) {
      val += this[offset + --byteLength3] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
  };
  Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
  });
  Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
  });
  Buffer2.prototype.readIntLE = function readIntLE2(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i2 = 0;
    while (++i2 < byteLength3 && (mul *= 256)) {
      val += this[offset + i2] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    let i2 = byteLength3;
    let mul = 1;
    let val = this[offset + --i2];
    while (i2 > 0 && (mul *= 256)) {
      val += this[offset + --i2] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128))
      return this[offset];
    return (255 - this[offset] + 1) * -1;
  };
  Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
  });
  Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
  });
  Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee7542.read(this, offset, true, 23, 4);
  };
  Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee7542.read(this, offset, false, 23, 4);
  };
  Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee7542.read(this, offset, true, 52, 8);
  };
  Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee7542.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value2, offset, ext2, max, min) {
    if (!Buffer2.isBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value2 > max || value2 < min)
      throw new RangeError('"value" argument is out of bounds');
    if (offset + ext2 > buf.length)
      throw new RangeError("Index out of range");
  }
  Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE2(value2, offset, byteLength3, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value2, offset, byteLength3, maxBytes, 0);
    }
    let mul = 1;
    let i2 = 0;
    this[offset] = value2 & 255;
    while (++i2 < byteLength3 && (mul *= 256)) {
      this[offset + i2] = value2 / mul & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value2, offset, byteLength3, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value2, offset, byteLength3, maxBytes, 0);
    }
    let i2 = byteLength3 - 1;
    let mul = 1;
    this[offset + i2] = value2 & 255;
    while (--i2 >= 0 && (mul *= 256)) {
      this[offset + i2] = value2 / mul & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 1, 255, 0);
    this[offset] = value2 & 255;
    return offset + 1;
  };
  Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 2, 65535, 0);
    this[offset] = value2 & 255;
    this[offset + 1] = value2 >>> 8;
    return offset + 2;
  };
  Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 2, 65535, 0);
    this[offset] = value2 >>> 8;
    this[offset + 1] = value2 & 255;
    return offset + 2;
  };
  Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 4, 4294967295, 0);
    this[offset + 3] = value2 >>> 24;
    this[offset + 2] = value2 >>> 16;
    this[offset + 1] = value2 >>> 8;
    this[offset] = value2 & 255;
    return offset + 4;
  };
  Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 4, 4294967295, 0);
    this[offset] = value2 >>> 24;
    this[offset + 1] = value2 >>> 16;
    this[offset + 2] = value2 >>> 8;
    this[offset + 3] = value2 & 255;
    return offset + 4;
  };
  function wrtBigUInt64LE(buf, value2, offset, min, max) {
    checkIntBI(value2, min, max, buf, offset, 7);
    let lo = Number(value2 & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value2 >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
  }
  function wrtBigUInt64BE(buf, value2, offset, min, max) {
    checkIntBI(value2, min, max, buf, offset, 7);
    let lo = Number(value2 & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value2 >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
  }
  Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value2, offset = 0) {
    return wrtBigUInt64LE(this, value2, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value2, offset = 0) {
    return wrtBigUInt64BE(this, value2, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer2.prototype.writeIntLE = function writeIntLE2(value2, offset, byteLength3, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value2, offset, byteLength3, limit - 1, -limit);
    }
    let i2 = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value2 & 255;
    while (++i2 < byteLength3 && (mul *= 256)) {
      if (value2 < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
        sub = 1;
      }
      this[offset + i2] = (value2 / mul >> 0) - sub & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeIntBE = function writeIntBE(value2, offset, byteLength3, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value2, offset, byteLength3, limit - 1, -limit);
    }
    let i2 = byteLength3 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i2] = value2 & 255;
    while (--i2 >= 0 && (mul *= 256)) {
      if (value2 < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
        sub = 1;
      }
      this[offset + i2] = (value2 / mul >> 0) - sub & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeInt8 = function writeInt8(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 1, 127, -128);
    if (value2 < 0)
      value2 = 255 + value2 + 1;
    this[offset] = value2 & 255;
    return offset + 1;
  };
  Buffer2.prototype.writeInt16LE = function writeInt16LE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 2, 32767, -32768);
    this[offset] = value2 & 255;
    this[offset + 1] = value2 >>> 8;
    return offset + 2;
  };
  Buffer2.prototype.writeInt16BE = function writeInt16BE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 2, 32767, -32768);
    this[offset] = value2 >>> 8;
    this[offset + 1] = value2 & 255;
    return offset + 2;
  };
  Buffer2.prototype.writeInt32LE = function writeInt32LE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 4, 2147483647, -2147483648);
    this[offset] = value2 & 255;
    this[offset + 1] = value2 >>> 8;
    this[offset + 2] = value2 >>> 16;
    this[offset + 3] = value2 >>> 24;
    return offset + 4;
  };
  Buffer2.prototype.writeInt32BE = function writeInt32BE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 4, 2147483647, -2147483648);
    if (value2 < 0)
      value2 = 4294967295 + value2 + 1;
    this[offset] = value2 >>> 24;
    this[offset + 1] = value2 >>> 16;
    this[offset + 2] = value2 >>> 8;
    this[offset + 3] = value2 & 255;
    return offset + 4;
  };
  Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value2, offset = 0) {
    return wrtBigUInt64LE(this, value2, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value2, offset = 0) {
    return wrtBigUInt64BE(this, value2, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function checkIEEE754(buf, value2, offset, ext2, max, min) {
    if (offset + ext2 > buf.length)
      throw new RangeError("Index out of range");
    if (offset < 0)
      throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value2, offset, littleEndian, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value2, offset, 4);
    }
    ieee7542.write(buf, value2, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer2.prototype.writeFloatLE = function writeFloatLE(value2, offset, noAssert) {
    return writeFloat(this, value2, offset, true, noAssert);
  };
  Buffer2.prototype.writeFloatBE = function writeFloatBE(value2, offset, noAssert) {
    return writeFloat(this, value2, offset, false, noAssert);
  };
  function writeDouble(buf, value2, offset, littleEndian, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value2, offset, 8);
    }
    ieee7542.write(buf, value2, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value2, offset, noAssert) {
    return writeDouble(this, value2, offset, true, noAssert);
  };
  Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value2, offset, noAssert) {
    return writeDouble(this, value2, offset, false, noAssert);
  };
  Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer2.isBuffer(target))
      throw new TypeError("argument should be a Buffer");
    if (!start)
      start = 0;
    if (!end && end !== 0)
      end = this.length;
    if (targetStart >= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end > 0 && end < start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length)
      throw new RangeError("Index out of range");
    if (end < 0)
      throw new RangeError("sourceEnd out of bounds");
    if (end > this.length)
      end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    const len2 = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      );
    }
    return len2;
  };
  Buffer2.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val.length === 1) {
        const code2 = val.charCodeAt(0);
        if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
          val = code2;
        }
      }
    } else if (typeof val === "number") {
      val = val & 255;
    } else if (typeof val === "boolean") {
      val = Number(val);
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val)
      val = 0;
    let i2;
    if (typeof val === "number") {
      for (i2 = start; i2 < end; ++i2) {
        this[i2] = val;
      }
    } else {
      const bytes2 = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
      const len2 = bytes2.length;
      if (len2 === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i2 = 0; i2 < end - start; ++i2) {
        this[i2 + start] = bytes2[i2 % len2];
      }
    }
    return this;
  };
  const errors = {};
  function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
      constructor() {
        super();
        Object.defineProperty(this, "message", {
          value: getMessage.apply(this, arguments),
          writable: true,
          configurable: true
        });
        this.name = `${this.name} [${sym}]`;
        this.stack;
        delete this.name;
      }
      get code() {
        return sym;
      }
      set code(value2) {
        Object.defineProperty(this, "code", {
          configurable: true,
          enumerable: true,
          value: value2,
          writable: true
        });
      }
      toString() {
        return `${this.name} [${sym}]: ${this.message}`;
      }
    };
  }
  E(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(name) {
      if (name) {
        return `${name} is outside of buffer bounds`;
      }
      return "Attempt to access memory outside buffer bounds";
    },
    RangeError
  );
  E(
    "ERR_INVALID_ARG_TYPE",
    function(name, actual) {
      return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
    },
    TypeError
  );
  E(
    "ERR_OUT_OF_RANGE",
    function(str, range, input) {
      let msg = `The value of "${str}" is out of range.`;
      let received = input;
      if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
        received = addNumericalSeparator(String(input));
      } else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
          received = addNumericalSeparator(received);
        }
        received += "n";
      }
      msg += ` It must be ${range}. Received ${received}`;
      return msg;
    },
    RangeError
  );
  function addNumericalSeparator(val) {
    let res = "";
    let i2 = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for (; i2 >= start + 4; i2 -= 3) {
      res = `_${val.slice(i2 - 3, i2)}${res}`;
    }
    return `${val.slice(0, i2)}${res}`;
  }
  function checkBounds(buf, offset, byteLength3) {
    validateNumber(offset, "offset");
    if (buf[offset] === void 0 || buf[offset + byteLength3] === void 0) {
      boundsError(offset, buf.length - (byteLength3 + 1));
    }
  }
  function checkIntBI(value2, min, max, buf, offset, byteLength3) {
    if (value2 > max || value2 < min) {
      const n = typeof min === "bigint" ? "n" : "";
      let range;
      if (byteLength3 > 3) {
        if (min === 0 || min === BigInt(0)) {
          range = `>= 0${n} and < 2${n} ** ${(byteLength3 + 1) * 8}${n}`;
        } else {
          range = `>= -(2${n} ** ${(byteLength3 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength3 + 1) * 8 - 1}${n}`;
        }
      } else {
        range = `>= ${min}${n} and <= ${max}${n}`;
      }
      throw new errors.ERR_OUT_OF_RANGE("value", range, value2);
    }
    checkBounds(buf, offset, byteLength3);
  }
  function validateNumber(value2, name) {
    if (typeof value2 !== "number") {
      throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value2);
    }
  }
  function boundsError(value2, length, type) {
    if (Math.floor(value2) !== value2) {
      validateNumber(value2, type);
      throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value2);
    }
    if (length < 0) {
      throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors.ERR_OUT_OF_RANGE(
      type || "offset",
      `>= ${type ? 1 : 0} and <= ${length}`,
      value2
    );
  }
  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length < 2)
      return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string2, units) {
    units = units || Infinity;
    let codePoint;
    const length = string2.length;
    let leadSurrogate = null;
    const bytes2 = [];
    for (let i2 = 0; i2 < length; ++i2) {
      codePoint = string2.charCodeAt(i2);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1)
              bytes2.push(239, 191, 189);
            continue;
          } else if (i2 + 1 === length) {
            if ((units -= 3) > -1)
              bytes2.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1)
            bytes2.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes2.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0)
          break;
        bytes2.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0)
          break;
        bytes2.push(
          codePoint >> 6 | 192,
          codePoint & 63 | 128
        );
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0)
          break;
        bytes2.push(
          codePoint >> 12 | 224,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0)
          break;
        bytes2.push(
          codePoint >> 18 | 240,
          codePoint >> 12 & 63 | 128,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes2;
  }
  function asciiToBytes(str) {
    const byteArray = [];
    for (let i2 = 0; i2 < str.length; ++i2) {
      byteArray.push(str.charCodeAt(i2) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    let c2, hi, lo;
    const byteArray = [];
    for (let i2 = 0; i2 < str.length; ++i2) {
      if ((units -= 2) < 0)
        break;
      c2 = str.charCodeAt(i2);
      hi = c2 >> 8;
      lo = c2 % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src2, dst, offset, length) {
    let i2;
    for (i2 = 0; i2 < length; ++i2) {
      if (i2 + offset >= dst.length || i2 >= src2.length)
        break;
      dst[i2 + offset] = src2[i2];
    }
    return i2;
  }
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  const hexSliceLookupTable = function() {
    const alphabet2 = "0123456789abcdef";
    const table = new Array(256);
    for (let i2 = 0; i2 < 16; ++i2) {
      const i162 = i2 * 16;
      for (let j = 0; j < 16; ++j) {
        table[i162 + j] = alphabet2[i2] + alphabet2[j];
      }
    }
    return table;
  }();
  function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
  }
  function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
  }
})(buffer$1);
var ReplicaRejectCode$1;
(function(ReplicaRejectCode2) {
  ReplicaRejectCode2[ReplicaRejectCode2["SysFatal"] = 1] = "SysFatal";
  ReplicaRejectCode2[ReplicaRejectCode2["SysTransient"] = 2] = "SysTransient";
  ReplicaRejectCode2[ReplicaRejectCode2["DestinationInvalid"] = 3] = "DestinationInvalid";
  ReplicaRejectCode2[ReplicaRejectCode2["CanisterReject"] = 4] = "CanisterReject";
  ReplicaRejectCode2[ReplicaRejectCode2["CanisterError"] = 5] = "CanisterError";
})(ReplicaRejectCode$1 || (ReplicaRejectCode$1 = {}));
const alphabet$1 = "abcdefghijklmnopqrstuvwxyz234567";
const lookupTable$1 = /* @__PURE__ */ Object.create(null);
for (let i2 = 0; i2 < alphabet$1.length; i2++) {
  lookupTable$1[alphabet$1[i2]] = i2;
}
lookupTable$1["0"] = lookupTable$1.o;
lookupTable$1["1"] = lookupTable$1.i;
function encode$3(input) {
  let skip = 0;
  let bits = 0;
  let output = "";
  function encodeByte(byte) {
    if (skip < 0) {
      bits |= byte >> -skip;
    } else {
      bits = byte << skip & 248;
    }
    if (skip > 3) {
      skip -= 8;
      return 1;
    }
    if (skip < 4) {
      output += alphabet$1[bits >> 3];
      skip += 5;
    }
    return 0;
  }
  for (let i2 = 0; i2 < input.length; ) {
    i2 += encodeByte(input[i2]);
  }
  return output + (skip < 0 ? alphabet$1[bits >> 3] : "");
}
function decode$4(input) {
  let skip = 0;
  let byte = 0;
  const output = new Uint8Array(input.length * 4 / 3 | 0);
  let o = 0;
  function decodeChar(char) {
    let val = lookupTable$1[char.toLowerCase()];
    if (val === void 0) {
      throw new Error(`Invalid character: ${JSON.stringify(char)}`);
    }
    val <<= 3;
    byte |= val >>> skip;
    skip += 5;
    if (skip >= 8) {
      output[o++] = byte;
      skip -= 8;
      if (skip > 0) {
        byte = val << 5 - skip & 255;
      } else {
        byte = 0;
      }
    }
  }
  for (const c2 of input) {
    decodeChar(c2);
  }
  return output.slice(0, o);
}
const lookUpTable$1 = new Uint32Array([
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
]);
function getCrc32$1(buf) {
  const b = new Uint8Array(buf);
  let crc = -1;
  for (let i2 = 0; i2 < b.length; i2++) {
    const byte = b[i2];
    const t = (byte ^ crc) & 255;
    crc = lookUpTable$1[t] ^ crc >>> 8;
  }
  return (crc ^ -1) >>> 0;
}
var sha256$1 = { exports: {} };
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
(function(module) {
  (function() {
    var ERROR = "input is invalid type";
    var WINDOW = typeof window === "object";
    var root = WINDOW ? window : {};
    if (root.JS_SHA256_NO_WINDOW) {
      WINDOW = false;
    }
    var WEB_WORKER = !WINDOW && typeof self === "object";
    var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal;
    } else if (WEB_WORKER) {
      root = self;
    }
    var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && true && module.exports;
    var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
    var HEX_CHARS = "0123456789abcdef".split("");
    var EXTRA = [-2147483648, 8388608, 32768, 128];
    var SHIFT = [24, 16, 8, 0];
    var K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    var OUTPUT_TYPES = ["hex", "array", "digest", "arrayBuffer"];
    var blocks = [];
    if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
      Array.isArray = function(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      };
    }
    if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
      ArrayBuffer.isView = function(obj) {
        return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
    }
    var createOutputMethod = function(outputType, is2242) {
      return function(message) {
        return new Sha256(is2242, true).update(message)[outputType]();
      };
    };
    var createMethod = function(is2242) {
      var method2 = createOutputMethod("hex", is2242);
      if (NODE_JS) {
        method2 = nodeWrap(method2, is2242);
      }
      method2.create = function() {
        return new Sha256(is2242);
      };
      method2.update = function(message) {
        return method2.create().update(message);
      };
      for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
        var type = OUTPUT_TYPES[i2];
        method2[type] = createOutputMethod(type, is2242);
      }
      return method2;
    };
    var nodeWrap = function(method, is224) {
      var crypto = eval("require('crypto')");
      var Buffer = eval("require('buffer').Buffer");
      var algorithm = is224 ? "sha224" : "sha256";
      var nodeMethod = function(message) {
        if (typeof message === "string") {
          return crypto.createHash(algorithm).update(message, "utf8").digest("hex");
        } else {
          if (message === null || message === void 0) {
            throw new Error(ERROR);
          } else if (message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          }
        }
        if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) {
          return crypto.createHash(algorithm).update(new Buffer(message)).digest("hex");
        } else {
          return method(message);
        }
      };
      return nodeMethod;
    };
    var createHmacOutputMethod = function(outputType, is2242) {
      return function(key, message) {
        return new HmacSha256(key, is2242, true).update(message)[outputType]();
      };
    };
    var createHmacMethod = function(is2242) {
      var method2 = createHmacOutputMethod("hex", is2242);
      method2.create = function(key) {
        return new HmacSha256(key, is2242);
      };
      method2.update = function(key, message) {
        return method2.create(key).update(message);
      };
      for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
        var type = OUTPUT_TYPES[i2];
        method2[type] = createHmacOutputMethod(type, is2242);
      }
      return method2;
    };
    function Sha256(is2242, sharedMemory) {
      if (sharedMemory) {
        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        this.blocks = blocks;
      } else {
        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      }
      if (is2242) {
        this.h0 = 3238371032;
        this.h1 = 914150663;
        this.h2 = 812702999;
        this.h3 = 4144912697;
        this.h4 = 4290775857;
        this.h5 = 1750603025;
        this.h6 = 1694076839;
        this.h7 = 3204075428;
      } else {
        this.h0 = 1779033703;
        this.h1 = 3144134277;
        this.h2 = 1013904242;
        this.h3 = 2773480762;
        this.h4 = 1359893119;
        this.h5 = 2600822924;
        this.h6 = 528734635;
        this.h7 = 1541459225;
      }
      this.block = this.start = this.bytes = this.hBytes = 0;
      this.finalized = this.hashed = false;
      this.first = true;
      this.is224 = is2242;
    }
    Sha256.prototype.update = function(message) {
      if (this.finalized) {
        return;
      }
      var notString, type = typeof message;
      if (type !== "string") {
        if (type === "object") {
          if (message === null) {
            throw new Error(ERROR);
          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          } else if (!Array.isArray(message)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
              throw new Error(ERROR);
            }
          }
        } else {
          throw new Error(ERROR);
        }
        notString = true;
      }
      var code2, index2 = 0, i2, length = message.length, blocks2 = this.blocks;
      while (index2 < length) {
        if (this.hashed) {
          this.hashed = false;
          blocks2[0] = this.block;
          blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
        }
        if (notString) {
          for (i2 = this.start; index2 < length && i2 < 64; ++index2) {
            blocks2[i2 >> 2] |= message[index2] << SHIFT[i2++ & 3];
          }
        } else {
          for (i2 = this.start; index2 < length && i2 < 64; ++index2) {
            code2 = message.charCodeAt(index2);
            if (code2 < 128) {
              blocks2[i2 >> 2] |= code2 << SHIFT[i2++ & 3];
            } else if (code2 < 2048) {
              blocks2[i2 >> 2] |= (192 | code2 >> 6) << SHIFT[i2++ & 3];
              blocks2[i2 >> 2] |= (128 | code2 & 63) << SHIFT[i2++ & 3];
            } else if (code2 < 55296 || code2 >= 57344) {
              blocks2[i2 >> 2] |= (224 | code2 >> 12) << SHIFT[i2++ & 3];
              blocks2[i2 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i2++ & 3];
              blocks2[i2 >> 2] |= (128 | code2 & 63) << SHIFT[i2++ & 3];
            } else {
              code2 = 65536 + ((code2 & 1023) << 10 | message.charCodeAt(++index2) & 1023);
              blocks2[i2 >> 2] |= (240 | code2 >> 18) << SHIFT[i2++ & 3];
              blocks2[i2 >> 2] |= (128 | code2 >> 12 & 63) << SHIFT[i2++ & 3];
              blocks2[i2 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i2++ & 3];
              blocks2[i2 >> 2] |= (128 | code2 & 63) << SHIFT[i2++ & 3];
            }
          }
        }
        this.lastByteIndex = i2;
        this.bytes += i2 - this.start;
        if (i2 >= 64) {
          this.block = blocks2[16];
          this.start = i2 - 64;
          this.hash();
          this.hashed = true;
        } else {
          this.start = i2;
        }
      }
      if (this.bytes > 4294967295) {
        this.hBytes += this.bytes / 4294967296 << 0;
        this.bytes = this.bytes % 4294967296;
      }
      return this;
    };
    Sha256.prototype.finalize = function() {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks2 = this.blocks, i2 = this.lastByteIndex;
      blocks2[16] = this.block;
      blocks2[i2 >> 2] |= EXTRA[i2 & 3];
      this.block = blocks2[16];
      if (i2 >= 56) {
        if (!this.hashed) {
          this.hash();
        }
        blocks2[0] = this.block;
        blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
      }
      blocks2[14] = this.hBytes << 3 | this.bytes >>> 29;
      blocks2[15] = this.bytes << 3;
      this.hash();
    };
    Sha256.prototype.hash = function() {
      var a = this.h0, b = this.h1, c2 = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6, h = this.h7, blocks2 = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;
      for (j = 16; j < 64; ++j) {
        t1 = blocks2[j - 15];
        s0 = (t1 >>> 7 | t1 << 25) ^ (t1 >>> 18 | t1 << 14) ^ t1 >>> 3;
        t1 = blocks2[j - 2];
        s1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;
        blocks2[j] = blocks2[j - 16] + s0 + blocks2[j - 7] + s1 << 0;
      }
      bc = b & c2;
      for (j = 0; j < 64; j += 4) {
        if (this.first) {
          if (this.is224) {
            ab = 300032;
            t1 = blocks2[0] - 1413257819;
            h = t1 - 150054599 << 0;
            d = t1 + 24177077 << 0;
          } else {
            ab = 704751109;
            t1 = blocks2[0] - 210244248;
            h = t1 - 1521486534 << 0;
            d = t1 + 143694565 << 0;
          }
          this.first = false;
        } else {
          s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
          s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
          ab = a & b;
          maj = ab ^ a & c2 ^ bc;
          ch = e & f ^ ~e & g;
          t1 = h + s1 + ch + K[j] + blocks2[j];
          t2 = s0 + maj;
          h = d + t1 << 0;
          d = t1 + t2 << 0;
        }
        s0 = (d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10);
        s1 = (h >>> 6 | h << 26) ^ (h >>> 11 | h << 21) ^ (h >>> 25 | h << 7);
        da = d & a;
        maj = da ^ d & b ^ ab;
        ch = h & e ^ ~h & f;
        t1 = g + s1 + ch + K[j + 1] + blocks2[j + 1];
        t2 = s0 + maj;
        g = c2 + t1 << 0;
        c2 = t1 + t2 << 0;
        s0 = (c2 >>> 2 | c2 << 30) ^ (c2 >>> 13 | c2 << 19) ^ (c2 >>> 22 | c2 << 10);
        s1 = (g >>> 6 | g << 26) ^ (g >>> 11 | g << 21) ^ (g >>> 25 | g << 7);
        cd = c2 & d;
        maj = cd ^ c2 & a ^ da;
        ch = g & h ^ ~g & e;
        t1 = f + s1 + ch + K[j + 2] + blocks2[j + 2];
        t2 = s0 + maj;
        f = b + t1 << 0;
        b = t1 + t2 << 0;
        s0 = (b >>> 2 | b << 30) ^ (b >>> 13 | b << 19) ^ (b >>> 22 | b << 10);
        s1 = (f >>> 6 | f << 26) ^ (f >>> 11 | f << 21) ^ (f >>> 25 | f << 7);
        bc = b & c2;
        maj = bc ^ b & d ^ cd;
        ch = f & g ^ ~f & h;
        t1 = e + s1 + ch + K[j + 3] + blocks2[j + 3];
        t2 = s0 + maj;
        e = a + t1 << 0;
        a = t1 + t2 << 0;
      }
      this.h0 = this.h0 + a << 0;
      this.h1 = this.h1 + b << 0;
      this.h2 = this.h2 + c2 << 0;
      this.h3 = this.h3 + d << 0;
      this.h4 = this.h4 + e << 0;
      this.h5 = this.h5 + f << 0;
      this.h6 = this.h6 + g << 0;
      this.h7 = this.h7 + h << 0;
    };
    Sha256.prototype.hex = function() {
      this.finalize();
      var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;
      var hex = HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h4 >> 28 & 15] + HEX_CHARS[h4 >> 24 & 15] + HEX_CHARS[h4 >> 20 & 15] + HEX_CHARS[h4 >> 16 & 15] + HEX_CHARS[h4 >> 12 & 15] + HEX_CHARS[h4 >> 8 & 15] + HEX_CHARS[h4 >> 4 & 15] + HEX_CHARS[h4 & 15] + HEX_CHARS[h5 >> 28 & 15] + HEX_CHARS[h5 >> 24 & 15] + HEX_CHARS[h5 >> 20 & 15] + HEX_CHARS[h5 >> 16 & 15] + HEX_CHARS[h5 >> 12 & 15] + HEX_CHARS[h5 >> 8 & 15] + HEX_CHARS[h5 >> 4 & 15] + HEX_CHARS[h5 & 15] + HEX_CHARS[h6 >> 28 & 15] + HEX_CHARS[h6 >> 24 & 15] + HEX_CHARS[h6 >> 20 & 15] + HEX_CHARS[h6 >> 16 & 15] + HEX_CHARS[h6 >> 12 & 15] + HEX_CHARS[h6 >> 8 & 15] + HEX_CHARS[h6 >> 4 & 15] + HEX_CHARS[h6 & 15];
      if (!this.is224) {
        hex += HEX_CHARS[h7 >> 28 & 15] + HEX_CHARS[h7 >> 24 & 15] + HEX_CHARS[h7 >> 20 & 15] + HEX_CHARS[h7 >> 16 & 15] + HEX_CHARS[h7 >> 12 & 15] + HEX_CHARS[h7 >> 8 & 15] + HEX_CHARS[h7 >> 4 & 15] + HEX_CHARS[h7 & 15];
      }
      return hex;
    };
    Sha256.prototype.toString = Sha256.prototype.hex;
    Sha256.prototype.digest = function() {
      this.finalize();
      var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;
      var arr = [
        h0 >> 24 & 255,
        h0 >> 16 & 255,
        h0 >> 8 & 255,
        h0 & 255,
        h1 >> 24 & 255,
        h1 >> 16 & 255,
        h1 >> 8 & 255,
        h1 & 255,
        h2 >> 24 & 255,
        h2 >> 16 & 255,
        h2 >> 8 & 255,
        h2 & 255,
        h3 >> 24 & 255,
        h3 >> 16 & 255,
        h3 >> 8 & 255,
        h3 & 255,
        h4 >> 24 & 255,
        h4 >> 16 & 255,
        h4 >> 8 & 255,
        h4 & 255,
        h5 >> 24 & 255,
        h5 >> 16 & 255,
        h5 >> 8 & 255,
        h5 & 255,
        h6 >> 24 & 255,
        h6 >> 16 & 255,
        h6 >> 8 & 255,
        h6 & 255
      ];
      if (!this.is224) {
        arr.push(h7 >> 24 & 255, h7 >> 16 & 255, h7 >> 8 & 255, h7 & 255);
      }
      return arr;
    };
    Sha256.prototype.array = Sha256.prototype.digest;
    Sha256.prototype.arrayBuffer = function() {
      this.finalize();
      var buffer2 = new ArrayBuffer(this.is224 ? 28 : 32);
      var dataView = new DataView(buffer2);
      dataView.setUint32(0, this.h0);
      dataView.setUint32(4, this.h1);
      dataView.setUint32(8, this.h2);
      dataView.setUint32(12, this.h3);
      dataView.setUint32(16, this.h4);
      dataView.setUint32(20, this.h5);
      dataView.setUint32(24, this.h6);
      if (!this.is224) {
        dataView.setUint32(28, this.h7);
      }
      return buffer2;
    };
    function HmacSha256(key, is2242, sharedMemory) {
      var i2, type = typeof key;
      if (type === "string") {
        var bytes2 = [], length = key.length, index2 = 0, code2;
        for (i2 = 0; i2 < length; ++i2) {
          code2 = key.charCodeAt(i2);
          if (code2 < 128) {
            bytes2[index2++] = code2;
          } else if (code2 < 2048) {
            bytes2[index2++] = 192 | code2 >> 6;
            bytes2[index2++] = 128 | code2 & 63;
          } else if (code2 < 55296 || code2 >= 57344) {
            bytes2[index2++] = 224 | code2 >> 12;
            bytes2[index2++] = 128 | code2 >> 6 & 63;
            bytes2[index2++] = 128 | code2 & 63;
          } else {
            code2 = 65536 + ((code2 & 1023) << 10 | key.charCodeAt(++i2) & 1023);
            bytes2[index2++] = 240 | code2 >> 18;
            bytes2[index2++] = 128 | code2 >> 12 & 63;
            bytes2[index2++] = 128 | code2 >> 6 & 63;
            bytes2[index2++] = 128 | code2 & 63;
          }
        }
        key = bytes2;
      } else {
        if (type === "object") {
          if (key === null) {
            throw new Error(ERROR);
          } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
            key = new Uint8Array(key);
          } else if (!Array.isArray(key)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
              throw new Error(ERROR);
            }
          }
        } else {
          throw new Error(ERROR);
        }
      }
      if (key.length > 64) {
        key = new Sha256(is2242, true).update(key).array();
      }
      var oKeyPad = [], iKeyPad = [];
      for (i2 = 0; i2 < 64; ++i2) {
        var b = key[i2] || 0;
        oKeyPad[i2] = 92 ^ b;
        iKeyPad[i2] = 54 ^ b;
      }
      Sha256.call(this, is2242, sharedMemory);
      this.update(iKeyPad);
      this.oKeyPad = oKeyPad;
      this.inner = true;
      this.sharedMemory = sharedMemory;
    }
    HmacSha256.prototype = new Sha256();
    HmacSha256.prototype.finalize = function() {
      Sha256.prototype.finalize.call(this);
      if (this.inner) {
        this.inner = false;
        var innerHash = this.array();
        Sha256.call(this, this.is224, this.sharedMemory);
        this.update(this.oKeyPad);
        this.update(innerHash);
        Sha256.prototype.finalize.call(this);
      }
    };
    var exports = createMethod();
    exports.sha256 = exports;
    exports.sha224 = createMethod(true);
    exports.sha256.hmac = createHmacMethod();
    exports.sha224.hmac = createHmacMethod(true);
    if (COMMON_JS) {
      module.exports = exports;
    } else {
      root.sha256 = exports.sha256;
      root.sha224 = exports.sha224;
    }
  })();
})(sha256$1);
function sha224$2(data2) {
  const shaObj = sha256$1.exports.sha224.create();
  shaObj.update(data2);
  return new Uint8Array(shaObj.array());
}
const SELF_AUTHENTICATING_SUFFIX$1 = 2;
const ANONYMOUS_SUFFIX$1 = 4;
const fromHexString$1 = (hexString) => {
  var _a;
  return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map((byte) => parseInt(byte, 16)));
};
const toHexString$1 = (bytes2) => bytes2.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
class Principal$2 {
  constructor(_arr) {
    this._arr = _arr;
    this._isPrincipal = true;
  }
  static anonymous() {
    return new this(new Uint8Array([ANONYMOUS_SUFFIX$1]));
  }
  static selfAuthenticating(publicKey) {
    const sha = sha224$2(publicKey);
    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX$1]));
  }
  static from(other) {
    if (typeof other === "string") {
      return Principal$2.fromText(other);
    } else if (typeof other === "object" && other !== null && other._isPrincipal === true) {
      return new Principal$2(other._arr);
    }
    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);
  }
  static fromHex(hex) {
    return new this(fromHexString$1(hex));
  }
  static fromText(text) {
    const canisterIdNoDash = text.toLowerCase().replace(/-/g, "");
    let arr = decode$4(canisterIdNoDash);
    arr = arr.slice(4, arr.length);
    const principal = new this(arr);
    if (principal.toText() !== text) {
      throw new Error(`Principal "${principal.toText()}" does not have a valid checksum.`);
    }
    return principal;
  }
  static fromUint8Array(arr) {
    return new this(arr);
  }
  isAnonymous() {
    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX$1;
  }
  toUint8Array() {
    return this._arr;
  }
  toHex() {
    return toHexString$1(this._arr).toUpperCase();
  }
  toText() {
    const checksumArrayBuf = new ArrayBuffer(4);
    const view = new DataView(checksumArrayBuf);
    view.setUint32(0, getCrc32$1(this._arr));
    const checksum = Uint8Array.from(buffer$1.Buffer.from(checksumArrayBuf));
    const bytes2 = Uint8Array.from(this._arr);
    const array2 = new Uint8Array([...checksum, ...bytes2]);
    const result = encode$3(array2);
    const matches = result.match(/.{1,5}/g);
    if (!matches) {
      throw new Error();
    }
    return matches.join("-");
  }
  toString() {
    return this.toText();
  }
}
const esm$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Principal: Principal$2
}, Symbol.toStringTag, { value: "Module" }));
var src$1 = {};
var buffer = {};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(exports2) {
  var base64 = base64Js;
  var ieee7542 = ieee754$1;
  var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports2.Buffer = Buffer2;
  exports2.SlowBuffer = SlowBuffer;
  exports2.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 2147483647;
  exports2.kMaxLength = K_MAX_LENGTH;
  Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
    console.error(
      "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
    );
  }
  function typedArraySupport() {
    try {
      var arr = new Uint8Array(1);
      var proto = { foo: function() {
        return 42;
      } };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(Buffer2.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this))
        return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer2.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this))
        return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function Buffer2(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer2.poolSize = 8192;
  function from(value2, encodingOrOffset, length) {
    if (typeof value2 === "string") {
      return fromString(value2, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value2)) {
      return fromArrayView(value2);
    }
    if (value2 == null) {
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value2
      );
    }
    if (isInstance(value2, ArrayBuffer) || value2 && isInstance(value2.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value2, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value2, SharedArrayBuffer) || value2 && isInstance(value2.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value2, encodingOrOffset, length);
    }
    if (typeof value2 === "number") {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    }
    var valueOf = value2.valueOf && value2.valueOf();
    if (valueOf != null && valueOf !== value2) {
      return Buffer2.from(valueOf, encodingOrOffset, length);
    }
    var b = fromObject(value2);
    if (b)
      return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value2[Symbol.toPrimitive] === "function") {
      return Buffer2.from(
        value2[Symbol.toPrimitive]("string"),
        encodingOrOffset,
        length
      );
    }
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value2
    );
  }
  Buffer2.from = function(value2, encodingOrOffset, length) {
    return from(value2, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer2, Uint8Array);
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }
  Buffer2.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  Buffer2.allocUnsafe = function(size) {
    return allocUnsafe(size);
  };
  Buffer2.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
  };
  function fromString(string2, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer2.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    var length = byteLength2(string2, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string2, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array2) {
    var length = array2.length < 0 ? 0 : checked(array2.length) | 0;
    var buf = createBuffer(length);
    for (var i2 = 0; i2 < length; i2 += 1) {
      buf[i2] = array2[i2] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      var copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array2, byteOffset, length) {
    if (byteOffset < 0 || array2.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array2.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    var buf;
    if (byteOffset === void 0 && length === void 0) {
      buf = new Uint8Array(array2);
    } else if (length === void 0) {
      buf = new Uint8Array(array2, byteOffset);
    } else {
      buf = new Uint8Array(array2, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer2.isBuffer(obj)) {
      var len2 = checked(obj.length) | 0;
      var buf = createBuffer(len2);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len2);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer2.alloc(+length);
  }
  Buffer2.isBuffer = function isBuffer2(b) {
    return b != null && b._isBuffer === true && b !== Buffer2.prototype;
  };
  Buffer2.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array))
      a = Buffer2.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array))
      b = Buffer2.from(b, b.offset, b.byteLength);
    if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    }
    if (a === b)
      return 0;
    var x = a.length;
    var y = b.length;
    for (var i2 = 0, len2 = Math.min(x, y); i2 < len2; ++i2) {
      if (a[i2] !== b[i2]) {
        x = a[i2];
        y = b[i2];
        break;
      }
    }
    if (x < y)
      return -1;
    if (y < x)
      return 1;
    return 0;
  };
  Buffer2.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer2.concat = function concat2(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer2.alloc(0);
    }
    var i2;
    if (length === void 0) {
      length = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        length += list[i2].length;
      }
    }
    var buffer2 = Buffer2.allocUnsafe(length);
    var pos = 0;
    for (i2 = 0; i2 < list.length; ++i2) {
      var buf = list[i2];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer2.length) {
          Buffer2.from(buf).copy(buffer2, pos);
        } else {
          Uint8Array.prototype.set.call(
            buffer2,
            buf,
            pos
          );
        }
      } else if (!Buffer2.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer2, pos);
      }
      pos += buf.length;
    }
    return buffer2;
  };
  function byteLength2(string2, encoding) {
    if (Buffer2.isBuffer(string2)) {
      return string2.length;
    }
    if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
      return string2.byteLength;
    }
    if (typeof string2 !== "string") {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
      );
    }
    var len2 = string2.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len2 === 0)
      return 0;
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len2;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string2).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len2 * 2;
        case "hex":
          return len2 >>> 1;
        case "base64":
          return base64ToBytes(string2).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string2).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.byteLength = byteLength2;
  function slowToString(encoding, start, end) {
    var loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding)
      encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.prototype._isBuffer = true;
  function swap(b, n, m2) {
    var i2 = b[n];
    b[n] = b[m2];
    b[m2] = i2;
  }
  Buffer2.prototype.swap16 = function swap16() {
    var len2 = this.length;
    if (len2 % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (var i2 = 0; i2 < len2; i2 += 2) {
      swap(this, i2, i2 + 1);
    }
    return this;
  };
  Buffer2.prototype.swap32 = function swap32() {
    var len2 = this.length;
    if (len2 % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (var i2 = 0; i2 < len2; i2 += 4) {
      swap(this, i2, i2 + 3);
      swap(this, i2 + 1, i2 + 2);
    }
    return this;
  };
  Buffer2.prototype.swap64 = function swap64() {
    var len2 = this.length;
    if (len2 % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (var i2 = 0; i2 < len2; i2 += 8) {
      swap(this, i2, i2 + 7);
      swap(this, i2 + 1, i2 + 6);
      swap(this, i2 + 2, i2 + 5);
      swap(this, i2 + 3, i2 + 4);
    }
    return this;
  };
  Buffer2.prototype.toString = function toString2() {
    var length = this.length;
    if (length === 0)
      return "";
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
  Buffer2.prototype.equals = function equals(b) {
    if (!Buffer2.isBuffer(b))
      throw new TypeError("Argument must be a Buffer");
    if (this === b)
      return true;
    return Buffer2.compare(this, b) === 0;
  };
  Buffer2.prototype.inspect = function inspect() {
    var str = "";
    var max = exports2.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max)
      str += " ... ";
    return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) {
    Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
  }
  Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer2.from(target, target.offset, target.byteLength);
    }
    if (!Buffer2.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
      );
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target)
      return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len2 = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for (var i2 = 0; i2 < len2; ++i2) {
      if (thisCopy[i2] !== targetCopy[i2]) {
        x = thisCopy[i2];
        y = targetCopy[i2];
        break;
      }
    }
    if (x < y)
      return -1;
    if (y < x)
      return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
    if (buffer2.length === 0)
      return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer2.length - 1;
    }
    if (byteOffset < 0)
      byteOffset = buffer2.length + byteOffset;
    if (byteOffset >= buffer2.length) {
      if (dir)
        return -1;
      else
        byteOffset = buffer2.length - 1;
    } else if (byteOffset < 0) {
      if (dir)
        byteOffset = 0;
      else
        return -1;
    }
    if (typeof val === "string") {
      val = Buffer2.from(val, encoding);
    }
    if (Buffer2.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i3) {
      if (indexSize === 1) {
        return buf[i3];
      } else {
        return buf.readUInt16BE(i3 * indexSize);
      }
    }
    var i2;
    if (dir) {
      var foundIndex = -1;
      for (i2 = byteOffset; i2 < arrLength; i2++) {
        if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
          if (foundIndex === -1)
            foundIndex = i2;
          if (i2 - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1)
            i2 -= i2 - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength)
        byteOffset = arrLength - valLength;
      for (i2 = byteOffset; i2 >= 0; i2--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i2 + j) !== read(val, j)) {
            found = false;
            break;
          }
        }
        if (found)
          return i2;
      }
    }
    return -1;
  }
  Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string2, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string2.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i2 = 0; i2 < length; ++i2) {
      var parsed = parseInt(string2.substr(i2 * 2, 2), 16);
      if (numberIsNaN(parsed))
        return i2;
      buf[offset + i2] = parsed;
    }
    return i2;
  }
  function utf8Write(buf, string2, offset, length) {
    return blitBuffer(utf8ToBytes(string2, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string2, offset, length) {
    return blitBuffer(asciiToBytes(string2), buf, offset, length);
  }
  function base64Write(buf, string2, offset, length) {
    return blitBuffer(base64ToBytes(string2), buf, offset, length);
  }
  function ucs2Write(buf, string2, offset, length) {
    return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
  }
  Buffer2.prototype.write = function write(string2, offset, length, encoding) {
    if (offset === void 0) {
      encoding = "utf8";
      length = this.length;
      offset = 0;
    } else if (length === void 0 && typeof offset === "string") {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === void 0)
          encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    }
    var remaining = this.length - offset;
    if (length === void 0 || length > remaining)
      length = remaining;
    if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding)
      encoding = "utf8";
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string2, offset, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string2, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string2, offset, length);
        case "base64":
          return base64Write(this, string2, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string2, offset, length);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer2.prototype.toJSON = function toJSON() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i2 = start;
    while (i2 < end) {
      var firstByte = buf[i2];
      var codePoint = null;
      var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i2 + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i2 + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i2 + 1];
            thirdByte = buf[i2 + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i2 + 1];
            thirdByte = buf[i2 + 2];
            fourthByte = buf[i2 + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i2 += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  var MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    var len2 = codePoints.length;
    if (len2 <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    var res = "";
    var i2 = 0;
    while (i2 < len2) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i2 = start; i2 < end; ++i2) {
      ret += String.fromCharCode(buf[i2] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i2 = start; i2 < end; ++i2) {
      ret += String.fromCharCode(buf[i2]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len2 = buf.length;
    if (!start || start < 0)
      start = 0;
    if (!end || end < 0 || end > len2)
      end = len2;
    var out = "";
    for (var i2 = start; i2 < end; ++i2) {
      out += hexSliceLookupTable[buf[i2]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes2 = buf.slice(start, end);
    var res = "";
    for (var i2 = 0; i2 < bytes2.length - 1; i2 += 2) {
      res += String.fromCharCode(bytes2[i2] + bytes2[i2 + 1] * 256);
    }
    return res;
  }
  Buffer2.prototype.slice = function slice(start, end) {
    var len2 = this.length;
    start = ~~start;
    end = end === void 0 ? len2 : ~~end;
    if (start < 0) {
      start += len2;
      if (start < 0)
        start = 0;
    } else if (start > len2) {
      start = len2;
    }
    if (end < 0) {
      end += len2;
      if (end < 0)
        end = 0;
    } else if (end > len2) {
      end = len2;
    }
    if (end < start)
      end = start;
    var newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer2.prototype);
    return newBuf;
  };
  function checkOffset(offset, ext2, length) {
    if (offset % 1 !== 0 || offset < 0)
      throw new RangeError("offset is not uint");
    if (offset + ext2 > length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE2(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    var val = this[offset];
    var mul = 1;
    var i2 = 0;
    while (++i2 < byteLength3 && (mul *= 256)) {
      val += this[offset + i2] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength3, this.length);
    }
    var val = this[offset + --byteLength3];
    var mul = 1;
    while (byteLength3 > 0 && (mul *= 256)) {
      val += this[offset + --byteLength3] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
  };
  Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer2.prototype.readIntLE = function readIntLE2(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    var val = this[offset];
    var mul = 1;
    var i2 = 0;
    while (++i2 < byteLength3 && (mul *= 256)) {
      val += this[offset + i2] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    var i2 = byteLength3;
    var mul = 1;
    var val = this[offset + --i2];
    while (i2 > 0 && (mul *= 256)) {
      val += this[offset + --i2] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128))
      return this[offset];
    return (255 - this[offset] + 1) * -1;
  };
  Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee7542.read(this, offset, true, 23, 4);
  };
  Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee7542.read(this, offset, false, 23, 4);
  };
  Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee7542.read(this, offset, true, 52, 8);
  };
  Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee7542.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value2, offset, ext2, max, min) {
    if (!Buffer2.isBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value2 > max || value2 < min)
      throw new RangeError('"value" argument is out of bounds');
    if (offset + ext2 > buf.length)
      throw new RangeError("Index out of range");
  }
  Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE2(value2, offset, byteLength3, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value2, offset, byteLength3, maxBytes, 0);
    }
    var mul = 1;
    var i2 = 0;
    this[offset] = value2 & 255;
    while (++i2 < byteLength3 && (mul *= 256)) {
      this[offset + i2] = value2 / mul & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value2, offset, byteLength3, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value2, offset, byteLength3, maxBytes, 0);
    }
    var i2 = byteLength3 - 1;
    var mul = 1;
    this[offset + i2] = value2 & 255;
    while (--i2 >= 0 && (mul *= 256)) {
      this[offset + i2] = value2 / mul & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 1, 255, 0);
    this[offset] = value2 & 255;
    return offset + 1;
  };
  Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 2, 65535, 0);
    this[offset] = value2 & 255;
    this[offset + 1] = value2 >>> 8;
    return offset + 2;
  };
  Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 2, 65535, 0);
    this[offset] = value2 >>> 8;
    this[offset + 1] = value2 & 255;
    return offset + 2;
  };
  Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 4, 4294967295, 0);
    this[offset + 3] = value2 >>> 24;
    this[offset + 2] = value2 >>> 16;
    this[offset + 1] = value2 >>> 8;
    this[offset] = value2 & 255;
    return offset + 4;
  };
  Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 4, 4294967295, 0);
    this[offset] = value2 >>> 24;
    this[offset + 1] = value2 >>> 16;
    this[offset + 2] = value2 >>> 8;
    this[offset + 3] = value2 & 255;
    return offset + 4;
  };
  Buffer2.prototype.writeIntLE = function writeIntLE2(value2, offset, byteLength3, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value2, offset, byteLength3, limit - 1, -limit);
    }
    var i2 = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value2 & 255;
    while (++i2 < byteLength3 && (mul *= 256)) {
      if (value2 < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
        sub = 1;
      }
      this[offset + i2] = (value2 / mul >> 0) - sub & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeIntBE = function writeIntBE(value2, offset, byteLength3, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value2, offset, byteLength3, limit - 1, -limit);
    }
    var i2 = byteLength3 - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i2] = value2 & 255;
    while (--i2 >= 0 && (mul *= 256)) {
      if (value2 < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
        sub = 1;
      }
      this[offset + i2] = (value2 / mul >> 0) - sub & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeInt8 = function writeInt8(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 1, 127, -128);
    if (value2 < 0)
      value2 = 255 + value2 + 1;
    this[offset] = value2 & 255;
    return offset + 1;
  };
  Buffer2.prototype.writeInt16LE = function writeInt16LE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 2, 32767, -32768);
    this[offset] = value2 & 255;
    this[offset + 1] = value2 >>> 8;
    return offset + 2;
  };
  Buffer2.prototype.writeInt16BE = function writeInt16BE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 2, 32767, -32768);
    this[offset] = value2 >>> 8;
    this[offset + 1] = value2 & 255;
    return offset + 2;
  };
  Buffer2.prototype.writeInt32LE = function writeInt32LE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 4, 2147483647, -2147483648);
    this[offset] = value2 & 255;
    this[offset + 1] = value2 >>> 8;
    this[offset + 2] = value2 >>> 16;
    this[offset + 3] = value2 >>> 24;
    return offset + 4;
  };
  Buffer2.prototype.writeInt32BE = function writeInt32BE(value2, offset, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value2, offset, 4, 2147483647, -2147483648);
    if (value2 < 0)
      value2 = 4294967295 + value2 + 1;
    this[offset] = value2 >>> 24;
    this[offset + 1] = value2 >>> 16;
    this[offset + 2] = value2 >>> 8;
    this[offset + 3] = value2 & 255;
    return offset + 4;
  };
  function checkIEEE754(buf, value2, offset, ext2, max, min) {
    if (offset + ext2 > buf.length)
      throw new RangeError("Index out of range");
    if (offset < 0)
      throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value2, offset, littleEndian, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value2, offset, 4);
    }
    ieee7542.write(buf, value2, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer2.prototype.writeFloatLE = function writeFloatLE(value2, offset, noAssert) {
    return writeFloat(this, value2, offset, true, noAssert);
  };
  Buffer2.prototype.writeFloatBE = function writeFloatBE(value2, offset, noAssert) {
    return writeFloat(this, value2, offset, false, noAssert);
  };
  function writeDouble(buf, value2, offset, littleEndian, noAssert) {
    value2 = +value2;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value2, offset, 8);
    }
    ieee7542.write(buf, value2, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value2, offset, noAssert) {
    return writeDouble(this, value2, offset, true, noAssert);
  };
  Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value2, offset, noAssert) {
    return writeDouble(this, value2, offset, false, noAssert);
  };
  Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer2.isBuffer(target))
      throw new TypeError("argument should be a Buffer");
    if (!start)
      start = 0;
    if (!end && end !== 0)
      end = this.length;
    if (targetStart >= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end > 0 && end < start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length)
      throw new RangeError("Index out of range");
    if (end < 0)
      throw new RangeError("sourceEnd out of bounds");
    if (end > this.length)
      end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    var len2 = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      );
    }
    return len2;
  };
  Buffer2.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val.length === 1) {
        var code2 = val.charCodeAt(0);
        if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
          val = code2;
        }
      }
    } else if (typeof val === "number") {
      val = val & 255;
    } else if (typeof val === "boolean") {
      val = Number(val);
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val)
      val = 0;
    var i2;
    if (typeof val === "number") {
      for (i2 = start; i2 < end; ++i2) {
        this[i2] = val;
      }
    } else {
      var bytes2 = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
      var len2 = bytes2.length;
      if (len2 === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i2 = 0; i2 < end - start; ++i2) {
        this[i2 + start] = bytes2[i2 % len2];
      }
    }
    return this;
  };
  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length < 2)
      return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string2, units) {
    units = units || Infinity;
    var codePoint;
    var length = string2.length;
    var leadSurrogate = null;
    var bytes2 = [];
    for (var i2 = 0; i2 < length; ++i2) {
      codePoint = string2.charCodeAt(i2);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1)
              bytes2.push(239, 191, 189);
            continue;
          } else if (i2 + 1 === length) {
            if ((units -= 3) > -1)
              bytes2.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1)
            bytes2.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes2.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0)
          break;
        bytes2.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0)
          break;
        bytes2.push(
          codePoint >> 6 | 192,
          codePoint & 63 | 128
        );
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0)
          break;
        bytes2.push(
          codePoint >> 12 | 224,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0)
          break;
        bytes2.push(
          codePoint >> 18 | 240,
          codePoint >> 12 & 63 | 128,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes2;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i2 = 0; i2 < str.length; ++i2) {
      byteArray.push(str.charCodeAt(i2) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c2, hi, lo;
    var byteArray = [];
    for (var i2 = 0; i2 < str.length; ++i2) {
      if ((units -= 2) < 0)
        break;
      c2 = str.charCodeAt(i2);
      hi = c2 >> 8;
      lo = c2 % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src2, dst, offset, length) {
    for (var i2 = 0; i2 < length; ++i2) {
      if (i2 + offset >= dst.length || i2 >= src2.length)
        break;
      dst[i2 + offset] = src2[i2];
    }
    return i2;
  }
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  var hexSliceLookupTable = function() {
    var alphabet2 = "0123456789abcdef";
    var table = new Array(256);
    for (var i2 = 0; i2 < 16; ++i2) {
      var i162 = i2 * 16;
      for (var j = 0; j < 16; ++j) {
        table[i162 + j] = alphabet2[i2] + alphabet2[j];
      }
    }
    return table;
  }();
})(buffer);
var bignumber = { exports: {} };
(function(module2) {
  (function(globalObject) {
    var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
    function clone2(configObject) {
      var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
        prefix: "",
        groupSize: 3,
        secondaryGroupSize: 0,
        groupSeparator: ",",
        decimalSeparator: ".",
        fractionGroupSize: 0,
        fractionGroupSeparator: "\xA0",
        suffix: ""
      }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
      function BigNumber2(v, b) {
        var alphabet2, c2, caseChanged, e, i2, isNum, len2, str, x = this;
        if (!(x instanceof BigNumber2))
          return new BigNumber2(v, b);
        if (b == null) {
          if (v && v._isBigNumber === true) {
            x.s = v.s;
            if (!v.c || v.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (v.e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = v.e;
              x.c = v.c.slice();
            }
            return;
          }
          if ((isNum = typeof v == "number") && v * 0 == 0) {
            x.s = 1 / v < 0 ? (v = -v, -1) : 1;
            if (v === ~~v) {
              for (e = 0, i2 = v; i2 >= 10; i2 /= 10, e++)
                ;
              if (e > MAX_EXP) {
                x.c = x.e = null;
              } else {
                x.e = e;
                x.c = [v];
              }
              return;
            }
            str = String(v);
          } else {
            if (!isNumeric.test(str = String(v)))
              return parseNumeric(x, str, isNum);
            x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
          }
          if ((e = str.indexOf(".")) > -1)
            str = str.replace(".", "");
          if ((i2 = str.search(/e/i)) > 0) {
            if (e < 0)
              e = i2;
            e += +str.slice(i2 + 1);
            str = str.substring(0, i2);
          } else if (e < 0) {
            e = str.length;
          }
        } else {
          intCheck(b, 2, ALPHABET.length, "Base");
          if (b == 10 && alphabetHasNormalDecimalDigits) {
            x = new BigNumber2(v);
            return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
          }
          str = String(v);
          if (isNum = typeof v == "number") {
            if (v * 0 != 0)
              return parseNumeric(x, str, isNum, b);
            x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
            if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
              throw Error(tooManyDigits + v);
            }
          } else {
            x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
          }
          alphabet2 = ALPHABET.slice(0, b);
          e = i2 = 0;
          for (len2 = str.length; i2 < len2; i2++) {
            if (alphabet2.indexOf(c2 = str.charAt(i2)) < 0) {
              if (c2 == ".") {
                if (i2 > e) {
                  e = len2;
                  continue;
                }
              } else if (!caseChanged) {
                if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                  caseChanged = true;
                  i2 = -1;
                  e = 0;
                  continue;
                }
              }
              return parseNumeric(x, String(v), isNum, b);
            }
          }
          isNum = false;
          str = convertBase(str, b, 10, x.s);
          if ((e = str.indexOf(".")) > -1)
            str = str.replace(".", "");
          else
            e = str.length;
        }
        for (i2 = 0; str.charCodeAt(i2) === 48; i2++)
          ;
        for (len2 = str.length; str.charCodeAt(--len2) === 48; )
          ;
        if (str = str.slice(i2, ++len2)) {
          len2 -= i2;
          if (isNum && BigNumber2.DEBUG && len2 > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
            throw Error(tooManyDigits + x.s * v);
          }
          if ((e = e - i2 - 1) > MAX_EXP) {
            x.c = x.e = null;
          } else if (e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = e;
            x.c = [];
            i2 = (e + 1) % LOG_BASE;
            if (e < 0)
              i2 += LOG_BASE;
            if (i2 < len2) {
              if (i2)
                x.c.push(+str.slice(0, i2));
              for (len2 -= LOG_BASE; i2 < len2; ) {
                x.c.push(+str.slice(i2, i2 += LOG_BASE));
              }
              i2 = LOG_BASE - (str = str.slice(i2)).length;
            } else {
              i2 -= len2;
            }
            for (; i2--; str += "0")
              ;
            x.c.push(+str);
          }
        } else {
          x.c = [x.e = 0];
        }
      }
      BigNumber2.clone = clone2;
      BigNumber2.ROUND_UP = 0;
      BigNumber2.ROUND_DOWN = 1;
      BigNumber2.ROUND_CEIL = 2;
      BigNumber2.ROUND_FLOOR = 3;
      BigNumber2.ROUND_HALF_UP = 4;
      BigNumber2.ROUND_HALF_DOWN = 5;
      BigNumber2.ROUND_HALF_EVEN = 6;
      BigNumber2.ROUND_HALF_CEIL = 7;
      BigNumber2.ROUND_HALF_FLOOR = 8;
      BigNumber2.EUCLID = 9;
      BigNumber2.config = BigNumber2.set = function(obj) {
        var p, v;
        if (obj != null) {
          if (typeof obj == "object") {
            if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
              v = obj[p];
              intCheck(v, 0, MAX, p);
              DECIMAL_PLACES = v;
            }
            if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
              v = obj[p];
              intCheck(v, 0, 8, p);
              ROUNDING_MODE = v;
            }
            if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
              v = obj[p];
              if (v && v.pop) {
                intCheck(v[0], -MAX, 0, p);
                intCheck(v[1], 0, MAX, p);
                TO_EXP_NEG = v[0];
                TO_EXP_POS = v[1];
              } else {
                intCheck(v, -MAX, MAX, p);
                TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
              }
            }
            if (obj.hasOwnProperty(p = "RANGE")) {
              v = obj[p];
              if (v && v.pop) {
                intCheck(v[0], -MAX, -1, p);
                intCheck(v[1], 1, MAX, p);
                MIN_EXP = v[0];
                MAX_EXP = v[1];
              } else {
                intCheck(v, -MAX, MAX, p);
                if (v) {
                  MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                } else {
                  throw Error(bignumberError + p + " cannot be zero: " + v);
                }
              }
            }
            if (obj.hasOwnProperty(p = "CRYPTO")) {
              v = obj[p];
              if (v === !!v) {
                if (v) {
                  if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                    CRYPTO = v;
                  } else {
                    CRYPTO = !v;
                    throw Error(bignumberError + "crypto unavailable");
                  }
                } else {
                  CRYPTO = v;
                }
              } else {
                throw Error(bignumberError + p + " not true or false: " + v);
              }
            }
            if (obj.hasOwnProperty(p = "MODULO_MODE")) {
              v = obj[p];
              intCheck(v, 0, 9, p);
              MODULO_MODE = v;
            }
            if (obj.hasOwnProperty(p = "POW_PRECISION")) {
              v = obj[p];
              intCheck(v, 0, MAX, p);
              POW_PRECISION = v;
            }
            if (obj.hasOwnProperty(p = "FORMAT")) {
              v = obj[p];
              if (typeof v == "object")
                FORMAT = v;
              else
                throw Error(bignumberError + p + " not an object: " + v);
            }
            if (obj.hasOwnProperty(p = "ALPHABET")) {
              v = obj[p];
              if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                ALPHABET = v;
              } else {
                throw Error(bignumberError + p + " invalid: " + v);
              }
            }
          } else {
            throw Error(bignumberError + "Object expected: " + obj);
          }
        }
        return {
          DECIMAL_PLACES,
          ROUNDING_MODE,
          EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
          RANGE: [MIN_EXP, MAX_EXP],
          CRYPTO,
          MODULO_MODE,
          POW_PRECISION,
          FORMAT,
          ALPHABET
        };
      };
      BigNumber2.isBigNumber = function(v) {
        if (!v || v._isBigNumber !== true)
          return false;
        if (!BigNumber2.DEBUG)
          return true;
        var i2, n, c2 = v.c, e = v.e, s = v.s;
        out:
          if ({}.toString.call(c2) == "[object Array]") {
            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
              if (c2[0] === 0) {
                if (e === 0 && c2.length === 1)
                  return true;
                break out;
              }
              i2 = (e + 1) % LOG_BASE;
              if (i2 < 1)
                i2 += LOG_BASE;
              if (String(c2[0]).length == i2) {
                for (i2 = 0; i2 < c2.length; i2++) {
                  n = c2[i2];
                  if (n < 0 || n >= BASE || n !== mathfloor(n))
                    break out;
                }
                if (n !== 0)
                  return true;
              }
            }
          } else if (c2 === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }
        throw Error(bignumberError + "Invalid BigNumber: " + v);
      };
      BigNumber2.maximum = BigNumber2.max = function() {
        return maxOrMin(arguments, P.lt);
      };
      BigNumber2.minimum = BigNumber2.min = function() {
        return maxOrMin(arguments, P.gt);
      };
      BigNumber2.random = function() {
        var pow2_53 = 9007199254740992;
        var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
          return mathfloor(Math.random() * pow2_53);
        } : function() {
          return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
        };
        return function(dp) {
          var a, b, e, k, v, i2 = 0, c2 = [], rand = new BigNumber2(ONE);
          if (dp == null)
            dp = DECIMAL_PLACES;
          else
            intCheck(dp, 0, MAX);
          k = mathceil(dp / LOG_BASE);
          if (CRYPTO) {
            if (crypto.getRandomValues) {
              a = crypto.getRandomValues(new Uint32Array(k *= 2));
              for (; i2 < k; ) {
                v = a[i2] * 131072 + (a[i2 + 1] >>> 11);
                if (v >= 9e15) {
                  b = crypto.getRandomValues(new Uint32Array(2));
                  a[i2] = b[0];
                  a[i2 + 1] = b[1];
                } else {
                  c2.push(v % 1e14);
                  i2 += 2;
                }
              }
              i2 = k / 2;
            } else if (crypto.randomBytes) {
              a = crypto.randomBytes(k *= 7);
              for (; i2 < k; ) {
                v = (a[i2] & 31) * 281474976710656 + a[i2 + 1] * 1099511627776 + a[i2 + 2] * 4294967296 + a[i2 + 3] * 16777216 + (a[i2 + 4] << 16) + (a[i2 + 5] << 8) + a[i2 + 6];
                if (v >= 9e15) {
                  crypto.randomBytes(7).copy(a, i2);
                } else {
                  c2.push(v % 1e14);
                  i2 += 7;
                }
              }
              i2 = k / 7;
            } else {
              CRYPTO = false;
              throw Error(bignumberError + "crypto unavailable");
            }
          }
          if (!CRYPTO) {
            for (; i2 < k; ) {
              v = random53bitInt();
              if (v < 9e15)
                c2[i2++] = v % 1e14;
            }
          }
          k = c2[--i2];
          dp %= LOG_BASE;
          if (k && dp) {
            v = POWS_TEN[LOG_BASE - dp];
            c2[i2] = mathfloor(k / v) * v;
          }
          for (; c2[i2] === 0; c2.pop(), i2--)
            ;
          if (i2 < 0) {
            c2 = [e = 0];
          } else {
            for (e = -1; c2[0] === 0; c2.splice(0, 1), e -= LOG_BASE)
              ;
            for (i2 = 1, v = c2[0]; v >= 10; v /= 10, i2++)
              ;
            if (i2 < LOG_BASE)
              e -= LOG_BASE - i2;
          }
          rand.e = e;
          rand.c = c2;
          return rand;
        };
      }();
      BigNumber2.sum = function() {
        var i2 = 1, args = arguments, sum = new BigNumber2(args[0]);
        for (; i2 < args.length; )
          sum = sum.plus(args[i2++]);
        return sum;
      };
      convertBase = function() {
        var decimal = "0123456789";
        function toBaseOut(str, baseIn, baseOut, alphabet2) {
          var j, arr = [0], arrL, i2 = 0, len2 = str.length;
          for (; i2 < len2; ) {
            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
              ;
            arr[0] += alphabet2.indexOf(str.charAt(i2++));
            for (j = 0; j < arr.length; j++) {
              if (arr[j] > baseOut - 1) {
                if (arr[j + 1] == null)
                  arr[j + 1] = 0;
                arr[j + 1] += arr[j] / baseOut | 0;
                arr[j] %= baseOut;
              }
            }
          }
          return arr.reverse();
        }
        return function(str, baseIn, baseOut, sign, callerIsToString) {
          var alphabet2, d, e, k, r, x, xc, y, i2 = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
          if (i2 >= 0) {
            k = POW_PRECISION;
            POW_PRECISION = 0;
            str = str.replace(".", "");
            y = new BigNumber2(baseIn);
            x = y.pow(str.length - i2);
            POW_PRECISION = k;
            y.c = toBaseOut(
              toFixedPoint(coeffToString(x.c), x.e, "0"),
              10,
              baseOut,
              decimal
            );
            y.e = y.c.length;
          }
          xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet2 = ALPHABET, decimal) : (alphabet2 = decimal, ALPHABET));
          e = k = xc.length;
          for (; xc[--k] == 0; xc.pop())
            ;
          if (!xc[0])
            return alphabet2.charAt(0);
          if (i2 < 0) {
            --e;
          } else {
            x.c = xc;
            x.e = e;
            x.s = sign;
            x = div(x, y, dp, rm, baseOut);
            xc = x.c;
            r = x.r;
            e = x.e;
          }
          d = e + dp + 1;
          i2 = xc[d];
          k = baseOut / 2;
          r = r || d < 0 || xc[d + 1] != null;
          r = rm < 4 ? (i2 != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i2 > k || i2 == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
          if (d < 1 || !xc[0]) {
            str = r ? toFixedPoint(alphabet2.charAt(1), -dp, alphabet2.charAt(0)) : alphabet2.charAt(0);
          } else {
            xc.length = d;
            if (r) {
              for (--baseOut; ++xc[--d] > baseOut; ) {
                xc[d] = 0;
                if (!d) {
                  ++e;
                  xc = [1].concat(xc);
                }
              }
            }
            for (k = xc.length; !xc[--k]; )
              ;
            for (i2 = 0, str = ""; i2 <= k; str += alphabet2.charAt(xc[i2++]))
              ;
            str = toFixedPoint(str, e, alphabet2.charAt(0));
          }
          return str;
        };
      }();
      div = function() {
        function multiply(x, k, base) {
          var m2, temp, xlo, xhi, carry = 0, i2 = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
          for (x = x.slice(); i2--; ) {
            xlo = x[i2] % SQRT_BASE;
            xhi = x[i2] / SQRT_BASE | 0;
            m2 = khi * xlo + xhi * klo;
            temp = klo * xlo + m2 % SQRT_BASE * SQRT_BASE + carry;
            carry = (temp / base | 0) + (m2 / SQRT_BASE | 0) + khi * xhi;
            x[i2] = temp % base;
          }
          if (carry)
            x = [carry].concat(x);
          return x;
        }
        function compare2(a, b, aL, bL) {
          var i2, cmp;
          if (aL != bL) {
            cmp = aL > bL ? 1 : -1;
          } else {
            for (i2 = cmp = 0; i2 < aL; i2++) {
              if (a[i2] != b[i2]) {
                cmp = a[i2] > b[i2] ? 1 : -1;
                break;
              }
            }
          }
          return cmp;
        }
        function subtract2(a, b, aL, base) {
          var i2 = 0;
          for (; aL--; ) {
            a[aL] -= i2;
            i2 = a[aL] < b[aL] ? 1 : 0;
            a[aL] = i2 * base + a[aL] - b[aL];
          }
          for (; !a[0] && a.length > 1; a.splice(0, 1))
            ;
        }
        return function(x, y, dp, rm, base) {
          var cmp, e, i2, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
          if (!xc || !xc[0] || !yc || !yc[0]) {
            return new BigNumber2(
              !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : xc && xc[0] == 0 || !yc ? s * 0 : s / 0
            );
          }
          q = new BigNumber2(s);
          qc = q.c = [];
          e = x.e - y.e;
          s = dp + e + 1;
          if (!base) {
            base = BASE;
            e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
            s = s / LOG_BASE | 0;
          }
          for (i2 = 0; yc[i2] == (xc[i2] || 0); i2++)
            ;
          if (yc[i2] > (xc[i2] || 0))
            e--;
          if (s < 0) {
            qc.push(1);
            more = true;
          } else {
            xL = xc.length;
            yL = yc.length;
            i2 = 0;
            s += 2;
            n = mathfloor(base / (yc[0] + 1));
            if (n > 1) {
              yc = multiply(yc, n, base);
              xc = multiply(xc, n, base);
              yL = yc.length;
              xL = xc.length;
            }
            xi = yL;
            rem = xc.slice(0, yL);
            remL = rem.length;
            for (; remL < yL; rem[remL++] = 0)
              ;
            yz = yc.slice();
            yz = [0].concat(yz);
            yc0 = yc[0];
            if (yc[1] >= base / 2)
              yc0++;
            do {
              n = 0;
              cmp = compare2(yc, rem, yL, remL);
              if (cmp < 0) {
                rem0 = rem[0];
                if (yL != remL)
                  rem0 = rem0 * base + (rem[1] || 0);
                n = mathfloor(rem0 / yc0);
                if (n > 1) {
                  if (n >= base)
                    n = base - 1;
                  prod = multiply(yc, n, base);
                  prodL = prod.length;
                  remL = rem.length;
                  while (compare2(prod, rem, prodL, remL) == 1) {
                    n--;
                    subtract2(prod, yL < prodL ? yz : yc, prodL, base);
                    prodL = prod.length;
                    cmp = 1;
                  }
                } else {
                  if (n == 0) {
                    cmp = n = 1;
                  }
                  prod = yc.slice();
                  prodL = prod.length;
                }
                if (prodL < remL)
                  prod = [0].concat(prod);
                subtract2(rem, prod, remL, base);
                remL = rem.length;
                if (cmp == -1) {
                  while (compare2(yc, rem, yL, remL) < 1) {
                    n++;
                    subtract2(rem, yL < remL ? yz : yc, remL, base);
                    remL = rem.length;
                  }
                }
              } else if (cmp === 0) {
                n++;
                rem = [0];
              }
              qc[i2++] = n;
              if (rem[0]) {
                rem[remL++] = xc[xi] || 0;
              } else {
                rem = [xc[xi]];
                remL = 1;
              }
            } while ((xi++ < xL || rem[0] != null) && s--);
            more = rem[0] != null;
            if (!qc[0])
              qc.splice(0, 1);
          }
          if (base == BASE) {
            for (i2 = 1, s = qc[0]; s >= 10; s /= 10, i2++)
              ;
            round(q, dp + (q.e = i2 + e * LOG_BASE - 1) + 1, rm, more);
          } else {
            q.e = e;
            q.r = +more;
          }
          return q;
        };
      }();
      function format2(n, i2, rm, id) {
        var c0, e, ne, len2, str;
        if (rm == null)
          rm = ROUNDING_MODE;
        else
          intCheck(rm, 0, 8);
        if (!n.c)
          return n.toString();
        c0 = n.c[0];
        ne = n.e;
        if (i2 == null) {
          str = coeffToString(n.c);
          str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
        } else {
          n = round(new BigNumber2(n), i2, rm);
          e = n.e;
          str = coeffToString(n.c);
          len2 = str.length;
          if (id == 1 || id == 2 && (i2 <= e || e <= TO_EXP_NEG)) {
            for (; len2 < i2; str += "0", len2++)
              ;
            str = toExponential(str, e);
          } else {
            i2 -= ne;
            str = toFixedPoint(str, e, "0");
            if (e + 1 > len2) {
              if (--i2 > 0)
                for (str += "."; i2--; str += "0")
                  ;
            } else {
              i2 += e - len2;
              if (i2 > 0) {
                if (e + 1 == len2)
                  str += ".";
                for (; i2--; str += "0")
                  ;
              }
            }
          }
        }
        return n.s < 0 && c0 ? "-" + str : str;
      }
      function maxOrMin(args, method2) {
        var n, i2 = 1, m2 = new BigNumber2(args[0]);
        for (; i2 < args.length; i2++) {
          n = new BigNumber2(args[i2]);
          if (!n.s) {
            m2 = n;
            break;
          } else if (method2.call(m2, n)) {
            m2 = n;
          }
        }
        return m2;
      }
      function normalise(n, c2, e) {
        var i2 = 1, j = c2.length;
        for (; !c2[--j]; c2.pop())
          ;
        for (j = c2[0]; j >= 10; j /= 10, i2++)
          ;
        if ((e = i2 + e * LOG_BASE - 1) > MAX_EXP) {
          n.c = n.e = null;
        } else if (e < MIN_EXP) {
          n.c = [n.e = 0];
        } else {
          n.e = e;
          n.c = c2;
        }
        return n;
      }
      parseNumeric = function() {
        var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
        return function(x, str, isNum, b) {
          var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
          if (isInfinityOrNaN.test(s)) {
            x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
          } else {
            if (!isNum) {
              s = s.replace(basePrefix, function(m2, p1, p2) {
                base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                return !b || b == base ? p1 : m2;
              });
              if (b) {
                base = b;
                s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
              }
              if (str != s)
                return new BigNumber2(s, base);
            }
            if (BigNumber2.DEBUG) {
              throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
            }
            x.s = null;
          }
          x.c = x.e = null;
        };
      }();
      function round(x, sd, rm, r) {
        var d, i2, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
        if (xc) {
          out: {
            for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
              ;
            i2 = sd - d;
            if (i2 < 0) {
              i2 += LOG_BASE;
              j = sd;
              n = xc[ni = 0];
              rd = n / pows10[d - j - 1] % 10 | 0;
            } else {
              ni = mathceil((i2 + 1) / LOG_BASE);
              if (ni >= xc.length) {
                if (r) {
                  for (; xc.length <= ni; xc.push(0))
                    ;
                  n = rd = 0;
                  d = 1;
                  i2 %= LOG_BASE;
                  j = i2 - LOG_BASE + 1;
                } else {
                  break out;
                }
              } else {
                n = k = xc[ni];
                for (d = 1; k >= 10; k /= 10, d++)
                  ;
                i2 %= LOG_BASE;
                j = i2 - LOG_BASE + d;
                rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
              }
            }
            r = r || sd < 0 || xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
            r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && (i2 > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
            if (sd < 1 || !xc[0]) {
              xc.length = 0;
              if (r) {
                sd -= x.e + 1;
                xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                x.e = -sd || 0;
              } else {
                xc[0] = x.e = 0;
              }
              return x;
            }
            if (i2 == 0) {
              xc.length = ni;
              k = 1;
              ni--;
            } else {
              xc.length = ni + 1;
              k = pows10[LOG_BASE - i2];
              xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
            }
            if (r) {
              for (; ; ) {
                if (ni == 0) {
                  for (i2 = 1, j = xc[0]; j >= 10; j /= 10, i2++)
                    ;
                  j = xc[0] += k;
                  for (k = 1; j >= 10; j /= 10, k++)
                    ;
                  if (i2 != k) {
                    x.e++;
                    if (xc[0] == BASE)
                      xc[0] = 1;
                  }
                  break;
                } else {
                  xc[ni] += k;
                  if (xc[ni] != BASE)
                    break;
                  xc[ni--] = 0;
                  k = 1;
                }
              }
            }
            for (i2 = xc.length; xc[--i2] === 0; xc.pop())
              ;
          }
          if (x.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (x.e < MIN_EXP) {
            x.c = [x.e = 0];
          }
        }
        return x;
      }
      function valueOf(n) {
        var str, e = n.e;
        if (e === null)
          return n.toString();
        str = coeffToString(n.c);
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
        return n.s < 0 ? "-" + str : str;
      }
      P.absoluteValue = P.abs = function() {
        var x = new BigNumber2(this);
        if (x.s < 0)
          x.s = 1;
        return x;
      };
      P.comparedTo = function(y, b) {
        return compare(this, new BigNumber2(y, b));
      };
      P.decimalPlaces = P.dp = function(dp, rm) {
        var c2, n, v, x = this;
        if (dp != null) {
          intCheck(dp, 0, MAX);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(new BigNumber2(x), dp + x.e + 1, rm);
        }
        if (!(c2 = x.c))
          return null;
        n = ((v = c2.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
        if (v = c2[v])
          for (; v % 10 == 0; v /= 10, n--)
            ;
        if (n < 0)
          n = 0;
        return n;
      };
      P.dividedBy = P.div = function(y, b) {
        return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
      };
      P.dividedToIntegerBy = P.idiv = function(y, b) {
        return div(this, new BigNumber2(y, b), 0, 1);
      };
      P.exponentiatedBy = P.pow = function(n, m2) {
        var half, isModExp, i2, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
        n = new BigNumber2(n);
        if (n.c && !n.isInteger()) {
          throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
        }
        if (m2 != null)
          m2 = new BigNumber2(m2);
        nIsBig = n.e > 14;
        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
          y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
          return m2 ? y.mod(m2) : y;
        }
        nIsNeg = n.s < 0;
        if (m2) {
          if (m2.c ? !m2.c[0] : !m2.s)
            return new BigNumber2(NaN);
          isModExp = !nIsNeg && x.isInteger() && m2.isInteger();
          if (isModExp)
            x = x.mod(m2);
        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
          k = x.s < 0 && isOdd(n) ? -0 : 0;
          if (x.e > -1)
            k = 1 / k;
          return new BigNumber2(nIsNeg ? 1 / k : k);
        } else if (POW_PRECISION) {
          k = mathceil(POW_PRECISION / LOG_BASE + 2);
        }
        if (nIsBig) {
          half = new BigNumber2(0.5);
          if (nIsNeg)
            n.s = 1;
          nIsOdd = isOdd(n);
        } else {
          i2 = Math.abs(+valueOf(n));
          nIsOdd = i2 % 2;
        }
        y = new BigNumber2(ONE);
        for (; ; ) {
          if (nIsOdd) {
            y = y.times(x);
            if (!y.c)
              break;
            if (k) {
              if (y.c.length > k)
                y.c.length = k;
            } else if (isModExp) {
              y = y.mod(m2);
            }
          }
          if (i2) {
            i2 = mathfloor(i2 / 2);
            if (i2 === 0)
              break;
            nIsOdd = i2 % 2;
          } else {
            n = n.times(half);
            round(n, n.e + 1, 1);
            if (n.e > 14) {
              nIsOdd = isOdd(n);
            } else {
              i2 = +valueOf(n);
              if (i2 === 0)
                break;
              nIsOdd = i2 % 2;
            }
          }
          x = x.times(x);
          if (k) {
            if (x.c && x.c.length > k)
              x.c.length = k;
          } else if (isModExp) {
            x = x.mod(m2);
          }
        }
        if (isModExp)
          return y;
        if (nIsNeg)
          y = ONE.div(y);
        return m2 ? y.mod(m2) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
      };
      P.integerValue = function(rm) {
        var n = new BigNumber2(this);
        if (rm == null)
          rm = ROUNDING_MODE;
        else
          intCheck(rm, 0, 8);
        return round(n, n.e + 1, rm);
      };
      P.isEqualTo = P.eq = function(y, b) {
        return compare(this, new BigNumber2(y, b)) === 0;
      };
      P.isFinite = function() {
        return !!this.c;
      };
      P.isGreaterThan = P.gt = function(y, b) {
        return compare(this, new BigNumber2(y, b)) > 0;
      };
      P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
        return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
      };
      P.isInteger = function() {
        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
      };
      P.isLessThan = P.lt = function(y, b) {
        return compare(this, new BigNumber2(y, b)) < 0;
      };
      P.isLessThanOrEqualTo = P.lte = function(y, b) {
        return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
      };
      P.isNaN = function() {
        return !this.s;
      };
      P.isNegative = function() {
        return this.s < 0;
      };
      P.isPositive = function() {
        return this.s > 0;
      };
      P.isZero = function() {
        return !!this.c && this.c[0] == 0;
      };
      P.minus = function(y, b) {
        var i2, j, t, xLTy, x = this, a = x.s;
        y = new BigNumber2(y, b);
        b = y.s;
        if (!a || !b)
          return new BigNumber2(NaN);
        if (a != b) {
          y.s = -b;
          return x.plus(y);
        }
        var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
        if (!xe || !ye) {
          if (!xc || !yc)
            return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
          if (!xc[0] || !yc[0]) {
            return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : ROUNDING_MODE == 3 ? -0 : 0);
          }
        }
        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();
        if (a = xe - ye) {
          if (xLTy = a < 0) {
            a = -a;
            t = xc;
          } else {
            ye = xe;
            t = yc;
          }
          t.reverse();
          for (b = a; b--; t.push(0))
            ;
          t.reverse();
        } else {
          j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
          for (a = b = 0; b < j; b++) {
            if (xc[b] != yc[b]) {
              xLTy = xc[b] < yc[b];
              break;
            }
          }
        }
        if (xLTy) {
          t = xc;
          xc = yc;
          yc = t;
          y.s = -y.s;
        }
        b = (j = yc.length) - (i2 = xc.length);
        if (b > 0)
          for (; b--; xc[i2++] = 0)
            ;
        b = BASE - 1;
        for (; j > a; ) {
          if (xc[--j] < yc[j]) {
            for (i2 = j; i2 && !xc[--i2]; xc[i2] = b)
              ;
            --xc[i2];
            xc[j] += BASE;
          }
          xc[j] -= yc[j];
        }
        for (; xc[0] == 0; xc.splice(0, 1), --ye)
          ;
        if (!xc[0]) {
          y.s = ROUNDING_MODE == 3 ? -1 : 1;
          y.c = [y.e = 0];
          return y;
        }
        return normalise(y, xc, ye);
      };
      P.modulo = P.mod = function(y, b) {
        var q, s, x = this;
        y = new BigNumber2(y, b);
        if (!x.c || !y.s || y.c && !y.c[0]) {
          return new BigNumber2(NaN);
        } else if (!y.c || x.c && !x.c[0]) {
          return new BigNumber2(x);
        }
        if (MODULO_MODE == 9) {
          s = y.s;
          y.s = 1;
          q = div(x, y, 0, 3);
          y.s = s;
          q.s *= s;
        } else {
          q = div(x, y, 0, MODULO_MODE);
        }
        y = x.minus(q.times(y));
        if (!y.c[0] && MODULO_MODE == 1)
          y.s = x.s;
        return y;
      };
      P.multipliedBy = P.times = function(y, b) {
        var c2, e, i2, j, k, m2, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
        if (!xc || !yc || !xc[0] || !yc[0]) {
          if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
            y.c = y.e = y.s = null;
          } else {
            y.s *= x.s;
            if (!xc || !yc) {
              y.c = y.e = null;
            } else {
              y.c = [0];
              y.e = 0;
            }
          }
          return y;
        }
        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
        y.s *= x.s;
        xcL = xc.length;
        ycL = yc.length;
        if (xcL < ycL) {
          zc = xc;
          xc = yc;
          yc = zc;
          i2 = xcL;
          xcL = ycL;
          ycL = i2;
        }
        for (i2 = xcL + ycL, zc = []; i2--; zc.push(0))
          ;
        base = BASE;
        sqrtBase = SQRT_BASE;
        for (i2 = ycL; --i2 >= 0; ) {
          c2 = 0;
          ylo = yc[i2] % sqrtBase;
          yhi = yc[i2] / sqrtBase | 0;
          for (k = xcL, j = i2 + k; j > i2; ) {
            xlo = xc[--k] % sqrtBase;
            xhi = xc[k] / sqrtBase | 0;
            m2 = yhi * xlo + xhi * ylo;
            xlo = ylo * xlo + m2 % sqrtBase * sqrtBase + zc[j] + c2;
            c2 = (xlo / base | 0) + (m2 / sqrtBase | 0) + yhi * xhi;
            zc[j--] = xlo % base;
          }
          zc[j] = c2;
        }
        if (c2) {
          ++e;
        } else {
          zc.splice(0, 1);
        }
        return normalise(y, zc, e);
      };
      P.negated = function() {
        var x = new BigNumber2(this);
        x.s = -x.s || null;
        return x;
      };
      P.plus = function(y, b) {
        var t, x = this, a = x.s;
        y = new BigNumber2(y, b);
        b = y.s;
        if (!a || !b)
          return new BigNumber2(NaN);
        if (a != b) {
          y.s = -b;
          return x.minus(y);
        }
        var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
        if (!xe || !ye) {
          if (!xc || !yc)
            return new BigNumber2(a / 0);
          if (!xc[0] || !yc[0])
            return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
        }
        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();
        if (a = xe - ye) {
          if (a > 0) {
            ye = xe;
            t = yc;
          } else {
            a = -a;
            t = xc;
          }
          t.reverse();
          for (; a--; t.push(0))
            ;
          t.reverse();
        }
        a = xc.length;
        b = yc.length;
        if (a - b < 0) {
          t = yc;
          yc = xc;
          xc = t;
          b = a;
        }
        for (a = 0; b; ) {
          a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
          xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
        }
        if (a) {
          xc = [a].concat(xc);
          ++ye;
        }
        return normalise(y, xc, ye);
      };
      P.precision = P.sd = function(sd, rm) {
        var c2, n, v, x = this;
        if (sd != null && sd !== !!sd) {
          intCheck(sd, 1, MAX);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(new BigNumber2(x), sd, rm);
        }
        if (!(c2 = x.c))
          return null;
        v = c2.length - 1;
        n = v * LOG_BASE + 1;
        if (v = c2[v]) {
          for (; v % 10 == 0; v /= 10, n--)
            ;
          for (v = c2[0]; v >= 10; v /= 10, n++)
            ;
        }
        if (sd && x.e + 1 > n)
          n = x.e + 1;
        return n;
      };
      P.shiftedBy = function(k) {
        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
        return this.times("1e" + k);
      };
      P.squareRoot = P.sqrt = function() {
        var m2, n, r, rep, t, x = this, c2 = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
        if (s !== 1 || !c2 || !c2[0]) {
          return new BigNumber2(!s || s < 0 && (!c2 || c2[0]) ? NaN : c2 ? x : 1 / 0);
        }
        s = Math.sqrt(+valueOf(x));
        if (s == 0 || s == 1 / 0) {
          n = coeffToString(c2);
          if ((n.length + e) % 2 == 0)
            n += "0";
          s = Math.sqrt(+n);
          e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
          if (s == 1 / 0) {
            n = "5e" + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf("e") + 1) + e;
          }
          r = new BigNumber2(n);
        } else {
          r = new BigNumber2(s + "");
        }
        if (r.c[0]) {
          e = r.e;
          s = e + dp;
          if (s < 3)
            s = 0;
          for (; ; ) {
            t = r;
            r = half.times(t.plus(div(x, t, dp, 1)));
            if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
              if (r.e < e)
                --s;
              n = n.slice(s - 3, s + 1);
              if (n == "9999" || !rep && n == "4999") {
                if (!rep) {
                  round(t, t.e + DECIMAL_PLACES + 2, 0);
                  if (t.times(t).eq(x)) {
                    r = t;
                    break;
                  }
                }
                dp += 4;
                s += 4;
                rep = 1;
              } else {
                if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                  round(r, r.e + DECIMAL_PLACES + 2, 1);
                  m2 = !r.times(r).eq(x);
                }
                break;
              }
            }
          }
        }
        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m2);
      };
      P.toExponential = function(dp, rm) {
        if (dp != null) {
          intCheck(dp, 0, MAX);
          dp++;
        }
        return format2(this, dp, rm, 1);
      };
      P.toFixed = function(dp, rm) {
        if (dp != null) {
          intCheck(dp, 0, MAX);
          dp = dp + this.e + 1;
        }
        return format2(this, dp, rm);
      };
      P.toFormat = function(dp, rm, format3) {
        var str, x = this;
        if (format3 == null) {
          if (dp != null && rm && typeof rm == "object") {
            format3 = rm;
            rm = null;
          } else if (dp && typeof dp == "object") {
            format3 = dp;
            dp = rm = null;
          } else {
            format3 = FORMAT;
          }
        } else if (typeof format3 != "object") {
          throw Error(bignumberError + "Argument not an object: " + format3);
        }
        str = x.toFixed(dp, rm);
        if (x.c) {
          var i2, arr = str.split("."), g1 = +format3.groupSize, g2 = +format3.secondaryGroupSize, groupSeparator = format3.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len2 = intDigits.length;
          if (g2) {
            i2 = g1;
            g1 = g2;
            g2 = i2;
            len2 -= i2;
          }
          if (g1 > 0 && len2 > 0) {
            i2 = len2 % g1 || g1;
            intPart = intDigits.substr(0, i2);
            for (; i2 < len2; i2 += g1)
              intPart += groupSeparator + intDigits.substr(i2, g1);
            if (g2 > 0)
              intPart += groupSeparator + intDigits.slice(i2);
            if (isNeg)
              intPart = "-" + intPart;
          }
          str = fractionPart ? intPart + (format3.decimalSeparator || "") + ((g2 = +format3.fractionGroupSize) ? fractionPart.replace(
            new RegExp("\\d{" + g2 + "}\\B", "g"),
            "$&" + (format3.fractionGroupSeparator || "")
          ) : fractionPart) : intPart;
        }
        return (format3.prefix || "") + str + (format3.suffix || "");
      };
      P.toFraction = function(md) {
        var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
        if (md != null) {
          n = new BigNumber2(md);
          if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
            throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
          }
        }
        if (!xc)
          return new BigNumber2(x);
        d = new BigNumber2(ONE);
        n1 = d0 = new BigNumber2(ONE);
        d1 = n0 = new BigNumber2(ONE);
        s = coeffToString(xc);
        e = d.e = s.length - x.e - 1;
        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
        md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
        exp = MAX_EXP;
        MAX_EXP = 1 / 0;
        n = new BigNumber2(s);
        n0.c[0] = 0;
        for (; ; ) {
          q = div(n, d, 0, 1);
          d2 = d0.plus(q.times(d1));
          if (d2.comparedTo(md) == 1)
            break;
          d0 = d1;
          d1 = d2;
          n1 = n0.plus(q.times(d2 = n1));
          n0 = d2;
          d = n.minus(q.times(d2 = d));
          n = d2;
        }
        d2 = div(md.minus(d0), d1, 0, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;
        e = e * 2;
        r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
        ) < 1 ? [n1, d1] : [n0, d0];
        MAX_EXP = exp;
        return r;
      };
      P.toNumber = function() {
        return +valueOf(this);
      };
      P.toPrecision = function(sd, rm) {
        if (sd != null)
          intCheck(sd, 1, MAX);
        return format2(this, sd, rm, 2);
      };
      P.toString = function(b) {
        var str, n = this, s = n.s, e = n.e;
        if (e === null) {
          if (s) {
            str = "Infinity";
            if (s < 0)
              str = "-" + str;
          } else {
            str = "NaN";
          }
        } else {
          if (b == null) {
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
          } else if (b === 10 && alphabetHasNormalDecimalDigits) {
            n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
            str = toFixedPoint(coeffToString(n.c), n.e, "0");
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
          }
          if (s < 0 && n.c[0])
            str = "-" + str;
        }
        return str;
      };
      P.valueOf = P.toJSON = function() {
        return valueOf(this);
      };
      P._isBigNumber = true;
      if (configObject != null)
        BigNumber2.set(configObject);
      return BigNumber2;
    }
    function bitFloor(n) {
      var i2 = n | 0;
      return n > 0 || n === i2 ? i2 : i2 - 1;
    }
    function coeffToString(a) {
      var s, z, i2 = 1, j = a.length, r = a[0] + "";
      for (; i2 < j; ) {
        s = a[i2++] + "";
        z = LOG_BASE - s.length;
        for (; z--; s = "0" + s)
          ;
        r += s;
      }
      for (j = r.length; r.charCodeAt(--j) === 48; )
        ;
      return r.slice(0, j + 1 || 1);
    }
    function compare(x, y) {
      var a, b, xc = x.c, yc = y.c, i2 = x.s, j = y.s, k = x.e, l = y.e;
      if (!i2 || !j)
        return null;
      a = xc && !xc[0];
      b = yc && !yc[0];
      if (a || b)
        return a ? b ? 0 : -j : i2;
      if (i2 != j)
        return i2;
      a = i2 < 0;
      b = k == l;
      if (!xc || !yc)
        return b ? 0 : !xc ^ a ? 1 : -1;
      if (!b)
        return k > l ^ a ? 1 : -1;
      j = (k = xc.length) < (l = yc.length) ? k : l;
      for (i2 = 0; i2 < j; i2++)
        if (xc[i2] != yc[i2])
          return xc[i2] > yc[i2] ^ a ? 1 : -1;
      return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    function intCheck(n, min, max, name) {
      if (n < min || n > max || n !== mathfloor(n)) {
        throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
      }
    }
    function isOdd(n) {
      var k = n.c.length - 1;
      return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }
    function toExponential(str, e) {
      return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
    }
    function toFixedPoint(str, e, z) {
      var len2, zs;
      if (e < 0) {
        for (zs = z + "."; ++e; zs += z)
          ;
        str = zs + str;
      } else {
        len2 = str.length;
        if (++e > len2) {
          for (zs = z, e -= len2; --e; zs += z)
            ;
          str += zs;
        } else if (e < len2) {
          str = str.slice(0, e) + "." + str.slice(e);
        }
      }
      return str;
    }
    BigNumber = clone2();
    BigNumber["default"] = BigNumber.BigNumber = BigNumber;
    if (module2.exports) {
      module2.exports = BigNumber;
    } else {
      if (!globalObject) {
        globalObject = typeof self != "undefined" && self ? self : window;
      }
      globalObject.BigNumber = BigNumber;
    }
  })(commonjsGlobal);
})(bignumber);
var decoder_asm = function decodeAsm(stdlib, foreign, buffer2) {
  ;
  var heap = new stdlib.Uint8Array(buffer2);
  var pushInt = foreign.pushInt;
  var pushInt32 = foreign.pushInt32;
  var pushInt32Neg = foreign.pushInt32Neg;
  var pushInt64 = foreign.pushInt64;
  var pushInt64Neg = foreign.pushInt64Neg;
  var pushFloat = foreign.pushFloat;
  var pushFloatSingle = foreign.pushFloatSingle;
  var pushFloatDouble = foreign.pushFloatDouble;
  var pushTrue = foreign.pushTrue;
  var pushFalse = foreign.pushFalse;
  var pushUndefined = foreign.pushUndefined;
  var pushNull = foreign.pushNull;
  var pushInfinity = foreign.pushInfinity;
  var pushInfinityNeg = foreign.pushInfinityNeg;
  var pushNaN = foreign.pushNaN;
  var pushNaNNeg = foreign.pushNaNNeg;
  var pushArrayStart = foreign.pushArrayStart;
  var pushArrayStartFixed = foreign.pushArrayStartFixed;
  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;
  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;
  var pushObjectStart = foreign.pushObjectStart;
  var pushObjectStartFixed = foreign.pushObjectStartFixed;
  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;
  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;
  var pushByteString = foreign.pushByteString;
  var pushByteStringStart = foreign.pushByteStringStart;
  var pushUtf8String = foreign.pushUtf8String;
  var pushUtf8StringStart = foreign.pushUtf8StringStart;
  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;
  var pushTagStart = foreign.pushTagStart;
  var pushTagStart4 = foreign.pushTagStart4;
  var pushTagStart8 = foreign.pushTagStart8;
  var pushTagUnassigned = foreign.pushTagUnassigned;
  var pushBreak = foreign.pushBreak;
  var pow = stdlib.Math.pow;
  var offset = 0;
  var inputLength = 0;
  var code2 = 0;
  function parse(input) {
    input = input | 0;
    offset = 0;
    inputLength = input;
    while ((offset | 0) < (inputLength | 0)) {
      code2 = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;
      if ((code2 | 0) > 0) {
        break;
      }
    }
    return code2 | 0;
  }
  function checkOffset(n) {
    n = n | 0;
    if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {
      return 0;
    }
    return 1;
  }
  function readUInt16(n) {
    n = n | 0;
    return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;
  }
  function readUInt32(n) {
    n = n | 0;
    return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;
  }
  function INT_P(octet) {
    octet = octet | 0;
    pushInt(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function UINT_P_8(octet) {
    octet = octet | 0;
    if (checkOffset(1) | 0) {
      return 1;
    }
    pushInt(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }
  function UINT_P_16(octet) {
    octet = octet | 0;
    if (checkOffset(2) | 0) {
      return 1;
    }
    pushInt(
      readUInt16(offset + 1 | 0) | 0
    );
    offset = offset + 3 | 0;
    return 0;
  }
  function UINT_P_32(octet) {
    octet = octet | 0;
    if (checkOffset(4) | 0) {
      return 1;
    }
    pushInt32(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0
    );
    offset = offset + 5 | 0;
    return 0;
  }
  function UINT_P_64(octet) {
    octet = octet | 0;
    if (checkOffset(8) | 0) {
      return 1;
    }
    pushInt64(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0,
      readUInt16(offset + 5 | 0) | 0,
      readUInt16(offset + 7 | 0) | 0
    );
    offset = offset + 9 | 0;
    return 0;
  }
  function INT_N(octet) {
    octet = octet | 0;
    pushInt(-1 - (octet - 32 | 0) | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function UINT_N_8(octet) {
    octet = octet | 0;
    if (checkOffset(1) | 0) {
      return 1;
    }
    pushInt(
      -1 - (heap[offset + 1 | 0] | 0) | 0
    );
    offset = offset + 2 | 0;
    return 0;
  }
  function UINT_N_16(octet) {
    octet = octet | 0;
    var val = 0;
    if (checkOffset(2) | 0) {
      return 1;
    }
    val = readUInt16(offset + 1 | 0) | 0;
    pushInt(-1 - (val | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }
  function UINT_N_32(octet) {
    octet = octet | 0;
    if (checkOffset(4) | 0) {
      return 1;
    }
    pushInt32Neg(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0
    );
    offset = offset + 5 | 0;
    return 0;
  }
  function UINT_N_64(octet) {
    octet = octet | 0;
    if (checkOffset(8) | 0) {
      return 1;
    }
    pushInt64Neg(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0,
      readUInt16(offset + 5 | 0) | 0,
      readUInt16(offset + 7 | 0) | 0
    );
    offset = offset + 9 | 0;
    return 0;
  }
  function BYTE_STRING(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var step = 0;
    step = octet - 64 | 0;
    if (checkOffset(step | 0) | 0) {
      return 1;
    }
    start = offset + 1 | 0;
    end = (offset + 1 | 0) + (step | 0) | 0;
    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }
  function BYTE_STRING_8(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;
    if (checkOffset(1) | 0) {
      return 1;
    }
    length = heap[offset + 1 | 0] | 0;
    start = offset + 2 | 0;
    end = (offset + 2 | 0) + (length | 0) | 0;
    if (checkOffset(length + 1 | 0) | 0) {
      return 1;
    }
    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }
  function BYTE_STRING_16(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;
    if (checkOffset(2) | 0) {
      return 1;
    }
    length = readUInt16(offset + 1 | 0) | 0;
    start = offset + 3 | 0;
    end = (offset + 3 | 0) + (length | 0) | 0;
    if (checkOffset(length + 2 | 0) | 0) {
      return 1;
    }
    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }
  function BYTE_STRING_32(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;
    if (checkOffset(4) | 0) {
      return 1;
    }
    length = readUInt32(offset + 1 | 0) | 0;
    start = offset + 5 | 0;
    end = (offset + 5 | 0) + (length | 0) | 0;
    if (checkOffset(length + 4 | 0) | 0) {
      return 1;
    }
    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }
  function BYTE_STRING_64(octet) {
    octet = octet | 0;
    return 1;
  }
  function BYTE_STRING_BREAK(octet) {
    octet = octet | 0;
    pushByteStringStart();
    offset = offset + 1 | 0;
    return 0;
  }
  function UTF8_STRING(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var step = 0;
    step = octet - 96 | 0;
    if (checkOffset(step | 0) | 0) {
      return 1;
    }
    start = offset + 1 | 0;
    end = (offset + 1 | 0) + (step | 0) | 0;
    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }
  function UTF8_STRING_8(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;
    if (checkOffset(1) | 0) {
      return 1;
    }
    length = heap[offset + 1 | 0] | 0;
    start = offset + 2 | 0;
    end = (offset + 2 | 0) + (length | 0) | 0;
    if (checkOffset(length + 1 | 0) | 0) {
      return 1;
    }
    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }
  function UTF8_STRING_16(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;
    if (checkOffset(2) | 0) {
      return 1;
    }
    length = readUInt16(offset + 1 | 0) | 0;
    start = offset + 3 | 0;
    end = (offset + 3 | 0) + (length | 0) | 0;
    if (checkOffset(length + 2 | 0) | 0) {
      return 1;
    }
    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }
  function UTF8_STRING_32(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;
    if (checkOffset(4) | 0) {
      return 1;
    }
    length = readUInt32(offset + 1 | 0) | 0;
    start = offset + 5 | 0;
    end = (offset + 5 | 0) + (length | 0) | 0;
    if (checkOffset(length + 4 | 0) | 0) {
      return 1;
    }
    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }
  function UTF8_STRING_64(octet) {
    octet = octet | 0;
    return 1;
  }
  function UTF8_STRING_BREAK(octet) {
    octet = octet | 0;
    pushUtf8StringStart();
    offset = offset + 1 | 0;
    return 0;
  }
  function ARRAY(octet) {
    octet = octet | 0;
    pushArrayStartFixed(octet - 128 | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function ARRAY_8(octet) {
    octet = octet | 0;
    if (checkOffset(1) | 0) {
      return 1;
    }
    pushArrayStartFixed(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }
  function ARRAY_16(octet) {
    octet = octet | 0;
    if (checkOffset(2) | 0) {
      return 1;
    }
    pushArrayStartFixed(
      readUInt16(offset + 1 | 0) | 0
    );
    offset = offset + 3 | 0;
    return 0;
  }
  function ARRAY_32(octet) {
    octet = octet | 0;
    if (checkOffset(4) | 0) {
      return 1;
    }
    pushArrayStartFixed32(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0
    );
    offset = offset + 5 | 0;
    return 0;
  }
  function ARRAY_64(octet) {
    octet = octet | 0;
    if (checkOffset(8) | 0) {
      return 1;
    }
    pushArrayStartFixed64(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0,
      readUInt16(offset + 5 | 0) | 0,
      readUInt16(offset + 7 | 0) | 0
    );
    offset = offset + 9 | 0;
    return 0;
  }
  function ARRAY_BREAK(octet) {
    octet = octet | 0;
    pushArrayStart();
    offset = offset + 1 | 0;
    return 0;
  }
  function MAP(octet) {
    octet = octet | 0;
    var step = 0;
    step = octet - 160 | 0;
    if (checkOffset(step | 0) | 0) {
      return 1;
    }
    pushObjectStartFixed(step | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function MAP_8(octet) {
    octet = octet | 0;
    if (checkOffset(1) | 0) {
      return 1;
    }
    pushObjectStartFixed(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }
  function MAP_16(octet) {
    octet = octet | 0;
    if (checkOffset(2) | 0) {
      return 1;
    }
    pushObjectStartFixed(
      readUInt16(offset + 1 | 0) | 0
    );
    offset = offset + 3 | 0;
    return 0;
  }
  function MAP_32(octet) {
    octet = octet | 0;
    if (checkOffset(4) | 0) {
      return 1;
    }
    pushObjectStartFixed32(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0
    );
    offset = offset + 5 | 0;
    return 0;
  }
  function MAP_64(octet) {
    octet = octet | 0;
    if (checkOffset(8) | 0) {
      return 1;
    }
    pushObjectStartFixed64(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0,
      readUInt16(offset + 5 | 0) | 0,
      readUInt16(offset + 7 | 0) | 0
    );
    offset = offset + 9 | 0;
    return 0;
  }
  function MAP_BREAK(octet) {
    octet = octet | 0;
    pushObjectStart();
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_KNOWN(octet) {
    octet = octet | 0;
    pushTagStart(octet - 192 | 0 | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_BIGNUM_POS(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_BIGNUM_NEG(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_FRAC(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_BIGNUM_FLOAT(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_UNASSIGNED(octet) {
    octet = octet | 0;
    pushTagStart(octet - 192 | 0 | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_BASE64_URL(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_BASE64(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_BASE16(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function TAG_MORE_1(octet) {
    octet = octet | 0;
    if (checkOffset(1) | 0) {
      return 1;
    }
    pushTagStart(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }
  function TAG_MORE_2(octet) {
    octet = octet | 0;
    if (checkOffset(2) | 0) {
      return 1;
    }
    pushTagStart(
      readUInt16(offset + 1 | 0) | 0
    );
    offset = offset + 3 | 0;
    return 0;
  }
  function TAG_MORE_4(octet) {
    octet = octet | 0;
    if (checkOffset(4) | 0) {
      return 1;
    }
    pushTagStart4(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0
    );
    offset = offset + 5 | 0;
    return 0;
  }
  function TAG_MORE_8(octet) {
    octet = octet | 0;
    if (checkOffset(8) | 0) {
      return 1;
    }
    pushTagStart8(
      readUInt16(offset + 1 | 0) | 0,
      readUInt16(offset + 3 | 0) | 0,
      readUInt16(offset + 5 | 0) | 0,
      readUInt16(offset + 7 | 0) | 0
    );
    offset = offset + 9 | 0;
    return 0;
  }
  function SIMPLE_UNASSIGNED(octet) {
    octet = octet | 0;
    pushSimpleUnassigned((octet | 0) - 224 | 0);
    offset = offset + 1 | 0;
    return 0;
  }
  function SIMPLE_FALSE(octet) {
    octet = octet | 0;
    pushFalse();
    offset = offset + 1 | 0;
    return 0;
  }
  function SIMPLE_TRUE(octet) {
    octet = octet | 0;
    pushTrue();
    offset = offset + 1 | 0;
    return 0;
  }
  function SIMPLE_NULL(octet) {
    octet = octet | 0;
    pushNull();
    offset = offset + 1 | 0;
    return 0;
  }
  function SIMPLE_UNDEFINED(octet) {
    octet = octet | 0;
    pushUndefined();
    offset = offset + 1 | 0;
    return 0;
  }
  function SIMPLE_BYTE(octet) {
    octet = octet | 0;
    if (checkOffset(1) | 0) {
      return 1;
    }
    pushSimpleUnassigned(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }
  function SIMPLE_FLOAT_HALF(octet) {
    octet = octet | 0;
    var f = 0;
    var g = 0;
    var sign = 1;
    var exp = 0;
    var mant = 0;
    var r = 0;
    if (checkOffset(2) | 0) {
      return 1;
    }
    f = heap[offset + 1 | 0] | 0;
    g = heap[offset + 2 | 0] | 0;
    if ((f | 0) & 128) {
      sign = -1;
    }
    exp = +(((f | 0) & 124) >> 2);
    mant = +(((f | 0) & 3) << 8 | g);
    if (+exp == 0) {
      pushFloat(+(+sign * 5960464477539063e-23 * +mant));
    } else if (+exp == 31) {
      if (+sign == 1) {
        if (+mant > 0) {
          pushNaN();
        } else {
          pushInfinity();
        }
      } else {
        if (+mant > 0) {
          pushNaNNeg();
        } else {
          pushInfinityNeg();
        }
      }
    } else {
      pushFloat(+(+sign * pow(2, +(+exp - 25)) * +(1024 + mant)));
    }
    offset = offset + 3 | 0;
    return 0;
  }
  function SIMPLE_FLOAT_SINGLE(octet) {
    octet = octet | 0;
    if (checkOffset(4) | 0) {
      return 1;
    }
    pushFloatSingle(
      heap[offset + 1 | 0] | 0,
      heap[offset + 2 | 0] | 0,
      heap[offset + 3 | 0] | 0,
      heap[offset + 4 | 0] | 0
    );
    offset = offset + 5 | 0;
    return 0;
  }
  function SIMPLE_FLOAT_DOUBLE(octet) {
    octet = octet | 0;
    if (checkOffset(8) | 0) {
      return 1;
    }
    pushFloatDouble(
      heap[offset + 1 | 0] | 0,
      heap[offset + 2 | 0] | 0,
      heap[offset + 3 | 0] | 0,
      heap[offset + 4 | 0] | 0,
      heap[offset + 5 | 0] | 0,
      heap[offset + 6 | 0] | 0,
      heap[offset + 7 | 0] | 0,
      heap[offset + 8 | 0] | 0
    );
    offset = offset + 9 | 0;
    return 0;
  }
  function ERROR2(octet) {
    octet = octet | 0;
    return 1;
  }
  function BREAK(octet) {
    octet = octet | 0;
    pushBreak();
    offset = offset + 1 | 0;
    return 0;
  }
  var jumpTable = [
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    INT_P,
    UINT_P_8,
    UINT_P_16,
    UINT_P_32,
    UINT_P_64,
    ERROR2,
    ERROR2,
    ERROR2,
    ERROR2,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    INT_N,
    UINT_N_8,
    UINT_N_16,
    UINT_N_32,
    UINT_N_64,
    ERROR2,
    ERROR2,
    ERROR2,
    ERROR2,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING,
    BYTE_STRING_8,
    BYTE_STRING_16,
    BYTE_STRING_32,
    BYTE_STRING_64,
    ERROR2,
    ERROR2,
    ERROR2,
    BYTE_STRING_BREAK,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING,
    UTF8_STRING_8,
    UTF8_STRING_16,
    UTF8_STRING_32,
    UTF8_STRING_64,
    ERROR2,
    ERROR2,
    ERROR2,
    UTF8_STRING_BREAK,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY,
    ARRAY_8,
    ARRAY_16,
    ARRAY_32,
    ARRAY_64,
    ERROR2,
    ERROR2,
    ERROR2,
    ARRAY_BREAK,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP,
    MAP_8,
    MAP_16,
    MAP_32,
    MAP_64,
    ERROR2,
    ERROR2,
    ERROR2,
    MAP_BREAK,
    TAG_KNOWN,
    TAG_KNOWN,
    TAG_KNOWN,
    TAG_KNOWN,
    TAG_KNOWN,
    TAG_KNOWN,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_UNASSIGNED,
    TAG_MORE_1,
    TAG_MORE_2,
    TAG_MORE_4,
    TAG_MORE_8,
    ERROR2,
    ERROR2,
    ERROR2,
    ERROR2,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_UNASSIGNED,
    SIMPLE_FALSE,
    SIMPLE_TRUE,
    SIMPLE_NULL,
    SIMPLE_UNDEFINED,
    SIMPLE_BYTE,
    SIMPLE_FLOAT_HALF,
    SIMPLE_FLOAT_SINGLE,
    SIMPLE_FLOAT_DOUBLE,
    ERROR2,
    ERROR2,
    ERROR2,
    BREAK
  ];
  return {
    parse
  };
};
var utils$3 = {};
var constants$3 = {};
const Bignumber$2 = bignumber.exports.BigNumber;
constants$3.MT = {
  POS_INT: 0,
  NEG_INT: 1,
  BYTE_STRING: 2,
  UTF8_STRING: 3,
  ARRAY: 4,
  MAP: 5,
  TAG: 6,
  SIMPLE_FLOAT: 7
};
constants$3.TAG = {
  DATE_STRING: 0,
  DATE_EPOCH: 1,
  POS_BIGINT: 2,
  NEG_BIGINT: 3,
  DECIMAL_FRAC: 4,
  BIGFLOAT: 5,
  BASE64URL_EXPECTED: 21,
  BASE64_EXPECTED: 22,
  BASE16_EXPECTED: 23,
  CBOR: 24,
  URI: 32,
  BASE64URL: 33,
  BASE64: 34,
  REGEXP: 35,
  MIME: 36
};
constants$3.NUMBYTES = {
  ZERO: 0,
  ONE: 24,
  TWO: 25,
  FOUR: 26,
  EIGHT: 27,
  INDEFINITE: 31
};
constants$3.SIMPLE = {
  FALSE: 20,
  TRUE: 21,
  NULL: 22,
  UNDEFINED: 23
};
constants$3.SYMS = {
  NULL: Symbol("null"),
  UNDEFINED: Symbol("undef"),
  PARENT: Symbol("parent"),
  BREAK: Symbol("break"),
  STREAM: Symbol("stream")
};
constants$3.SHIFT32 = Math.pow(2, 32);
constants$3.SHIFT16 = Math.pow(2, 16);
constants$3.MAX_SAFE_HIGH = 2097151;
constants$3.NEG_ONE = new Bignumber$2(-1);
constants$3.TEN = new Bignumber$2(10);
constants$3.TWO = new Bignumber$2(2);
constants$3.PARENT = {
  ARRAY: 0,
  OBJECT: 1,
  MAP: 2,
  TAG: 3,
  BYTE_STRING: 4,
  UTF8_STRING: 5
};
(function(exports2) {
  const { Buffer: Buffer2 } = buffer;
  const Bignumber2 = bignumber.exports.BigNumber;
  const constants2 = constants$3;
  const SHIFT322 = constants2.SHIFT32;
  const SHIFT16 = constants2.SHIFT16;
  const MAX_SAFE_HIGH = 2097151;
  exports2.parseHalf = function parseHalf(buf) {
    var exp, mant, sign;
    sign = buf[0] & 128 ? -1 : 1;
    exp = (buf[0] & 124) >> 2;
    mant = (buf[0] & 3) << 8 | buf[1];
    if (!exp) {
      return sign * 5960464477539063e-23 * mant;
    } else if (exp === 31) {
      return sign * (mant ? 0 / 0 : Infinity);
    } else {
      return sign * Math.pow(2, exp - 25) * (1024 + mant);
    }
  };
  function toHex2(n) {
    if (n < 16) {
      return "0" + n.toString(16);
    }
    return n.toString(16);
  }
  exports2.arrayBufferToBignumber = function(buf) {
    const len2 = buf.byteLength;
    let res = "";
    for (let i2 = 0; i2 < len2; i2++) {
      res += toHex2(buf[i2]);
    }
    return new Bignumber2(res, 16);
  };
  exports2.buildMap = (obj) => {
    const res = /* @__PURE__ */ new Map();
    const keys = Object.keys(obj);
    const length = keys.length;
    for (let i2 = 0; i2 < length; i2++) {
      res.set(keys[i2], obj[keys[i2]]);
    }
    return res;
  };
  exports2.buildInt32 = (f, g) => {
    return f * SHIFT16 + g;
  };
  exports2.buildInt64 = (f1, f2, g1, g2) => {
    const f = exports2.buildInt32(f1, f2);
    const g = exports2.buildInt32(g1, g2);
    if (f > MAX_SAFE_HIGH) {
      return new Bignumber2(f).times(SHIFT322).plus(g);
    } else {
      return f * SHIFT322 + g;
    }
  };
  exports2.writeHalf = function writeHalf(buf, half) {
    const u322 = Buffer2.allocUnsafe(4);
    u322.writeFloatBE(half, 0);
    const u = u322.readUInt32BE(0);
    if ((u & 8191) !== 0) {
      return false;
    }
    var s16 = u >> 16 & 32768;
    const exp = u >> 23 & 255;
    const mant = u & 8388607;
    if (exp >= 113 && exp <= 142) {
      s16 += (exp - 112 << 10) + (mant >> 13);
    } else if (exp >= 103 && exp < 113) {
      if (mant & (1 << 126 - exp) - 1) {
        return false;
      }
      s16 += mant + 8388608 >> 126 - exp;
    } else {
      return false;
    }
    buf.writeUInt16BE(s16, 0);
    return true;
  };
  exports2.keySorter = function(a, b) {
    var lenA = a[0].byteLength;
    var lenB = b[0].byteLength;
    if (lenA > lenB) {
      return 1;
    }
    if (lenB > lenA) {
      return -1;
    }
    return a[0].compare(b[0]);
  };
  exports2.isNegativeZero = (x) => {
    return x === 0 && 1 / x < 0;
  };
  exports2.nextPowerOf2 = (n) => {
    let count = 0;
    if (n && !(n & n - 1)) {
      return n;
    }
    while (n !== 0) {
      n >>= 1;
      count += 1;
    }
    return 1 << count;
  };
})(utils$3);
const constants$2 = constants$3;
const MT$1 = constants$2.MT;
const SIMPLE = constants$2.SIMPLE;
const SYMS$1 = constants$2.SYMS;
class Simple$1 {
  constructor(value2) {
    if (typeof value2 !== "number") {
      throw new Error("Invalid Simple type: " + typeof value2);
    }
    if (value2 < 0 || value2 > 255 || (value2 | 0) !== value2) {
      throw new Error("value must be a small positive integer: " + value2);
    }
    this.value = value2;
  }
  toString() {
    return "simple(" + this.value + ")";
  }
  inspect() {
    return "simple(" + this.value + ")";
  }
  encodeCBOR(gen) {
    return gen._pushInt(this.value, MT$1.SIMPLE_FLOAT);
  }
  static isSimple(obj) {
    return obj instanceof Simple$1;
  }
  static decode(val, hasParent) {
    if (hasParent == null) {
      hasParent = true;
    }
    switch (val) {
      case SIMPLE.FALSE:
        return false;
      case SIMPLE.TRUE:
        return true;
      case SIMPLE.NULL:
        if (hasParent) {
          return null;
        } else {
          return SYMS$1.NULL;
        }
      case SIMPLE.UNDEFINED:
        if (hasParent) {
          return void 0;
        } else {
          return SYMS$1.UNDEFINED;
        }
      case -1:
        if (!hasParent) {
          throw new Error("Invalid BREAK");
        }
        return SYMS$1.BREAK;
      default:
        return new Simple$1(val);
    }
  }
}
var simple = Simple$1;
class Tagged$1 {
  constructor(tag, value2, err) {
    this.tag = tag;
    this.value = value2;
    this.err = err;
    if (typeof this.tag !== "number") {
      throw new Error("Invalid tag type (" + typeof this.tag + ")");
    }
    if (this.tag < 0 || (this.tag | 0) !== this.tag) {
      throw new Error("Tag must be a positive integer: " + this.tag);
    }
  }
  toString() {
    return `${this.tag}(${JSON.stringify(this.value)})`;
  }
  encodeCBOR(gen) {
    gen._pushTag(this.tag);
    return gen.pushAny(this.value);
  }
  convert(converters) {
    var er, f;
    f = converters != null ? converters[this.tag] : void 0;
    if (typeof f !== "function") {
      f = Tagged$1["_tag" + this.tag];
      if (typeof f !== "function") {
        return this;
      }
    }
    try {
      return f.call(Tagged$1, this.value);
    } catch (error) {
      er = error;
      this.err = er;
      return this;
    }
  }
}
var tagged$1 = Tagged$1;
const defaultBase$1 = self.location ? self.location.protocol + "//" + self.location.host : "";
const URL$3 = self.URL;
class URLWithLegacySupport$2 {
  constructor(url2 = "", base = defaultBase$1) {
    this.super = new URL$3(url2, base);
    this.path = this.pathname + this.search;
    this.auth = this.username && this.password ? this.username + ":" + this.password : null;
    this.query = this.search && this.search.startsWith("?") ? this.search.slice(1) : null;
  }
  get hash() {
    return this.super.hash;
  }
  get host() {
    return this.super.host;
  }
  get hostname() {
    return this.super.hostname;
  }
  get href() {
    return this.super.href;
  }
  get origin() {
    return this.super.origin;
  }
  get password() {
    return this.super.password;
  }
  get pathname() {
    return this.super.pathname;
  }
  get port() {
    return this.super.port;
  }
  get protocol() {
    return this.super.protocol;
  }
  get search() {
    return this.super.search;
  }
  get searchParams() {
    return this.super.searchParams;
  }
  get username() {
    return this.super.username;
  }
  set hash(hash2) {
    this.super.hash = hash2;
  }
  set host(host2) {
    this.super.host = host2;
  }
  set hostname(hostname) {
    this.super.hostname = hostname;
  }
  set href(href) {
    this.super.href = href;
  }
  set origin(origin) {
    this.super.origin = origin;
  }
  set password(password) {
    this.super.password = password;
  }
  set pathname(pathname) {
    this.super.pathname = pathname;
  }
  set port(port) {
    this.super.port = port;
  }
  set protocol(protocol) {
    this.super.protocol = protocol;
  }
  set search(search) {
    this.super.search = search;
  }
  set searchParams(searchParams) {
    this.super.searchParams = searchParams;
  }
  set username(username) {
    this.super.username = username;
  }
  createObjectURL(o) {
    return this.super.createObjectURL(o);
  }
  revokeObjectURL(o) {
    this.super.revokeObjectURL(o);
  }
  toJSON() {
    return this.super.toJSON();
  }
  toString() {
    return this.super.toString();
  }
  format() {
    return this.toString();
  }
}
function format$2(obj) {
  if (typeof obj === "string") {
    const url2 = new URL$3(obj);
    return url2.toString();
  }
  if (!(obj instanceof URL$3)) {
    const userPass = obj.username && obj.password ? `${obj.username}:${obj.password}@` : "";
    const auth = obj.auth ? obj.auth + "@" : "";
    const port = obj.port ? ":" + obj.port : "";
    const protocol = obj.protocol ? obj.protocol + "//" : "";
    const host2 = obj.host || "";
    const hostname = obj.hostname || "";
    const search = obj.search || (obj.query ? "?" + obj.query : "");
    const hash2 = obj.hash || "";
    const pathname = obj.pathname || "";
    const path = obj.path || pathname + search;
    return `${protocol}${userPass || auth}${host2 || hostname + port}${path}${hash2}`;
  }
}
var urlBrowser = {
  URLWithLegacySupport: URLWithLegacySupport$2,
  URLSearchParams: self.URLSearchParams,
  defaultBase: defaultBase$1,
  format: format$2
};
const { URLWithLegacySupport: URLWithLegacySupport$1, format: format$1 } = urlBrowser;
var relative$1 = (url2, location = {}, protocolMap = {}, defaultProtocol) => {
  let protocol = location.protocol ? location.protocol.replace(":", "") : "http";
  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ":";
  let urlParsed;
  try {
    urlParsed = new URLWithLegacySupport$1(url2);
  } catch (err) {
    urlParsed = {};
  }
  const base = Object.assign({}, location, {
    protocol: protocol || urlParsed.protocol,
    host: location.host || urlParsed.host
  });
  return new URLWithLegacySupport$1(url2, format$1(base)).toString();
};
const {
  URLWithLegacySupport,
  format,
  URLSearchParams: URLSearchParams$1,
  defaultBase
} = urlBrowser;
const relative = relative$1;
var isoUrl = {
  URL: URLWithLegacySupport,
  URLSearchParams: URLSearchParams$1,
  format,
  relative,
  defaultBase
};
const { Buffer: Buffer$4 } = buffer;
const ieee754 = ieee754$1;
const Bignumber$1 = bignumber.exports.BigNumber;
const parser = decoder_asm;
const utils$2 = utils$3;
const c = constants$3;
const Simple = simple;
const Tagged = tagged$1;
const { URL: URL$2 } = isoUrl;
class Decoder$1 {
  constructor(opts) {
    opts = opts || {};
    if (!opts.size || opts.size < 65536) {
      opts.size = 65536;
    } else {
      opts.size = utils$2.nextPowerOf2(opts.size);
    }
    this._heap = new ArrayBuffer(opts.size);
    this._heap8 = new Uint8Array(this._heap);
    this._buffer = Buffer$4.from(this._heap);
    this._reset();
    this._knownTags = Object.assign({
      0: (val) => new Date(val),
      1: (val) => new Date(val * 1e3),
      2: (val) => utils$2.arrayBufferToBignumber(val),
      3: (val) => c.NEG_ONE.minus(utils$2.arrayBufferToBignumber(val)),
      4: (v) => {
        return c.TEN.pow(v[0]).times(v[1]);
      },
      5: (v) => {
        return c.TWO.pow(v[0]).times(v[1]);
      },
      32: (val) => new URL$2(val),
      35: (val) => new RegExp(val)
    }, opts.tags);
    this.parser = parser(commonjsGlobal, {
      log: console.log.bind(console),
      pushInt: this.pushInt.bind(this),
      pushInt32: this.pushInt32.bind(this),
      pushInt32Neg: this.pushInt32Neg.bind(this),
      pushInt64: this.pushInt64.bind(this),
      pushInt64Neg: this.pushInt64Neg.bind(this),
      pushFloat: this.pushFloat.bind(this),
      pushFloatSingle: this.pushFloatSingle.bind(this),
      pushFloatDouble: this.pushFloatDouble.bind(this),
      pushTrue: this.pushTrue.bind(this),
      pushFalse: this.pushFalse.bind(this),
      pushUndefined: this.pushUndefined.bind(this),
      pushNull: this.pushNull.bind(this),
      pushInfinity: this.pushInfinity.bind(this),
      pushInfinityNeg: this.pushInfinityNeg.bind(this),
      pushNaN: this.pushNaN.bind(this),
      pushNaNNeg: this.pushNaNNeg.bind(this),
      pushArrayStart: this.pushArrayStart.bind(this),
      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),
      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),
      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),
      pushObjectStart: this.pushObjectStart.bind(this),
      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),
      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),
      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),
      pushByteString: this.pushByteString.bind(this),
      pushByteStringStart: this.pushByteStringStart.bind(this),
      pushUtf8String: this.pushUtf8String.bind(this),
      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),
      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),
      pushTagUnassigned: this.pushTagUnassigned.bind(this),
      pushTagStart: this.pushTagStart.bind(this),
      pushTagStart4: this.pushTagStart4.bind(this),
      pushTagStart8: this.pushTagStart8.bind(this),
      pushBreak: this.pushBreak.bind(this)
    }, this._heap);
  }
  get _depth() {
    return this._parents.length;
  }
  get _currentParent() {
    return this._parents[this._depth - 1];
  }
  get _ref() {
    return this._currentParent.ref;
  }
  _closeParent() {
    var p = this._parents.pop();
    if (p.length > 0) {
      throw new Error(`Missing ${p.length} elements`);
    }
    switch (p.type) {
      case c.PARENT.TAG:
        this._push(
          this.createTag(p.ref[0], p.ref[1])
        );
        break;
      case c.PARENT.BYTE_STRING:
        this._push(this.createByteString(p.ref, p.length));
        break;
      case c.PARENT.UTF8_STRING:
        this._push(this.createUtf8String(p.ref, p.length));
        break;
      case c.PARENT.MAP:
        if (p.values % 2 > 0) {
          throw new Error("Odd number of elements in the map");
        }
        this._push(this.createMap(p.ref, p.length));
        break;
      case c.PARENT.OBJECT:
        if (p.values % 2 > 0) {
          throw new Error("Odd number of elements in the map");
        }
        this._push(this.createObject(p.ref, p.length));
        break;
      case c.PARENT.ARRAY:
        this._push(this.createArray(p.ref, p.length));
        break;
    }
    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {
      this._dec();
    }
  }
  _dec() {
    const p = this._currentParent;
    if (p.length < 0) {
      return;
    }
    p.length--;
    if (p.length === 0) {
      this._closeParent();
    }
  }
  _push(val, hasChildren) {
    const p = this._currentParent;
    p.values++;
    switch (p.type) {
      case c.PARENT.ARRAY:
      case c.PARENT.BYTE_STRING:
      case c.PARENT.UTF8_STRING:
        if (p.length > -1) {
          this._ref[this._ref.length - p.length] = val;
        } else {
          this._ref.push(val);
        }
        this._dec();
        break;
      case c.PARENT.OBJECT:
        if (p.tmpKey != null) {
          this._ref[p.tmpKey] = val;
          p.tmpKey = null;
          this._dec();
        } else {
          p.tmpKey = val;
          if (typeof p.tmpKey !== "string") {
            p.type = c.PARENT.MAP;
            p.ref = utils$2.buildMap(p.ref);
          }
        }
        break;
      case c.PARENT.MAP:
        if (p.tmpKey != null) {
          this._ref.set(p.tmpKey, val);
          p.tmpKey = null;
          this._dec();
        } else {
          p.tmpKey = val;
        }
        break;
      case c.PARENT.TAG:
        this._ref.push(val);
        if (!hasChildren) {
          this._dec();
        }
        break;
      default:
        throw new Error("Unknown parent type");
    }
  }
  _createParent(obj, type, len2) {
    this._parents[this._depth] = {
      type,
      length: len2,
      ref: obj,
      values: 0,
      tmpKey: null
    };
  }
  _reset() {
    this._res = [];
    this._parents = [{
      type: c.PARENT.ARRAY,
      length: -1,
      ref: this._res,
      values: 0,
      tmpKey: null
    }];
  }
  createTag(tagNumber, value2) {
    const typ = this._knownTags[tagNumber];
    if (!typ) {
      return new Tagged(tagNumber, value2);
    }
    return typ(value2);
  }
  createMap(obj, len2) {
    return obj;
  }
  createObject(obj, len2) {
    return obj;
  }
  createArray(arr, len2) {
    return arr;
  }
  createByteString(raw2, len2) {
    return Buffer$4.concat(raw2);
  }
  createByteStringFromHeap(start, end) {
    if (start === end) {
      return Buffer$4.alloc(0);
    }
    return Buffer$4.from(this._heap.slice(start, end));
  }
  createInt(val) {
    return val;
  }
  createInt32(f, g) {
    return utils$2.buildInt32(f, g);
  }
  createInt64(f1, f2, g1, g2) {
    return utils$2.buildInt64(f1, f2, g1, g2);
  }
  createFloat(val) {
    return val;
  }
  createFloatSingle(a, b, c2, d) {
    return ieee754.read([a, b, c2, d], 0, false, 23, 4);
  }
  createFloatDouble(a, b, c2, d, e, f, g, h) {
    return ieee754.read([a, b, c2, d, e, f, g, h], 0, false, 52, 8);
  }
  createInt32Neg(f, g) {
    return -1 - utils$2.buildInt32(f, g);
  }
  createInt64Neg(f1, f2, g1, g2) {
    const f = utils$2.buildInt32(f1, f2);
    const g = utils$2.buildInt32(g1, g2);
    if (f > c.MAX_SAFE_HIGH) {
      return c.NEG_ONE.minus(new Bignumber$1(f).times(c.SHIFT32).plus(g));
    }
    return -1 - (f * c.SHIFT32 + g);
  }
  createTrue() {
    return true;
  }
  createFalse() {
    return false;
  }
  createNull() {
    return null;
  }
  createUndefined() {
    return void 0;
  }
  createInfinity() {
    return Infinity;
  }
  createInfinityNeg() {
    return -Infinity;
  }
  createNaN() {
    return NaN;
  }
  createNaNNeg() {
    return NaN;
  }
  createUtf8String(raw2, len2) {
    return raw2.join("");
  }
  createUtf8StringFromHeap(start, end) {
    if (start === end) {
      return "";
    }
    return this._buffer.toString("utf8", start, end);
  }
  createSimpleUnassigned(val) {
    return new Simple(val);
  }
  pushInt(val) {
    this._push(this.createInt(val));
  }
  pushInt32(f, g) {
    this._push(this.createInt32(f, g));
  }
  pushInt64(f1, f2, g1, g2) {
    this._push(this.createInt64(f1, f2, g1, g2));
  }
  pushFloat(val) {
    this._push(this.createFloat(val));
  }
  pushFloatSingle(a, b, c2, d) {
    this._push(this.createFloatSingle(a, b, c2, d));
  }
  pushFloatDouble(a, b, c2, d, e, f, g, h) {
    this._push(this.createFloatDouble(a, b, c2, d, e, f, g, h));
  }
  pushInt32Neg(f, g) {
    this._push(this.createInt32Neg(f, g));
  }
  pushInt64Neg(f1, f2, g1, g2) {
    this._push(this.createInt64Neg(f1, f2, g1, g2));
  }
  pushTrue() {
    this._push(this.createTrue());
  }
  pushFalse() {
    this._push(this.createFalse());
  }
  pushNull() {
    this._push(this.createNull());
  }
  pushUndefined() {
    this._push(this.createUndefined());
  }
  pushInfinity() {
    this._push(this.createInfinity());
  }
  pushInfinityNeg() {
    this._push(this.createInfinityNeg());
  }
  pushNaN() {
    this._push(this.createNaN());
  }
  pushNaNNeg() {
    this._push(this.createNaNNeg());
  }
  pushArrayStart() {
    this._createParent([], c.PARENT.ARRAY, -1);
  }
  pushArrayStartFixed(len2) {
    this._createArrayStartFixed(len2);
  }
  pushArrayStartFixed32(len1, len2) {
    const len3 = utils$2.buildInt32(len1, len2);
    this._createArrayStartFixed(len3);
  }
  pushArrayStartFixed64(len1, len2, len3, len4) {
    const len5 = utils$2.buildInt64(len1, len2, len3, len4);
    this._createArrayStartFixed(len5);
  }
  pushObjectStart() {
    this._createObjectStartFixed(-1);
  }
  pushObjectStartFixed(len2) {
    this._createObjectStartFixed(len2);
  }
  pushObjectStartFixed32(len1, len2) {
    const len3 = utils$2.buildInt32(len1, len2);
    this._createObjectStartFixed(len3);
  }
  pushObjectStartFixed64(len1, len2, len3, len4) {
    const len5 = utils$2.buildInt64(len1, len2, len3, len4);
    this._createObjectStartFixed(len5);
  }
  pushByteStringStart() {
    this._parents[this._depth] = {
      type: c.PARENT.BYTE_STRING,
      length: -1,
      ref: [],
      values: 0,
      tmpKey: null
    };
  }
  pushByteString(start, end) {
    this._push(this.createByteStringFromHeap(start, end));
  }
  pushUtf8StringStart() {
    this._parents[this._depth] = {
      type: c.PARENT.UTF8_STRING,
      length: -1,
      ref: [],
      values: 0,
      tmpKey: null
    };
  }
  pushUtf8String(start, end) {
    this._push(this.createUtf8StringFromHeap(start, end));
  }
  pushSimpleUnassigned(val) {
    this._push(this.createSimpleUnassigned(val));
  }
  pushTagStart(tag) {
    this._parents[this._depth] = {
      type: c.PARENT.TAG,
      length: 1,
      ref: [tag]
    };
  }
  pushTagStart4(f, g) {
    this.pushTagStart(utils$2.buildInt32(f, g));
  }
  pushTagStart8(f1, f2, g1, g2) {
    this.pushTagStart(utils$2.buildInt64(f1, f2, g1, g2));
  }
  pushTagUnassigned(tagNumber) {
    this._push(this.createTag(tagNumber));
  }
  pushBreak() {
    if (this._currentParent.length > -1) {
      throw new Error("Unexpected break");
    }
    this._closeParent();
  }
  _createObjectStartFixed(len2) {
    if (len2 === 0) {
      this._push(this.createObject({}));
      return;
    }
    this._createParent({}, c.PARENT.OBJECT, len2);
  }
  _createArrayStartFixed(len2) {
    if (len2 === 0) {
      this._push(this.createArray([]));
      return;
    }
    this._createParent(new Array(len2), c.PARENT.ARRAY, len2);
  }
  _decode(input) {
    if (input.byteLength === 0) {
      throw new Error("Input too short");
    }
    this._reset();
    this._heap8.set(input);
    const code2 = this.parser.parse(input.byteLength);
    if (this._depth > 1) {
      while (this._currentParent.length === 0) {
        this._closeParent();
      }
      if (this._depth > 1) {
        throw new Error("Undeterminated nesting");
      }
    }
    if (code2 > 0) {
      throw new Error("Failed to parse");
    }
    if (this._res.length === 0) {
      throw new Error("No valid result");
    }
  }
  decodeFirst(input) {
    this._decode(input);
    return this._res[0];
  }
  decodeAll(input) {
    this._decode(input);
    return this._res;
  }
  static decode(input, enc) {
    if (typeof input === "string") {
      input = Buffer$4.from(input, enc || "hex");
    }
    const dec = new Decoder$1({ size: input.length });
    return dec.decodeFirst(input);
  }
  static decodeAll(input, enc) {
    if (typeof input === "string") {
      input = Buffer$4.from(input, enc || "hex");
    }
    const dec = new Decoder$1({ size: input.length });
    return dec.decodeAll(input);
  }
}
Decoder$1.decodeFirst = Decoder$1.decode;
var decoder = Decoder$1;
const { Buffer: Buffer$3 } = buffer;
const Decoder = decoder;
const utils$1 = utils$3;
class Diagnose extends Decoder {
  createTag(tagNumber, value2) {
    return `${tagNumber}(${value2})`;
  }
  createInt(val) {
    return super.createInt(val).toString();
  }
  createInt32(f, g) {
    return super.createInt32(f, g).toString();
  }
  createInt64(f1, f2, g1, g2) {
    return super.createInt64(f1, f2, g1, g2).toString();
  }
  createInt32Neg(f, g) {
    return super.createInt32Neg(f, g).toString();
  }
  createInt64Neg(f1, f2, g1, g2) {
    return super.createInt64Neg(f1, f2, g1, g2).toString();
  }
  createTrue() {
    return "true";
  }
  createFalse() {
    return "false";
  }
  createFloat(val) {
    const fl = super.createFloat(val);
    if (utils$1.isNegativeZero(val)) {
      return "-0_1";
    }
    return `${fl}_1`;
  }
  createFloatSingle(a, b, c2, d) {
    const fl = super.createFloatSingle(a, b, c2, d);
    return `${fl}_2`;
  }
  createFloatDouble(a, b, c2, d, e, f, g, h) {
    const fl = super.createFloatDouble(a, b, c2, d, e, f, g, h);
    return `${fl}_3`;
  }
  createByteString(raw2, len2) {
    const val = raw2.join(", ");
    if (len2 === -1) {
      return `(_ ${val})`;
    }
    return `h'${val}`;
  }
  createByteStringFromHeap(start, end) {
    const val = Buffer$3.from(
      super.createByteStringFromHeap(start, end)
    ).toString("hex");
    return `h'${val}'`;
  }
  createInfinity() {
    return "Infinity_1";
  }
  createInfinityNeg() {
    return "-Infinity_1";
  }
  createNaN() {
    return "NaN_1";
  }
  createNaNNeg() {
    return "-NaN_1";
  }
  createNull() {
    return "null";
  }
  createUndefined() {
    return "undefined";
  }
  createSimpleUnassigned(val) {
    return `simple(${val})`;
  }
  createArray(arr, len2) {
    const val = super.createArray(arr, len2);
    if (len2 === -1) {
      return `[_ ${val.join(", ")}]`;
    }
    return `[${val.join(", ")}]`;
  }
  createMap(map2, len2) {
    const val = super.createMap(map2);
    const list = Array.from(val.keys()).reduce(collectObject(val), "");
    if (len2 === -1) {
      return `{_ ${list}}`;
    }
    return `{${list}}`;
  }
  createObject(obj, len2) {
    const val = super.createObject(obj);
    const map2 = Object.keys(val).reduce(collectObject(val), "");
    if (len2 === -1) {
      return `{_ ${map2}}`;
    }
    return `{${map2}}`;
  }
  createUtf8String(raw2, len2) {
    const val = raw2.join(", ");
    if (len2 === -1) {
      return `(_ ${val})`;
    }
    return `"${val}"`;
  }
  createUtf8StringFromHeap(start, end) {
    const val = Buffer$3.from(
      super.createUtf8StringFromHeap(start, end)
    ).toString("utf8");
    return `"${val}"`;
  }
  static diagnose(input, enc) {
    if (typeof input === "string") {
      input = Buffer$3.from(input, enc || "hex");
    }
    const dec = new Diagnose();
    return dec.decodeFirst(input);
  }
}
var diagnose = Diagnose;
function collectObject(val) {
  return (acc, key) => {
    if (acc) {
      return `${acc}, ${key}: ${val[key]}`;
    }
    return `${key}: ${val[key]}`;
  };
}
const { Buffer: Buffer$2 } = buffer;
const { URL: URL$1 } = isoUrl;
const Bignumber = bignumber.exports.BigNumber;
const utils = utils$3;
const constants$1 = constants$3;
const MT = constants$1.MT;
const NUMBYTES = constants$1.NUMBYTES;
const SHIFT32 = constants$1.SHIFT32;
const SYMS = constants$1.SYMS;
const TAG = constants$1.TAG;
const HALF = constants$1.MT.SIMPLE_FLOAT << 5 | constants$1.NUMBYTES.TWO;
const FLOAT = constants$1.MT.SIMPLE_FLOAT << 5 | constants$1.NUMBYTES.FOUR;
const DOUBLE = constants$1.MT.SIMPLE_FLOAT << 5 | constants$1.NUMBYTES.EIGHT;
const TRUE = constants$1.MT.SIMPLE_FLOAT << 5 | constants$1.SIMPLE.TRUE;
const FALSE = constants$1.MT.SIMPLE_FLOAT << 5 | constants$1.SIMPLE.FALSE;
const UNDEFINED = constants$1.MT.SIMPLE_FLOAT << 5 | constants$1.SIMPLE.UNDEFINED;
const NULL = constants$1.MT.SIMPLE_FLOAT << 5 | constants$1.SIMPLE.NULL;
const MAXINT_BN = new Bignumber("0x20000000000000");
const BUF_NAN = Buffer$2.from("f97e00", "hex");
const BUF_INF_NEG = Buffer$2.from("f9fc00", "hex");
const BUF_INF_POS = Buffer$2.from("f97c00", "hex");
function toType(obj) {
  return {}.toString.call(obj).slice(8, -1);
}
class Encoder {
  constructor(options) {
    options = options || {};
    this.streaming = typeof options.stream === "function";
    this.onData = options.stream;
    this.semanticTypes = [
      [URL$1, this._pushUrl],
      [Bignumber, this._pushBigNumber]
    ];
    const addTypes = options.genTypes || [];
    const len2 = addTypes.length;
    for (let i2 = 0; i2 < len2; i2++) {
      this.addSemanticType(
        addTypes[i2][0],
        addTypes[i2][1]
      );
    }
    this._reset();
  }
  addSemanticType(type, fun) {
    const len2 = this.semanticTypes.length;
    for (let i2 = 0; i2 < len2; i2++) {
      const typ = this.semanticTypes[i2][0];
      if (typ === type) {
        const old = this.semanticTypes[i2][1];
        this.semanticTypes[i2][1] = fun;
        return old;
      }
    }
    this.semanticTypes.push([type, fun]);
    return null;
  }
  push(val) {
    if (!val) {
      return true;
    }
    this.result[this.offset] = val;
    this.resultMethod[this.offset] = 0;
    this.resultLength[this.offset] = val.length;
    this.offset++;
    if (this.streaming) {
      this.onData(this.finalize());
    }
    return true;
  }
  pushWrite(val, method2, len2) {
    this.result[this.offset] = val;
    this.resultMethod[this.offset] = method2;
    this.resultLength[this.offset] = len2;
    this.offset++;
    if (this.streaming) {
      this.onData(this.finalize());
    }
    return true;
  }
  _pushUInt8(val) {
    return this.pushWrite(val, 1, 1);
  }
  _pushUInt16BE(val) {
    return this.pushWrite(val, 2, 2);
  }
  _pushUInt32BE(val) {
    return this.pushWrite(val, 3, 4);
  }
  _pushDoubleBE(val) {
    return this.pushWrite(val, 4, 8);
  }
  _pushNaN() {
    return this.push(BUF_NAN);
  }
  _pushInfinity(obj) {
    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;
    return this.push(half);
  }
  _pushFloat(obj) {
    const b2 = Buffer$2.allocUnsafe(2);
    if (utils.writeHalf(b2, obj)) {
      if (utils.parseHalf(b2) === obj) {
        return this._pushUInt8(HALF) && this.push(b2);
      }
    }
    const b4 = Buffer$2.allocUnsafe(4);
    b4.writeFloatBE(obj, 0);
    if (b4.readFloatBE(0) === obj) {
      return this._pushUInt8(FLOAT) && this.push(b4);
    }
    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);
  }
  _pushInt(obj, mt, orig) {
    const m2 = mt << 5;
    if (obj < 24) {
      return this._pushUInt8(m2 | obj);
    }
    if (obj <= 255) {
      return this._pushUInt8(m2 | NUMBYTES.ONE) && this._pushUInt8(obj);
    }
    if (obj <= 65535) {
      return this._pushUInt8(m2 | NUMBYTES.TWO) && this._pushUInt16BE(obj);
    }
    if (obj <= 4294967295) {
      return this._pushUInt8(m2 | NUMBYTES.FOUR) && this._pushUInt32BE(obj);
    }
    if (obj <= Number.MAX_SAFE_INTEGER) {
      return this._pushUInt8(m2 | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);
    }
    if (mt === MT.NEG_INT) {
      return this._pushFloat(orig);
    }
    return this._pushFloat(obj);
  }
  _pushIntNum(obj) {
    if (obj < 0) {
      return this._pushInt(-obj - 1, MT.NEG_INT, obj);
    } else {
      return this._pushInt(obj, MT.POS_INT);
    }
  }
  _pushNumber(obj) {
    switch (false) {
      case obj === obj:
        return this._pushNaN(obj);
      case isFinite(obj):
        return this._pushInfinity(obj);
      case obj % 1 !== 0:
        return this._pushIntNum(obj);
      default:
        return this._pushFloat(obj);
    }
  }
  _pushString(obj) {
    const len2 = Buffer$2.byteLength(obj, "utf8");
    return this._pushInt(len2, MT.UTF8_STRING) && this.pushWrite(obj, 5, len2);
  }
  _pushBoolean(obj) {
    return this._pushUInt8(obj ? TRUE : FALSE);
  }
  _pushUndefined(obj) {
    return this._pushUInt8(UNDEFINED);
  }
  _pushArray(gen, obj) {
    const len2 = obj.length;
    if (!gen._pushInt(len2, MT.ARRAY)) {
      return false;
    }
    for (let j = 0; j < len2; j++) {
      if (!gen.pushAny(obj[j])) {
        return false;
      }
    }
    return true;
  }
  _pushTag(tag) {
    return this._pushInt(tag, MT.TAG);
  }
  _pushDate(gen, obj) {
    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1e3));
  }
  _pushBuffer(gen, obj) {
    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);
  }
  _pushNoFilter(gen, obj) {
    return gen._pushBuffer(gen, obj.slice());
  }
  _pushRegexp(gen, obj) {
    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);
  }
  _pushSet(gen, obj) {
    if (!gen._pushInt(obj.size, MT.ARRAY)) {
      return false;
    }
    for (const x of obj) {
      if (!gen.pushAny(x)) {
        return false;
      }
    }
    return true;
  }
  _pushUrl(gen, obj) {
    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());
  }
  _pushBigint(obj) {
    let tag = TAG.POS_BIGINT;
    if (obj.isNegative()) {
      obj = obj.negated().minus(1);
      tag = TAG.NEG_BIGINT;
    }
    let str = obj.toString(16);
    if (str.length % 2) {
      str = "0" + str;
    }
    const buf = Buffer$2.from(str, "hex");
    return this._pushTag(tag) && this._pushBuffer(this, buf);
  }
  _pushBigNumber(gen, obj) {
    if (obj.isNaN()) {
      return gen._pushNaN();
    }
    if (!obj.isFinite()) {
      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);
    }
    if (obj.isInteger()) {
      return gen._pushBigint(obj);
    }
    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {
      return false;
    }
    const dec = obj.decimalPlaces();
    const slide = obj.multipliedBy(new Bignumber(10).pow(dec));
    if (!gen._pushIntNum(-dec)) {
      return false;
    }
    if (slide.abs().isLessThan(MAXINT_BN)) {
      return gen._pushIntNum(slide.toNumber());
    } else {
      return gen._pushBigint(slide);
    }
  }
  _pushMap(gen, obj) {
    if (!gen._pushInt(obj.size, MT.MAP)) {
      return false;
    }
    return this._pushRawMap(
      obj.size,
      Array.from(obj)
    );
  }
  _pushObject(obj) {
    if (!obj) {
      return this._pushUInt8(NULL);
    }
    var len2 = this.semanticTypes.length;
    for (var i2 = 0; i2 < len2; i2++) {
      if (obj instanceof this.semanticTypes[i2][0]) {
        return this.semanticTypes[i2][1].call(obj, this, obj);
      }
    }
    var f = obj.encodeCBOR;
    if (typeof f === "function") {
      return f.call(obj, this);
    }
    var keys = Object.keys(obj);
    var keyLength = keys.length;
    if (!this._pushInt(keyLength, MT.MAP)) {
      return false;
    }
    return this._pushRawMap(
      keyLength,
      keys.map((k) => [k, obj[k]])
    );
  }
  _pushRawMap(len2, map2) {
    map2 = map2.map(function(a) {
      a[0] = Encoder.encode(a[0]);
      return a;
    }).sort(utils.keySorter);
    for (var j = 0; j < len2; j++) {
      if (!this.push(map2[j][0])) {
        return false;
      }
      if (!this.pushAny(map2[j][1])) {
        return false;
      }
    }
    return true;
  }
  write(obj) {
    return this.pushAny(obj);
  }
  pushAny(obj) {
    var typ = toType(obj);
    switch (typ) {
      case "Number":
        return this._pushNumber(obj);
      case "String":
        return this._pushString(obj);
      case "Boolean":
        return this._pushBoolean(obj);
      case "Object":
        return this._pushObject(obj);
      case "Array":
        return this._pushArray(this, obj);
      case "Uint8Array":
        return this._pushBuffer(this, Buffer$2.isBuffer(obj) ? obj : Buffer$2.from(obj));
      case "Null":
        return this._pushUInt8(NULL);
      case "Undefined":
        return this._pushUndefined(obj);
      case "Map":
        return this._pushMap(this, obj);
      case "Set":
        return this._pushSet(this, obj);
      case "URL":
        return this._pushUrl(this, obj);
      case "BigNumber":
        return this._pushBigNumber(this, obj);
      case "Date":
        return this._pushDate(this, obj);
      case "RegExp":
        return this._pushRegexp(this, obj);
      case "Symbol":
        switch (obj) {
          case SYMS.NULL:
            return this._pushObject(null);
          case SYMS.UNDEFINED:
            return this._pushUndefined(void 0);
          default:
            throw new Error("Unknown symbol: " + obj.toString());
        }
      default:
        throw new Error("Unknown type: " + typeof obj + ", " + (obj ? obj.toString() : ""));
    }
  }
  finalize() {
    if (this.offset === 0) {
      return null;
    }
    var result = this.result;
    var resultLength = this.resultLength;
    var resultMethod = this.resultMethod;
    var offset = this.offset;
    var size = 0;
    var i2 = 0;
    for (; i2 < offset; i2++) {
      size += resultLength[i2];
    }
    var res = Buffer$2.allocUnsafe(size);
    var index2 = 0;
    var length = 0;
    for (i2 = 0; i2 < offset; i2++) {
      length = resultLength[i2];
      switch (resultMethod[i2]) {
        case 0:
          result[i2].copy(res, index2);
          break;
        case 1:
          res.writeUInt8(result[i2], index2, true);
          break;
        case 2:
          res.writeUInt16BE(result[i2], index2, true);
          break;
        case 3:
          res.writeUInt32BE(result[i2], index2, true);
          break;
        case 4:
          res.writeDoubleBE(result[i2], index2, true);
          break;
        case 5:
          res.write(result[i2], index2, length, "utf8");
          break;
        default:
          throw new Error("unkown method");
      }
      index2 += length;
    }
    var tmp = res;
    this._reset();
    return tmp;
  }
  _reset() {
    this.result = [];
    this.resultMethod = [];
    this.resultLength = [];
    this.offset = 0;
  }
  static encode(o) {
    const enc = new Encoder();
    const ret = enc.pushAny(o);
    if (!ret) {
      throw new Error("Failed to encode input");
    }
    return enc.finalize();
  }
}
var encoder = Encoder;
(function(exports2) {
  exports2.Diagnose = diagnose;
  exports2.Decoder = decoder;
  exports2.Encoder = encoder;
  exports2.Simple = simple;
  exports2.Tagged = tagged$1;
  exports2.decodeAll = exports2.Decoder.decodeAll;
  exports2.decodeFirst = exports2.Decoder.decodeFirst;
  exports2.diagnose = exports2.Diagnose.diagnose;
  exports2.encode = exports2.Encoder.encode;
  exports2.decode = exports2.Decoder.decode;
  exports2.leveldb = {
    decode: exports2.Decoder.decodeAll,
    encode: exports2.Encoder.encode,
    buffer: true,
    name: "cbor"
  };
})(src$1);
var safeBuffer = { exports: {} };
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
(function(module2, exports2) {
  var buffer2 = buffer$1;
  var Buffer2 = buffer2.Buffer;
  function copyProps(src2, dst) {
    for (var key in src2) {
      dst[key] = src2[key];
    }
  }
  if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
    module2.exports = buffer2;
  } else {
    copyProps(buffer2, exports2);
    exports2.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer2(arg, encodingOrOffset, length);
  }
  SafeBuffer.prototype = Object.create(Buffer2.prototype);
  copyProps(Buffer2, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer2(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer2(size);
    if (fill !== void 0) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer2(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer2.SlowBuffer(size);
  };
})(safeBuffer, safeBuffer.exports);
const Buffer$1 = safeBuffer.exports.Buffer;
var bufferPipe = class BufferPipe {
  constructor(buf = Buffer$1.from([])) {
    this.buffer = buf;
    this._bytesRead = 0;
    this._bytesWrote = 0;
  }
  read(num) {
    this._bytesRead += num;
    const data2 = this.buffer.slice(0, num);
    this.buffer = this.buffer.slice(num);
    return data2;
  }
  write(buf) {
    buf = Buffer$1.from(buf);
    this._bytesWrote += buf.length;
    this.buffer = Buffer$1.concat([this.buffer, buf]);
  }
  get end() {
    return !this.buffer.length;
  }
  get bytesRead() {
    return this._bytesRead;
  }
  get bytesWrote() {
    return this._bytesWrote;
  }
};
function safeRead$1(pipe, num) {
  if (pipe.buffer.length < num) {
    throw new Error("unexpected end of buffer");
  }
  return pipe.read(num);
}
function lebEncode(value2) {
  if (typeof value2 === "number") {
    value2 = BigInt(value2);
  }
  if (value2 < BigInt(0)) {
    throw new Error("Cannot leb encode negative values.");
  }
  const pipe = new bufferPipe();
  while (true) {
    const i2 = Number(value2 & BigInt(127));
    value2 /= BigInt(128);
    if (value2 === BigInt(0)) {
      pipe.write([i2]);
      break;
    } else {
      pipe.write([i2 | 128]);
    }
  }
  return new buffer$1.Buffer(pipe.buffer);
}
function lebDecode(pipe) {
  let weight = BigInt(1);
  let value2 = BigInt(0);
  let byte;
  do {
    byte = safeRead$1(pipe, 1)[0];
    value2 += BigInt(byte & 127).valueOf() * weight;
    weight *= BigInt(128);
  } while (byte >= 128);
  return value2;
}
function slebEncode$1(value2) {
  if (typeof value2 === "number") {
    value2 = BigInt(value2);
  }
  const isNeg = value2 < BigInt(0);
  if (isNeg) {
    value2 = -value2 - BigInt(1);
  }
  const pipe = new bufferPipe();
  while (true) {
    const i2 = getLowerBytes(value2);
    value2 /= BigInt(128);
    if (isNeg && value2 === BigInt(0) && (i2 & 64) !== 0 || !isNeg && value2 === BigInt(0) && (i2 & 64) === 0) {
      pipe.write([i2]);
      break;
    } else {
      pipe.write([i2 | 128]);
    }
  }
  function getLowerBytes(num) {
    const bytes2 = num % BigInt(128);
    if (isNeg) {
      return Number(BigInt(128) - bytes2 - BigInt(1));
    } else {
      return Number(bytes2);
    }
  }
  return new buffer$1.Buffer(pipe.buffer);
}
function slebDecode(pipe) {
  const pipeView = new Uint8Array(pipe.buffer);
  let len2 = 0;
  for (; len2 < pipeView.byteLength; len2++) {
    if (pipeView[len2] < 128) {
      if ((pipeView[len2] & 64) === 0) {
        return lebDecode(pipe);
      }
      break;
    }
  }
  const bytes2 = new Uint8Array(safeRead$1(pipe, len2 + 1));
  let value2 = BigInt(0);
  for (let i2 = bytes2.byteLength - 1; i2 >= 0; i2--) {
    value2 = value2 * BigInt(128) + BigInt(128 - (bytes2[i2] & 127) - 1);
  }
  return -value2 - BigInt(1);
}
function writeUIntLE$1(value2, byteLength2) {
  if (BigInt(value2) < BigInt(0)) {
    throw new Error("Cannot write negative values.");
  }
  return writeIntLE$1(value2, byteLength2);
}
function writeIntLE$1(value2, byteLength2) {
  value2 = BigInt(value2);
  const pipe = new bufferPipe();
  let i2 = 0;
  let mul = BigInt(256);
  let sub = BigInt(0);
  let byte = Number(value2 % mul);
  pipe.write([byte]);
  while (++i2 < byteLength2) {
    if (value2 < 0 && sub === BigInt(0) && byte !== 0) {
      sub = BigInt(1);
    }
    byte = Number((value2 / mul - sub) % BigInt(256));
    pipe.write([byte]);
    mul *= BigInt(256);
  }
  return new buffer$1.Buffer(pipe.buffer);
}
function readUIntLE$1(pipe, byteLength2) {
  let val = BigInt(safeRead$1(pipe, 1)[0]);
  let mul = BigInt(1);
  let i2 = 0;
  while (++i2 < byteLength2) {
    mul *= BigInt(256);
    const byte = BigInt(safeRead$1(pipe, 1)[0]);
    val = val + mul * byte;
  }
  return val;
}
function readIntLE$1(pipe, byteLength2) {
  let val = readUIntLE$1(pipe, byteLength2);
  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength2 - 1) + BigInt(7));
  if (val >= mul) {
    val -= mul * BigInt(2);
  }
  return val;
}
function blobFromBuffer(b) {
  return b;
}
function blobFromUint8Array(arr) {
  return buffer$1.Buffer.from(arr);
}
function blobFromText(text) {
  return buffer$1.Buffer.from(text);
}
function blobFromHex(hex) {
  return buffer$1.Buffer.from(hex, "hex");
}
function blobToHex(blob) {
  return blob.toString("hex");
}
function blobToUint8Array(blob) {
  return new Uint8Array(blob.slice(0, blob.byteLength));
}
function makeNonce() {
  return lebEncode(BigInt(+Date.now()) * BigInt(1e5) + BigInt(Math.floor(Math.random() * 1e5)));
}
function idlHash(s) {
  const utf8encoder = new TextEncoder();
  const array2 = utf8encoder.encode(s);
  let h = 0;
  for (const c2 of array2) {
    h = (h * 223 + c2) % 2 ** 32;
  }
  return h;
}
function idlLabelToId(label) {
  if (/^_\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {
    const num = +label.slice(1, -1);
    if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {
      return num;
    }
  }
  return idlHash(label);
}
const magicNumber = "DIDL";
function zipWith(xs, ys, f) {
  return xs.map((x, i2) => f(x, ys[i2]));
}
class TypeTable {
  constructor() {
    this._typs = [];
    this._idx = /* @__PURE__ */ new Map();
  }
  has(obj) {
    return this._idx.has(obj.name);
  }
  add(type, buf) {
    const idx = this._typs.length;
    this._idx.set(type.name, idx);
    this._typs.push(buf);
  }
  merge(obj, knot) {
    const idx = this._idx.get(obj.name);
    const knotIdx = this._idx.get(knot);
    if (idx === void 0) {
      throw new Error("Missing type index for " + obj);
    }
    if (knotIdx === void 0) {
      throw new Error("Missing type index for " + knot);
    }
    this._typs[idx] = this._typs[knotIdx];
    this._typs.splice(knotIdx, 1);
    this._idx.delete(knot);
  }
  encode() {
    const len2 = lebEncode(this._typs.length);
    const buf = buffer$1.Buffer.concat(this._typs);
    return buffer$1.Buffer.concat([len2, buf]);
  }
  indexOf(typeName) {
    if (!this._idx.has(typeName)) {
      throw new Error("Missing type index for " + typeName);
    }
    return slebEncode$1(this._idx.get(typeName) || 0);
  }
}
class Visitor {
  visitType(t, data2) {
    throw new Error("Not implemented");
  }
  visitPrimitive(t, data2) {
    return this.visitType(t, data2);
  }
  visitEmpty(t, data2) {
    return this.visitPrimitive(t, data2);
  }
  visitBool(t, data2) {
    return this.visitPrimitive(t, data2);
  }
  visitNull(t, data2) {
    return this.visitPrimitive(t, data2);
  }
  visitReserved(t, data2) {
    return this.visitPrimitive(t, data2);
  }
  visitText(t, data2) {
    return this.visitPrimitive(t, data2);
  }
  visitNumber(t, data2) {
    return this.visitPrimitive(t, data2);
  }
  visitInt(t, data2) {
    return this.visitNumber(t, data2);
  }
  visitNat(t, data2) {
    return this.visitNumber(t, data2);
  }
  visitFloat(t, data2) {
    return this.visitPrimitive(t, data2);
  }
  visitFixedInt(t, data2) {
    return this.visitNumber(t, data2);
  }
  visitFixedNat(t, data2) {
    return this.visitNumber(t, data2);
  }
  visitPrincipal(t, data2) {
    return this.visitPrimitive(t, data2);
  }
  visitConstruct(t, data2) {
    return this.visitType(t, data2);
  }
  visitVec(t, ty, data2) {
    return this.visitConstruct(t, data2);
  }
  visitOpt(t, ty, data2) {
    return this.visitConstruct(t, data2);
  }
  visitRecord(t, fields, data2) {
    return this.visitConstruct(t, data2);
  }
  visitTuple(t, components, data2) {
    const fields = components.map((ty, i2) => [`_${i2}_`, ty]);
    return this.visitRecord(t, fields, data2);
  }
  visitVariant(t, fields, data2) {
    return this.visitConstruct(t, data2);
  }
  visitRec(t, ty, data2) {
    return this.visitConstruct(ty, data2);
  }
  visitFunc(t, data2) {
    return this.visitConstruct(t, data2);
  }
  visitService(t, data2) {
    return this.visitConstruct(t, data2);
  }
}
class Type$1 {
  display() {
    return this.name;
  }
  valueToString(x) {
    return toReadableString$1(x);
  }
  buildTypeTable(typeTable) {
    if (!typeTable.has(this)) {
      this._buildTypeTableImpl(typeTable);
    }
  }
}
class PrimitiveType$1 extends Type$1 {
  checkType(t) {
    if (this.name !== t.name) {
      throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
    }
    return t;
  }
  _buildTypeTableImpl(typeTable) {
    return;
  }
}
class ConstructType$1 extends Type$1 {
  checkType(t) {
    if (t instanceof RecClass$1) {
      const ty = t.getType();
      if (typeof ty === "undefined") {
        throw new Error("type mismatch with uninitialized type");
      }
      return ty;
    }
    throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
  }
  encodeType(typeTable) {
    return typeTable.indexOf(this.name);
  }
}
class EmptyClass extends PrimitiveType$1 {
  accept(v, d) {
    return v.visitEmpty(this, d);
  }
  covariant(x) {
    return false;
  }
  encodeValue() {
    throw new Error("Empty cannot appear as a function argument");
  }
  valueToString() {
    throw new Error("Empty cannot appear as a value");
  }
  encodeType() {
    return slebEncode$1(-17);
  }
  decodeValue() {
    throw new Error("Empty cannot appear as an output");
  }
  get name() {
    return "empty";
  }
}
class BoolClass extends PrimitiveType$1 {
  accept(v, d) {
    return v.visitBool(this, d);
  }
  covariant(x) {
    return typeof x === "boolean";
  }
  encodeValue(x) {
    const buf = buffer$1.Buffer.alloc(1);
    buf.writeInt8(x ? 1 : 0, 0);
    return buf;
  }
  encodeType() {
    return slebEncode$1(-2);
  }
  decodeValue(b, t) {
    this.checkType(t);
    const x = safeRead$1(b, 1).toString("hex");
    if (x === "00") {
      return false;
    } else if (x === "01") {
      return true;
    } else {
      throw new Error("Boolean value out of range");
    }
  }
  get name() {
    return "bool";
  }
}
class NullClass extends PrimitiveType$1 {
  accept(v, d) {
    return v.visitNull(this, d);
  }
  covariant(x) {
    return x === null;
  }
  encodeValue() {
    return buffer$1.Buffer.alloc(0);
  }
  encodeType() {
    return slebEncode$1(-1);
  }
  decodeValue(b, t) {
    this.checkType(t);
    return null;
  }
  get name() {
    return "null";
  }
}
class ReservedClass extends PrimitiveType$1 {
  accept(v, d) {
    return v.visitReserved(this, d);
  }
  covariant(x) {
    return true;
  }
  encodeValue() {
    return buffer$1.Buffer.alloc(0);
  }
  encodeType() {
    return slebEncode$1(-16);
  }
  decodeValue(b, t) {
    if (t.name !== this.name) {
      t.decodeValue(b, t);
    }
    return null;
  }
  get name() {
    return "reserved";
  }
}
function isValidUTF8(buf) {
  return buffer$1.Buffer.compare(new buffer$1.Buffer(buf.toString(), "utf8"), buf) === 0;
}
class TextClass extends PrimitiveType$1 {
  accept(v, d) {
    return v.visitText(this, d);
  }
  covariant(x) {
    return typeof x === "string";
  }
  encodeValue(x) {
    const buf = buffer$1.Buffer.from(x, "utf8");
    const len2 = lebEncode(buf.length);
    return buffer$1.Buffer.concat([len2, buf]);
  }
  encodeType() {
    return slebEncode$1(-15);
  }
  decodeValue(b, t) {
    this.checkType(t);
    const len2 = lebDecode(b);
    const buf = safeRead$1(b, Number(len2));
    if (!isValidUTF8(buf)) {
      throw new Error("Not valid UTF8 text");
    }
    return buf.toString("utf8");
  }
  get name() {
    return "text";
  }
  valueToString(x) {
    return '"' + x + '"';
  }
}
class IntClass extends PrimitiveType$1 {
  accept(v, d) {
    return v.visitInt(this, d);
  }
  covariant(x) {
    return typeof x === "bigint" || Number.isInteger(x);
  }
  encodeValue(x) {
    return slebEncode$1(x);
  }
  encodeType() {
    return slebEncode$1(-4);
  }
  decodeValue(b, t) {
    this.checkType(t);
    return slebDecode(b);
  }
  get name() {
    return "int";
  }
  valueToString(x) {
    return x.toString();
  }
}
class NatClass extends PrimitiveType$1 {
  accept(v, d) {
    return v.visitNat(this, d);
  }
  covariant(x) {
    return typeof x === "bigint" && x >= BigInt(0) || Number.isInteger(x) && x >= 0;
  }
  encodeValue(x) {
    return lebEncode(x);
  }
  encodeType() {
    return slebEncode$1(-3);
  }
  decodeValue(b, t) {
    this.checkType(t);
    return lebDecode(b);
  }
  get name() {
    return "nat";
  }
  valueToString(x) {
    return x.toString();
  }
}
class FloatClass$1 extends PrimitiveType$1 {
  constructor(_bits) {
    super();
    this._bits = _bits;
    if (_bits !== 32 && _bits !== 64) {
      throw new Error("not a valid float type");
    }
  }
  accept(v, d) {
    return v.visitFloat(this, d);
  }
  covariant(x) {
    return typeof x === "number" || x instanceof Number;
  }
  encodeValue(x) {
    const buf = buffer$1.Buffer.allocUnsafe(this._bits / 8);
    if (this._bits === 32) {
      buf.writeFloatLE(x, 0);
    } else {
      buf.writeDoubleLE(x, 0);
    }
    return buf;
  }
  encodeType() {
    const opcode = this._bits === 32 ? -13 : -14;
    return slebEncode$1(opcode);
  }
  decodeValue(b, t) {
    this.checkType(t);
    const x = safeRead$1(b, this._bits / 8);
    if (this._bits === 32) {
      return x.readFloatLE(0);
    } else {
      return x.readDoubleLE(0);
    }
  }
  get name() {
    return "float" + this._bits;
  }
  valueToString(x) {
    return x.toString();
  }
}
class FixedIntClass$1 extends PrimitiveType$1 {
  constructor(_bits) {
    super();
    this._bits = _bits;
  }
  accept(v, d) {
    return v.visitFixedInt(this, d);
  }
  covariant(x) {
    const min = BigInt(2) ** BigInt(this._bits - 1) * BigInt(-1);
    const max = BigInt(2) ** BigInt(this._bits - 1) - BigInt(1);
    if (typeof x === "bigint") {
      return x >= min && x <= max;
    } else if (Number.isInteger(x)) {
      const v = BigInt(x);
      return v >= min && v <= max;
    } else {
      return false;
    }
  }
  encodeValue(x) {
    return writeIntLE$1(x, this._bits / 8);
  }
  encodeType() {
    const offset = Math.log2(this._bits) - 3;
    return slebEncode$1(-9 - offset);
  }
  decodeValue(b, t) {
    this.checkType(t);
    const num = readIntLE$1(b, this._bits / 8);
    if (this._bits <= 32) {
      return Number(num);
    } else {
      return num;
    }
  }
  get name() {
    return `int${this._bits}`;
  }
  valueToString(x) {
    return x.toString();
  }
}
class FixedNatClass$1 extends PrimitiveType$1 {
  constructor(bits) {
    super();
    this.bits = bits;
  }
  accept(v, d) {
    return v.visitFixedNat(this, d);
  }
  covariant(x) {
    const max = BigInt(2) ** BigInt(this.bits);
    if (typeof x === "bigint" && x >= BigInt(0)) {
      return x < max;
    } else if (Number.isInteger(x) && x >= 0) {
      const v = BigInt(x);
      return v < max;
    } else {
      return false;
    }
  }
  encodeValue(x) {
    return writeUIntLE$1(x, this.bits / 8);
  }
  encodeType() {
    const offset = Math.log2(this.bits) - 3;
    return slebEncode$1(-5 - offset);
  }
  decodeValue(b, t) {
    this.checkType(t);
    const num = readUIntLE$1(b, this.bits / 8);
    if (this.bits <= 32) {
      return Number(num);
    } else {
      return num;
    }
  }
  get name() {
    return `nat${this.bits}`;
  }
  valueToString(x) {
    return x.toString();
  }
}
class VecClass extends ConstructType$1 {
  constructor(_type) {
    super();
    this._type = _type;
    this._blobOptimization = false;
    if (_type instanceof FixedNatClass$1 && _type.bits === 8) {
      this._blobOptimization = true;
    }
  }
  accept(v, d) {
    return v.visitVec(this, this._type, d);
  }
  covariant(x) {
    return Array.isArray(x) && x.every((v) => this._type.covariant(v));
  }
  encodeValue(x) {
    const len2 = lebEncode(x.length);
    if (this._blobOptimization) {
      return buffer$1.Buffer.concat([len2, buffer$1.Buffer.from(x)]);
    }
    return buffer$1.Buffer.concat([len2, ...x.map((d) => this._type.encodeValue(d))]);
  }
  _buildTypeTableImpl(typeTable) {
    this._type.buildTypeTable(typeTable);
    const opCode = slebEncode$1(-19);
    const buffer2 = this._type.encodeType(typeTable);
    typeTable.add(this, buffer$1.Buffer.concat([opCode, buffer2]));
  }
  decodeValue(b, t) {
    const vec = this.checkType(t);
    if (!(vec instanceof VecClass)) {
      throw new Error("Not a vector type");
    }
    const len2 = Number(lebDecode(b));
    if (this._blobOptimization) {
      return [...new Uint8Array(b.read(len2))];
    }
    const rets = [];
    for (let i2 = 0; i2 < len2; i2++) {
      rets.push(this._type.decodeValue(b, vec._type));
    }
    return rets;
  }
  get name() {
    return `vec ${this._type.name}`;
  }
  display() {
    return `vec ${this._type.display()}`;
  }
  valueToString(x) {
    const elements = x.map((e) => this._type.valueToString(e));
    return "vec {" + elements.join("; ") + "}";
  }
}
class OptClass extends ConstructType$1 {
  constructor(_type) {
    super();
    this._type = _type;
  }
  accept(v, d) {
    return v.visitOpt(this, this._type, d);
  }
  covariant(x) {
    return Array.isArray(x) && (x.length === 0 || x.length === 1 && this._type.covariant(x[0]));
  }
  encodeValue(x) {
    if (x.length === 0) {
      return buffer$1.Buffer.from([0]);
    } else {
      return buffer$1.Buffer.concat([buffer$1.Buffer.from([1]), this._type.encodeValue(x[0])]);
    }
  }
  _buildTypeTableImpl(typeTable) {
    this._type.buildTypeTable(typeTable);
    const opCode = slebEncode$1(-18);
    const buffer2 = this._type.encodeType(typeTable);
    typeTable.add(this, buffer$1.Buffer.concat([opCode, buffer2]));
  }
  decodeValue(b, t) {
    const opt = this.checkType(t);
    if (!(opt instanceof OptClass)) {
      throw new Error("Not an option type");
    }
    const len2 = safeRead$1(b, 1).toString("hex");
    if (len2 === "00") {
      return [];
    } else if (len2 === "01") {
      return [this._type.decodeValue(b, opt._type)];
    } else {
      throw new Error("Not an option value");
    }
  }
  get name() {
    return `opt ${this._type.name}`;
  }
  display() {
    return `opt ${this._type.display()}`;
  }
  valueToString(x) {
    if (x.length === 0) {
      return "null";
    } else {
      return `opt ${this._type.valueToString(x[0])}`;
    }
  }
}
class RecordClass extends ConstructType$1 {
  constructor(fields = {}) {
    super();
    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));
  }
  accept(v, d) {
    return v.visitRecord(this, this._fields, d);
  }
  tryAsTuple() {
    const res = [];
    for (let i2 = 0; i2 < this._fields.length; i2++) {
      const [key, type] = this._fields[i2];
      if (key !== `_${i2}_`) {
        return null;
      }
      res.push(type);
    }
    return res;
  }
  covariant(x) {
    return typeof x === "object" && this._fields.every(([k, t]) => {
      if (!x.hasOwnProperty(k)) {
        throw new Error(`Record is missing key "${k}".`);
      }
      return t.covariant(x[k]);
    });
  }
  encodeValue(x) {
    const values = this._fields.map(([key]) => x[key]);
    const bufs = zipWith(this._fields, values, ([, c2], d) => c2.encodeValue(d));
    return buffer$1.Buffer.concat(bufs);
  }
  _buildTypeTableImpl(T) {
    this._fields.forEach(([_, value2]) => value2.buildTypeTable(T));
    const opCode = slebEncode$1(-20);
    const len2 = lebEncode(this._fields.length);
    const fields = this._fields.map(([key, value2]) => buffer$1.Buffer.concat([lebEncode(idlLabelToId(key)), value2.encodeType(T)]));
    T.add(this, buffer$1.Buffer.concat([opCode, len2, buffer$1.Buffer.concat(fields)]));
  }
  decodeValue(b, t) {
    const record = this.checkType(t);
    if (!(record instanceof RecordClass)) {
      throw new Error("Not a record type");
    }
    const x = {};
    let idx = 0;
    for (const [hash2, type] of record._fields) {
      if (idx >= this._fields.length || idlLabelToId(this._fields[idx][0]) !== idlLabelToId(hash2)) {
        type.decodeValue(b, type);
        continue;
      }
      const [expectKey, expectType] = this._fields[idx];
      x[expectKey] = expectType.decodeValue(b, type);
      idx++;
    }
    if (idx < this._fields.length) {
      throw new Error("Cannot find field " + this._fields[idx][0]);
    }
    return x;
  }
  get name() {
    const fields = this._fields.map(([key, value2]) => key + ":" + value2.name);
    return `record {${fields.join("; ")}}`;
  }
  display() {
    const fields = this._fields.map(([key, value2]) => key + ":" + value2.display());
    return `record {${fields.join("; ")}}`;
  }
  valueToString(x) {
    const values = this._fields.map(([key]) => x[key]);
    const fields = zipWith(this._fields, values, ([k, c2], d) => k + "=" + c2.valueToString(d));
    return `record {${fields.join("; ")}}`;
  }
}
class TupleClass extends RecordClass {
  constructor(_components) {
    const x = {};
    _components.forEach((e, i2) => x["_" + i2 + "_"] = e);
    super(x);
    this._components = _components;
  }
  accept(v, d) {
    return v.visitTuple(this, this._components, d);
  }
  covariant(x) {
    return Array.isArray(x) && x.length >= this._fields.length && this._components.every((t, i2) => t.covariant(x[i2]));
  }
  encodeValue(x) {
    const bufs = zipWith(this._components, x, (c2, d) => c2.encodeValue(d));
    return buffer$1.Buffer.concat(bufs);
  }
  decodeValue(b, t) {
    const tuple = this.checkType(t);
    if (!(tuple instanceof TupleClass)) {
      throw new Error("not a tuple type");
    }
    if (tuple._components.length < this._components.length) {
      throw new Error("tuple mismatch");
    }
    const res = [];
    for (const [i2, wireType] of tuple._components.entries()) {
      if (i2 >= this._components.length) {
        wireType.decodeValue(b, wireType);
      } else {
        res.push(this._components[i2].decodeValue(b, wireType));
      }
    }
    return res;
  }
  display() {
    const fields = this._components.map((value2) => value2.display());
    return `record {${fields.join("; ")}}`;
  }
  valueToString(values) {
    const fields = zipWith(this._components, values, (c2, d) => c2.valueToString(d));
    return `record {${fields.join("; ")}}`;
  }
}
class VariantClass extends ConstructType$1 {
  constructor(fields = {}) {
    super();
    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));
  }
  accept(v, d) {
    return v.visitVariant(this, this._fields, d);
  }
  covariant(x) {
    return typeof x === "object" && Object.entries(x).length === 1 && this._fields.every(([k, v]) => {
      return !x.hasOwnProperty(k) || v.covariant(x[k]);
    });
  }
  encodeValue(x) {
    for (let i2 = 0; i2 < this._fields.length; i2++) {
      const [name, type] = this._fields[i2];
      if (x.hasOwnProperty(name)) {
        const idx = lebEncode(i2);
        const buf = type.encodeValue(x[name]);
        return buffer$1.Buffer.concat([idx, buf]);
      }
    }
    throw Error("Variant has no data: " + x);
  }
  _buildTypeTableImpl(typeTable) {
    this._fields.forEach(([, type]) => {
      type.buildTypeTable(typeTable);
    });
    const opCode = slebEncode$1(-21);
    const len2 = lebEncode(this._fields.length);
    const fields = this._fields.map(([key, value2]) => buffer$1.Buffer.concat([lebEncode(idlLabelToId(key)), value2.encodeType(typeTable)]));
    typeTable.add(this, buffer$1.Buffer.concat([opCode, len2, ...fields]));
  }
  decodeValue(b, t) {
    const variant = this.checkType(t);
    if (!(variant instanceof VariantClass)) {
      throw new Error("Not a variant type");
    }
    const idx = Number(lebDecode(b));
    if (idx >= variant._fields.length) {
      throw Error("Invalid variant index: " + idx);
    }
    const [wireHash, wireType] = variant._fields[idx];
    for (const [key, expectType] of this._fields) {
      if (idlLabelToId(wireHash) === idlLabelToId(key)) {
        const value2 = expectType.decodeValue(b, wireType);
        return { [key]: value2 };
      }
    }
    throw new Error("Cannot find field hash " + wireHash);
  }
  get name() {
    const fields = this._fields.map(([key, type]) => key + ":" + type.name);
    return `variant {${fields.join("; ")}}`;
  }
  display() {
    const fields = this._fields.map(([key, type]) => key + (type.name === "null" ? "" : `:${type.display()}`));
    return `variant {${fields.join("; ")}}`;
  }
  valueToString(x) {
    for (const [name, type] of this._fields) {
      if (x.hasOwnProperty(name)) {
        const value2 = type.valueToString(x[name]);
        if (value2 === "null") {
          return `variant {${name}}`;
        } else {
          return `variant {${name}=${value2}}`;
        }
      }
    }
    throw new Error("Variant has no data: " + x);
  }
}
class RecClass$1 extends ConstructType$1 {
  constructor() {
    super(...arguments);
    this._id = RecClass$1._counter++;
    this._type = void 0;
  }
  accept(v, d) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return v.visitRec(this, this._type, d);
  }
  fill(t) {
    this._type = t;
  }
  getType() {
    return this._type;
  }
  covariant(x) {
    return this._type ? this._type.covariant(x) : false;
  }
  encodeValue(x) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.encodeValue(x);
  }
  _buildTypeTableImpl(typeTable) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    typeTable.add(this, buffer$1.Buffer.alloc(0));
    this._type.buildTypeTable(typeTable);
    typeTable.merge(this, this._type.name);
  }
  decodeValue(b, t) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.decodeValue(b, t);
  }
  get name() {
    return `rec_${this._id}`;
  }
  display() {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return `\u03BC${this.name}.${this._type.name}`;
  }
  valueToString(x) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.valueToString(x);
  }
}
RecClass$1._counter = 0;
function decodePrincipalId(b) {
  const x = safeRead$1(b, 1).toString("hex");
  if (x !== "01") {
    throw new Error("Cannot decode principal");
  }
  const len2 = Number(lebDecode(b));
  const hex = safeRead$1(b, len2).toString("hex").toUpperCase();
  return Principal$2.fromHex(hex);
}
class PrincipalClass extends PrimitiveType$1 {
  accept(v, d) {
    return v.visitPrincipal(this, d);
  }
  covariant(x) {
    return x && x._isPrincipal;
  }
  encodeValue(x) {
    const hex = x.toHex();
    const buf = buffer$1.Buffer.from(hex, "hex");
    const len2 = lebEncode(buf.length);
    return buffer$1.Buffer.concat([buffer$1.Buffer.from([1]), len2, buf]);
  }
  encodeType() {
    return slebEncode$1(-24);
  }
  decodeValue(b, t) {
    this.checkType(t);
    return decodePrincipalId(b);
  }
  get name() {
    return "principal";
  }
  valueToString(x) {
    return `${this.name} "${x.toText()}"`;
  }
}
class FuncClass extends ConstructType$1 {
  constructor(argTypes, retTypes, annotations = []) {
    super();
    this.argTypes = argTypes;
    this.retTypes = retTypes;
    this.annotations = annotations;
  }
  static argsToString(types, v) {
    if (types.length !== v.length) {
      throw new Error("arity mismatch");
    }
    return "(" + types.map((t, i2) => t.valueToString(v[i2])).join(", ") + ")";
  }
  accept(v, d) {
    return v.visitFunc(this, d);
  }
  covariant(x) {
    return Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === "string";
  }
  encodeValue(x) {
    const hex = x[0].toHex();
    const buf = buffer$1.Buffer.from(hex, "hex");
    const len2 = lebEncode(buf.length);
    const canister = buffer$1.Buffer.concat([buffer$1.Buffer.from([1]), len2, buf]);
    const method2 = buffer$1.Buffer.from(x[1], "utf8");
    const methodLen = lebEncode(method2.length);
    return buffer$1.Buffer.concat([buffer$1.Buffer.from([1]), canister, methodLen, method2]);
  }
  _buildTypeTableImpl(T) {
    this.argTypes.forEach((arg) => arg.buildTypeTable(T));
    this.retTypes.forEach((arg) => arg.buildTypeTable(T));
    const opCode = slebEncode$1(-22);
    const argLen = lebEncode(this.argTypes.length);
    const args = buffer$1.Buffer.concat(this.argTypes.map((arg) => arg.encodeType(T)));
    const retLen = lebEncode(this.retTypes.length);
    const rets = buffer$1.Buffer.concat(this.retTypes.map((arg) => arg.encodeType(T)));
    const annLen = lebEncode(this.annotations.length);
    const anns = buffer$1.Buffer.concat(this.annotations.map((a) => this.encodeAnnotation(a)));
    T.add(this, buffer$1.Buffer.concat([opCode, argLen, args, retLen, rets, annLen, anns]));
  }
  decodeValue(b) {
    const x = safeRead$1(b, 1).toString("hex");
    if (x !== "01") {
      throw new Error("Cannot decode function reference");
    }
    const canister = decodePrincipalId(b);
    const mLen = Number(lebDecode(b));
    const buf = safeRead$1(b, mLen);
    if (!isValidUTF8(buf)) {
      throw new Error("Not valid UTF8 method name");
    }
    const method2 = buf.toString("utf8");
    return [canister, method2];
  }
  get name() {
    const args = this.argTypes.map((arg) => arg.name).join(", ");
    const rets = this.retTypes.map((arg) => arg.name).join(", ");
    const annon = " " + this.annotations.join(" ");
    return `(${args}) -> (${rets})${annon}`;
  }
  valueToString([principal, str]) {
    return `func "${principal.toText()}".${str}`;
  }
  display() {
    const args = this.argTypes.map((arg) => arg.display()).join(", ");
    const rets = this.retTypes.map((arg) => arg.display()).join(", ");
    const annon = " " + this.annotations.join(" ");
    return `(${args}) \u2192 (${rets})${annon}`;
  }
  encodeAnnotation(ann) {
    if (ann === "query") {
      return buffer$1.Buffer.from([1]);
    } else if (ann === "oneway") {
      return buffer$1.Buffer.from([2]);
    } else {
      throw new Error("Illeagal function annotation");
    }
  }
}
class ServiceClass extends ConstructType$1 {
  constructor(fields) {
    super();
    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));
  }
  accept(v, d) {
    return v.visitService(this, d);
  }
  covariant(x) {
    return x && x._isPrincipal;
  }
  encodeValue(x) {
    const hex = x.toHex();
    const buf = buffer$1.Buffer.from(hex, "hex");
    const len2 = lebEncode(buf.length);
    return buffer$1.Buffer.concat([buffer$1.Buffer.from([1]), len2, buf]);
  }
  _buildTypeTableImpl(T) {
    this._fields.forEach(([_, func]) => func.buildTypeTable(T));
    const opCode = slebEncode$1(-23);
    const len2 = lebEncode(this._fields.length);
    const meths = this._fields.map(([label, func]) => {
      const labelBuf = buffer$1.Buffer.from(label, "utf8");
      const labelLen = lebEncode(labelBuf.length);
      return buffer$1.Buffer.concat([labelLen, labelBuf, func.encodeType(T)]);
    });
    T.add(this, buffer$1.Buffer.concat([opCode, len2, buffer$1.Buffer.concat(meths)]));
  }
  decodeValue(b) {
    return decodePrincipalId(b);
  }
  get name() {
    const fields = this._fields.map(([key, value2]) => key + ":" + value2.name);
    return `service {${fields.join("; ")}}`;
  }
  valueToString(x) {
    return `service "${x.toText()}"`;
  }
}
function toReadableString$1(x) {
  return JSON.stringify(x, (_key, value2) => typeof value2 === "bigint" ? `BigInt(${value2})` : value2);
}
function encode$2(argTypes, args) {
  if (args.length < argTypes.length) {
    throw Error("Wrong number of message arguments");
  }
  const typeTable = new TypeTable();
  argTypes.forEach((t) => t.buildTypeTable(typeTable));
  const magic = buffer$1.Buffer.from(magicNumber, "utf8");
  const table = typeTable.encode();
  const len2 = lebEncode(args.length);
  const typs = buffer$1.Buffer.concat(argTypes.map((t) => t.encodeType(typeTable)));
  const vals = buffer$1.Buffer.concat(zipWith(argTypes, args, (t, x) => {
    if (!t.covariant(x)) {
      throw new Error(`Invalid ${t.display()} argument: ${toReadableString$1(x)}`);
    }
    return t.encodeValue(x);
  }));
  return blobFromBuffer(buffer$1.Buffer.concat([magic, table, len2, typs, vals]));
}
function decode$3(retTypes, bytes2) {
  const b = new bufferPipe(bytes2);
  if (bytes2.byteLength < magicNumber.length) {
    throw new Error("Message length smaller than magic number");
  }
  const magic = safeRead$1(b, magicNumber.length).toString();
  if (magic !== magicNumber) {
    throw new Error("Wrong magic number: " + magic);
  }
  function readTypeTable(pipe) {
    const typeTable = [];
    const len2 = Number(lebDecode(pipe));
    for (let i2 = 0; i2 < len2; i2++) {
      const ty = Number(slebDecode(pipe));
      switch (ty) {
        case -18:
        case -19: {
          const t = Number(slebDecode(pipe));
          typeTable.push([ty, t]);
          break;
        }
        case -20:
        case -21: {
          const fields = [];
          let objectLength = Number(lebDecode(pipe));
          let prevHash;
          while (objectLength--) {
            const hash2 = Number(lebDecode(pipe));
            if (hash2 >= Math.pow(2, 32)) {
              throw new Error("field id out of 32-bit range");
            }
            if (typeof prevHash === "number" && prevHash >= hash2) {
              throw new Error("field id collision or not sorted");
            }
            prevHash = hash2;
            const t = Number(slebDecode(pipe));
            fields.push([hash2, t]);
          }
          typeTable.push([ty, fields]);
          break;
        }
        case -22: {
          for (let k = 0; k < 2; k++) {
            let funcLength = Number(lebDecode(pipe));
            while (funcLength--) {
              slebDecode(pipe);
            }
          }
          const annLen = Number(lebDecode(pipe));
          safeRead$1(pipe, annLen);
          typeTable.push([ty, void 0]);
          break;
        }
        case -23: {
          let servLength = Number(lebDecode(pipe));
          while (servLength--) {
            const l = Number(lebDecode(pipe));
            safeRead$1(pipe, l);
            slebDecode(pipe);
          }
          typeTable.push([ty, void 0]);
          break;
        }
        default:
          throw new Error("Illegal op_code: " + ty);
      }
    }
    const rawList = [];
    const length = Number(lebDecode(pipe));
    for (let i2 = 0; i2 < length; i2++) {
      rawList.push(Number(slebDecode(pipe)));
    }
    return [typeTable, rawList];
  }
  const [rawTable, rawTypes] = readTypeTable(b);
  if (rawTypes.length < retTypes.length) {
    throw new Error("Wrong number of return values");
  }
  const table = rawTable.map((_) => Rec());
  function getType(t) {
    if (t < -24) {
      throw new Error("future value not supported");
    }
    if (t < 0) {
      switch (t) {
        case -1:
          return Null;
        case -2:
          return Bool;
        case -3:
          return Nat;
        case -4:
          return Int;
        case -5:
          return Nat8;
        case -6:
          return Nat16;
        case -7:
          return Nat32;
        case -8:
          return Nat64;
        case -9:
          return Int8;
        case -10:
          return Int16;
        case -11:
          return Int32;
        case -12:
          return Int64;
        case -13:
          return Float32;
        case -14:
          return Float64;
        case -15:
          return Text;
        case -16:
          return Reserved;
        case -17:
          return Empty;
        case -24:
          return Principal$1;
        default:
          throw new Error("Illegal op_code: " + t);
      }
    }
    if (t >= rawTable.length) {
      throw new Error("type index out of range");
    }
    return table[t];
  }
  function buildType(entry) {
    switch (entry[0]) {
      case -19: {
        const ty = getType(entry[1]);
        return Vec(ty);
      }
      case -18: {
        const ty = getType(entry[1]);
        return Opt(ty);
      }
      case -20: {
        const fields = {};
        for (const [hash2, ty] of entry[1]) {
          const name = `_${hash2}_`;
          fields[name] = getType(ty);
        }
        const record = Record(fields);
        const tuple = record.tryAsTuple();
        if (Array.isArray(tuple)) {
          return Tuple(...tuple);
        } else {
          return record;
        }
      }
      case -21: {
        const fields = {};
        for (const [hash2, ty] of entry[1]) {
          const name = `_${hash2}_`;
          fields[name] = getType(ty);
        }
        return Variant(fields);
      }
      case -22: {
        return Func([], [], []);
      }
      case -23: {
        return Service({});
      }
      default:
        throw new Error("Illegal op_code: " + entry[0]);
    }
  }
  rawTable.forEach((entry, i2) => {
    const t = buildType(entry);
    table[i2].fill(t);
  });
  const types = rawTypes.map((t) => getType(t));
  const output = retTypes.map((t, i2) => {
    return t.decodeValue(b, types[i2]);
  });
  for (let ind = retTypes.length; ind < types.length; ind++) {
    types[ind].decodeValue(b, types[ind]);
  }
  if (b.buffer.length > 0) {
    throw new Error("decode: Left-over bytes");
  }
  return output;
}
const Empty = new EmptyClass();
const Reserved = new ReservedClass();
const Bool = new BoolClass();
const Null = new NullClass();
const Text = new TextClass();
const Int = new IntClass();
const Nat = new NatClass();
const Float32 = new FloatClass$1(32);
const Float64 = new FloatClass$1(64);
const Int8 = new FixedIntClass$1(8);
const Int16 = new FixedIntClass$1(16);
const Int32 = new FixedIntClass$1(32);
const Int64 = new FixedIntClass$1(64);
const Nat8 = new FixedNatClass$1(8);
const Nat16 = new FixedNatClass$1(16);
const Nat32 = new FixedNatClass$1(32);
const Nat64 = new FixedNatClass$1(64);
const Principal$1 = new PrincipalClass();
function Tuple(...types) {
  return new TupleClass(types);
}
function Vec(t) {
  return new VecClass(t);
}
function Opt(t) {
  return new OptClass(t);
}
function Record(t) {
  return new RecordClass(t);
}
function Variant(fields) {
  return new VariantClass(fields);
}
function Rec() {
  return new RecClass$1();
}
function Func(args, ret, annotations = []) {
  return new FuncClass(args, ret, annotations);
}
function Service(t) {
  return new ServiceClass(t);
}
const IDL = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Visitor,
  Type: Type$1,
  PrimitiveType: PrimitiveType$1,
  ConstructType: ConstructType$1,
  EmptyClass,
  BoolClass,
  NullClass,
  ReservedClass,
  TextClass,
  IntClass,
  NatClass,
  FloatClass: FloatClass$1,
  FixedIntClass: FixedIntClass$1,
  FixedNatClass: FixedNatClass$1,
  VecClass,
  OptClass,
  RecordClass,
  TupleClass,
  VariantClass,
  RecClass: RecClass$1,
  PrincipalClass,
  FuncClass,
  ServiceClass,
  encode: encode$2,
  decode: decode$3,
  Empty,
  Reserved,
  Bool,
  Null,
  Text,
  Int,
  Nat,
  Float32,
  Float64,
  Int8,
  Int16,
  Int32,
  Int64,
  Nat8,
  Nat16,
  Nat32,
  Nat64,
  Principal: Principal$1,
  Tuple,
  Vec,
  Opt,
  Record,
  Variant,
  Rec,
  Func,
  Service
}, Symbol.toStringTag, { value: "Module" }));
function toHex(requestId) {
  return blobToHex(requestId);
}
function hash(data2) {
  const hashed = sha256$1.exports.sha256.create().update(data2).arrayBuffer();
  return blobFromUint8Array(new Uint8Array(hashed));
}
function hashValue(value2) {
  if (value2 instanceof src$1.Tagged) {
    return hashValue(value2.value);
  } else if (typeof value2 === "string") {
    return hashString(value2);
  } else if (typeof value2 === "number") {
    return hash(lebEncode(value2));
  } else if (buffer$1.Buffer.isBuffer(value2)) {
    return hash(blobFromUint8Array(new Uint8Array(value2)));
  } else if (value2 instanceof Uint8Array || value2 instanceof ArrayBuffer) {
    return hash(blobFromUint8Array(new Uint8Array(value2)));
  } else if (Array.isArray(value2)) {
    const vals = value2.map(hashValue);
    return hash(buffer$1.Buffer.concat(vals));
  } else if (value2 instanceof Principal$2) {
    return hash(blobFromUint8Array(value2.toUint8Array()));
  } else if (typeof value2 === "object" && value2 !== null && typeof value2.toHash === "function") {
    return hashValue(value2.toHash());
  } else if (typeof value2 === "bigint") {
    return hash(lebEncode(value2));
  }
  throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value2}`), {
    value: value2
  });
}
const hashString = (value2) => {
  const encoder2 = new TextEncoder();
  const encoded = encoder2.encode(value2);
  return hash(buffer$1.Buffer.from(encoded));
};
function concat$1(bs) {
  return blobFromBuffer(buffer$1.Buffer.concat(bs));
}
function requestIdOf(request2) {
  const hashed = Object.entries(request2).filter(([, value2]) => value2 !== void 0).map(([key, value2]) => {
    const hashedKey = hashString(key);
    const hashedValue = hashValue(value2);
    return [hashedKey, hashedValue];
  });
  const traversed = hashed;
  const sorted = traversed.sort(([k1], [k2]) => {
    return buffer$1.Buffer.compare(buffer$1.Buffer.from(k1), buffer$1.Buffer.from(k2));
  });
  const concatenated = concat$1(sorted.map(concat$1));
  const requestId = hash(concatenated);
  return requestId;
}
var __rest = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s); i2 < p.length; i2++) {
      if (e.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i2]))
        t[p[i2]] = s[p[i2]];
    }
  return t;
};
const domainSeparator = buffer$1.Buffer.from(new TextEncoder().encode("\nic-request"));
class SignIdentity {
  getPrincipal() {
    if (!this._principal) {
      this._principal = Principal$2.selfAuthenticating(this.getPublicKey().toDer());
    }
    return this._principal;
  }
  async transformRequest(request2) {
    const { body } = request2, fields = __rest(request2, ["body"]);
    const requestId = await requestIdOf(body);
    return Object.assign(Object.assign({}, fields), { body: {
      content: body,
      sender_pubkey: this.getPublicKey().toDer(),
      sender_sig: await this.sign(blobFromBuffer(buffer$1.Buffer.concat([domainSeparator, requestId])))
    } });
  }
}
class AnonymousIdentity {
  getPrincipal() {
    return Principal$2.anonymous();
  }
  async transformRequest(request2) {
    return Object.assign(Object.assign({}, request2), { body: { content: request2.body } });
  }
}
function createIdentityDescriptor(identity) {
  const identityIndicator = "getPublicKey" in identity ? { type: "PublicKeyIdentity", publicKey: identity.getPublicKey().toDer().toString("hex") } : { type: "AnonymousIdentity" };
  return identityIndicator;
}
function isIdentityDescriptor(value2) {
  var _a, _b;
  switch ((_a = value2) === null || _a === void 0 ? void 0 : _a.type) {
    case "AnonymousIdentity":
      return true;
    case "PublicKeyIdentity":
      if (typeof ((_b = value2) === null || _b === void 0 ? void 0 : _b.publicKey) !== "string") {
        return false;
      }
      return true;
  }
  return false;
}
var src = {};
var serializer$2 = {};
var value = {};
Object.defineProperty(value, "__esModule", { value: true });
const MAX_U64_NUMBER = 9007199254740992;
function _concat(a, ...args) {
  const newBuffer = new Uint8Array(a.byteLength + args.reduce((acc, b) => acc + b.byteLength, 0));
  newBuffer.set(new Uint8Array(a), 0);
  let i2 = a.byteLength;
  for (const b of args) {
    newBuffer.set(new Uint8Array(b), i2);
    i2 += b.byteLength;
  }
  return newBuffer.buffer;
}
function _serializeValue(major, minor, value2) {
  value2 = value2.replace(/[^0-9a-fA-F]/g, "");
  const length = 2 ** (minor - 24);
  value2 = value2.slice(-length * 2).padStart(length * 2, "0");
  const bytes2 = [(major << 5) + minor].concat(value2.match(/../g).map((byte) => parseInt(byte, 16)));
  return new Uint8Array(bytes2).buffer;
}
function _serializeNumber(major, value2) {
  if (value2 < 24) {
    return new Uint8Array([(major << 5) + value2]).buffer;
  } else {
    const minor = value2 <= 255 ? 24 : value2 <= 65535 ? 25 : value2 <= 4294967295 ? 26 : 27;
    return _serializeValue(major, minor, value2.toString(16));
  }
}
function _serializeString(str) {
  const utf8 = [];
  for (let i2 = 0; i2 < str.length; i2++) {
    let charcode = str.charCodeAt(i2);
    if (charcode < 128) {
      utf8.push(charcode);
    } else if (charcode < 2048) {
      utf8.push(192 | charcode >> 6, 128 | charcode & 63);
    } else if (charcode < 55296 || charcode >= 57344) {
      utf8.push(224 | charcode >> 12, 128 | charcode >> 6 & 63, 128 | charcode & 63);
    } else {
      i2++;
      charcode = (charcode & 1023) << 10 | str.charCodeAt(i2) & 1023;
      utf8.push(240 | charcode >> 18, 128 | charcode >> 12 & 63, 128 | charcode >> 6 & 63, 128 | charcode & 63);
    }
  }
  return _concat(new Uint8Array(_serializeNumber(3, str.length)), new Uint8Array(utf8));
}
function tagged(tag, value2) {
  if (tag == 14277111) {
    return _concat(new Uint8Array([217, 217, 247]), value2);
  }
  if (tag < 24) {
    return _concat(new Uint8Array([(6 << 5) + tag]), value2);
  } else {
    const minor = tag <= 255 ? 24 : tag <= 65535 ? 25 : tag <= 4294967295 ? 26 : 27;
    const length = 2 ** (minor - 24);
    const value3 = tag.toString(16).slice(-length * 2).padStart(length * 2, "0");
    const bytes2 = [(6 << 5) + minor].concat(value3.match(/../g).map((byte) => parseInt(byte, 16)));
    return new Uint8Array(bytes2).buffer;
  }
}
value.tagged = tagged;
function raw(bytes2) {
  return new Uint8Array(bytes2).buffer;
}
value.raw = raw;
function uSmall(n) {
  if (isNaN(n)) {
    throw new RangeError("Invalid number.");
  }
  n = Math.min(Math.max(0, n), 23);
  const bytes2 = [(0 << 5) + n];
  return new Uint8Array(bytes2).buffer;
}
value.uSmall = uSmall;
function u8(u82, radix) {
  u82 = parseInt("" + u82, radix);
  if (isNaN(u82)) {
    throw new RangeError("Invalid number.");
  }
  u82 = Math.min(Math.max(0, u82), 255);
  u82 = u82.toString(16);
  return _serializeValue(0, 24, u82);
}
value.u8 = u8;
function u16(u162, radix) {
  u162 = parseInt("" + u162, radix);
  if (isNaN(u162)) {
    throw new RangeError("Invalid number.");
  }
  u162 = Math.min(Math.max(0, u162), 65535);
  u162 = u162.toString(16);
  return _serializeValue(0, 25, u162);
}
value.u16 = u16;
function u32(u322, radix) {
  u322 = parseInt("" + u322, radix);
  if (isNaN(u322)) {
    throw new RangeError("Invalid number.");
  }
  u322 = Math.min(Math.max(0, u322), 4294967295);
  u322 = u322.toString(16);
  return _serializeValue(0, 26, u322);
}
value.u32 = u32;
function u64(u642, radix) {
  if (typeof u642 == "string" && radix == 16) {
    if (u642.match(/[^0-9a-fA-F]/)) {
      throw new RangeError("Invalid number.");
    }
    return _serializeValue(0, 27, u642);
  }
  u642 = parseInt("" + u642, radix);
  if (isNaN(u642)) {
    throw new RangeError("Invalid number.");
  }
  u642 = Math.min(Math.max(0, u642), MAX_U64_NUMBER);
  u642 = u642.toString(16);
  return _serializeValue(0, 27, u642);
}
value.u64 = u64;
function iSmall(n) {
  if (isNaN(n)) {
    throw new RangeError("Invalid number.");
  }
  if (n === 0) {
    return uSmall(0);
  }
  n = Math.min(Math.max(0, -n), 24) - 1;
  const bytes2 = [(1 << 5) + n];
  return new Uint8Array(bytes2).buffer;
}
value.iSmall = iSmall;
function i8(i82, radix) {
  i82 = parseInt("" + i82, radix);
  if (isNaN(i82)) {
    throw new RangeError("Invalid number.");
  }
  i82 = Math.min(Math.max(0, -i82 - 1), 255);
  i82 = i82.toString(16);
  return _serializeValue(1, 24, i82);
}
value.i8 = i8;
function i16(i162, radix) {
  i162 = parseInt("" + i162, radix);
  if (isNaN(i162)) {
    throw new RangeError("Invalid number.");
  }
  i162 = Math.min(Math.max(0, -i162 - 1), 65535);
  i162 = i162.toString(16);
  return _serializeValue(1, 25, i162);
}
value.i16 = i16;
function i32(i322, radix) {
  i322 = parseInt("" + i322, radix);
  if (isNaN(i322)) {
    throw new RangeError("Invalid number.");
  }
  i322 = Math.min(Math.max(0, -i322 - 1), 4294967295);
  i322 = i322.toString(16);
  return _serializeValue(1, 26, i322);
}
value.i32 = i32;
function i64(i642, radix) {
  if (typeof i642 == "string" && radix == 16) {
    if (i642.startsWith("-")) {
      i642 = i642.slice(1);
    } else {
      i642 = "0";
    }
    if (i642.match(/[^0-9a-fA-F]/) || i642.length > 16) {
      throw new RangeError("Invalid number.");
    }
    let done = false;
    let newI64 = i642.split("").reduceRight((acc, x) => {
      if (done) {
        return x + acc;
      }
      let n = parseInt(x, 16) - 1;
      if (n >= 0) {
        done = true;
        return n.toString(16) + acc;
      } else {
        return "f" + acc;
      }
    }, "");
    if (!done) {
      return u64(0);
    }
    return _serializeValue(1, 27, newI64);
  }
  i642 = parseInt("" + i642, radix);
  if (isNaN(i642)) {
    throw new RangeError("Invalid number.");
  }
  i642 = Math.min(Math.max(0, -i642 - 1), 9007199254740992);
  i642 = i642.toString(16);
  return _serializeValue(1, 27, i642);
}
value.i64 = i64;
function number$1(n) {
  if (n >= 0) {
    if (n < 24) {
      return uSmall(n);
    } else if (n <= 255) {
      return u8(n);
    } else if (n <= 65535) {
      return u16(n);
    } else if (n <= 4294967295) {
      return u32(n);
    } else {
      return u64(n);
    }
  } else {
    if (n >= -24) {
      return iSmall(n);
    } else if (n >= -255) {
      return i8(n);
    } else if (n >= -65535) {
      return i16(n);
    } else if (n >= -4294967295) {
      return i32(n);
    } else {
      return i64(n);
    }
  }
}
value.number = number$1;
function bytes(bytes2) {
  return _concat(_serializeNumber(2, bytes2.byteLength), bytes2);
}
value.bytes = bytes;
function string(str) {
  return _serializeString(str);
}
value.string = string;
function array(items) {
  return _concat(_serializeNumber(4, items.length), ...items);
}
value.array = array;
function map(items, stable = false) {
  if (!(items instanceof Map)) {
    items = new Map(Object.entries(items));
  }
  let entries = Array.from(items.entries());
  if (stable) {
    entries = entries.sort(([keyA], [keyB]) => keyA.localeCompare(keyB));
  }
  return _concat(_serializeNumber(5, items.size), ...entries.map(([k, v]) => _concat(_serializeString(k), v)));
}
value.map = map;
function singleFloat(f) {
  const single = new Float32Array([f]);
  return _concat(new Uint8Array([(7 << 5) + 26]), new Uint8Array(single.buffer));
}
value.singleFloat = singleFloat;
function doubleFloat(f) {
  const single = new Float64Array([f]);
  return _concat(new Uint8Array([(7 << 5) + 27]), new Uint8Array(single.buffer));
}
value.doubleFloat = doubleFloat;
function bool(v) {
  return v ? true_() : false_();
}
value.bool = bool;
function true_() {
  return raw(new Uint8Array([(7 << 5) + 21]));
}
value.true_ = true_;
function false_() {
  return raw(new Uint8Array([(7 << 5) + 20]));
}
value.false_ = false_;
function null_() {
  return raw(new Uint8Array([(7 << 5) + 22]));
}
value.null_ = null_;
function undefined_() {
  return raw(new Uint8Array([(7 << 5) + 23]));
}
value.undefined_ = undefined_;
var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};
Object.defineProperty(serializer$2, "__esModule", { value: true });
const cbor$1 = __importStar(value);
const BufferClasses = [
  ArrayBuffer,
  Uint8Array,
  Uint16Array,
  Uint32Array,
  Int8Array,
  Int16Array,
  Int32Array,
  Float32Array,
  Float64Array
];
class JsonDefaultCborEncoder {
  constructor(_serializer, _stable = false) {
    this._serializer = _serializer;
    this._stable = _stable;
    this.name = "jsonDefault";
    this.priority = -100;
  }
  match(value2) {
    return ["undefined", "boolean", "number", "string", "object"].indexOf(typeof value2) != -1;
  }
  encode(value2) {
    switch (typeof value2) {
      case "undefined":
        return cbor$1.undefined_();
      case "boolean":
        return cbor$1.bool(value2);
      case "number":
        if (Math.floor(value2) === value2) {
          return cbor$1.number(value2);
        } else {
          return cbor$1.doubleFloat(value2);
        }
      case "string":
        return cbor$1.string(value2);
      case "object":
        if (value2 === null) {
          return cbor$1.null_();
        } else if (Array.isArray(value2)) {
          return cbor$1.array(value2.map((x) => this._serializer.serializeValue(x)));
        } else if (BufferClasses.find((x) => value2 instanceof x)) {
          return cbor$1.bytes(value2.buffer);
        } else if (Object.getOwnPropertyNames(value2).indexOf("toJSON") !== -1) {
          return this.encode(value2.toJSON());
        } else if (value2 instanceof Map) {
          const m2 = /* @__PURE__ */ new Map();
          for (const [key, item] of value2.entries()) {
            m2.set(key, this._serializer.serializeValue(item));
          }
          return cbor$1.map(m2, this._stable);
        } else {
          const m2 = /* @__PURE__ */ new Map();
          for (const [key, item] of Object.entries(value2)) {
            m2.set(key, this._serializer.serializeValue(item));
          }
          return cbor$1.map(m2, this._stable);
        }
      default:
        throw new Error("Invalid value.");
    }
  }
}
serializer$2.JsonDefaultCborEncoder = JsonDefaultCborEncoder;
class ToCborEncoder {
  constructor() {
    this.name = "cborEncoder";
    this.priority = -90;
  }
  match(value2) {
    return typeof value2 == "object" && typeof value2["toCBOR"] == "function";
  }
  encode(value2) {
    return value2.toCBOR();
  }
}
serializer$2.ToCborEncoder = ToCborEncoder;
class CborSerializer {
  constructor() {
    this._encoders = /* @__PURE__ */ new Set();
  }
  static withDefaultEncoders(stable = false) {
    const s = new this();
    s.addEncoder(new JsonDefaultCborEncoder(s, stable));
    s.addEncoder(new ToCborEncoder());
    return s;
  }
  removeEncoder(name) {
    for (const encoder2 of this._encoders.values()) {
      if (encoder2.name == name) {
        this._encoders.delete(encoder2);
      }
    }
  }
  addEncoder(encoder2) {
    this._encoders.add(encoder2);
  }
  getEncoderFor(value2) {
    let chosenEncoder = null;
    for (const encoder2 of this._encoders) {
      if (!chosenEncoder || encoder2.priority > chosenEncoder.priority) {
        if (encoder2.match(value2)) {
          chosenEncoder = encoder2;
        }
      }
    }
    if (chosenEncoder === null) {
      throw new Error("Could not find an encoder for value.");
    }
    return chosenEncoder;
  }
  serializeValue(value2) {
    return this.getEncoderFor(value2).encode(value2);
  }
  serialize(value2) {
    return this.serializeValue(value2);
  }
}
serializer$2.CborSerializer = CborSerializer;
class SelfDescribeCborSerializer extends CborSerializer {
  serialize(value2) {
    return cbor$1.raw(new Uint8Array([
      ...new Uint8Array([217, 217, 247]),
      ...new Uint8Array(super.serializeValue(value2))
    ]));
  }
}
serializer$2.SelfDescribeCborSerializer = SelfDescribeCborSerializer;
(function(exports2) {
  function __export(m2) {
    for (var p in m2)
      if (!exports2.hasOwnProperty(p))
        exports2[p] = m2[p];
  }
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k))
          result[k] = mod[k];
    }
    result["default"] = mod;
    return result;
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  __export(serializer$2);
  const value$1 = __importStar2(value);
  exports2.value = value$1;
})(src);
class PrincipalEncoder$1 {
  get name() {
    return "Principal";
  }
  get priority() {
    return 0;
  }
  match(value2) {
    return value2 && value2._isPrincipal === true;
  }
  encode(v) {
    return src.value.bytes(v.toUint8Array().buffer);
  }
}
class BufferEncoder$1 {
  get name() {
    return "Buffer";
  }
  get priority() {
    return 1;
  }
  match(value2) {
    return buffer$1.Buffer.isBuffer(value2);
  }
  encode(v) {
    return src.value.bytes(new Uint8Array(v));
  }
}
class BigIntEncoder$1 {
  get name() {
    return "BigInt";
  }
  get priority() {
    return 1;
  }
  match(value2) {
    return typeof value2 === `bigint`;
  }
  encode(v) {
    if (v > BigInt(0)) {
      return src.value.tagged(2, src.value.bytes(blobFromHex(v.toString(16))));
    } else {
      return src.value.tagged(3, src.value.bytes(blobFromHex((BigInt("-1") * v).toString(16))));
    }
  }
}
const serializer$1 = src.SelfDescribeCborSerializer.withDefaultEncoders(true);
serializer$1.addEncoder(new PrincipalEncoder$1());
serializer$1.addEncoder(new BufferEncoder$1());
serializer$1.addEncoder(new BigIntEncoder$1());
var CborTag$1;
(function(CborTag2) {
  CborTag2[CborTag2["Uint64LittleEndian"] = 71] = "Uint64LittleEndian";
  CborTag2[CborTag2["Semantic"] = 55799] = "Semantic";
})(CborTag$1 || (CborTag$1 = {}));
const encode$1 = (value2) => {
  return blobFromBuffer(buffer$1.Buffer.from(serializer$1.serialize(value2)));
};
function decodePositiveBigInt(buf) {
  const len2 = buf.byteLength;
  let res = BigInt(0);
  for (let i2 = 0; i2 < len2; i2++) {
    res = res * BigInt(256) + BigInt(buf[i2]);
  }
  return res;
}
function decode$2(input) {
  const decoder2 = new src$1.Decoder({
    size: input.byteLength,
    tags: {
      2: (val) => decodePositiveBigInt(val),
      3: (val) => -decodePositiveBigInt(val),
      [CborTag$1.Semantic]: (value2) => value2
    }
  });
  const result = decoder2.decodeFirst(input);
  return result;
}
const cbor = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  get CborTag() {
    return CborTag$1;
  },
  encode: encode$1,
  decode: decode$2
}, Symbol.toStringTag, { value: "Module" }));
const NANOSECONDS_PER_MILLISECONDS = BigInt(1e6);
const REPLICA_PERMITTED_DRIFT_MILLISECONDS = BigInt(60 * 1e3);
class Expiry {
  constructor(deltaInMSec) {
    this._value = (BigInt(Date.now()) + BigInt(deltaInMSec) - REPLICA_PERMITTED_DRIFT_MILLISECONDS) * NANOSECONDS_PER_MILLISECONDS;
  }
  toCBOR() {
    return src.value.u64(this._value.toString(16), 16);
  }
  toHash() {
    return lebEncode(this._value);
  }
}
function makeNonceTransform(nonceFn = makeNonce) {
  return async (request2) => {
    if (request2.endpoint === "call") {
      request2.body.nonce = nonceFn();
    }
  };
}
function makeExpiryTransform(delayInMilliseconds) {
  return async (request2) => {
    request2.body.ingress_expiry = new Expiry(delayInMilliseconds);
  };
}
var SubmitRequestType$1;
(function(SubmitRequestType2) {
  SubmitRequestType2["Call"] = "call";
})(SubmitRequestType$1 || (SubmitRequestType$1 = {}));
var RequestStatusResponseStatus$1;
(function(RequestStatusResponseStatus2) {
  RequestStatusResponseStatus2["Received"] = "received";
  RequestStatusResponseStatus2["Processing"] = "processing";
  RequestStatusResponseStatus2["Replied"] = "replied";
  RequestStatusResponseStatus2["Rejected"] = "rejected";
  RequestStatusResponseStatus2["Unknown"] = "unknown";
  RequestStatusResponseStatus2["Done"] = "done";
})(RequestStatusResponseStatus$1 || (RequestStatusResponseStatus$1 = {}));
const DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1e3;
const IC_ROOT_KEY = "308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d9685f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484b01291091c5f87b98883463f98091a0baaae";
function getDefaultFetch() {
  const result = typeof window === "undefined" ? typeof global === "undefined" ? typeof self === "undefined" ? void 0 : self.fetch.bind(self) : global.fetch.bind(global) : window.fetch.bind(window);
  if (!result) {
    throw new Error("Could not find default `fetch` implementation.");
  }
  return result;
}
class HttpAgent {
  constructor(options = {}) {
    this._pipeline = [];
    this._rootKeyFetched = false;
    this.rootKey = blobFromHex(IC_ROOT_KEY);
    if (options.source) {
      if (!(options.source instanceof HttpAgent)) {
        throw new Error("An Agent's source can only be another HttpAgent");
      }
      this._pipeline = [...options.source._pipeline];
      this._identity = options.source._identity;
      this._fetch = options.source._fetch;
      this._host = options.source._host;
      this._credentials = options.source._credentials;
    } else {
      this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);
    }
    if (options.host !== void 0) {
      if (!options.host.match(/^[a-z]+:/) && typeof window !== "undefined") {
        this._host = new URL(window.location.protocol + "//" + options.host);
      } else {
        this._host = new URL(options.host);
      }
    } else if (options.source !== void 0) {
      this._host = options.source._host;
    } else {
      const location = typeof window !== "undefined" ? window.location : void 0;
      if (!location) {
        throw new Error("Must specify a host to connect to.");
      }
      this._host = new URL(location + "");
    }
    if (options.credentials) {
      const { name, password } = options.credentials;
      this._credentials = `${name}${password ? ":" + password : ""}`;
    }
    this._identity = Promise.resolve(options.identity || new AnonymousIdentity());
  }
  addTransform(fn, priority = fn.priority || 0) {
    const i2 = this._pipeline.findIndex((x) => (x.priority || 0) < priority);
    this._pipeline.splice(i2 >= 0 ? i2 : this._pipeline.length, 0, Object.assign(fn, { priority }));
  }
  async getPrincipal() {
    return (await this._identity).getPrincipal();
  }
  async call(canisterId2, options, identity) {
    const id = await (identity !== void 0 ? await identity : await this._identity);
    const canister = Principal$2.from(canisterId2);
    const ecid = options.effectiveCanisterId ? Principal$2.from(options.effectiveCanisterId) : canister;
    const sender = id.getPrincipal() || Principal$2.anonymous();
    const submit = {
      request_type: SubmitRequestType$1.Call,
      canister_id: canister,
      method_name: options.methodName,
      arg: options.arg,
      sender,
      ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)
    };
    let transformedRequest = await this._transform({
      request: {
        body: null,
        method: "POST",
        headers: Object.assign({ "Content-Type": "application/cbor" }, this._credentials ? { Authorization: "Basic " + btoa(this._credentials) } : {})
      },
      endpoint: "call",
      body: submit
    });
    transformedRequest = await id.transformRequest(transformedRequest);
    const body = encode$1(transformedRequest.body);
    const [response, requestId] = await Promise.all([
      this._fetch("" + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), Object.assign(Object.assign({}, transformedRequest.request), { body })),
      requestIdOf(submit)
    ]);
    if (!response.ok) {
      throw new Error(`Server returned an error:
  Code: ${response.status} (${response.statusText})
  Body: ${await response.text()}
`);
    }
    return {
      requestId,
      response: {
        ok: response.ok,
        status: response.status,
        statusText: response.statusText
      }
    };
  }
  async query(canisterId2, fields, identity) {
    const id = await (identity !== void 0 ? await identity : await this._identity);
    const canister = typeof canisterId2 === "string" ? Principal$2.fromText(canisterId2) : canisterId2;
    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal$2.anonymous();
    const request2 = {
      request_type: "query",
      canister_id: canister,
      method_name: fields.methodName,
      arg: fields.arg,
      sender,
      ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)
    };
    let transformedRequest = await this._transform({
      request: {
        method: "POST",
        headers: Object.assign({ "Content-Type": "application/cbor" }, this._credentials ? { Authorization: "Basic " + btoa(this._credentials) } : {})
      },
      endpoint: "read",
      body: request2
    });
    transformedRequest = await id.transformRequest(transformedRequest);
    const body = encode$1(transformedRequest.body);
    const response = await this._fetch("" + new URL(`/api/v2/canister/${canister.toText()}/query`, this._host), Object.assign(Object.assign({}, transformedRequest.request), { body }));
    if (!response.ok) {
      throw new Error(`Server returned an error:
  Code: ${response.status} (${response.statusText})
  Body: ${await response.text()}
`);
    }
    return decode$2(buffer$1.Buffer.from(await response.arrayBuffer()));
  }
  async readState(canisterId2, fields, identity) {
    const canister = typeof canisterId2 === "string" ? Principal$2.fromText(canisterId2) : canisterId2;
    const id = await (identity !== void 0 ? await identity : await this._identity);
    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal$2.anonymous();
    let transformedRequest = await this._transform({
      request: {
        method: "POST",
        headers: Object.assign({ "Content-Type": "application/cbor" }, this._credentials ? { Authorization: "Basic " + btoa(this._credentials) } : {})
      },
      endpoint: "read_state",
      body: {
        request_type: "read_state",
        paths: fields.paths,
        sender,
        ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)
      }
    });
    transformedRequest = await id.transformRequest(transformedRequest);
    const body = encode$1(transformedRequest.body);
    const response = await this._fetch("" + new URL(`/api/v2/canister/${canister}/read_state`, this._host), Object.assign(Object.assign({}, transformedRequest.request), { body }));
    if (!response.ok) {
      throw new Error(`Server returned an error:
  Code: ${response.status} (${response.statusText})
  Body: ${await response.text()}
`);
    }
    return decode$2(buffer$1.Buffer.from(await response.arrayBuffer()));
  }
  async status() {
    const headers = this._credentials ? {
      Authorization: "Basic " + btoa(this._credentials)
    } : {};
    const response = await this._fetch("" + new URL(`/api/v2/status`, this._host), { headers });
    if (!response.ok) {
      throw new Error(`Server returned an error:
  Code: ${response.status} (${response.statusText})
  Body: ${await response.text()}
`);
    }
    const buffer2 = await response.arrayBuffer();
    return decode$2(new Uint8Array(buffer2));
  }
  async fetchRootKey() {
    if (!this._rootKeyFetched) {
      this.rootKey = blobFromUint8Array((await this.status()).root_key);
      this._rootKeyFetched = true;
    }
    return this.rootKey;
  }
  _transform(request2) {
    let p = Promise.resolve(request2);
    for (const fn of this._pipeline) {
      p = p.then((r) => fn(r).then((r2) => r2 || r));
    }
    return p;
  }
}
var ProxyMessageKind$1;
(function(ProxyMessageKind2) {
  ProxyMessageKind2["Error"] = "err";
  ProxyMessageKind2["GetPrincipal"] = "gp";
  ProxyMessageKind2["GetPrincipalResponse"] = "gpr";
  ProxyMessageKind2["Query"] = "q";
  ProxyMessageKind2["QueryResponse"] = "qr";
  ProxyMessageKind2["Call"] = "c";
  ProxyMessageKind2["CallResponse"] = "cr";
  ProxyMessageKind2["ReadState"] = "rs";
  ProxyMessageKind2["ReadStateResponse"] = "rsr";
  ProxyMessageKind2["Status"] = "s";
  ProxyMessageKind2["StatusResponse"] = "sr";
})(ProxyMessageKind$1 || (ProxyMessageKind$1 = {}));
class ProxyStubAgent {
  constructor(_frontend, _agent) {
    this._frontend = _frontend;
    this._agent = _agent;
  }
  onmessage(msg) {
    switch (msg.type) {
      case ProxyMessageKind$1.GetPrincipal:
        this._agent.getPrincipal().then((response) => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind$1.GetPrincipalResponse,
            response: response.toText()
          });
        });
        break;
      case ProxyMessageKind$1.Query:
        this._agent.query(...msg.args).then((response) => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind$1.QueryResponse,
            response
          });
        });
        break;
      case ProxyMessageKind$1.Call:
        this._agent.call(...msg.args).then((response) => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind$1.CallResponse,
            response
          });
        });
        break;
      case ProxyMessageKind$1.ReadState:
        this._agent.readState(...msg.args).then((response) => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind$1.ReadStateResponse,
            response
          });
        });
        break;
      case ProxyMessageKind$1.Status:
        this._agent.status().then((response) => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind$1.StatusResponse,
            response
          });
        });
        break;
      default:
        throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);
    }
  }
}
class ProxyAgent {
  constructor(_backend) {
    this._backend = _backend;
    this._nextId = 0;
    this._pendingCalls = /* @__PURE__ */ new Map();
    this.rootKey = null;
  }
  onmessage(msg) {
    const id = msg.id;
    const maybePromise = this._pendingCalls.get(id);
    if (!maybePromise) {
      throw new Error("A proxy get the same message twice...");
    }
    this._pendingCalls.delete(id);
    const [resolve, reject] = maybePromise;
    switch (msg.type) {
      case ProxyMessageKind$1.Error:
        return reject(msg.error);
      case ProxyMessageKind$1.GetPrincipalResponse:
      case ProxyMessageKind$1.CallResponse:
      case ProxyMessageKind$1.QueryResponse:
      case ProxyMessageKind$1.ReadStateResponse:
      case ProxyMessageKind$1.StatusResponse:
        return resolve(msg.response);
      default:
        throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);
    }
  }
  async getPrincipal() {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind$1.GetPrincipal
    }).then((principal) => {
      if (typeof principal !== "string") {
        throw new Error("Invalid principal received.");
      }
      return Principal$2.fromText(principal);
    });
  }
  readState(canisterId2, fields) {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind$1.ReadState,
      args: [canisterId2.toString(), fields]
    });
  }
  call(canisterId2, fields) {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind$1.Call,
      args: [canisterId2.toString(), fields]
    });
  }
  status() {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind$1.Status
    });
  }
  query(canisterId2, fields) {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind$1.Query,
      args: [canisterId2.toString(), fields]
    });
  }
  async _sendAndWait(msg) {
    return new Promise((resolve, reject) => {
      this._pendingCalls.set(msg.id, [resolve, reject]);
      this._backend(msg);
    });
  }
  async fetchRootKey() {
    const rootKey = (await this.status()).root_key;
    this.rootKey = rootKey;
    return rootKey;
  }
}
function getDefaultAgent() {
  const agent = typeof window === "undefined" ? typeof global === "undefined" ? typeof self === "undefined" ? void 0 : self.ic.agent : global.ic.agent : window.ic.agent;
  if (!agent) {
    throw new Error("No Agent could be found.");
  }
  return agent;
}
const managementCanisterIdl = ({ IDL: IDL2 }) => {
  const canister_id = IDL2.Principal;
  const wasm_module = IDL2.Vec(IDL2.Nat8);
  const CanisterSettings = IDL2.Record({
    compute_allocation: IDL2.Opt(IDL2.Nat),
    memory_allocation: IDL2.Opt(IDL2.Nat)
  });
  return IDL2.Service({
    provisional_create_canister_with_cycles: IDL2.Func([IDL2.Record({ amount: IDL2.Opt(IDL2.Nat), settings: IDL2.Opt(CanisterSettings) })], [IDL2.Record({ canister_id })], []),
    create_canister: IDL2.Func([], [IDL2.Record({ canister_id })], []),
    install_code: IDL2.Func([
      IDL2.Record({
        mode: IDL2.Variant({ install: IDL2.Null, reinstall: IDL2.Null, upgrade: IDL2.Null }),
        canister_id,
        wasm_module,
        arg: IDL2.Vec(IDL2.Nat8)
      })
    ], [], []),
    set_controller: IDL2.Func([IDL2.Record({ canister_id, new_controller: IDL2.Principal })], [], [])
  });
};
function getManagementCanister(config) {
  function transform(methodName, args, callConfig) {
    const first = args[0];
    let effectiveCanisterId = Principal$2.fromHex("");
    if (first && typeof first === "object" && first.canister_id) {
      effectiveCanisterId = Principal$2.from(first.canister_id);
    }
    return { effectiveCanisterId };
  }
  return Actor.createActor(managementCanisterIdl, Object.assign(Object.assign(Object.assign({}, config), { canisterId: Principal$2.fromHex("") }), {
    callTransform: transform,
    queryTransform: transform
  }));
}
class AgentError extends Error {
}
var decode$1;
(function() {
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var lookup2 = new Uint8Array(256);
  for (var i2 = 0; i2 < chars.length; i2++) {
    lookup2[chars.charCodeAt(i2)] = i2;
  }
  decode$1 = function(base64) {
    var bufferLength = base64.length * 0.75, len2 = base64.length, i3, p = 0, encoded1, encoded2, encoded3, encoded4;
    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }
    var arraybuffer = new ArrayBuffer(bufferLength), bytes2 = new Uint8Array(arraybuffer);
    for (i3 = 0; i3 < len2; i3 += 4) {
      encoded1 = lookup2[base64.charCodeAt(i3)];
      encoded2 = lookup2[base64.charCodeAt(i3 + 1)];
      encoded3 = lookup2[base64.charCodeAt(i3 + 2)];
      encoded4 = lookup2[base64.charCodeAt(i3 + 3)];
      bytes2[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes2[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes2[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
  };
})();
let wasm;
const wasmBytesBase64$1 = `
    AGFzbQEAAAABXg9gAn9/AGABfwBgA39/fwBgAn9/AX9gAX8Bf2ADf39/AX9gBH9/f38AYAV/f39/fwBgBn9/f39/fwF/
    YAAAYAZ/f39/f38AYAV/fn5+fgBgAAF/YAF/AX5gAn9/AX4DvAG6AQgEAAEAAAABAgEDAAAMAAACAQEKAQAHBgEAAQEA
    AgcCAgABAgAGAAgOBAEBBAAAAQALAQkAAwMAAQQBAAICAAIBAQEBAQEGAQACAQEEAAECAQEABQMBAQMEAwQCAwAAAAEA
    AAAAAAEFAQEAAAACAQIAAQMAAQAGBAACAgMEAAAAAAAGAAQABAQEBAAAAwIAAgACAAEBAAAAAQEBAAEAAAAAAgAAAQAB
    AQEBAQEBAQEBAQIBAAAAAQ0AAQQFAXABBQUFAwEAEQYJAX8BQYCAwAALBzYEBm1lbW9yeQIACGJsc19pbml0AA0KYmxz
    X3ZlcmlmeQAnEV9fd2JpbmRnZW5fbWFsbG9jAHwJDQEAQQELBLgBCrkBtwEKiO8CugGXVQIQfwV+IwBB4OEAayIGJABB
    KxABIgkEQCAJQfSgwABBKxBnIQwDQCAHQStHBEAgByAMaiIJQV9BfyAJLQAAIglBn39qQf8BcUEaSRsgCXE6AAAgB0EB
    aiEHDAELC0EAIQcgBkGoA2pBOBByGiAGQQE2AuADIAZB6ANqQTgQciEPIAZBoARqQQE2AgAgBkGoBmpBoKfAABBfIAZB
    qAZqECkhCSAGQbgVakGAAhByGiAGQdjbAGpBgAEQchogBkGbI2pBgQIQciENIAZBsAxqQcAAEHIaIAZByM8AakHAABBy
    GiAGQdDVAGpBwAAQchogBkEAOgCaIyAGIAlB/wBqIhBBA3ZBAWoiCkEBdCILOgCZIyAGIApBB3Y6AJgjIAtBf2pBBXYi
    CEEBaiERA0AgB0ErRwRAIAcgDWogByAMai0AADoAACAHQQFqIQcMAQsLIAZBKzoAxiMgBkEgaiAGQZgjakEvQdinwAAQ
    ggEgBkGwDGpBwAAgAiADIAYoAiAgBigCJBATQQAhDUEAIAtrIRIgBkGZI2ohE0EBIQNBACEJA0ACQCANIAMgEUtyRQRA
    IAMgCEshDSADIAMgCE1qIQJBACEHA0AgB0EgRgRAIAYgAzoAmCNBACEHA0AgB0ErRwRAIAcgE2ogByAMai0AADoAACAH
    QQFqIQcMAQsLIAZBKzoAxCMgBkEYaiAGQZgjakEtQeinwAAQggFBACEHIAZByM8AakEAIAZB0NUAakEgIAYoAhggBigC
    HBATIAkgEmohAyAJIAlBgAIgCUGAAksbIg5rIRQgBkG4FWogCWohFQJAA0AgB0EgRg0FIAcgFGpFDQEgByAVaiAGQcjP
    AGogB2otAAA6AAAgAyAHQQFqIgdqDQALIAIhAyALIQkMBQsgDkGAAkH4p8AAEDwABSAGQcjPAGogB2oiDiAOLQAAIAZB
    sAxqIAdqLQAAcyIOOgAAIAZB0NUAaiAHaiAOOgAAIAdBAWohBwwBCwALAAsgEEGACEkhDUEAIQNBACEJA0ACQCAJQQJH
    BEAgCUEBaiELIAZBuBVqIANqIQJBACEHAkADQCAHIApGBEAgDQRAIAZByM8AakHwABByGiAGQdjbAGohCCAKIQcDQCAH
    BEAgBkHIzwBqQQgQLiAGIAYpA8hPIAgxAAB8NwPITyAHQX9qIQcgCEEBaiEIDAELCyAGQcjPAGoQRSAGQdDVAGogBkGo
    BmoQMCAGQZgjakHwABByGiAGQcjPAGogBkHQ1QBqEDZBAEgNBUEAIQIDQCAGQdDVAGpBARAuIAJBAWohAiAGQcjPAGog
    BkHQ1QBqEDZBf0oNAAsDQCACQQFIDQZBACEHA0AgB0HoAEYEQCAGIAYpA7hWQgGHNwO4VkEAIQcDQCAHQfAARwRAIAZB
    mCNqIAdqIAZByM8AaiAHaikDADcDACAHQQhqIQcMAQsLIAZBmCNqIAZB0NUAahBkIAZBmCNqEEUgBikDgCRCP4chF0EA
    IQcDQCAHQfAARwRAIAZByM8AaiAHaiIIIAZBmCNqIAdqKQMAIhYgCCkDAIUgF4MgFoU3AwAgB0EIaiEHDAELCyACQX9q
    IQIMAgUgBkHQ1QBqIAdqIgggCEEIaikDAEI5hkKAgICAgICAgAKDIAgpAwBCAYeENwMAIAdBCGohBwwBCwALAAsACyAK
    QYABQaChwAAQPQALIAMgB2oiCEH/AU0EQCAHQYABRg0CIAZB2NsAaiAHaiACIAdqLQAAOgAAIAdBAWohBwwBCwsgCEGA
    AkGwocAAEDwAC0GAAUGAAUHAocAAEDwACyAGQShqIAZBqANqEAIgBkG4EmogDxACIAZBKGogBkG4EmoQDCAGQegBakHo
    g8AAEF8CQAJAIAZB6AFqEFoNACAGQShqEIQBDQAgBkGIPWoQS0EAIQcgBkGIwwBqQTgQchogBkG4IWpBOBByGiAGQYjA
    AGoQSyAGQcjEAGoQSyAGQcjJAGoQSyAGQcjMAGoQSyAGQagGahBLIAZBsAxqEEsgBkHIzwBqEEsgBkHQ1QBqEEsgBkHY
    2wBqEEsgBkG4FWoQSyAGQZgjaiAGQcjJAGpBwAEQZxogBkHYJGogBkHIzABqQcABEGcaIAZBmCZqIAZBqAZqQcABEGca
    IAZB2CdqIAZBsAxqQcABEGcaIAZBmClqIAZByM8AakHAARBnGiAGQdgqaiAGQdDVAGpBwAEQZxogBkGYLGogBkHY2wBq
    QcABEGcaIAZB2C1qIAZBuBVqQcABEGcaIAZBuBVqQecAEHIaIAZBiMAAaiAGQShqEH8gBkGIwABqEBggBkGYI2ogBkEo
    ahB/A0AgB0HACkYEQCAGQbghaiAGQegBahBrIAYpA7ghIRcgBkG4IWpBARCdASAGQbghahBEIAYpA7ghIRYgBkGIwwBq
    IAZBuCFqEGsgBkGIwwBqQQEQnQEgBkGIwwBqEEQgBkG4IWogBkGIwwBqIBdCAoGnEE8gBkGIwABqIAZBKGogFkICgacQ
    bSAGQcjEAGogBkGIwABqEH8gBkG4IWoQKUEDaiIJQQJ2IgdBAWohAkEAIQgCQAJAAkADQAJAIAZBuCFqQQUQjAEhAyAC
    IAhGBEAgCUGYA0kNASACQecAQbCEwAAQPAALIAhB5wBGDQIgBkG4FWogCGogA0FwaiIDOgAAIAZBuCFqIANBGHRBGHUQ
    ngEgBkG4IWoQRCAGQbghakEEEDsgCEEBaiEIDAELCyAGQbgVaiACaiADOgAAIANBGHRBGHVBf2oiA0EBdiECIANBD0sN
    ASAGQYg9aiAGQZgjaiACQcABbGoQfwNAIAdBf0YEQCAGQYg9aiAGQcjEAGoQcyAGQZgjaiAGQYg9akHAARBnGgwICyAH
    QeYASw0DIAZBiMAAaiAGQZgjaiAGQbgVaiAHaiwAABAfIAdBf2ohByAGQYg9ahAYIAZBiD1qEBggBkGIPWoQGCAGQYg9
    ahAYIAZBiD1qIAZBiMAAahAMDAALAAtB5wBB5wBBoITAABA8AAsgAkEIQcCEwAAQPAALIAdB5wBB0ITAABA8AAUgBkHI
    xABqIAZBmCNqIAdqIgIQfyACQcABaiICIAZByMQAahB/IAIgBkGIwABqEAwgB0HAAWohBwwBCwALAAsgBkGYI2oQSwsgB
    kEoaiAGQZgjahB/IAZBKGoQRyAMEAlBACEHIAZBqAZqQTAQchogBkGwDGpBoKfAABBfAkACQAJAAkACQANAAkAgB0EwRg
    RAIAYgBi0AqAZBH3E6AKgGIAZByM8AaiAGQagGahBdIAENAUEAQQBB8ILAABA8AAsgASAHRg0CIAZBqAZqIAdqIAAgB2o
    tAAA6AAAgB0EBaiEHDAELC0EAIQcCQCAALAAAIgJBAE4EQCAAQTBqIQAgAUEwIAFBMEsbQVBqIQIDQCAHQTBGBEAgBkHY
    2wBqIAZBqAZqEF0gBkHoAWoQSyAGQegBaiAGQcjPAGoQtAEgBkGoAmoiACAGQdjbAGoQtAEgBkHoAmoQaSAGQegBahBEI
    AZBuBVqIAZB6AFqEE0gBkGYI2ogABCFASAGQZgjahADIAZBmCNqIAZBuBVqEFkNAyAGQegBahCUAQwDCyACIAdGDQQgBk
    GoBmogB2ogACAHai0AADoAACAHQQFqIQcMAAsACyAGQZgjahBLIAZB0NUAakE4EHIaIAZBATYCiFYgBkGYI2ogBkHIzwB
    qELQBIAZBmCNqEEQgBkGYJGoQaSAGQdjbAGogBkGYI2oQTQJAIAZB2NsAaiAGQdDVAGoQXEEBRwRAIAZBmCNqEJQBDAEL
    IAZBuBVqIAZB2NsAaiAGQdDVAGoQIyAGQbgVahBYBEAgBkG4FWoQQSAGQbgVahBECyAGQdgjaiAGQbgVahClAQsgAkEgc
    UEFdiAGQdgjahBMQQFGRwRAIAZBmCNqEKYBCyAGQegBaiAGQZgjakHAARBnGgsgBkHQPGpB8IHAABBfIAZB6AFqEIQBRQ
    0CDAMLIAEgAUHggsAAEDwACyAHQTBqIAFBgIPAABA8AAsgBkGoA2oQSyAGQagDaiAGQegBahB/IAZBuBJqEEsgBkG4Emo
    gBkHoAWoQfyAGQbgSahBHIAZByMcAakHwgcAAEF8gBkGYI2pBqILAABBfIAZBiMMAaiAGQZgjahCLAUEAIQAgBkG4IWpB
    OBByGiAGQfAhakE4EHIhCSAGQdjbAGpB8IHAABBfIAZBuBVqQYCAwAAQXyAGQZgjakE4EHIaIAZBkCNqIQsgBkGwFWohC
    gJAAkADQCAAQQdGDQIgAEEBaiEBIAZBuBVqIABBA3RqIQxCACEXQQAhAwNAIANBf2ohByAKIANBA3RqIQIgCyAAIANqQQ
    N0aiEIA0AgB0EGRgRAIAEhAAwDCyAIQQhqIQggAkEIaiECIAAgB0EBaiIHakEGSw0ACyAAQQZNBEAgB0EGSw0DIAdBAWo
    hAyAGQQhqIAIpAwAiFiAWQj+HIAwpAwAiFiAWQj+HEDEgCCAGKQMIIhkgF3wiFiAIKQMAIhp8IhhC//////////8DgzcD
    ACAYIBZUrSAWIBlUrSAGQRBqKQMAIBdCP4d8fCAaQj+HfHxCBoYgGEI6iIQhFwwBCwsLIABBB0G0ncAAEDwACyAHQQdBx
    J3AABA8AAsgBkG4IWogBkHQPGoQayAGQbghaiAGQZgjahAkIAkgBkHQPGoQayAJIAZBmCNqEBwgCSAGQdjbAGoQYyAGQb
    gSaiAGQYjDAGoQSCAGQbghahApIQAgBkGIyABqIAZBuCFqIAZByMcAahCNASAGQYjIAGoQKSAASQRAIAZBuCFqIAZBiMg
    AahBrIAZBqANqEKYBCyAJECkhACAGQYjIAGogCSAGQcjHAGoQjQEgBkGIyABqECkgAEkEQCAJIAZBiMgAahBrIAZBuBJq
    EKYBCyAGQbghahBEIAkQREEAIQcgBkHIyABqQTgQchogBkGIyQBqQTgQchogBkGYO2pBOBByGiAGQYg9ahBLIAZBiMAAa
    hBLIAZByMQAahBLIAZByMkAahBLIAZByMwAahBLIAZBqAZqEEsgBkGwDGoQSyAGQcjPAGoQSyAGQdDVAGoQSyAGQdjbAG
    oQSyAGQbgVahBLIAZBmCNqIAZByMkAakHAARBnGiAGQdgkaiAGQcjMAGpBwAEQZyEAIAZBmCZqIAZBqAZqQcABEGchASA
    GQdgnaiAGQbAMakHAARBnIQsgBkGYKWogBkHIzwBqQcABEGchCiAGQdgqaiAGQdDVAGpBwAEQZyECIAZBmCxqIAZB2NsA
    akHAARBnIQMgBkHYLWogBkG4FWpBwAEQZyEIIAZBuBVqQcwBEHIaIAZByMgAaiAGQbghahBrIAZBiMkAaiAJEGsgACAGQ
    agDahB/IAAgBkG4EmoQcyABIAZBqANqEH8gASAGQbgSahAMIAZBiD1qIAZBuBJqEH8gBkGIPWoQGCAGQcjEAGogABB/IA
    ZBmCNqIAZByMQAahB/IAZBmCNqIAZBiD1qEHMgBkHIxABqIAEQfyALIAZByMQAahB/IAsgBkGIPWoQDCAGQYjAAGogBkG
    oA2oQfyAGQYjAAGoQGCAGQcjEAGogABB/IAIgBkHIxABqEH8gAiAGQYjAAGoQDCAGQcjEAGogARB/IAMgBkHIxABqEH8g
    AyAGQYjAAGoQDCAGQcjEAGogAhB/IAogBkHIxABqEH8gCiAGQYg9ahBzIAZByMQAaiADEH8gCCAGQcjEAGoQfyAIIAZBi
    D1qEAwgBikDyEghFyAGQcjIAGpBARCdASAGQcjIAGoQRCAGKQPISCEWIAZBmDtqIAZByMgAahBrIAZBmDtqQQEQnQEgBk
    GYO2oQRCAGQcjIAGogBkGYO2ogF0ICgacQTyAGQYjAAGogBkGoA2ogFkICgacQbSAGQcjEAGogBkGIwABqEH8gBikDiEk
    hFyAGQYjJAGpBARCdASAGQYjJAGoQRCAGKQOISSEWIAZBmDtqIAZBiMkAahBrIAZBmDtqQQEQnQEgBkGYO2oQRCAGQYjJ
    AGogBkGYO2ogF0ICgacQTyAGQYg9aiAGQbgSaiAWQgKBpxBtIAZByMQAaiAGQYg9ahAMIAZBmDtqIAZByMgAahBrIAZBm
    DtqIAZBiMkAahBhIAZBmDtqEEQgBkGYO2oQKUEBaiICQQF2IghBAWohAAJAAkACQAJAA0ACQCAGQcjIAGpBAxCMASEBIA
    AgB0YEQCAGQYjJAGpBAxCMASEDIAJBlgNJDQEgAEHMAUG0g8AAEDwACyAGQcjIAGogAUF8aiIBEJ4BIAZByMgAahBEIAZ
    ByMgAakECEDsgBkGIyQBqIAZBiMkAakEDEIwBQXxqIgMQngEgBkGIyQBqEEQgBkGIyQBqQQIQOyAHQcwBRg0CIAZBuBVq
    IAdqIAMgAUECdGo6AAAgB0EBaiEHDAELCyAGQbgVaiAAaiADIAFBAnRqIgA6AAAgAEEYdEEYdUF/aiIBQQF2IQAgAUEPS
    w0BIAZBiD1qIAZBmCNqIABBwAFsahB/A0AgCEF/Rg0EIAhBywFLDQMgBkGIwABqIAZBmCNqIAZBuBVqIAhqLAAAEB8gCE
    F/aiEIIAZBiD1qEBggBkGIPWoQGCAGQYg9aiAGQYjAAGoQDAwACwALQcwBQcwBQaSDwAAQPAALIABBCEHEg8AAEDwACyA
    IQcwBQdSDwAAQPAALIAZBiD1qIAZByMQAahBzIAZBqANqIAZBiD1qQcABEGcaQX8hByAGQagDahCEAUUNASAGQegBahCm
    AUEAIQcgBkHIzwBqQeAAEHIaIAUEQANAIAdB4ABGBEAgBiAGLQDIT0EfcToAyE8gBkHQ1QBqIAZByM8AahAhAkACQAJAI
    AQsAAAiA0F/SgRAIARB4ABqIQAgBUHgACAFQeAASxtBoH9qIQFBACEHA0AgB0HgAEYEQCAGQZgjaiAGQcjPAGoQISAGQa
    gDaiAGQdDVAGogBkGYI2oQPwwDCyABIAdGDQMgBkHIzwBqIAdqIAAgB2otAAA6AAAgB0EBaiEHDAALAAsgBkGYI2oQKiA
    GQYjAAGpBOBByGiAGQQE2AsBAIAZBmCNqIAZB0NUAahCQASAGQZgkaiIBELABIAZBmCVqELABIAZBmCNqEKgBIAZB2NsA
    aiAGQZgjahAmIAZBuBVqIAZB2NsAahBeIAZBuBVqEKYBIAZBuBVqIAZB2NsAahAPIAZBsAxqIAZBuBVqQcAAEGcaAkAgB
    kGwDGogBkGIwABqEFxBAUcEQCAGQZgjahCYAQwBCyAGQdjbAGoQhwFFBEAgBkHIxABqIAZBmNwAaiIAEIUBIAZByMkAai
    AGQdjbAGoQhQEgBkHIzABqIAZB2NsAahCFASAGQagGakE4EHIaIAZBATYC4AYgBkGwDGpBOBByGiAGQQE2AugMIAZByMQ
    AahADIAZByMkAahADIAZByMQAaiAGQcjJAGoQeCAGQcjEAGoQRCAGQbgVaiAGQcjEAGogBkGIwABqECMgBkHIyQBqIAZB
    uBVqEKUBIAZByMQAaiAGQcjJAGoQpQEgBkHIyQBqIAZB2NsAahClASAGQcjJAGogBkHIxABqEHggBkHIyQBqEEQgBkHIy
    QBqEEIgBkHIxABqIAAQpQEgBkHIxABqEEIgBkHIyQBqIAZBsAxqEFwhAiAGQcjMAGogBkGwDGoQpQEgBkHIzABqEEEgBk
    HIzABqEEQgBkGoBmogBkHIyQBqEKUBIAZBqAZqEEEgBkGoBmoQRCAGQcjJAGogBkGoBmpBASACayICEHkgBkGwDGogBkH
    IzABqIAIQeSAGQbgVaiAGQcjJAGogBkGwDGoQIyAGQdjbAGogBkG4FWoQpQEgBkHIzABqIAZByMkAahClASAGQcjMAGog
    BkGwDGoQNCAGQcjMAGogBkHY2wBqEEggACAGQcjMAGoQpQEgACAGQcjEAGoQSCAGQagGaiAGQdjbAGoQpQEgBkHY2wBqI
    AAgAhB5IAAgBkGoBmogAhB5IAZB2NsAahCJASEAIAZBuBVqIAZB2NsAahBeIAZBuBVqEDogBkG4FWoQqAEgBkHY2wBqIA
    ZBuBVqIAAQjwELIAZB2NsAahCJAQRAIAZB2NsAahA6CyAGQdjbAGoQqwEgASAGQdjbAGoQkAELQQAhAgJAIAEQhwENACA
    GQdgkahBMIgINACABEEwhAgsgA0EgcUEFdiACQQFGRwRAIAZBmCNqEJwBCyAGQagDaiAGQZgjakGAAxBnGgsgBkHIyABq
    QfCBwAAQXyAGQagDahCIAQ0FIAZBuBJqECogBkG4FWoQKiAGQdDVAGoQKiAGQdjbAGoQKiAGQZgjahAqIAZBuBhqIAZB0
    NUAakGAAxBnIQ0gBkG4G2ogBkHY2wBqQYADEGchCSAGQbgeaiAGQZgjakGAAxBnIQAgBkHY2wBqQbiAwAAQXyAGQZgjak
    HwgMAAEF8gBkGIwwBqIAZB2NsAaiAGQZgjahBJIAZBiMkAakHwgcAAEF9BACEHIAZBuCFqQTgQchogBkHwIWpBqAEQciE
    DIAZBsAxqQfCBwAAQXyAGQcjPAGpBgIDAABBfIAZB4CJqIQEgBkGoImohDyAGQdDVAGogBkHIyABqEF8DQCAHQagBRg0C
    IAZBuCFqIAdqIgIgBkHQ1QBqEGsgAiAGQcjPAGoQJCAHQThqIQcgBkHQ1QBqIAZByM8AahAcDAALAAsgB0HgAGogBUGwp
    MAAEDwACyABIAZB0NUAahBrQQAhByAGQdjbAGpBOBByGiAGQZgjaiADIAZBsAxqEI0BIAZB2NsAaiAGQZgjahBrIAMgBk
    HY2wBqEGsgBkGYI2ogASAGQbAMahCNASAGQdjbAGogBkGYI2oQayABIAZB2NsAahBrIAZBiD1qECogBkGIwwBqEEAgBkG
    IwwBqEKgBIAZBmDtqQTgQchogBkG4FWogBkGoA2oQfgNAIAdBgAlGBEACQCAGQbgVaiECQQAhBwNAIAdB4AFHBEAgBkG4
    IWogB2oiBBApIQUgBkGYI2ogBCAGQYjJAGoQjQEgBkGYO2ogBkGYI2oQayAGQZg7ahApIAVJBEAgBCAGQZg7ahBrIAIQn
    AELIAQQRCAHQThqIQcgAkGAA2ohAgwBCwsgBkHIxABqECogBkGIwABqECogBkGYI2oQKiAGQcjJAGoQKiAGQcjMAGoQKi
    AGQagGahAqIAZBsAxqECogBkHIzwBqECogBkHQ1QBqECogBkHY2wBqECogBkGYJmogBkHIyQBqQYADEGchAiAGQZgpaiA
    GQcjMAGpBgAMQZyEEIAZBmCxqIAZBqAZqQYADEGchBSAGQZgvaiAGQbAMakGAAxBnIQsgBkGYMmogBkHIzwBqQYADEGch
    CiAGQZg1aiAGQdDVAGpBgAMQZyEIIAZBmDhqIAZB2NsAakGAAxBnIQxBACEHIAZBqAZqQTgQchogBkGwDGogBkG4IWoQX
    yAGQcjPAGogAxBfIAZB0NUAaiAPEF8gBkHY2wBqIAEQXyAGQegMaiAGQcjPAGpBOBBnGiAGQaANaiAGQdDVAGpBOBBnGi
    AGQdgNaiAGQdjbAGpBOBBnGiAGQdDVAGpBlwMQchogBkHY2wBqQZcDEHIaA0AgB0HgAUYEQAJAIAZBmCNqIAZBuBVqEH4
    gBkHIxABqIAZBmCNqEH4gAiAGQcjEAGoQfiACIA0QCyAEIAZByMQAahB+IAQgCRALIAZByMQAaiACEH4gBSAGQcjEAGoQ
    fiAFIAkQCyAGQcjEAGogBkGYI2oQfiALIAZByMQAahB+IAsgABALIAZByMQAaiACEH4gCiAGQcjEAGoQfiAKIAAQCyAGQ
    cjEAGogBBB+IAggBkHIxABqEH4gCCAAEAsgBkHIxABqIAUQfiAMIAZByMQAahB+IAwgABALIAZBsAxqQQEgBikDsAxCAo
    GnayIFEJ0BIAZBsAxqEEQgBkGoBmoQdEEAIQAgBkGwDGohAgJAAkACQAJAA38gAEEERgR/IAZBqAZqECkiA0GXA08NAiA
    DQQFqIQkgBkHY2wBqIANqQQE6AAAgBkHY2wBqIQggAwVBACEHA0AgB0E4RwRAIAZBqAZqIAdqIgEgASkDACACIAdqKQMA
    hDcDACAHQQhqIQcMAQsLIAJBOGohAiAAQQFqIQAMAQsLIQcDQCAHBEAgBkGwDGpBARA7IAggBikDsAxCAoGnQQF0QX9qO
    gAAIAdBf2ohByAIQQFqIQgMAQsLQQAhBwNAIAcgCUYEQCAGQYjAAGogBkGYI2ogBkHQ1QBqIANqLQAAQRl0QRh1QQFyEC
    AgA0F/aiEHA0AgB0F/Rg0GIAZBiMAAahAUIAdBlgNLDQUgBkHIxABqIAZBmCNqIAZB2NsAaiAHai0AACAGQdDVAGogB2o
    tAABBAXRqQRh0QRh1ECAgB0F/aiEHIAZBiMAAaiAGQcjEAGoQCwwACwALIAdBlwNGDQIgB0EBaiEBQQAhACAGQdDVAGog
    B2oiC0EAOgAAIAZB2NsAaiAHai0AACEKQQEhAkE4IQcDQCAHQeABRgRAIAEhBwwCBSAGQbAMaiAHaiIEKQMAIRcgBEEBE
    DsgBCAKIBdCAoGnbCIIQRh0QRl1EJ4BIAQQRCALIAAgAiAIbGoiADoAACAHQThqIQcgAkEBdCECDAELAAsACwALIANBlw
    NBkKXAABA8AAtBlwNBlwNBoKXAABA8AAsgB0GXA0GwpcAAEDwACyAGQcjEAGogBkGIwABqEH4gBkHIzwBqECogBkHIzwB
    qIAZBuBVqEH4gBkHIzwBqEJwBIAZByMQAaiAGQcjPAGoQCyAGQYjAAGogBkHIxABqIAUQbyAGQbgSaiAGQYjAAGoQfkF/
    IQcgBkG4EmoQiAFFDQogBkG4EmoQOCAGQbgVakG4gMAAEF8gBkGYI2pB8IDAABBfIAZBmDtqIAZBuBVqIAZBmCNqEEkgB
    kGYPGpBOBByGiAGQdA8akE4EHIaIAZBiD1qECogBkHoAWoQhAFFBEAgBkEoahCEAQ0BIAZBiMAAahAqIAZBiMAAaiAGQb
    gSahB+IAZBiMAAahBKIAZBiMMAahBLIAZBiMMAaiAGQegBahB/IAZBiMMAahBHIAZByMQAahAqIAZByMQAaiAGQagDahB
    +IAZByMQAahBKIAZBuCFqEEsgBkG4IWogBkEoahB/IAZBuCFqEEcgBkGYI2ogBkGIwwBqEIUBIAZByMcAaiAGQZgjahCF
    ASAGQZgjaiAGQcjDAGoQhQEgBkGIyABqIAZBmCNqEIUBIAZBmCNqIAZBuCFqEIUBIAZByMgAaiAGQZgjahCFASAGQZgja
    iAGQfghahCFASAGQYjJAGogBkGYI2oQhQEgBkHIyQBqECogBkHIzABqECogBkHQ1QBqEGAgBkHIyQBqIAZBiMAAahB+IA
    ZByMwAaiAGQcjEAGoQfiAGQbAMahAqIAZBsAxqIAZBiMAAahB+IAZBsAxqEJwBIAZByM8AahAqIAZByM8AaiAGQcjEAGo
    QfiAGQcjPAGoQnAEgBkHQPGogBkGYPGoQVEF/aiEHA0AgB0EBTQRAIAZB0NUAahCTASAGQagGaiAGQdDVAGpBiAYQZxoM
    BgsgBkHQ1QBqEBsgBkHY2wBqIAZByMkAaiAGQcjHAGogBkGIyABqEBcgBkG4FWogBkHIzABqIAZByMgAaiAGQYjJAGoQF
    yAGQdjbAGogBkG4FWoQBiAGQdDVAGogBkHY2wBqEAQCQAJAIAZB0DxqIAdBf2oiBxBXIAZBmDxqIAcQV2tBAWoOAwECAA
    ILIAZB2NsAaiAGQcjJAGogBkGIwABqIAZByMcAaiAGQYjIAGoQFiAGQZgjaiAGQcjMAGogBkHIxABqIAZByMgAaiAGQYj
    JAGoQFiAGQdjbAGogBkGYI2oQBiAGQdDVAGogBkHY2wBqEAQMAQsgBkHY2wBqIAZByMkAaiAGQbAMaiAGQcjHAGogBkGI
    yABqEBYgBkGYI2ogBkHIzABqIAZByM8AaiAGQcjIAGogBkGIyQBqEBYgBkHY2wBqIAZBmCNqEAYgBkHQ1QBqIAZB2NsAa
    hAEDAALAAsgBkGoBmogBkGoA2ogBkEoahAQDAMLBSAGQbAMaiAHahBEIAdBOGohBwwBCwsgBkGoBmogBkG4EmogBkHoAW
    oQEAsFIAZBiD1qIAZBuBVqIAdqIgIQfiACQYADaiIEIAZBiD1qEH4gBkGYI2ogBkGIwwBqEF4gBkGYI2oQMiAEEKYBIAJ
    BgARqIgUQpgEgAkGABWoiAhCmASACEKsBIAQgBkGYI2oQDyAFIAZBmCNqEA8gBSAGQYjDAGoQDyAHQYADaiEHDAELCyAG
    QbgVakG4gMAAEF8gBkGYI2pB8IDAABBfIAZByMQAaiAGQbgVaiAGQZgjahBJIAZBiMAAakGAgMAAEF8gBkGwDGogBkGoB
    moQaiAGQcjPAGogBkGwDGoQaiAGQdDVAGogBkHIzwBqEI4BIAZB2NsAaiAGQcjRAGoiARCOASAGQbgVaiAGQcjPAGoQjg
    EgBkGYI2oQLyAGQcjPAGoQmQEgBkHQ1QBqECIgBkHY2wBqIAZByNMAaiIAEBkgBkHY2wBqEGYgBkHQ1QBqIAZB2NsAahC
    BASAGQdDVAGoQrAEgBkHY2wBqIAAQkgEgBkHY2wBqECIgBkHY2wBqEGYgBkG4FWogARAZIAZB2NsAaiAGQbgVahCBASAG
    QdjbAGoQrAEgBkG4FWogARCSASAGQbgVahAiIAZBmCNqIAZByM8AahCSASAGQZgjaiAAEBkgBkG4FWogBkGYI2oQgQEgB
    kG4FWoQrAEgBkGYI2ogARCSASAGQZgjaiAGQbgVahAZIAZBmCNqEGYgBkHIzwBqIAZB0NUAahAZIAZBmCNqIAZByM8Aah
    CWASAAIAZB2NsAahAZIAAQZiAGQZgjaiAAEJYBIAZBmCNqEKwBIAZByMkAaiAGQZgjahBeIAZByMwAaiAGQZgkaiICEF4
    gBkHIyQBqEDIgBkHIzABqEDIgBkHIzABqEFUgBkHIzABqEKgBIAZByMkAaiAGQcjMAGoQfSAGQcjJAGoQQCAGQZgjaiAG
    QcjJAGoQDyAGQcjJAGoQOiAGQcjJAGoQqAEgAiAGQcjJAGoQDyAGQcjPAGogBkHQ1QBqEJIBIAZByM8AaiAGQZgjahAZI
    AEgBkHY2wBqEJIBIAEgBkGYI2oQGSAAIAZBuBVqEJIBIAAgBkGYI2oQGSAGQQU2AshVIAZBsAxqEJMBIAZBsAxqIAZByM
    8AahAOIAZByM8AaiAGQbAMahBsIAZBsAxqIAZByMQAahA3IAZBsAxqIAZByMQAahA3IAZBsAxqIAZByM8AahAOIAZB0NU
    AaiAGQbAMahBqIAZB0NUAahAaIAZB0NUAaiAGQbAMahAOIAZBmCNqIAZBsAxqIAZBiMAAahAdIAZB2NsAaiAGQZgjahBq
    IAZB2NsAahCTASAGQbgVaiAGQbAMahBqIAZBuBVqEJMBIAZBsAxqIAZB2NsAahBsIAZBsAxqIAZBuBVqEA4gBkGYI2ogB
    kGwDGogBkGIwABqEB0gBkHY2wBqIAZBmCNqEGwgBkHY2wBqEJMBIAZBuBVqIAZBsAxqEGwgBkG4FWoQkwEgBkGwDGogBk
    HY2wBqEGwgBkGwDGogBkG4FWoQDiAGQZgjaiAGQbAMaiAGQYjAAGoQHSAGQdjbAGogBkGYI2oQbCAGQdjbAGoQkwEgBkG
    4FWogBkGwDGoQbCAGQbgVaiAGQcjEAGoQNyAGQbAMaiAGQdjbAGoQbCAGQbAMaiAGQbgVahAOIAZBmCNqIAZBsAxqIAZB
    iMAAahAdIAZB2NsAaiAGQZgjahBsIAZBmCNqIAZB2NsAaiAGQYjAAGoQHSAGQdjbAGogBkGYI2oQbCAGQbgVaiAGQbAMa
    hBsIAZBuBVqIAZByMQAahA3IAZBuBVqIAZByMQAahA3IAZB2NsAaiAGQbgVahAOIAZBuBVqIAZBsAxqEGwgBkG4FWoQkw
    EgBkGwDGogBkHY2wBqEGwgBkGwDGogBkG4FWoQDiAGQbAMaiAGQdDVAGoQDiAGQbAMahCaASAGQagGaiAGQbAMakGIBhB
    nGiAGQZgjahBuIAZBqAZqIAZBmCNqEHtFDQMgBkGoB2ogAhB7RQ0DIAZBqAhqEIYBRQ0DQQAhByAGQagKahCGAUUNAwwE
    CyAFIAdHBEAgBkHIzwBqIAdqIAQgB2otAAA6AAAgB0EBaiEHDAELCyAFIAVBoKTAABA8AAtBAEEAQZCkwAAQPAALQX8hB
    wsgBkHg4QBqJAAgBw8LQQAhByAGQbAMakE4EHIaA0AgB0E4RwRAIAZBsAxqIAdqIAZByM8AaiAHaikDADcDACAHQQhqIQ
    cMAQsLIAZBmCNqIAZBsAxqEIsBIAZBqANqIAlBBnRqIAZBmCNqQcAAEGcaIAMgCmohAyALIQkMAAsACyAHIAlqIQkgAiE
    DDAALAAtBK0EBQaS5wQAoAgAiAEEBIAAbEQAAAAvBKgIIfwF+AkACQAJAAkAgAEH1AU8EQCAAQc3/e08NAiAAQQtqIgBB
    eHEhBkHYtcEAKAIAIgdFDQFBHyEIQQAgBmshBQJAAkAgBkH///8HTQRAIAZBBiAAQQh2ZyIAa0EfcXZBAXEgAEEBdGtBP
    mohCAsgCEECdEHkt8EAaigCACIABEAgBkEAQRkgCEEBdmtBH3EgCEEfRht0IQMDQAJAIABBBGooAgBBeHEiBCAGSQ0AIA
    QgBmsiBCAFTw0AIAAhAiAEIgUNAEEAIQUMAwsgAEEUaigCACIEIAEgBCAAIANBHXZBBHFqQRBqKAIAIgBHGyABIAQbIQE
    gA0EBdCEDIAANAAsgAQRAIAEhAAwCCyACDQILQQAhAkECIAhBH3F0IgBBACAAa3IgB3EiAEUNAyAAQQAgAGtxaEECdEHk
    t8EAaigCACIARQ0DCwNAIAAgAiAAQQRqKAIAQXhxIgEgBk8gASAGayIDIAVJcSIEGyECIAMgBSAEGyEFIAAoAhAiAQR/I
    AEFIABBFGooAgALIgANAAsgAkUNAgtB5LjBACgCACIAIAZPQQAgBSAAIAZrTxsNASACKAIYIQcCQAJAIAIgAigCDCIBRg
    RAIAJBFEEQIAJBFGoiAygCACIBG2ooAgAiAA0BQQAhAQwCCyACKAIIIgAgATYCDCABIAA2AggMAQsgAyACQRBqIAEbIQM
    DQCADIQQgACIBQRRqIgMoAgAiAEUEQCABQRBqIQMgASgCECEACyAADQALIARBADYCAAsCQCAHRQ0AAkAgAiACKAIcQQJ0
    QeS3wQBqIgAoAgBHBEAgB0EQQRQgBygCECACRhtqIAE2AgAgAUUNAgwBCyAAIAE2AgAgAQ0AQdi1wQBB2LXBACgCAEF+I
    AIoAhx3cTYCAAwBCyABIAc2AhggAigCECIABEAgASAANgIQIAAgATYCGAsgAkEUaigCACIARQ0AIAFBFGogADYCACAAIA
    E2AhgLAkAgBUEQTwRAIAIgBkEDcjYCBCACIAZqIgcgBUEBcjYCBCAFIAdqIAU2AgAgBUGAAk8EQEEfIQAgB0IANwIQIAV
    B////B00EQCAFQQYgBUEIdmciAGtBH3F2QQFxIABBAXRrQT5qIQALIAcgADYCHCAAQQJ0QeS3wQBqIQQCQAJAAkACQEHY
    tcEAKAIAIgNBASAAQR9xdCIBcQRAIAQoAgAiA0EEaigCAEF4cSAFRw0BIAMhAAwCC0HYtcEAIAEgA3I2AgAgBCAHNgIAI
    AcgBDYCGAwDCyAFQQBBGSAAQQF2a0EfcSAAQR9GG3QhAQNAIAMgAUEddkEEcWpBEGoiBCgCACIARQ0CIAFBAXQhASAAIQ
    MgAEEEaigCAEF4cSAFRw0ACwsgACgCCCIBIAc2AgwgACAHNgIIIAdBADYCGCAHIAA2AgwgByABNgIIDAQLIAQgBzYCACA
    HIAM2AhgLIAcgBzYCDCAHIAc2AggMAgsgBUEDdiIBQQN0Qdy1wQBqIQACf0HUtcEAKAIAIgNBASABdCIBcQRAIAAoAggM
    AQtB1LXBACABIANyNgIAIAALIQUgACAHNgIIIAUgBzYCDCAHIAA2AgwgByAFNgIIDAELIAIgBSAGaiIAQQNyNgIEIAAgA
    moiACAAKAIEQQFyNgIECyACQQhqDwsCQAJAQdS1wQAoAgAiB0EQIABBC2pBeHEgAEELSRsiBkEDdiIBdiICQQNxRQRAIA
    ZB5LjBACgCAE0NAyACDQFB2LXBACgCACIARQ0DIABBACAAa3FoQQJ0QeS3wQBqKAIAIgFBBGooAgBBeHEgBmshBSABIQM
    DQCABKAIQIgBFBEAgAUEUaigCACIARQ0ECyAAQQRqKAIAQXhxIAZrIgIgBSACIAVJIgIbIQUgACADIAIbIQMgACEBDAAL
    AAsCQCACQX9zQQFxIAFqIgVBA3QiAEHktcEAaigCACIDQQhqIgIoAgAiASAAQdy1wQBqIgBHBEAgASAANgIMIAAgATYCC
    AwBC0HUtcEAIAdBfiAFd3E2AgALIAMgBUEDdCIAQQNyNgIEIAAgA2oiACAAKAIEQQFyNgIEIAIPCwJAQQIgAXQiAEEAIA
    BrciACIAF0cSIAQQAgAGtxaCIBQQN0IgBB5LXBAGooAgAiA0EIaiIEKAIAIgIgAEHctcEAaiIARwRAIAIgADYCDCAAIAI
    2AggMAQtB1LXBACAHQX4gAXdxNgIACyADIAZBA3I2AgQgAyAGaiIFIAFBA3QiACAGayIHQQFyNgIEIAAgA2ogBzYCAEHk
    uMEAKAIAIgAEQCAAQQN2IgJBA3RB3LXBAGohAEHsuMEAKAIAIQgCf0HUtcEAKAIAIgFBASACQR9xdCICcQRAIAAoAggMA
    QtB1LXBACABIAJyNgIAIAALIQMgACAINgIIIAMgCDYCDCAIIAA2AgwgCCADNgIIC0HsuMEAIAU2AgBB5LjBACAHNgIAIA
    QPCyADKAIYIQcCQAJAIAMgAygCDCIBRgRAIANBFEEQIANBFGoiASgCACICG2ooAgAiAA0BQQAhAQwCCyADKAIIIgAgATY
    CDCABIAA2AggMAQsgASADQRBqIAIbIQIDQCACIQQgACIBQRRqIgIoAgAiAEUEQCABQRBqIQIgASgCECEACyAADQALIARB
    ADYCAAsgB0UNAyADIAMoAhxBAnRB5LfBAGoiACgCAEcEQCAHQRBBFCAHKAIQIANGG2ogATYCACABRQ0EDAMLIAAgATYCA
    CABDQJB2LXBAEHYtcEAKAIAQX4gAygCHHdxNgIADAMLAkACQAJAAkACQEHkuMEAKAIAIgEgBkkEQEHouMEAKAIAIgAgBk
    sNA0EAIQUgBkGvgARqIgJBEHZAACIAQX9GDQYgAEEQdCIDRQ0GQfS4wQAgAkGAgHxxIgVB9LjBACgCAGoiAjYCAEH4uME
    AQfi4wQAoAgAiACACIAAgAksbNgIAQfC4wQAoAgAiBEUNAUH8uMEAIQADQCAAKAIAIgEgACgCBCICaiADRg0DIAAoAggi
    AA0ACwwEC0HsuMEAKAIAIQMCfyABIAZrIgJBD00EQEHsuMEAQQA2AgBB5LjBAEEANgIAIAMgAUEDcjYCBCABIANqIgJBB
    GohACACKAIEQQFyDAELQeS4wQAgAjYCAEHsuMEAIAMgBmoiADYCACAAIAJBAXI2AgQgASADaiACNgIAIANBBGohACAGQQ
    NyCyEGIAAgBjYCACADQQhqDwtBkLnBACgCACIAQQAgACADTRtFBEBBkLnBACADNgIAC0GUucEAQf8fNgIAQYC5wQAgBTY
    CAEH8uMEAIAM2AgBB6LXBAEHctcEANgIAQfC1wQBB5LXBADYCAEHktcEAQdy1wQA2AgBB+LXBAEHstcEANgIAQey1wQBB
    5LXBADYCAEGAtsEAQfS1wQA2AgBB9LXBAEHstcEANgIAQYi2wQBB/LXBADYCAEH8tcEAQfS1wQA2AgBBkLbBAEGEtsEAN
    gIAQYS2wQBB/LXBADYCAEGYtsEAQYy2wQA2AgBBjLbBAEGEtsEANgIAQaC2wQBBlLbBADYCAEGUtsEAQYy2wQA2AgBBiL
    nBAEEANgIAQai2wQBBnLbBADYCAEGctsEAQZS2wQA2AgBBpLbBAEGctsEANgIAQbC2wQBBpLbBADYCAEGstsEAQaS2wQA
    2AgBBuLbBAEGstsEANgIAQbS2wQBBrLbBADYCAEHAtsEAQbS2wQA2AgBBvLbBAEG0tsEANgIAQci2wQBBvLbBADYCAEHE
    tsEAQby2wQA2AgBB0LbBAEHEtsEANgIAQcy2wQBBxLbBADYCAEHYtsEAQcy2wQA2AgBB1LbBAEHMtsEANgIAQeC2wQBB1
    LbBADYCAEHctsEAQdS2wQA2AgBB6LbBAEHctsEANgIAQfC2wQBB5LbBADYCAEHktsEAQdy2wQA2AgBB+LbBAEHstsEANg
    IAQey2wQBB5LbBADYCAEGAt8EAQfS2wQA2AgBB9LbBAEHstsEANgIAQYi3wQBB/LbBADYCAEH8tsEAQfS2wQA2AgBBkLf
    BAEGEt8EANgIAQYS3wQBB/LbBADYCAEGYt8EAQYy3wQA2AgBBjLfBAEGEt8EANgIAQaC3wQBBlLfBADYCAEGUt8EAQYy3
    wQA2AgBBqLfBAEGct8EANgIAQZy3wQBBlLfBADYCAEGwt8EAQaS3wQA2AgBBpLfBAEGct8EANgIAQbi3wQBBrLfBADYCA
    EGst8EAQaS3wQA2AgBBwLfBAEG0t8EANgIAQbS3wQBBrLfBADYCAEHIt8EAQby3wQA2AgBBvLfBAEG0t8EANgIAQdC3wQ
    BBxLfBADYCAEHEt8EAQby3wQA2AgBB2LfBAEHMt8EANgIAQcy3wQBBxLfBADYCAEHgt8EAQdS3wQA2AgBB1LfBAEHMt8E
    ANgIAQfC4wQAgAzYCAEHct8EAQdS3wQA2AgBB6LjBACAFQVhqIgA2AgAgAyAAQQFyNgIEIAAgA2pBKDYCBEGMucEAQYCA
    gAE2AgAMAwsgAEEMaigCACADIARNciABIARLcg0BIAAgAiAFajYCBEHwuMEAQfC4wQAoAgAiA0EPakF4cSIBQXhqNgIAQ
    ei4wQBB6LjBACgCACAFaiICIAMgAWtqQQhqIgA2AgAgAUF8aiAAQQFyNgIAIAIgA2pBKDYCBEGMucEAQYCAgAE2AgAMAg
    tB6LjBACAAIAZrIgI2AgBB8LjBAEHwuMEAKAIAIgEgBmoiADYCACAAIAJBAXI2AgQgASAGQQNyNgIEIAFBCGohBQwCC0G
    QucEAQZC5wQAoAgAiACADIAAgA0kbNgIAIAMgBWohAUH8uMEAIQACQANAIAEgACgCAEcEQCAAKAIIIgANAQwCCwsgAEEM
    aigCAA0AIAAgAzYCACAAIAAoAgQgBWo2AgQgAyAGQQNyNgIEIAMgBmohBCABIANrIAZrIQYCQAJAIAFB8LjBACgCAEcEQ
    EHsuMEAKAIAIAFGDQEgAUEEaigCACIAQQNxQQFGBEAgASAAQXhxIgAQFSAAIAZqIQYgACABaiEBCyABIAEoAgRBfnE2Ag
    QgBCAGQQFyNgIEIAQgBmogBjYCACAGQYACTwRAQR8hBSAEQgA3AhAgBkH///8HTQRAIAZBBiAGQQh2ZyIAa0EfcXZBAXE
    gAEEBdGtBPmohBQsgBCAFNgIcIAVBAnRB5LfBAGohAQJAAkACQAJAQdi1wQAoAgAiAkEBIAVBH3F0IgBxBEAgASgCACIC
    QQRqKAIAQXhxIAZHDQEgAiEFDAILQdi1wQAgACACcjYCACABIAQ2AgAgBCABNgIYDAMLIAZBAEEZIAVBAXZrQR9xIAVBH
    0YbdCEBA0AgAiABQR12QQRxakEQaiIAKAIAIgVFDQIgAUEBdCEBIAUiAkEEaigCAEF4cSAGRw0ACwsgBSgCCCIAIAQ2Ag
    wgBSAENgIIIARBADYCGCAEIAU2AgwgBCAANgIIDAULIAAgBDYCACAEIAI2AhgLIAQgBDYCDCAEIAQ2AggMAwsgBkEDdiI
    CQQN0Qdy1wQBqIQACf0HUtcEAKAIAIgFBASACdCICcQRAIAAoAggMAQtB1LXBACABIAJyNgIAIAALIQUgACAENgIIIAUg
    BDYCDCAEIAA2AgwgBCAFNgIIDAILQfC4wQAgBDYCAEHouMEAQei4wQAoAgAgBmoiADYCACAEIABBAXI2AgQMAQtB7LjBA
    CAENgIAQeS4wQBB5LjBACgCACAGaiIANgIAIAQgAEEBcjYCBCAAIARqIAA2AgALIANBCGoPC0H8uMEAIQADQAJAIAAoAg
    AiAiAETQRAIAIgACgCBGoiAiAESw0BCyAAKAIIIQAMAQsLQfC4wQAgAzYCAEHouMEAIAVBWGoiADYCACADIABBAXI2AgQ
    gACADakEoNgIEQYy5wQBBgICAATYCACAEIAJBYGpBeHFBeGoiACAAIARBEGpJGyIBQRs2AgRB/LjBACkCACEJIAFBEGpB
    hLnBACkCADcCACABIAk3AghBgLnBACAFNgIAQfy4wQAgAzYCAEGEucEAIAFBCGo2AgBBiLnBAEEANgIAIAFBHGohAANAI
    ABBBzYCACACIABBBGoiAEsNAAsgASAERg0AIAEgASgCBEF+cTYCBCAEIAEgBGsiBUEBcjYCBCABIAU2AgAgBUGAAk8EQE
    EfIQAgBEIANwIQIAVB////B00EQCAFQQYgBUEIdmciAGtBH3F2QQFxIABBAXRrQT5qIQALIARBHGogADYCACAAQQJ0QeS
    3wQBqIQMCQAJAAkACQEHYtcEAKAIAIgFBASAAQR9xdCICcQRAIAMoAgAiAkEEaigCAEF4cSAFRw0BIAIhAAwCC0HYtcEA
    IAEgAnI2AgAgAyAENgIAIARBGGogAzYCAAwDCyAFQQBBGSAAQQF2a0EfcSAAQR9GG3QhAQNAIAIgAUEddkEEcWpBEGoiA
    ygCACIARQ0CIAFBAXQhASAAIQIgAEEEaigCAEF4cSAFRw0ACwsgACgCCCICIAQ2AgwgACAENgIIIARBGGpBADYCACAEIA
    A2AgwgBCACNgIIDAMLIAMgBDYCACAEQRhqIAI2AgALIAQgBDYCDCAEIAQ2AggMAQsgBUEDdiICQQN0Qdy1wQBqIQACf0H
    UtcEAKAIAIgFBASACdCICcQRAIAAoAggMAQtB1LXBACABIAJyNgIAIAALIQEgACAENgIIIAEgBDYCDCAEIAA2AgwgBCAB
    NgIIC0EAIQVB6LjBACgCACIAIAZNDQBB6LjBACAAIAZrIgI2AgBB8LjBAEHwuMEAKAIAIgEgBmoiADYCACAAIAJBAXI2A
    gQgASAGQQNyNgIEIAFBCGoPCyAFDwsgASAHNgIYIAMoAhAiAARAIAEgADYCECAAIAE2AhgLIANBFGooAgAiAEUNACABQR
    RqIAA2AgAgACABNgIYCwJAIAVBEE8EQCADIAZBA3I2AgQgAyAGaiIEIAVBAXI2AgQgBCAFaiAFNgIAQeS4wQAoAgAiAAR
    AIABBA3YiAkEDdEHctcEAaiEAQey4wQAoAgAhBwJ/QdS1wQAoAgAiAUEBIAJBH3F0IgJxBEAgACgCCAwBC0HUtcEAIAEg
    AnI2AgAgAAshAiAAIAc2AgggAiAHNgIMIAcgADYCDCAHIAI2AggLQey4wQAgBDYCAEHkuMEAIAU2AgAMAQsgAyAFIAZqI
    gBBA3I2AgQgACADaiIAIAAoAgRBAXI2AgQLIANBCGoLtA8BA38jAEGAC2siAiQAIAJBCGoQSyACQcgBakE4EHIaIAJBAT
    YCgAIgAkGIAmpBOBByGiACQQE2AsACIAJByAJqQTgQchogAkEBNgKAAyACQYgDakE4EHIaIAJBATYCwAMgAkHIA2pBOBB
    yGiACQQE2AoAEIAJBiARqQQEQigEgAkHIBGpBOBByGiACQQE2AoAFIAJBiAVqQTgQchogAkEBNgLABSACQcgFaiABEIUB
    IAJBiAZqQTgQchogAkEBNgLABiACQcgGakE4EHIaIAJBATYCgAcgAkGIB2pBOBByGiACQQE2AsAHIAJByAdqQTgQchogA
    kEBNgKACCACQcgFahBYIQMgAkHICWpB4ITAABBfIAJBiApqIAJByAlqEIsBIAJByAFqIAJBiApqEKUBIAJByAlqQZiFwA
    AQXyACQYgKaiACQcgJahCLASACQYgCaiACQYgKahClASACQcgFahADIAJByAVqQQsQUiACQYgGaiACQcgFahClASACQYg
    GaiACQYgEahB4IAJBiAZqEEQgAkGIBmogAkHIBWoQSCACQYgFaiACQcgBahClASACQYgFaiACQYgGahBIIAJBiAZqIAJB
    iARqEHggAkGIBmoQRCACQYgGaiACQYgCahBIIAJBiAZqEEEgAkGIBmoQRCACQYgDaiACQYgGahClASACQcgDaiACQcgFa
    hClASACQcgDaiACQYgDahBIIAJByAdqIAJBiANqEKUBIAJByAdqEAMgAkHIBmogAkGIBWoQpQEgAkHIBmoQAyACQYgGai
    ACQcgBahClASACQYgGaiACQcgGahBIIAJByAdqIAJBiAZqEHggAkHIB2oQRCACQcgHaiACQYgDahBIIAJByAZqIAJBiAV
    qEEggAkGIBmogAkGIAmoQpQEgAkGIBmogAkHIBmoQSCACQcgHaiACQYgGahB4IAJByAdqEEQgAkGIBmogAkHIB2oQpQEg
    AkGIBmogAkGIBWoQSCACQYgGaiACQYgHahBcIQQgAkGIBWogAkGIBmoQpQEgAkGIBWogAkGIB2oQNCACQYgFaiACQcgHa
    hBIIAJBiANqIAJBiAVqEEggAkHIA2ogAkGIBWoQSCACQcgFaiABEEggAkHIBmogAkGIBWoQpQEgAkHIBmoQAyACQYgFai
    ACQcgGahClASACQYgFaiACQcgFahBIIAJByAVqIAJBiAZqEKUBIAJByAVqQQsQUiACQcgJakHQhcAAEF8gAkGICmogAkH
    ICWoQiwEgAkHIAmogAkGICmoQpQEgAkHIAmogAkGIB2oQSCACQYgDaiACQcgDakEBIARrIgEQeSACQcgGaiACQYgFaiAB
    EHkgAkGIBmogAkHIBWogARB5IAJBiAdqIAJByAJqIAEQeSACQYgKaiACQYgGaiACQYgHahAjIAJByARqIAJBiApqEKUBI
    AJByARqIAJByAZqEEggAkHIBGoQWCEBIAJBiAZqIAJByARqEKUBIAJBiAZqEEEgAkGIBmoQRCACQcgEaiACQYgGaiABIA
    NzEHkgAkGICmpBiIbAABBfIAJBiAhqIAJBiApqEIsBQTghAQNAIAFBoAVGRQRAIAJBiAhqIAJBiANqEEggAkHICWogAUG
    IhsAAahBfIAFBOGohASACQYgKaiACQcgJahCLASACQYgGaiACQYgKahClASACQYgIaiACQYgGahB4IAJBiAhqEEQMAQsL
    IAJByAhqIAJBiANqEIUBIAJByAlqQaiLwAAQXyACQYgKaiACQcgJahCLASACQYgGaiACQYgKahClASACQcgIaiACQYgGa
    hB4IAJByAhqEERBACEBA0AgAUH4A0ZFBEAgAkHICGogAkGIA2oQSCACQcgJaiABQeCLwABqEF8gAUE4aiEBIAJBiApqIA
    JByAlqEIsBIAJBiAZqIAJBiApqEKUBIAJByAhqIAJBiAZqEHggAkHICGoQRAwBCwsgAkGICmpB2I/AABBfIAJBiAlqIAJ
    BiApqEIsBQQAhAQNAIAFByAZGBEACQCACQcgJaiACQYgDahCFASACQcgKakHYlsAAEF8gAkGICmogAkHICmoQiwEgAkGI
    BmogAkGICmoQpQEgAkHICWogAkGIBmoQeCACQcgJahBEQQAhAQNAIAFBkAZGDQEgAkHICWogAkGIA2oQSCACQcgKaiABQ
    ZCXwABqEF8gAUE4aiEBIAJBiApqIAJByApqEIsBIAJBiAZqIAJBiApqEKUBIAJByAlqIAJBiAZqEHggAkHICWoQRAwACw
    ALBSACQYgJaiACQYgDahBIIAJByAlqIAFBkJDAAGoQXyABQThqIQEgAkGICmogAkHICWoQiwEgAkGIBmogAkGICmoQpQE
    gAkGICWogAkGIBmoQeCACQYgJahBEDAELCyACQYgJaiACQcgEahBIIAJBiAZqIAJBiAhqEKUBIAJBiAZqIAJByAlqEEgg
    AkEIaiACQYgGahClASACQYgGaiACQYgJahClASACQYgGaiACQcgIahBIIAJByABqIAJBiAZqEKUBIAJBiAZqIAJByAhqE
    KUBIAJBiAZqIAJByAlqEEggAkGIAWogAkGIBmoQpQEgACACQQhqQcABEGcaIAJBgAtqJAALzQ0CE38IfiMAQYADayIBJA
    AgADQCOCIUIBR+QoCAgBBaBEAgABASCyABQeABakHoABByGiABQcgBaiAAKQMAIhggGEI/hyIZIBggGRAxIAEgASkDyAE
    iFEL//////////wODNwPYASABQdABaikDACIXQgaGIBRCOoiEIRUgF0I6iCEaIABBCGoiCyEFIAAhBkEBIQcDQCAHQQZP
    BEAgAEEYaiEMIABBKGohCyAAQRBqIQcgACkDMCEYQQQhBkEAIQkgAUGgAWohDUEDIQpBAiEIQQchBQJAAkADQCAFQQpLD
    QIgBiAIIAYgCEsbIQ4gBiAKIAYgCksbQQN0QWhqIQ8gAUGYAWogBUEDdCIQIABqQVBqKQMAIhQgFEI/hyAYIBhCP4ciGR
    AxIAVBAWoiEUEBdiESIA0pAwAhFyABKQOYASEUIAshAyAHIQQgBUF7aiITIQICQANAIAIgDkcEQCACQQdGDQIgAUGIAWo
    gBCkDACIWIBZCP4cgAykDACIWIBZCP4cQMSABKQOIASIWIBR8IhQgFlStIAFBkAFqKQMAIBd8fCEXIANBeGohAyAEQQhq
    IQQgAkEBaiECDAELCyABQdgBaiAQaiAUQgGGIhYgFXwiFUL//////////wODNwMAIAFB+ABqIAAgE0EDdGopAwAiGyAbQ
    j+HIBggGRAxIBUgFlStIBdCAYYgFEI/iIQgGnx8IhRCOochGiAUQgaGIBVCOoiEIRkgBUECaiEFIAFBgAFqKQMAIRcgAS
    kDeCEUIAshAyAJIQIDQCACIA9GBEAgAUHYAGogACASQQN0aikDACIVIBVCP4ciFiAVIBYQMSABQdgBaiARQQN0aiAUQgG
    GIhYgGXwiFSABKQNYfCIZQv//////////A4M3AwAgGSAVVK0gAUHgAGopAwAgFSAWVK0gF0IBhiAUQj+IhCAafHx8fCIU
    QjqHIRogFEIGhiAZQjqIhCEVIApBAmohCiAJQRBqIQkgCEECaiEIIAZBAWohBiAHQRBqIQcMAwsgAkEgRg0DIAFB6ABqI
    AIgDGopAwAiFSAVQj+HIAMpAwAiFSAVQj+HEDEgASkDaCIVIBR8IhQgFVStIAFB8ABqKQMAIBd8fCEXIANBeGohAyACQQ
    hqIQIMAAsACwtBB0EHQbSewAAQPAALQQdBB0HEnsAAEDwACyABQagBaiAAKQMoIhQgFEI/hyAYIBhCP4ciFBAxIAEgFSA
    BKQOoASIVQgGGIhl8IhdC//////////8DgzcDsAIgAUG4AWogGCAUIBggFBAxIAEgFyAZVK0gAUGwAWopAwBCAYYgFUI/
    iIQgGnx8IhhCBoYgF0I6iIQiFyABKQO4AXwiFEL//////////wODNwO4AiABIBQgF1StIAFBwAFqKQMAIBhCOod8fEIGh
    iAUQjqIhDcDwAIgAUHIAmogAUHYAWoQBSAAIAFByAJqEGsgAEECNgI4IAFBgANqJAAPCyABQcgAaiAAIAdBA3QiDGopAw
    AiFCAUQj+HIBggGRAxIAdBAWoiDUEBdiEOIAFB0ABqKQMAIRcgASkDSCEUIAghAiAGIQMgCiEEIAshCQNAIAJFBEAgAUH
    YAWogDGogFEIBhiIWIBV8IhVC//////////8DgzcDACABQShqIAAgDUEDdCIMaikDACIbIBtCP4cgGCAZEDEgFSAWVK0g
    F0IBhiAUQj+IhCAafHwiFEI6hyEaIBRCBoYgFUI6iIQhFiAHQQJqIQkgAUEwaikDACEXQQAhAiABKQMoIRQgBSEDIAshB
    ANAIAIgCGpFBEAgAUEIaiAAIA5BA3RqKQMAIhUgFUI/hyIbIBUgGxAxIAFB2AFqIAxqIBRCAYYiGyAWfCIVIAEpAwh8Ih
    ZC//////////8DgzcDACAWIBVUrSABQRBqKQMAIBUgG1StIBdCAYYgFEI/iIQgGnx8fHwiFEI6hyEaIBRCBoYgFkI6iIQ
    hFSAFQRBqIQUgCEEBaiEIIAZBEGohBiAKQQJqIQogCSEHDAQLIAIgB2oiDUEGTQRAIAFBGGogBCkDACIVIBVCP4cgAykD
    ACIVIBVCP4cQMSABKQMYIhUgFHwiFCAVVK0gAUEgaikDACAXfHwhFyADQXhqIQMgAkF/aiECIARBCGohBAwBCwsgDUEHQ
    aSewAAQPAALIARBBk0EQCABQThqIAkpAwAiFiAWQj+HIAMpAwAiFiAWQj+HEDEgASkDOCIWIBR8IhQgFlStIAFBQGspAw
    AgF3x8IRcgAkF/aiECIANBeGohAyAEQX9qIQQgCUEIaiEJDAELCwsgBEEHQZSewAAQPAAL7wwBBH8jAEHADWsiAiQAAkA
    gACgCgAYiA0EBRwRAIAEoAoAGIgRBAUYNAQJAAkACQAJAIARBA00EQCADQX5xQQJGDQEgAiAAEI4BIAJBgAJqEC8gAkGA
    BGoQLyACQYAGahAvIAJBgAhqIAAQjgEgAkGACmoQLyACIAEQGSACQYAIaiAAQYACaiIFEJYBIAJBgAhqEKwBIAJBgAJqI
    AJBgAhqEJIBIAJBgAJqIAEQGSACQYAIaiAFEJIBIAJBgAhqIABBgARqIgMQlgEgAkGACGoQrAEgAkGABmogAkGACGoQkg
    EgBEECRg0CIAJBwAxqIAFBgAVqEF4gAkGABmogAkHADGoQogEMAwsgAiAAEI4BIAJBgAJqEC8gAkGABGoQLyACQYAGahA
    vIAIgARAZAkACQCAEQQRGIgQNACAAKAKABkEERg0AIAJBgARqIABBgAJqEJIBIAJBgARqIAFBgAJqEBkMAQsgAkHADGpB
    OBByGiACQQE2AvgMIAJBgA1qQTgQchogAkG4DWpBATYCACACQYAIakE4EHIaIAJBATYCuAggAkHACGpBOBByGiACQfgIa
    kEBNgIAIAJBgApqIABBgANqIgMQXiACQYAIaiACQYAKahCQASACQYAKaiABQYADaiIFEF4gAkGACGogAkGACmoQDyACQc
    AMahCpASAERQRAIAJBgApqIAMQXiACQcAMaiACQYAKahCQASACQYAKaiABQYACahBeIAJBwAxqIAJBgApqEA8LIAAoAoA
    GQQRHBEAgAkGACmogAEGAAmoQXiACQcAMaiACQYAKahCQASACQYAKaiAFEF4gAkHADGogAkGACmoQDwsgAkGABGogAkHA
    DGogAkGACGoQoQEgAkGABGoQZgsgAkGACGogABCOASACQYAKaiABEI4BIAJBgAhqIABBgAJqIgQQlgEgAkGACGoQrAEgA
    kGACmogAUGAAmoiBRCWASACQYAKahCsASACQYACaiACQYAIahCSASACQYACaiACQYAKahAZIAJBgAhqIAQQkgEgAkGACG
    ogAEGABGoiAxCWASACQYAIahCsASACQYAKaiAFEJIBIAJBgApqIAFBgARqIgUQlgEgAkGACmoQrAEgAkGABmogAkGACGo
    QkgEgAkGABmogAkGACmoQGSACQYAIaiACEJIBIAJBgAhqECsgAkGACmogAkGABGoQkgEgAkGACmoQKyACQYACaiACQYAI
    ahCWASAEIAJBgAJqEJIBIAQgAkGACmoQlgEgAkGABmogAkGACmoQlgEgAkGABGogAkGACGoQlgEgAkGACGogABCSASACQ
    YAIaiADEJYBIAJBgAhqEKwBIAJBgApqIAEQkgEgAkGACmogBRCWASACQYAKahCsASACQYAIaiACQYAKahAZIAJBgARqIA
    JBgAhqEJYBIAJBgAhqIAMQkgEgAkGACGogBRAZIAJBgApqIAJBgAhqEJIBIAJBgApqECsgAyACQYAEahCSASADIAJBgAp
    qEJYBIAJBgAZqIAJBgApqEJYBIAJBgAhqEGYgBCACQYAIahCWAQwDCyAAIAEQBgwECyACQcAMaiABQYAFahBeIAJBgAxq
    IAJBwAxqQcAAEGcaIAJBgAZqIAJBgAxqEKMBCyACQYAGahBmIAJBgAhqIAIQkgEgAkGACGoQKyACQYACaiACQYAIahCWA
    SAFIAJBgAJqEJIBIAJBgARqIAJBgAhqEJIBIAJBgAhqIAAQkgEgAkGACGogAxCWASACQYAIahCsASACQYAKaiABEJIBIA
    JBgApqIAFBgARqEJYBIAJBgApqEKwBIAJBgAhqIAJBgApqEBkgAkGABGogAkGACGoQlgEgAkGACGogAxCSAQJAIARBAkc
    EQCACQcAMaiABQYAFahBeIAJBgAhqIAJBwAxqEKIBDAELIAJBwAxqIAFBgAVqEF4gAkGADGogAkHADGpBwAAQZxogAkGA
    CGogAkGADGoQowELIAJBgAhqEGYgAkGACmogAkGACGoQkgEgAkGACmoQKyADIAJBgARqEJIBIAMgAkGACmoQlgEgAkGAB
    mogAkGACmoQlgEgAkGACGoQZiAFIAJBgAhqEJYBCyACQYAGahCsASACQYAGahBmIAAgAhCSASAAIAJBgAZqEJYBIABBBT
    YCgAYgABCZAQwBCyAAIAEQbAsgAkHADWokAAuaCQIPfwt+IwBBwAJrIgIkACACQeAAakGgp8AAEF8gAEE4EHIhDCACQZg
    BakHwABByGiACQZACakEwEHIaIAwQdCACIAEpAwAiFEL9//P/z///+QF+Qv//////////A4MiETcDiAIgAkHQAGogEUIA
    IAIpA2AiGCAYQj+HIhoQMSAUIAIpA1AiEXwiFiARVK0gAkHYAGopAwAgFEI/h3x8IhRCOocgASkDCCIRQj+HfCARIBRCB
    oYgFkI6iIQiEXwiEiARVK18IRNBASEDAkADQAJAIANBB0YEQCACQZACaiEJIAJB6ABqIQpBByEEIAJB4ABqIQ0gAkGIAm
    ohDkEGIQ8MAQsgA0EBdiIAQQFqIQUgCiAAayEGIAkgAEEDdCIHayEAIAdBCGohCCACQUBrIANBA3QiBCACQeAAamopAwA
    iFiAWQj+HIhQgAikDiAIiESARQj+HEDEgAkHIAGopAwAgEiAVfCIRIBJUrSATIBd8fHwgESACKQNAfCITIBFUrXwhEiAD
    QQFqIQcDQCADIAVNBEAgAkGIAmogBGogE0L9//P/z///+QF+Qv//////////A4MiETcDACACQTBqIBFCACAYIBoQMSACQ
    SBqIBFCACAWIBQQMSACQZgBaiADQQR0aiIAIAJBKGopAwAiGzcDCCAAIAIpAyAiGTcDACACKQMwIhEgE3wiFiARVK0gAk
    E4aikDACASfHwiFEI6hyABIAdBA3RqKQMAIhFCP4d8IBEgFEIGhiAWQjqIhCIRfCISIBFUrXwhEyAVIBl8IhUgGVStIBc
    gG3x8IRcgCUEIaiEJIApBAWohCiAHIQMMAwsgBkEGSw0DIAJBEGogAkHgAGogCGopAwAgAkHgAGogAGopAwB9IhEgEUI/
    hyACQYgCaiAAaikDACACQYgCaiAIaikDAH0iESARQj+HEDEgAikDECIRIBN8IhMgEVStIAJBGGopAwAgEnx8IRIgBUEBa
    iEFIABBeGohACAGQX9qIQYgCEEIaiEIDAALAAsLA0ACQCAEQQ1HBEAgDyAEQQF2IgBrIQUgDiAAQQN0IgtrIRAgDSALay
    EIIBMgF3wgEiAVfCITIBJUrXwhEiAEQQFqIQdBMCEAIAkhBiAKIQMDQCAAIAtGDQIgBUEGTQRAIAIgAyALaikDACAAIAh
    qKQMAfSIRIBFCP4cgACAQaikDACAGIAtqKQMAfSIRIBFCP4cQMSACKQMAIhEgE3wiEyARVK0gAkEIaikDACASfHwhEiAF
    QX9qIQUgBkEIaiEGIANBCGohAyAAQXhqIQAMAQsLIAVBB0HknsAAEDwACyAMIBJC//////////8DgzcDMCACQcACaiQAD
    wsgBEEDdCAMakFIaiATQv//////////A4M3AwAgEkI6hyABIAdBA3RqKQMAIhFCP4d8IBEgEkIGhiATQjqIhCIRfCISIB
    FUrXwhEyAXIARBBHQgAmpBOGoiAEEIaikDAH0gFSAAKQMAIhFUrX0hFyAOQQhqIQ4gDUEIaiENIA9BAWohDyAVIBF9IRU
    gByEEDAALAAsgBkEHQdSewAAQPAAL+QkBBH8jAEGACWsiAiQAIAJBgAhqIAAQXiACIAJBgAhqEF4gAkGACGogAEGAAWoi
    BBBeIAJBgAFqIAJBgAhqEF4gAkGACGogARBeIAIgAkGACGoQDyACQYAIaiABQYABaiIFEF4gAkGAAWogAkGACGoQDyAAK
    AKABiEDAkACQCABKAKABkECRwRAIANBAkYNASACQYAIaiAAQYAFahBeIAJBgAJqIAJBgAhqEF4gAkGACGogAUGABWoQXi
    ACQYACaiACQYAIahAPDAILIANBAkYEQCACQYAIaiAAQYAFahBeIAJBgAdqIAJBgAhqQcAAEGcaIAJBgAZqIAJBgAdqEIU
    BIAJBgAhqIAFBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGABmogAkGAB2oQSCACQYAIakE4EHIaIAJBATYCuAggAkHA
    CGpBOBByIAJB+AhqQQE2AgAgAkGACGogAkGABmoQpQEQsgEgAkGAAmogAkGACGpBgAEQZxoMAgsgAkGACGogAEGABWoQX
    iACQYACaiACQYAIahBeIAJBgAhqIAFBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGAAmogAkGAB2oQoAEMAQsgAkGACG
    ogAUGABWoQXiACQYACaiACQYAIahBeIAJBgAhqIABBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGAAmogAkGAB2oQoAE
    LIAJBgAhqIAAQXiACQYADaiACQYAIahBeIAJBgAhqIAEQXiACQYAEaiACQYAIahBeIAJBgAhqIAQQXiACQYADaiACQYAI
    ahCVASACQYADahCoASACQYAIaiAFEF4gAkGABGogAkGACGoQlQEgAkGABGoQqAEgAkGABWogAkGAA2oQXiACQYAFaiACQ
    YAEahAPIAJBgAZqIAIQXiACQYAGaiACQYABahCVASACQYAGahA6IAJBgAVqIAJBgAZqEJUBIAJBgAhqIAAQXiACQYADai
    ACQYAIahCQASACQYAIaiAAQYAFaiIDEF4gAkGAA2ogAkGACGoQlQEgAkGAA2oQqAEgAkGACGogARBeIAJBgARqIAJBgAh
    qEJABIAJBgAhqIAFBgAVqIgEQXiACQYAEaiACQYAIahCVASACQYAEahCoASACQYAHaiACQYADahBeIAJBgAdqIAJBgARq
    EA8gAkGABmogAhCQASACQYAGaiACQYACahCVASACQYAGahA6IAJBgAdqIAJBgAZqEJUBIAJBgAhqIAQQXiACQYADaiACQ
    YAIahCQASACQYAIaiADEF4gAkGAA2ogAkGACGoQlQEgAkGAA2oQqAEgAkGACGogBRBeIAJBgARqIAJBgAhqEJABIAJBgA
    hqIAEQXiACQYAEaiACQYAIahCVASACQYAEahCoASACQYAIaiACQYADahBeIAJBgAhqIAJBgARqEA8gAkGABmogAkGAAWo
    QkAEgAkGABmogAkGAAmoQlQEgAkGABmoQOiACQYAIaiACQYAGahCVASACQYABahBVIAIgAkGAAWoQlQEgACACIAJBgAVq
    EKEBIAJBgAJqEFUgAkGAAmoQqAEgAEGAA2ogAkGAAmoQkAEgAEGAAmoQqQEgAkGACGoQqAEgAkGACGoQVSAAQYAEaiIBI
    AJBgAhqIAJBgAdqEKEBIAAQrAEgARCsASAAQQQ2AoAGIAJBgAlqJAALnwgBB38jAEGgC2siASQAIAFBCGpBoKfAABBfIA
    FBCGpBARCeAQNAIAJBMEYEQCABIAEpAzhCAYc3AzggAUEIakEBEJ4BIAFBCGpBARA7QQAhAiABQYABakE4EHIaIAFB4Ap
    qQTgQchogAUGACWpBOBByGiABQQE2ArgBIAFBwAFqQTgQciEEIAFB+AFqQQE2AgAgAUGAAmpBOBByGiABQbgCakEBNgIA
    IAFBwAJqQTgQchogAUH4AmpBATYCACABQYADakE4EHIaIAFBuANqQQE2AgAgAUHAA2pBOBByGiABQfgDakEBNgIAIAFBg
    ARqQTgQchogAUG4BGpBATYCACABQcAEakE4EHIaIAFB+ARqQQE2AgAgAUGABWpBOBByGiABQbgFakEBNgIAIAFBwAVqQT
    gQchogAUH4BWpBATYCACABQYAGakE4EHIaIAFBuAZqQQE2AgAgAUHABmpBOBByGiABQfgGakEBNgIAIAFBgAdqQTgQcho
    gAUG4B2pBATYCACABQcAHakE4EHIaIAFB+AdqQQE2AgAgAUGACGogAUHgCmpBOBBnGiABQbgIakEBNgIAIAFBwAhqIAFB
    gAlqQTgQZxogAUH4CGpBATYCACABQYAJakHnABByGiABQegJaiAAEIUBIAFB6AlqEEQgAUGoCmogAUEIahBfIAFBqApqE
    EQgAUGoCmoQKUEDaiIFQQJ2IgNBAWohBgJAAkACQAJAAkACQANAAkAgAiAGRgRAIAFBgAFqEGkgBCABQegJahClASABQe
    AKakE4EHIaIAFBATYCmAtBgHkhAgwBCyABQagKaiABQagKakEEEIwBIgcQngEgAUGoCmoQRCACQecARg0CIAFBgAlqIAJ
    qIAc6AAAgAUGoCmpBBBA7IAJBAWohAgwBCwsDQCACBEAgAUHgCmogAUGAAWogAmoiBEHAB2oQpQEgBEGACGoiBCABQeAK
    ahClASAEIAFB6AlqEEggAkFAayECDAELCyAFQZwDTw0BIAFBgAlqIANqLAAAIgJBD0sNAiABQUBrIAFBgAFqIAJBBnRqE
    IUBIANBf2ohAgNAIAJBf0YNBiABQUBrEAMgAUFAaxADIAFBQGsQAyABQUBrEAMgAkHmAEsNBCABQYAJaiACai0AACIDQQ
    9LDQUgAUFAayABQYABaiADQQZ0ahBIIAJBf2ohAgwACwALQecAQecAQYSjwAAQPAALIANB5wBBlKPAABA8AAsgAkEQQaS
    jwAAQPAALIAJB5wBBtKPAABA8AAsgA0EYdEEYdUEQQcSjwAAQPAALIAFBQGsQEiAAIAFBQGsQpQEgAUGgC2okAAUgAUEI
    aiACaiIDIANBCGopAwBCOYZCgICAgICAgIACgyADKQMAQgGHhDcDACACQQhqIQIMAQsLC8EHAhJ/BX4jAEGQAmsiBCQAI
    ABB8AAQciEPIARBMGpB4AEQchogBEEwaiEAAkADQCADQThGBEACQCAPIAQpAzAiGEL//////////wODNwMAIAFBCGohCS
    ACQQhqIQogAiEMIAEhDUF4IRBBASEGIBghFSAEQThqKQMAIhkhFwNAAkAgF0IGhiAVQjqIhCEWIBdCOochFyAGQQdGBEA
    gAUEIaiEMIAJBCGohDUEHIQBBBiEKDAELIAsgBkEBdiIFayEAIAwgBUEDdCIIayERIA0gCGshEiAEQTBqIAZBBHRqIgVB
    CGopAwAgGXwgBSkDACIVIBh8IhggFVStfCIZIBd8IBYgGHwiFSAYVK18IRcgCEFQaiETIAggEGohFCAGQQFqIQ5BACEDI
    AkhByAKIQUDQCADIBRGBEAgDyAGQQN0aiAVQv//////////A4M3AwAgDEEIaiEMIA1BCGohDSALQQFqIQsgEEF4aiEQIA
    4hBgwDCyADIBNGDQYgAEEGSw0DIARBEGogAyARaikDACAFIAhqKQMAfSIWIBZCP4cgByAIaikDACADIBJqKQMAfSIWIBZ
    CP4cQMSAEKQMQIhYgFXwiFSAWVK0gBEEYaikDACAXfHwhFyAAQX9qIQAgB0EIaiEHIAVBCGohBSADQXhqIQMMAAsACwsD
    QAJAIABBDUcEQCAKIABBAXYiBWshByACIAVBA3QiCWshCCABIAlrIQsgGSAAQQR0IARqQUBqIgVBCGopAwB9IBggBSkDA
    CIVVK19IhkgF3wgGCAVfSIYIBZ8IhcgGFStfCEVIABBAWohBkEwIQMgDCEFIA0hDgNAIAMgCUYNAiAHQQZNBEAgBCADIA
    hqKQMAIAkgDmopAwB9IhYgFkI/hyAFIAlqKQMAIAMgC2opAwB9IhYgFkI/hxAxIAQpAwAiFiAXfCIXIBZUrSAEQQhqKQM
    AIBV8fCEVIAdBf2ohByAFQQhqIQUgDkEIaiEOIANBeGohAwwBCwsgB0EHQYSewAAQPAALIA8gFjcDaCAEQZACaiQADwsg
    DyAAQQN0aiAXQv//////////A4M3AwAgFUIGhiAXQjqIhCEWIAJBCGohAiABQQhqIQEgCkEBaiEKIBVCOochFyAGIQAMA
    AsACwUgBEEgaiACIANqKQMAIhUgFUI/hyABIANqKQMAIhUgFUI/hxAxIAAgBEEoaikDADcDCCAAIAQpAyA3AwAgAEEQai
    EAIANBCGohAwwBCwsgAEEHQfSdwAAQPAALQQdBB0HkncAAEDwAC8sIAQV/IABBeGoiASAAQXxqKAIAIgNBeHEiAGohAgJ
    AAkAgA0EBcQ0AIANBA3FFDQEgASgCACIDIABqIQAgASADayIBQey4wQAoAgBGBEAgAigCBEEDcUEDRw0BQeS4wQAgADYC
    ACACIAIoAgRBfnE2AgQgASAAQQFyNgIEIAAgAWogADYCAA8LIAEgAxAVCwJAIAJBBGoiBCgCACIDQQJxBEAgBCADQX5xN
    gIAIAEgAEEBcjYCBCAAIAFqIAA2AgAMAQsCQCACQfC4wQAoAgBHBEBB7LjBACgCACACRg0BIAIgA0F4cSICEBUgASAAIA
    JqIgBBAXI2AgQgACABaiAANgIAIAFB7LjBACgCAEcNAkHkuMEAIAA2AgAPC0HwuMEAIAE2AgBB6LjBAEHouMEAKAIAIAB
    qIgA2AgAgASAAQQFyNgIEQey4wQAoAgAgAUYEQEHkuMEAQQA2AgBB7LjBAEEANgIAC0GMucEAKAIAIgIgAE8NAkHwuMEA
    KAIAIgBFDQICQEHouMEAKAIAIgNBKUkNAEH8uMEAIQEDQCABKAIAIgQgAE0EQCAEIAEoAgRqIABLDQILIAEoAggiAQ0AC
    wtBlLnBAAJ/Qf8fQYS5wQAoAgAiAEUNABpBACEBA0AgAUEBaiEBIAAoAggiAA0ACyABQf8fIAFB/x9LGws2AgAgAyACTQ
    0CQYy5wQBBfzYCAA8LQey4wQAgATYCAEHkuMEAQeS4wQAoAgAgAGoiADYCACABIABBAXI2AgQgACABaiAANgIADwtBlLn
    BAAJ/AkAgAEGAAk8EQEEfIQIgAUIANwIQIABB////B00EQCAAQQYgAEEIdmciAmtBH3F2QQFxIAJBAXRrQT5qIQILIAFB
    HGogAjYCACACQQJ0QeS3wQBqIQMCQAJAAkACQAJAQdi1wQAoAgAiBEEBIAJBH3F0IgVxBEAgAygCACIDQQRqKAIAQXhxI
    ABHDQEgAyECDAILQdi1wQAgBCAFcjYCACADIAE2AgAMAwsgAEEAQRkgAkEBdmtBH3EgAkEfRht0IQQDQCADIARBHXZBBH
    FqQRBqIgUoAgAiAkUNAiAEQQF0IQQgAiEDIAJBBGooAgBBeHEgAEcNAAsLIAIoAggiACABNgIMIAIgATYCCCABQRhqQQA
    2AgAgASACNgIMIAEgADYCCAwCCyAFIAE2AgALIAFBGGogAzYCACABIAE2AgwgASABNgIIC0GUucEAQZS5wQAoAgBBf2oi
    ADYCACAADQNBhLnBACgCACIADQFB/x8MAgsgAEEDdiICQQN0Qdy1wQBqIQACf0HUtcEAKAIAIgNBASACdCICcQRAIAAoA
    ggMAQtB1LXBACACIANyNgIAIAALIQIgACABNgIIIAIgATYCDCABIAA2AgwgASACNgIIDwtBACEBA0AgAUEBaiEBIAAoAg
    giAA0ACyABQf8fIAFB/x9LGws2AgALC9AHAgp/An4jAEEwayIIJABBJyECAkAgADUCACIMQpDOAFQEQCAMIQ0MAQsDQCA
    IQQlqIAJqIgBBfGogDEKQzgCAIg1C8LF/fiAMfKciA0H//wNxQeQAbiIEQQF0QeaowABqLwAAOwAAIABBfmogBEGcf2wg
    A2pB//8DcUEBdEHmqMAAai8AADsAACACQXxqIQIgDEL/wdcvViANIQwNAAsLIA2nIgBB4wBKBEAgAkF+aiICIAhBCWpqI
    A2nIgNB//8DcUHkAG4iAEGcf2wgA2pB//8DcUEBdEHmqMAAai8AADsAAAsCQCAAQQpOBEAgAkF+aiIFIAhBCWpqIABBAX
    RB5qjAAGovAAA7AAAMAQsgAkF/aiIFIAhBCWpqIABBMGo6AAALQScgBWshA0EBIQJBK0GAgMQAIAEoAgAiAEEBcSIGGyE
    EIABBHXRBH3VB9KrAAHEhByAIQQlqIAVqIQUCQCABKAIIQQFHBEAgASAEIAcQUw0BIAEoAhggBSADIAFBHGooAgAoAgwR
    BQAhAgwBCyABQQxqKAIAIgkgAyAGaiIGTQRAIAEgBCAHEFMNASABKAIYIAUgAyABQRxqKAIAKAIMEQUAIQIMAQsCQAJAA
    kACQCAAQQhxBEAgASgCBCEKIAFBMDYCBCABLQAgIQsgAUEBOgAgIAEgBCAHEFMNBUEAIQIgCSAGayIAIQRBASABLQAgIg
    cgB0EDRhtBA3FBAWsOAwIBAgMLQQAhAiAJIAZrIgAhCQJAAkACQEEBIAEtACAiBiAGQQNGG0EDcUEBaw4DAQABAgsgAEE
    BdiECIABBAWpBAXYhCQwBC0EAIQkgACECCyACQQFqIQIDQCACQX9qIgJFDQQgASgCGCABKAIEIAEoAhwoAhARAwBFDQAL
    QQEhAgwECyAAQQF2IQIgAEEBakEBdiEEDAELQQAhBCAAIQILIAJBAWohAgJAA0AgAkF/aiICRQ0BIAEoAhggASgCBCABK
    AIcKAIQEQMARQ0AC0EBIQIMAgsgASgCBCEHQQEhAiABKAIYIAUgAyABKAIcKAIMEQUADQEgBEEBaiEAIAEoAhwhAyABKA
    IYIQQDQCAAQX9qIgAEQCAEIAcgAygCEBEDAEUNAQwDCwsgASALOgAgIAEgCjYCBEEAIQIMAQsgASgCBCEGQQEhAiABIAQ
    gBxBTDQAgASgCGCAFIAMgASgCHCgCDBEFAA0AIAlBAWohACABKAIcIQMgASgCGCEBA0AgAEF/aiIARQRAQQAhAgwCCyAB
    IAYgAygCEBEDAEUNAAsLIAhBMGokACACC7gGAQV/IwBBgAhrIgIkACACIAAQXiACIAEQDyACQYABaiAAQYABaiIDEF4gA
    kGAAWogAUGAAWoiBRAPIAJBgAJqIABBgAJqIgQQXiACQYACaiABQYACaiIGEA8gAkGAA2ogABBeIAJBgANqIAMQlQEgAk
    GAA2oQqAEgAkGABGogARBeIAJBgARqIAUQlQEgAkGABGoQqAEgAkGAA2ogAkGABGoQDyACQYAEaiACEJABIAJBgARqIAJ
    BgAFqEJUBIAJBgANqIAJBgARqEH0gAkGAA2oQqAEgAkGABGogAxCQASACQYAEaiAEEJUBIAJBgARqEKgBIAJBgAVqIAUQ
    XiACQYAFaiAGEJUBIAJBgAVqEKgBIAJBgARqIAJBgAVqEA8gAkGABWogAkGAAWoQkAEgAkGABWogAkGAAmoQlQEgAkGAB
    GogAkGABWoQfSACQYAEahCoASACQYAFaiAAEJABIAJBgAVqIAQQlQEgAkGABWoQqAEgAkGABmogARBeIAJBgAZqIAYQlQ
    EgAkGABmoQqAEgAkGABWogAkGABmoQDyACQYAGaiACEJABIAJBgAZqIAJBgAJqEJUBIAJBgAZqIAJBgAVqELUBIAJBgAZ
    qEKgBIAJBgAVqIAIQkAEgAkGABWogAhCVASACIAJBgAVqEJUBIAIQqAEgAkGAAmpBDBCfASACQYACahBVIAJBgAJqEKgB
    IAJBgAdqIAJBgAFqEF4gAkGAB2ogAkGAAmoQlQEgAkGAB2oQqAEgAkGAAWogAkGAAmoQfSACQYABahCoASACQYAGakEME
    J8BIAJBgAZqEFUgAkGABmoQqAEgAkGABWogAkGABmoQkAEgAkGABWogAkGABGoQDyACQYACaiACQYADahCQASACQYACai
    ACQYABahAPIAJBgAVqIAJBgAJqELUBIAJBgAZqIAIQDyACQYABaiACQYAHahAPIAJBgAZqIAJBgAFqEJUBIAIgAkGAA2o
    QDyACQYAHaiACQYAEahAPIAJBgAdqIAIQlQEgACACQYAFahCQASAAEKgBIAMgAkGABmoQkAEgAxCoASAEIAJBgAdqEJAB
    IAQQqAEgAkGACGokAAv2BQEFfyMAQYAEayICJAAgAiAAEIUBIAIgARBIIAJBQGsgAEFAayIDEIUBIAJBQGsgAUFAayIFE
    EggAkGAAWogAEGAAWoiBBCFASACQYABaiABQYABaiIGEEggAkHAAWogABCFASACQcABaiADEHggAkHAAWoQRCACQYACai
    ABEIUBIAJBgAJqIAUQeCACQYACahBEIAJBwAFqIAJBgAJqEEggAkGAAmogAhClASACQYACaiACQUBrEHggAkHAAWogAkG
    AAmoQgAEgAkHAAWoQRCACQYACaiADEKUBIAJBgAJqIAQQeCACQYACahBEIAJBwAJqIAUQhQEgAkHAAmogBhB4IAJBwAJq
    EEQgAkGAAmogAkHAAmoQSCACQcACaiACQUBrEKUBIAJBwAJqIAJBgAFqEHggAkGAAmogAkHAAmoQgAEgAkGAAmoQRCACQ
    cACaiAAEKUBIAJBwAJqIAQQeCACQcACahBEIAJBgANqIAEQhQEgAkGAA2ogBhB4IAJBgANqEEQgAkHAAmogAkGAA2oQSC
    ACQYADaiACEKUBIAJBgANqIAJBgAFqEHggAkGAA2ogAkHAAmoQswEgAkGAA2oQRCACQcACaiACEKUBIAJBwAJqIAIQeCA
    CIAJBwAJqEHggAhBEIAJBgAFqQQwQUiACQcADaiACQUBrEIUBIAJBwANqIAJBgAFqEHggAkHAA2oQRCACQUBrIAJBgAFq
    EIABIAJBQGsQRCACQYADakEMEFIgAkHAAmogAkGAA2oQpQEgAkHAAmogAkGAAmoQSCACQYABaiACQcABahClASACQYABa
    iACQUBrEEggAkHAAmogAkGAAWoQswEgAkGAA2ogAhBIIAJBQGsgAkHAA2oQSCACQYADaiACQUBrEHggAiACQcABahBIIA
    JBwANqIAJBgAJqEEggAkHAA2ogAhB4IAAgAkHAAmoQpQEgABBEIAMgAkGAA2oQpQEgAxBEIAQgAkHAA2oQpQEgBBBEIAJ
    BgARqJAALxQUBBH8jAEHwEmsiACQAIAAQOEF/IQEgABCIAUUEQCAAQYADakE4EHIaIABBuANqQTgQchogAEG4A2ogAEGA
    A2oQVCAAQfAKakG4gMAAEF8gAEHwDWpB8IDAABBfIABB8ANqIABB8ApqIABB8A1qEEkgAEHwBGpBOBByGiAAQQE2AqgFI
    ABBsAVqQTgQchogAEHoBWpBATYCACAAQfAFakE4EHIaIABBATYCqAYgAEGwBmpBOBByGiAAQegGakEBNgIAIABB8AZqQT
    gQchogAEEBNgKoByAAQbAHakE4EHIaIABB6AdqQQE2AgBBf2ohAyAAQfAHahAqIABB8AdqIAAQfiAAQfAKahAqIABB8Ap
    qIABB8AdqEH4gAEHwDWoQKiAAQfANaiAAQfAHahB+IABB8A1qEJwBAkACQAJAA0AgAiEBIANBAkkNAyAAQfAKaiAAQfAE
    aiAAQfAFaiAAQfAGahAlIAFBxABNBEAgAEHwEGogAEHwBGogAEHwBWogAEHwBmoQRiABQQh0QdCrwABqIABB8BBqEJIBI
    AFBAWohAgJAAkAgAEG4A2ogA0F/aiIDEFcgAEGAA2ogAxBXa0EBag4DAQMAAwsgAEHwCmogAEHwB2ogAEHwBGogAEHwBW
    ogAEHwBmoQHiABQcMASw0DIABB8BBqIABB8ARqIABB8AVqIABB8AZqEEYgAkEIdEHQq8AAaiAAQfAQahCSASABQQJqIQI
    MAgsgAEHwCmogAEHwDWogAEHwBGogAEHwBWogAEHwBmoQHiABQcMASw0DIABB8BBqIABB8ARqIABB8AVqIABB8AZqEEYg
    AkEIdEHQq8AAaiAAQfAQahCSASABQQJqIQIMAQsLIAFBxQBBvIHAABA8AAtBxQBBxQBBzIHAABA8AAtBxQBBxQBB3IHAA
    BA8AAtBACEBCyAAQfASaiQAIAEL8gQBBH8jAEGADGsiAiQAIAIgABCOASACQYACahAvIAJBgARqIABBgAJqIgMQjgEgAk
    GABmoQLyACQYAIaiAAEI4BIAJBgApqIAEQjgEgAiABEBkgAkGABGogAUGAAmoiBBAZIAJBgAhqIAMQlgEgAkGACmogBBC
    WASACQYAIahCsASACQYAKahCsASACQYACaiACQYAIahCSASACQYACaiACQYAKahAZIAJBgAhqIAMQkgEgAkGACGogAEGA
    BGoiBRCWASACQYAKaiAEEJIBIAJBgApqIAFBgARqIgQQlgEgAkGACGoQrAEgAkGACmoQrAEgAkGABmogAkGACGoQkgEgA
    kGABmogAkGACmoQGSACQYAIaiACEJIBIAJBgAhqECsgAkGACmogAkGABGoQkgEgAkGACmoQKyACQYACaiACQYAIahCWAS
    ADIAJBgAJqEJIBIAMgAkGACmoQlgEgAkGABmogAkGACmoQlgEgAkGABGogAkGACGoQlgEgAkGACGogABCSASACQYAIaiA
    FEJYBIAJBgAhqEKwBIAJBgApqIAEQkgEgAkGACmogBBCWASACQYAKahCsASACQYAIaiACQYAKahAZIAJBgARqIAJBgAhq
    EJYBIAJBgAhqIAUQkgEgAkGACGogBBAZIAJBgApqIAJBgAhqEJIBIAJBgApqECsgBSACQYAEahCSASAFIAJBgApqEJYBI
    AJBgAZqIAJBgApqEJYBIAJBgAhqEGYgAyACQYAIahCWASACQYAGahCsASACQYAGahBmIAAgAhCSASAAIAJBgAZqEJYBIA
    BBBTYCgAYgABCZASACQYAMaiQAC68EAQV/IwBBkAZrIgIkACAAQUBrIQQCQCABQfgAaigCACABKAI4aqwgAEH4AGooAgA
    iAyAAKAI4IgVqrH5CgICAEFMNACAFQQJOBH8gABASIAAoAngFIAMLQQJIDQAgBBASCyACQaCnwAAQX0EAIQMgAkE4akHw
    ABByGiABQUBrIQUDQCADQThGBEAgAkHwAGohBkEAIQMDQCADQThGRQRAIAMgBmogAiADaikDADcDACADQQhqIQMMAQsLI
    AJBqAFqIAAQXyACQeABaiABEF8gAkGYAmogACABEAggAkGIA2ogBCAFEAggAkGoAWogBBBhIAJBqAFqEEQgAkHgAWogBR
    BhIAJB4AFqEEQgAkH4A2ogAkGoAWogAkHgAWoQCEEAIQMgAkHoBGpB8AAQchoDQCADQfAARkUEQCACQegEaiADaiACQZg
    CaiADaikDADcDACADQQhqIQMMAQsLIAJB6ARqIAJBiANqEGVBACEDA0AgA0HwAEZFBEAgAkGIA2ogA2oiASACQThqIANq
    KQMAIAEpAwB9NwMAIANBCGohAwwBCwsgAkGYAmogAkGIA2oQZSACQZgCahBFIAJB+ANqIAJB6ARqEGQgAkH4A2oQRSACQ
    dgFaiACQZgCahAFIAAgAkHYBWoQayAAQQM2AjggAkHYBWogAkH4A2oQBSAEIAJB2AVqEGsgAEECNgJ4IAJBkAZqJAAFIA
    JBOGogA2pCADcDACADQQhqIQMMAQsLC5QEAQF/IwBB0CJrIgMkACADQcAWakG4gMAAEF8gA0HIHGpB8IDAABBfIANBCGo
    gA0HAFmogA0HIHGoQSSADQYgBakE4EHIaIANBwAFqQTgQchogA0H4AWoQKgJAIAIQhAFFBEAgA0H4BGoQKiADQfgEaiAB
    EH4gA0H4BGoQSiADQfgHahBLIANB+AdqIAIQfyADQfgHahBHIANByBxqIANB+AdqEIUBIANBuAlqIANByBxqEIUBIANBy
    BxqIANBuAhqEIUBIANB+AlqIANByBxqEIUBIANBuApqECogA0G4DWoQYCADQbgKaiADQfgEahB+IANBwBNqECogA0HAE2
    ogA0H4BGoQfiADQcATahCcASADQcABaiADQYgBahBUQX9qIQIDQCACQQFNBEAgA0G4DWoQkwEgACADQbgNakGIBhBnGgw
    DBSADQbgNahAbIANBwBZqIANBuApqIANBuAlqIANB+AlqEBcCQAJAAkAgA0HAAWogAkF/aiICEFcgA0GIAWogAhBXa0EB
    ag4DAQIAAgsgA0HIHGogA0G4CmogA0H4BGogA0G4CWogA0H4CWoQFiADQcAWaiADQcgcahAGDAELIANByBxqIANBuApqI
    ANBwBNqIANBuAlqIANB+AlqEBYgA0HAFmogA0HIHGoQBgsgA0G4DWogA0HAFmoQBAwBCwALAAsgABBgCyADQdAiaiQAC8
    MDARV/A0AgAUHAAUYEQAJAIABBKGohCyAAQRRqKAIAIgwhCCAAQRBqKAIAIg0hAyAAQQxqKAIAIg4hAiAAKAIIIg8hASA
    AQRhqKAIAIhAhCiAAQRxqKAIAIhEhBCAAQSBqKAIAIhIhByAAQSRqKAIAIhMhBgNAIAchCSAEIQcgCiEEIAVBgAJGDQEg
    AiADcSEUIAIgA3MhFSAFIAtqKAIAIAVB9J7AAGooAgAgBEEadyAEQRV3cyAEQQd3cyAGaiAJIARBf3NxIAQgB3FyampqI
    gYgCGohCiAFQQRqIQUgAyEIIAIhAyABIQIgAUEedyABQRN3cyABQQp3cyAUIAEgFXFzaiAGaiEBIAkhBgwACwALBSAAIA
    FqIgNB6ABqIANBzABqKAIAIANBKGooAgAgA0EsaigCACICQRl3IAJBDndzIAJBA3ZzIANB4ABqKAIAIgJBD3cgAkENd3M
    gAkEKdnNqamo2AgAgAUEEaiEBDAELCyAAIAYgE2o2AiQgACAJIBJqNgIgIAAgByARajYCHCAAIAQgEGo2AhggACAIIAxq
    NgIUIAAgAyANajYCECAAIAIgDmo2AgwgACABIA9qNgIIC9YDAgZ/An4jAEHwAGsiASQAIAFBoKfAABBfIAFBOGogARBfI
    AAQRAJAAkACQCABAn8gACgCOCICQRBMBEAgAkF/ahA5DAELIAEpAzAiCEIBfCIHIAhUDQEgACkDMCIIQoCAgICAgICAgH
    9RQQAgB0J/URsNAiABQThqIAggB3+nECghByABIAEpA2ggB0I6hnw3A2ggACABQThqEGIgABBEQQILIgMQLSAAQQhqIQQ
    DQCADRQ0DIAEgASkDCEI5hkKAgICAgICAgAKDIAEpAwBCAYeEIgc3AwAgASAAKQMAIAd9IgdC//////////8DgzcDOEEA
    IQIDQCAHQjqHIQcgAkEoRkUEQCABIAJqIgVBCGoiBiAFQRBqKQMAQjmGQoCAgICAgICAAoMgBikDAEIBh4QiCDcDACABI
    AJqQUBrIAIgBGopAwAgCH0gB3wiB0L//////////wODNwMAIAJBCGohAgwBCwsgASABKQMwQgGHIgg3AzAgASAAKQMwIA
    h9IAd8Igc3A2ggACABQThqIAdCP4enQQFqEE8gA0F/aiEDDAALAAtBoKLAAEEZQbyiwAAQWwALQdCiwABBH0G8osAAEFs
    ACyAAQQE2AjggAUHwAGokAAuhAwEBfyMAQZADayIGJAAgBkEIakHAABByGiAGQcgAakGoAhByGiAGQcgAahBDA0AgAQRA
    IAZByABqQQAQPiABQX9qIQEMAQUCQCACBEAgBkHIAGogAiADEHoLIAQEQCAGQcgAaiAEIAUQegsgBkGIA2pCADcDACAGQ
    YADakIANwMAIAZB+AJqQgA3AwAgBkIANwPwAiAGKAJIIQEgBigCTCECIAZByABqQYABED4DQCAGKAJIQf8DcUHAA0ZFBE
    AgBkHIAGpBABA+DAELCyAGQawBaiABNgIAIAZBqAFqIAI2AgAgBkHIAGoQEUEAIQJBACEBA0AgAUEgRkUEQCAGQfACaiA
    BaiABQXxxIAZqQdAAaigCACACQX9zQRhxdjoAACACQQhqIQIgAUEBaiEBDAELCyAGQcgAahBDQQAhAQNAIAFBIEZFBEAg
    BkEIaiABaiAGQfACaiABai0AADoAACABQQFqIQEMAQsLQQAhAQNAIAFBIEYNASAAIAFqIAZBCGogAWotAAA6AAAgAUEBa
    iEBDAALAAsLCyAGQZADaiQAC6EDAQN/IwBBgAZrIgEkACABIABBgAFqIgMQXiABQYABaiADEF4gAUGAAWoQMiABQYACai
    ABEF4gAUGAAmogAEGAAmoiAhAPIAFBgANqIAIQXiABQYADahAyIAIgAUGAAWoQkAEgAiABQYABahCVASACEKgBIAIQpwE
    gAhCnASACEKgBIAFBgANqQQwQnwEgAUGAA2oQVSABQYADahCoASABQYAEaiABQYADahBeIAFBgARqIAIQDyABQYAFaiAB
    QYABahBeIAFBgAVqIAFBgANqEJUBIAFBgAVqEKgBIAIgAUGAAmoQDyABQYACaiABQYADahCQASABQYACaiABQYADahCVA
    SABQYADaiABQYACahCVASABQYADahCoASABQYABaiABQYADahB9IAFBgAFqEKgBIAFBgAVqIAFBgAFqEA8gAUGABWogAU
    GABGoQlQEgAUGAAmogABCQASABQYACaiABEA8gACABQYABahCQASAAEKgBIAAgAUGAAmoQDyAAEKcBIAAQqAEgAyABQYA
    FahCQASADEKgBIAFBgAZqJAALhQMBBH8CQAJAIAFBgAJPBEAgAEEYaigCACEEAkACQCAAIAAoAgwiAkYEQCAAQRRBECAA
    QRRqIgIoAgAiAxtqKAIAIgENAUEAIQIMAgsgACgCCCIBIAI2AgwgAiABNgIIDAELIAIgAEEQaiADGyEDA0AgAyEFIAEiA
    kEUaiIDKAIAIgFFBEAgAkEQaiEDIAIoAhAhAQsgAQ0ACyAFQQA2AgALIARFDQIgACAAQRxqKAIAQQJ0QeS3wQBqIgEoAg
    BHBEAgBEEQQRQgBCgCECAARhtqIAI2AgAgAkUNAwwCCyABIAI2AgAgAg0BQdi1wQBB2LXBACgCAEF+IAAoAhx3cTYCAA8
    LIABBDGooAgAiAiAAQQhqKAIAIgBHBEAgACACNgIMIAIgADYCCA8LQdS1wQBB1LXBACgCAEF+IAFBA3Z3cTYCAAwBCyAC
    IAQ2AhggACgCECIBBEAgAiABNgIQIAEgAjYCGAsgAEEUaigCACIARQ0AIAJBFGogADYCACAAIAI2AhgLC7MCAQF/IwBBg
    AtrIgUkACAFEC8gBUGAAmoQLyAFQYAEahAvIAVBgAZqQTgQchogBUEBNgK4BiAFQcAGakE4EHIaIAVB+AZqQQE2AgAgBU
    GAB2pBOBByGiAFQQE2ArgHIAVBwAdqQTgQchogBUH4B2pBATYCACAFQYAIakE4EHIaIAVBATYCuAggBUHACGpBOBByGiA
    FQfgIakEBNgIAIAEgAiAFQYAGaiAFQYAHaiAFQYAIahAeIAVBgAhqIAMQoAEgBUGABmogBBCgASAFQYAJaiAFQYAGaiAF
    QYAHahCRASAFIAVBgAlqEJIBIAVBgAlqIAVBgAhqEJsBIAVBgARqIAVBgAlqEJIBIAVBgARqEGYgACAFIAVBgAJqIAVBg
    ARqEHYgAEEDNgKABiAFQYALaiQAC7ECAQF/IwBBgAtrIgQkACAEEC8gBEGAAmoQLyAEQYAEahAvIARBgAZqQTgQchogBE
    EBNgK4BiAEQcAGakE4EHIaIARB+AZqQQE2AgAgBEGAB2pBOBByGiAEQQE2ArgHIARBwAdqQTgQchogBEH4B2pBATYCACA
    EQYAIakE4EHIaIARBATYCuAggBEHACGpBOBByGiAEQfgIakEBNgIAIAEgBEGABmogBEGAB2ogBEGACGoQJSAEQYAIaiAC
    EKABIARBgAZqIAMQoAEgBEGACWogBEGABmogBEGAB2oQkQEgBCAEQYAJahCSASAEQYAJaiAEQYAIahCbASAEQYAEaiAEQ
    YAJahCSASAEQYAEahBmIAAgBCAEQYACaiAEQYAEahB2IABBAzYCgAYgBEGAC2okAAvJAgEDfyMAQcACayIBJAAgASAAQU
    BrIgMQhQEgARADIAFBQGsgAxCFASABQUBrIABBgAFqIgIQSCABQYABaiACEIUBIAFBgAFqEAMgAiABEKUBIAIgARB4IAI
    QRCACEE4gAhBOIAIQRCABQYABakEMEFIgAUHAAWogAUGAAWoQhQEgAUHAAWogAhBIIAFBgAJqIAEQhQEgAUGAAmogAUGA
    AWoQeCABQYACahBEIAIgAUFAaxBIIAFBQGsgAUGAAWoQpQEgAUFAayABQYABahB4IAFBgAFqIAFBQGsQeCABIAFBgAFqE
    IABIAEQRCABQYACaiABEEggAUGAAmogAUHAAWoQeCABQUBrIAAQpQEgAUFAayADEEggACABEKUBIAAQRCAAIAFBQGsQSC
    AAEE4gABBEIAMgAUGAAmoQpQEgAxBEIAFBwAJqJAALrQIBA38jAEGABGsiAiQAIAIgABBeIAJBgAFqIABBgAFqIgMQXiA
    CQYACakE4EHIaIAJBATYCuAIgAkHAAmpBOBByGiACQfgCakEBNgIAIAJBgANqIAMQXiACIAEQDyACQYABaiABQYABaiIE
    EA8gAkGAAmogBBCQASACQYACaiABEJUBIAJBgANqIAAQlQEgAkGAAmoQqAEgAkGAA2oQqAEgAkGAA2ogAkGAAmoQDyACQ
    YACaiACEJABIAJBgAJqEDogAkGAA2ogAkGAAmoQlQEgAkGAA2oQqAEgAkGAAmogAkGAAWoQkAEgAkGAAmoQOiADIAJBgA
    NqEJABIAMgAkGAAmoQlQEgAkGAAWoQVSAAIAJBgAFqEJABIAAgAhCVASAAEKwBIAJBgARqJAALvQIBA38jAEGACGsiASQ
    AIAEgABCOASABQYACaiAAQYAEaiICEI4BIAFBgARqIABBgAJqIgMQjgEgAUGABmoQLyAAECIgAUGABmogABCSASABQYAG
    aiAAEJYBIAAgAUGABmoQlgEgABCsASABELYBIAEQrwEgACABEJYBIAFBgAJqECIgAUGAAmoQZiABQYAGaiABQYACahCSA
    SABQYAGaiABQYACahCWASABQYACaiABQYAGahCWASABQYACahCsASABQYAEahAiIAFBgAZqIAFBgARqEJIBIAFBgAZqIA
    FBgARqEJYBIAFBgARqIAFBgAZqEJYBIAFBgARqEKwBIAMQrgEgAxCvASACELYBIAIQrwEgAyABQYACahCWASACIAFBgAR
    qEJYBIABBBTYCgAYgABCaASABQYAIaiQAC7ICAQN/IwBBgAhrIgEkACAAKAKABkEBRwRAIAEgABCOASABQYACaiAAQYAC
    aiIDEI4BIAFBgARqIABBgARqIgIQjgEgAUGABmogABCOASABECIgAUGAAmogAhAZIAFBgAJqEK8BIAFBgAJqEKwBIAFBg
    ARqECIgAUGABmogAxAZIAFBgAZqEK8BIAIgABCWASACIAMQlgEgAhCsASACECIgACABEJIBIAEgAUGAAmoQlgEgARCsAS
    ABIAFBgARqEJYBIAEgAUGABmoQlgEgARCsASABECsgAUGAAmoQZiABQYAEahBmIAAgAUGAAmoQlgEgAyABQYAEahCSASA
    DIAFBgAZqEJYBIAIgARCWASAAQQRBBSAAKAKABkF+cUECRhs2AoAGIAAQmQELIAFBgAhqJAALigIBAn8jAEHgAWsiAiQA
    IAAQRCACQQhqQTAQchogAkIBNwMAIAJBOGogABBfIAJB8ABqIAEQXyACQagBakE4EHIaIAAQdANAIAJBOGogAkHwAGoQN
    UF/TARAA0ACQCADQQBMDQAgAkHwAGpBARA7IAJBARA7IAJBqAFqIAJBOGoQayACQagBaiACQfAAahBiIAJBqAFqEEQgAk
    E4aiACQagBaiACKQPYAUI/h6dBAWoiARBPIAJBqAFqIAAQayACQagBaiACEGEgAkGoAWoQRCAAIAJBqAFqIAEQTyADQX9
    qIQMMAQsLBSACQQEQLSACQfAAakEBEC0gA0EBaiEDDAELCyACQeABaiQAC54CAQF/IwBBgA1rIgMkACADIAEQaiADEJkB
    IANBiAZqIAIQXyADQYgGahBEIANBwAZqIANBiAZqEF8gA0HABmpBAxAoGiADQcAGahBEIANB+AZqIAMQagJAIANBwAZqE
    FpFBEAgA0HABmoQKUF/aiECA0AgAkEBTQRAIANB+AZqEJoBDAMLIANB+AZqEBoCQAJAIANBwAZqIAJBf2oiAhBXIANBiA
    ZqIAIQV2tBAWoOAwECAAILIANB+AZqIAMQDgwBCyADEJMBIANB+AZqIAMQDiADEJMBDAALAAsgA0H4BmoQsAEgA0H4B2o
    QqQEgA0H4CGoQrQEgA0H4CmoQrQEgA0EBNgL4DAsgACADQfgGakGIBhBnGiADQYANaiQAC5ACAQJ/IwBBgAJrIgUkACAF
    QYABaiAAEF4gAiAFQYABahCQASAFQYABaiAAQYABahBeIAQgBUGAAWoQkAEgBUGAAWogAEGAAmoiBhBeIAUgBUGAAWoQX
    iAFQYABaiAGEF4gAyAFQYABahCQASAFQYABaiABQYABaiIGEF4gBSAFQYABahAPIAVBgAFqIAEQXiADIAVBgAFqEA8gAi
    ADEH0gAhCoASAEIAUQfSAEEKgBIAUgAhCQASACEFUgAhCoASAFQYABaiAGEF4gBSAFQYABahAPIAMgBBCQASAFQYABaiA
    BEF4gAyAFQYABahAPIAMgBRB9IAMQqAEgBBA6IAQQqAEgACABEAsgBUGAAmokAAvkAQECfyMAQcABayIDJAAgAxBLIAAg
    ASACQR91IgQgAnMgBEF/c2pBAm0iAkF/akEfdhBtIAAgAUHAAWogAkEBc0F/akEfdhBtIAAgAUGAA2ogAkECc0F/akEfd
    hBtIAAgAUHABGogAkEDc0F/akEfdhBtIAAgAUGABmogAkEEc0F/akEfdhBtIAAgAUHAB2ogAkEFc0F/akEfdhBtIAAgAU
    GACWogAkEGc0F/akEfdhBtIAAgAUHACmogAkEHc0F/akEfdhBtIAMgABB/IAMQpgEgACADIARBAXEQbSADQcABaiQAC+Q
    BAQJ/IwBBgANrIgMkACADECogACABIAJBH3UiBCACcyAEQX9zakECbSICQX9qQR92EG8gACABQYADaiACQQFzQX9qQR92
    EG8gACABQYAGaiACQQJzQX9qQR92EG8gACABQYAJaiACQQNzQX9qQR92EG8gACABQYAMaiACQQRzQX9qQR92EG8gACABQ
    YAPaiACQQVzQX9qQR92EG8gACABQYASaiACQQZzQX9qQR92EG8gACABQYAVaiACQQdzQX9qQR92EG8gAyAAEH4gAxCcAS
    AAIAMgBEEBcRBvIANBgANqJAALvAEBAn8jAEGwAWsiAiQAIAJBMBByIQIDQCADQTBGBEACQCABQTBqIQEgAkEwaiACEHV
    BACEDA0AgA0EwRg0BIAIgA2ogASADai0AADoAACADQQFqIQMMAAsACwUgAiADaiABIANqLQAAOgAAIANBAWohAwwBCwsg
    AkHwAGogAhB1IABBOBByIgBBATYCOCAAQUBrQTgQciAAQfgAakEBNgIAIAAgAkHwAGoQpQEgAkEwahClASACQbABaiQAC
    9QBAQJ/IwBBgANrIgEkACABIAAQXiABQYABaiAAQYABaiICEF4gAUGAAmogABBeIAFBgAJqIAIQDyABIAIQlQEgAUGAAW
    oQVSABQYABaiAAEJUBIAEQqAEgAUGAAWoQqAEgACABEJABIAAgAUGAAWoQDyABQYABaiABQYACahCQASABQYABahBVIAF
    BgAFqIAFBgAJqEJUBIAFBgAFqEKgBIAFBgAFqEDogACABQYABahCVASABQYACahCnASACIAFBgAJqEJABIAAQrAEgAUGA
    A2okAAvEAQEBfyMAQYADayIDJAAgA0EIaiABEIUBAkAgAkUEQCADQQhqEAcMAQsgA0EIaiACEKUBCyADQcgAakHYo8AAE
    F8gA0GAAWogA0HIAGoQiwEgA0HAAWogA0EIahCFASADQcABahADIANBwAFqIAEQSCAAIAEQhQEgACADQQhqEEggA0GAAm
    ogA0HAAWoQhQEgABBYIQEgA0HAAmogABCFASADQcACahBBIANBwAJqEEQgACADQcACaiABEHkgA0GAA2okAAufAQEBfyM
    AQfAAayICJAAgAiABEF9BACEBIAJBOGpBOBByGiAAEEQCQCAAIAIQNUEASA0AA0AgAkEBEC0gAUEBaiEBIAAgAhA1QX9K
    DQALA0AgAUEATA0BIAJBARA7IAJBOGogABBrIAJBOGogAhBiIAJBOGoQRCAAIAJBOGogAikDaEI/h6dBAWoQTyABQX9qI
    QEMAAsACyACQfAAaiQAC7IBAQF/IwBBgAJrIgQkACAEQYABaiAAEF4gAyAEQYABahCQASAEQYABaiAAQYABahBeIAQgBE
    GAAWoQXiAEQYABaiAAQYACahBeIAIgBEGAAWoQkAEgASAEEJABIAEgAhAPIAMQMiAEEDIgAhAyIAEQpwEgARA6IAEQqAE
    gARBVIAEQqAEgAkEMEJ8BIANBAxCfASACEFUgAhCoASACIAQQfSACEKgBIAAQFCAEQYACaiQAC58BAQJ/IwBBgAJrIgIk
    ACAAIAEQXiAAEDIgAkGIAWpB2KTAABBfIAJBCGpBOBByGiACQQE2AkAgAkHIAGpBOBByIAJBgAFqQQE2AgAgAkHAAWogA
    kGIAWoQiwEgAkEIaiACQcABahClARCyASACQQhqEKgBIAJBCGoQVSACQQhqEKgBIAAgARAPIAAgAkEIahCVASAAEKsBIA
    JBgAJqJAALowEBAX8jAEEwayIGJAAgBkEQaiAAIAEQsQEgBiAGKAIUIgA2AhwgBiAGKAIQIgE2AhggBkEIaiACIAMQsQE
    gBiAGKAIMIgI2AiQgBiAGKAIIIgM2AiAgBiAEIAUQsQEgBiAGKAIEIgQ2AiwgBiAGKAIAIgU2AiggASAAIAMgAiAFIAQQ
    ACAGQShqEKQBIAZBIGoQpAEgBkEYahCkASAGQTBqJAALiAECA38DfiMAQRBrIgIkAAN+IANBOEYEfiACQRBqJAAgBgUgA
    iAAIANqIgQpAwAiBSAFQj+HIAGsIgUgBUI/hxAxIAQgAikDACIHIAZ8IgVC//////////8DgzcDACAFIAdUrSACQQhqKQ
    MAIAZCP4d8fEIGhiAFQjqIhCEGIANBCGohAwwBCwsLhAECA38BfiMAQUBqIgEkACABQQhqIAAQXyABQQhqEEQgAUE4aiE
    CQQYhA0HcAiEAAn8DQEEAIANBAEgNARogAikDACIEUARAIAJBeGohAiAAQUZqIQAgA0F/aiEDDAELCwN/IARQBH8gAAUg
    AEEBaiEAIARCAn8hBAwBCwsLIAFBQGskAAuHAQEBfyMAQcABayIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByGiAAQfgAa
    kEBNgIAIAEQUCABQYgBakE4EHIaIABBgAFqIAFBgAEQZxogAEGAAmpBOBByGiAAQbgCakEBNgIAIABBvAJqIAFBhAFqQT
    wQZxogAEH4AmpBATYCACABQcABaiQAC48BAQJ/IwBBgAJrIgEkACAAEKwBIAEgABBeIAFBgAFqQTgQchogAUEBNgK4ASA
    BQcABakE4EHIaIAFB+AFqQQE2AgAgASAAQYABaiICEJUBIAEQOiABQYABaiABEJABIAFBgAFqIAIQlQEgAiABEJABIAIg
    ABCVASAAIAFBgAFqEJABIAAQrAEgAUGAAmokAAt9AgF/An4jAEGAAWsiASQAIAFBCGogABCFASABQQhqEBIgAUHIAGogA
    UEIahCDAUEIIQADQCAAQThGRQRAIAFByABqIABqKQMAIAKEIQIgAEEIaiEADAELCyABKQNIIQMgAUGAAWokACACQn98IA
    NCAYVCf3yDQjqIp0EBcQuJAQIBfwJ+IAAgACkDMCABQT9xrSIDhiAAKQMoQTogAWtBP3GtIgSHhDcDMCAAQShqIQFBBiE
    CA0AgAkEBTQRAIAAgACkDACADhkL//////////wODNwMABSABIAEpAwAgA4ZC//////////8DgyABQXhqIgEpAwAgBIeE
    NwMAIAJBf2ohAgwBCwsLiQECAX8CfiAAIAApA2BBOiABQTpwIgFrrSIEhyAAKQNoIAGtIgOGhDcDaCAAQeAAaiEBQQ0hA
    gNAIAJBAU0EQCAAIAApAwAgA4ZC//////////8DgzcDAAUgASABKQMAIAOGQv//////////A4MgAUF4aiIBKQMAIASHhD
    cDACACQX9qIQIMAQsLC3EBAX8jAEFAaiIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByGiAAQfgAakEBNgIAIAFBCGpBOBB
    yGiAAQYABakE4EHIaIABBuAFqQQE2AgAgAEG8AWogAUEEakE8EGcaIABB+AFqQQE2AgAgAUFAayQAC4EBAgF/AX4gAEHw
    ABByIQADQCACQThGBEACQCAAIAEpAzAiA0I6hzcDOCAAIANC//////////8DgzcDMCAAQUBrIQBBACECA0AgAkEwRg0BI
    AAgAmpCADcDACACQQhqIQIMAAsACwUgACACaiABIAJqKQMANwMAIAJBCGohAgwBCwsLdQECfiAAIANCIIgiBSABQiCIIg
    Z+IAIgA358IAEgBH58IANC/////w+DIgIgAUL/////D4MiAX4iA0IgiCACIAZ+fCICQiCIfCABIAV+IAJC/////w+DfCI
    BQiCIfDcDCCAAIANC/////w+DIAFCIIaENwMAC3YBAn8jAEHAAWsiASQAIAEgABCFASABQUBrIAAQhQEgAUGAAWogAEFA
    ayICEIUBIAEgAhB4IAFBQGsgABB4IAFBQGsQRCACIAFBQGsQSCABQYABahBBIAAgAUGAAWoQeCABEEQgABBEIAAgARBII
    AFBwAFqJAALkwEBAn9B0LXBAEHQtcEAKAIAQQFqNgIAAkACQEGYucEAKAIAQQFGBEBBnLnBAEGcucEAKAIAQQFqIgA2Ag
    AgAEECSw0CQaC5wQAoAgAiAUF/Sg0BDAILQZi5wQBCgYCAgBA3AwBBoLnBACgCACIAQQBIDQFBoLnBACAANgIAAAtBoLn
    BACABNgIAIABBAUsNAAALAAtnAQJ/IwBBQGoiAiQAIAAQRCACIAAQhQECQCABRQRAIAAQBwwBCyAAIAEQpQELQQAhAQNA
    IAFBAUsgA3JFBEAgABADIAFBAEchAyABIAFFaiEBDAELCyAAIAIQSCAAEBIgAkFAayQAC18CAX8EfkIBIQNBMCECA38gA
    kF4RgR/IARCAYYgA3ynQX9qBSABIAJqKQMAIgUgACACaikDACIGfUI6hyADgyAEhCEEIAJBeGohAiAFIAaFQn98QjqHIA
    ODIQMMAQsLC2ACAX8EfkIBIQNB6AAhAgN/IAJBeEYEfyAEQgGGIAN8p0F/agUgASACaikDACIFIAAgAmopAwAiBn1COoc
    gA4MgBIQhBCACQXhqIQIgBSAGhUJ/fEI6hyADgyEDDAELCwt3AQN/IwBBgAJrIgIkACACIAEQXiACQYABaiABEF4gAhAy
    IAJBgAFqIAIQDyAAIAJBgAFqEJcBIABBgAJqIgMgAkGAAWoQlwEgAEGABGoiBCACQYABahCXASADIAEQogEgBCACEKIBI
    ABBBTYCgAYgAkGAAmokAAt6AQF/IwBB4ANrIgEkACABQYABakHApcAAEF8gAUG4AWpB+KXAABBfIAEgAUGAAWogAUG4AW
    oQSSABQfACakGwpsAAEF8gAUGoA2pB6KbAABBfIAFB8AFqIAFB8AJqIAFBqANqEEkgACABIAFB8AFqED8gAUHgA2okAAt
    nACAAQQF2IAByIgBBAnYgAHIiAEEEdiAAciIAQQh2IAByIgBBEHYgAHIiACAAQQF2QdWq1aoFcWsiAEECdkGz5syZA3Eg
    AEGz5syZA3FqIgBBBHYgAGpBj568+ABxQYGChAhsQRh2C2cBAn8jAEGAAWsiASQAIAEgABCFASABQUBrQTgQchogAUEBN
    gJ4IAEgAEFAayICEHggARBBIAFBQGsgARClASABQUBrIAIQeCACIAEQpQEgAiAAEHggACABQUBrEKUBIAFBgAFqJAALaA
    IBfwJ+IAFBP3GtIQNBOiABa0E/ca0hBEEAIQEDQCABQTBGBEAgACAAKQMwIAOHNwMwBSAAIAFqIgIgAkEIaikDACAEhkL
    //////////wODIAIpAwAgA4eENwMAIAFBCGohAQwBCwsLbAEBfyMAQTBrIgMkACADIAE2AgQgAyAANgIAIANBHGpBAjYC
    ACADQSxqQQI2AgAgA0ICNwIMIANBlKjAADYCCCADQQI2AiQgAyADQSBqNgIYIAMgAzYCKCADIANBBGo2AiAgA0EIaiACE
    HAAC2wBAX8jAEEwayIDJAAgAyABNgIEIAMgADYCACADQRxqQQI2AgAgA0EsakECNgIAIANCAjcCDCADQbCqwAA2AgggA0
    ECNgIkIAMgA0EgajYCGCADIANBBGo2AiggAyADNgIgIANBCGogAhBwAAtlAQJ/IAAgACgCACICQQhqIgM2AgAgACACQQN
    2QTxxakEoaiICIAFB/wFxIAIoAgBBCHRyNgIAAkACQCADRQRAIABBADYCACAAIAAoAgRBAWo2AgQMAQsgA0H/A3ENAQsg
    ABARCwtnAQF/IwBBgAJrIgMkACAAECogACABEJABIABBgAFqIgEgAhCQASAAQYACahCwASAAEKgBIAMgABAmIANBgAFqI
    AEQXiADQYABahAyIANBgAFqIAMQe0UEQCAAEJgBCyADQYACaiQAC18BAn8jAEGAAWsiASQAIAAQqAEgASAAEIUBIAFBQG
    sgAEFAayICEIUBIAEQAyABQUBrEAMgASABQUBrEHggAUEAEDQgACABEEggARBBIAEQRCACIAEQSCABQYABaiQAC10BAn8
    jAEFAaiIBJAAgAUEIakGgp8AAEF8gAUEIaiAAKAI4QX9qEDkiAhAtIAAgAUEIahBjIABBASACQQFqQR9xdCICNgI4IAJB
    gICAEE4EQCAAEBILIAFBQGskAAtfAgF/AX4jAEHwAGsiASQAIAFBoKfAABBfIAApAwAhAiABQThqIAAQXyAAQQEQOyABQ
    ThqIAEQYSABQThqEEQgAUE4akEBEDsgACABQThqIAJCAoGnEE8gAUHwAGokAAt7AQJ/IABBKGohAgNAIAFBgAJGBEAgAE
    LnzKfQ1tDrs7t/NwIIIABCADcCACAAQSBqQquzj/yRo7Pw2wA3AgAgAEEYakL/pLmIxZHagpt/NwIAIABBEGpC8ua746O
    n/aelfzcCAAUgASACakEANgIAIAFBBGohAQwBCwsLaQICfwF+IAAgACkDACIDQv//////////A4M3AwBBCCEBA0AgA0I6
    hyEDIAFBMEYEQCAAIAApAzAgA3w3AzAFIAAgAWoiAiACKQMAIAN8IgNC//////////8DgzcDACABQQhqIQEMAQsLC2oCA
    n8BfiAAIAApAwAiA0L//////////wODNwMAQQghAQNAIANCOochAyABQegARgRAIAAgACkDaCADfDcDaAUgACABaiICIA
    IpAwAgA3wiA0L//////////wODNwMAIAFBCGohAQwBCwsLWQEBfyMAQYADayIEJAAgBCADEF4gBBBAIARBgAFqIAEQXiA
    EQYACaiACEF4gBEGAAWogBBAPIARBgAJqIAQQDyAAIARBgAFqIARBgAJqEJEBIARBgANqJAALWQECfyMAQUBqIgEkAAJA
    IAAQhAENACABQQEQigEgAEGAAWoiAiABEFkNACACQQAQNCAAIAIQSCAAEBIgAEFAayIAIAIQSCAAEBIgAiABEKUBCyABQ
    UBrJAALVwEBfyMAQbABayICJAAgATQCOCAANAI4fkKAgIAQWQRAIAAQEgsgAkEIaiAAIAEQCCACQfgAaiACQQhqEAUgAC
    ACQfgAahBrIABBAjYCOCACQbABaiQAC08BAn8jAEFAaiIDJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByIABB+ABqQQE2AgA
    gAyABEIsBIAAgAxClASADIAIQiwEgAxClASADQUBrJAALWQECfyMAQYABayIBJAACQCAAEIgBDQAgARBQIABBgAJqIgIg
    ARB7DQAgAhBAIAAgAhAPIAAQqwEgAEGAAWoiACACEA8gABCrASACIAEQkAELIAFBgAFqJAALSwEBfyMAQUBqIgEkACAAQ
    TgQciIAQQE2AjggAUEBEIoBIABBQGsgAUHAABBnGiAAQYABakE4EHIaIABBuAFqQQE2AgAgAUFAayQAC0sBAn8jAEHwAG
    siASQAIAAQd0UEQCABQaCnwAAQXyABQThqIAAQgwEgASABQThqEGIgARBEIAFBOGogARA1IQILIAFB8ABqJAAgAgtPAQF
    /IwBBgAFrIgIkACAAIAEQhQEgABADIAJByABqQdikwAAQXyACQQhqIAJByABqEIsBIAAgARBIIAAgAkEIahB4IAAQEiAC
    QYABaiQAC0kBAn8DQCABQThGRQRAIAAgAWoiAiACKQMAQgGGNwMAIAFBCGohAQwBCwsgACAAKAI4QQF0IgE2AjggAUGAg
    IAQTgRAIAAQEgsLQgIBfwJ+QQAgAmusIQQDQCADQThHBEAgACADaiICIAIpAwAiBSABIANqKQMAhSAEgyAFhTcDACADQQ
    hqIQMMAQsLC0YBAn8jAEFAaiIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByIABB+ABqQQE2AgAgAUEBEIoBIAAgARClARC
    yASABQUBrJAALTgEBfyMAQYAEayIBJAAgABAvIAEQLyABQYACahAvIABBgAJqIAFBgAIQZxogAEGABGogAUGAAmpBgAIQ
    ZxogAEEANgKABiABQYAEaiQAC0sBAX8jAEFAaiICJAACQCAAKAI4IAFsQYCAgBBOBEAgAiABEIoBIAAgAhBIDAELIAAgA
    RAoGiAAIAAoAjggAWw2AjgLIAJBQGskAAtKAAJ/IAFBgIDEAEcEQEEBIAAoAhggASAAQRxqKAIAKAIQEQMADQEaCyACRQ
    RAQQAPCyAAKAIYIAJBACAAQRxqKAIAKAIMEQUACwtCAQF/IwBBQGoiAiQAIAJBCGpBgIDAABBfIAEgAkEIahBrIAEQRCA
    AIAEQayAAQQMQKBogABBEIAAQKSACQUBrJAALSQECfyMAQcABayIBJAAgASAAEF4gAUGAAWogABCFASAAIABBQGsiAhCl
    ASAAEEEgAiABQYABahClASAAIAEQlQEgAUHAAWokAAtIAQF/IwBB4AFrIgEkACABQeihwAAQXyABQThqIAAgARAIIAFBq
    AFqIAFBOGoQBSAAIAFBqAFqEGsgAEECNgI4IAFB4AFqJAALPgEBfyABQTpuIQIgAUGVA00EQCAAIAJBA3RqKQMAQgEgAU
    H//wNxQTpwrYaDQgBVDwsgAkEHQdSdwAAQPAALQAIBfwF+IwBBgAFrIgEkACABQQhqIAAQhQEgAUEIahASIAFByABqIAF
    BCGoQgwEgASkDSCABQYABaiQAQgKBpws8AQF/IwBBgAFrIgIkACACIAAQhQEgAkFAayABEIUBIAIQEiACQUBrEBIgAiAC
    QUBrEDUgAkGAAWokAEULPAIBfwF+A38gAUE4RgR/IAJCf3xCgICAgICAgIAEg0I6iKcFIAAgAWopAwAgAoQhAiABQQhqI
    QEMAQsLC0cBAX8jAEEgayIDJAAgA0EUakEANgIAIANB9KrAADYCECADQgE3AgQgAyABNgIcIAMgADYCGCADIANBGGo2Ag
    AgAyACEHAACzkBAX8jAEFAaiICJAAgAiAAEIUBIAIQByABBEAgASACEKUBCyACEAMgAiAAEEggAhAsIAJBQGskAAs6AQF
    /IABBOBByIQADQCACQTBGRQRAIABBCBAtIAAgACkDACABIAJqMQAAfDcDACACQQFqIQIMAQsLCzQBAX8gAEE4EHIiAEEB
    NgI4IABBQGtBOBByIABB+ABqQQE2AgAgACABEKUBIAFBQGsQpQELMAEBfyAAQTgQciEAA0AgAkE4RwRAIAAgAmogASACa
    ikDADcDACACQQhqIQIMAQsLCz8BAX8jAEGAAmsiASQAIAAQUSABEG4gACABEJIBIABBgAJqEK0BIABBgARqEK0BIABBAT
    YCgAYgAUGAAmokAAswAQJ/A0AgAkE4RwRAIAAgAmoiAyADKQMAIAEgAmopAwB8NwMAIAJBCGohAgwBCwsLMAECfwNAIAJ
    BOEcEQCAAIAJqIgMgAykDACABIAJqKQMAfTcDACACQQhqIQIMAQsLCzABAn8DQCACQThHBEAgACACaiIDIAEgAmopAwAg
    AykDAH03AwAgAkEIaiECDAELCwsxAQJ/A0AgAkHwAEcEQCAAIAJqIgMgAykDACABIAJqKQMAfTcDACACQQhqIQIMAQsLC
    zEBAn8DQCACQfAARwRAIAAgAmoiAyADKQMAIAEgAmopAwB8NwMAIAJBCGohAgwBCwsLOQECfyMAQYABayIBJAAgASAAQY
    ABaiICEF4gAiAAEJABIAEQVSAAIAEQkAEgABCsASABQYABaiQACzMBAX8gAgRAIAAhAwNAIAMgAS0AADoAACABQQFqIQE
    gA0EBaiEDIAJBf2oiAg0ACwsgAAtIAQN/IwBBEGsiASQAIAAoAgwhAyAAKAIIIgJFBEBB9KrAAEErQaCrwAAQWwALIAEg
    AzYCCCABIAA2AgQgASACNgIAIAEQcQALMgEBfyAAQgE3AwBBCCEBA0AgAUE4RkUEQCAAIAFqQgA3AwAgAUEIaiEBDAELC
    yAAEFYLNwAgABBRIAAgARCSASAAQYACaiABQYACahCSASAAQYAEaiABQYAEahCSASAAIAEoAoAGNgKABgsoAQF/A0AgAk
    E4RwRAIAAgAmogASACaikDADcDACACQQhqIQIMAQsLCzMAIAAgARCSASAAQYACaiABQYACahCSASAAQYAEaiABQYAEahC
    SASAAIAEoAoAGNgKABgsoACAAIAEgAhB5IABBQGsgAUFAayACEHkgAEGAAWogAUGAAWogAhB5Cy4BAX8jAEGAAWsiASQA
    IAAQLyABEFAgACABEJABIABBgAFqEKkBIAFBgAFqJAALLQAgACABIAIQjwEgAEGAAWogAUGAAWogAhCPASAAQYACaiABQ
    YACaiACEI8BCzQBAX8jAEEQayICJAAgAiABNgIMIAIgADYCCCACQaSowAA2AgQgAkH0qsAANgIAIAIQaAALPgEBfyMAQR
    BrIgEkACABQQhqIABBCGooAgA2AgAgASAAKQIANwMAIAEoAgAiAEEUaigCABogACgCBBoQMwALKQEBfyABBEAgACECA0A
    gAkEAOgAAIAJBAWohAiABQX9qIgENAAsLIAALKwEBfyMAQcABayICJAAgAhBLIAIgARB/IAIQpgEgACACEAwgAkHAAWok
    AAsiAQF/A0AgAUE4RwRAIAAgAWpCADcDACABQQhqIQEMAQsLCycBAX8jAEFAaiICJAAgAkEIaiABEF0gACACQQhqEIsBI
    AJBQGskAAsrACAAEFEgACABEJIBIABBgAJqIAIQkgEgAEGABGogAxCSASAAQQU2AoAGCyMBAX8jAEFAaiIBJAAgASAAEI
    UBIAEQEiABEFogAUFAayQACykAIAAgARBhIAAgACgCOCABKAI4aiIBNgI4IAFBgICAEE4EQCAAEBILCyUAIAAgASACEE8
    gAEEAIAJrIAAoAjgiACABKAI4c3EgAHM2AjgLIwADQCACBEAgACABLQAAED4gAkF/aiECIAFBAWohAQwBCwsLIgACQCAA
    IAEQWUUNACAAQUBrIAFBQGsQWUUNAEEBDwtBAAskAAJAIABBfE0EQCAARQRAQQQhAAwCCyAAEAEiAA0BCwALIAALJwEBf
    yMAQYABayICJAAgAiABEF4gAhA6IAAgAhCVASACQYABaiQACycAIAAgARCQASAAQYABaiABQYABahCQASAAQYACaiABQY
    ACahCQAQslACAAIAEQpQEgAEFAayABQUBrEKUBIABBgAFqIAFBgAFqEKUBCyUBAX8jAEFAaiICJAAgAiABEIUBIAIQQSA
    AIAIQeCACQUBrJAALKAEBfyMAQYACayICJAAgAiABEI4BIAIQKyAAIAIQlgEgAkGAAmokAAsjAEGEAiACSQRAIAJBhAIg
    AxA9AAsgACACNgIEIAAgATYCAAsiAQF/IwBB8ABrIgIkACACIAEQMCAAIAIQBSACQfAAaiQACxwAAkAgABB3RQ0AIABBg
    AFqEHdFDQBBAQ8LQQALHwAgAEE4EHIiAEEBNgI4IAAgARBrIAAgASgCODYCOAseAAJAIAAQhwFFDQAgAEGAAWoQhwFFDQ
    BBAQ8LQQALGwACQCAAEHdFDQAgAEFAaxB3RQ0AQQEPC0EACx4AAkAgABCHAUUNACAAQYACahCHAUUNAEEBDwtBAAsaAQF
    /IAAQWCIBIABBQGsQWCABcyAAEHdxcwsaACAAQTgQciIAQQE2AjggACABEJ0BIAAQVgsZACAAQTgQciIAQQE2AjggACAB
    EGsgABBWCxcAIAAQRCAAKAIAQX8gAUEfcXRBf3NxCxoAIAAgARBfIAAgAhAkIAAgAhBjIAAgAhAkCxwAIAAQLyAAIAEQk
    AEgAEGAAWogAUGAAWoQkAELGAAgACABIAIQeSAAQUBrIAFBQGsgAhB5CxYAIAAgARClASAAQUBrIAFBQGsQpQELGAAgAB
    AvIAAgARCQASAAQYABaiACEJABCxgAIAAgARCQASAAQYABaiABQYABahCQAQsZACAAEK4BIABBgAJqELYBIABBgARqEK4
    BCxcAIAAQsgEgAEFAaxBpIABBgAFqELIBCxQAIAAgARB4IABBQGsgAUFAaxB4CxgAIAAgARCVASAAQYABaiABQYABahCV
    AQsYACAAEKYBIABBgAFqIgAQpgEgACABEA8LGQAgABCpASAAQYABahCwASAAQYACahCpAQsZACAAEKwBIABBgAJqEKwBI
    ABBgARqEKwBCxkAIAAQqgEgAEGAAmoQqgEgAEGABGoQqgELFgAgABAvIAAgARCQASAAQYABahCpAQsWACAAQYABaiIAEK
    gBIAAQOiAAEKgBCxQAIAAQRCAAIAApAwAgAax8NwMACxQAIAAQRCAAIAApAwAgAax9NwMACxEAIAAgARBSIABBQGsgARB
    SCxEAIAAgARBIIABBQGsgARBICxQAIAAgARCQASAAQYABaiACEJABCxIAIAAgARAPIABBgAFqIAEQDwsUACAAIAEQoAEg
    AEGAAWogARCgAQsRACAAKAIEBEAgACgCABAJCwsSACAAIAEQayAAIAEoAjg2AjgLDwAgAEFAayIAEEEgABBECw0AIAAQT
    iAAQUBrEE4LDQAgABBEIABBQGsQRAsPACAAELIBIABBQGsQsgELEAAgABCrASAAQYABahCrAQsNACAAEBIgAEFAaxASCx
    AAIAAQqAEgAEGAAWoQqAELEAAgABCpASAAQYABahCpAQsPACAAQYABahA6IAAQrAELEAAgABCnASAAQYABahCnAQsOACA
    AEGkgAEFAaxCyAQsQACAAIAI2AgQgACABNgIACw0AIAAQdCAAQQE2AjgLDAAgABBBIAAgARB4CwwAIAAgARBrIAAQVgsN
    ACAAEDogACABEJUBCwsAIAAQOiAAEKwBCwwAQunQotvMouq7RgsDAAELAwABCwv+PZoCAEGCgMAACwcBAAAAAQI0AEG4g
    MAAC9sBuF8jku11BwFjT+D5WE+pA2dPnKtLeD0Akew9ffXy9AMD1g8fDSwgAK1vjPCZwa4A8DtNkAEAAADzStxtEor3AI
    uwH1tTsFYDgvLFYx+X7AAysL/NHtseAkehVLifHyMCQHo6ogw4sQGz4sMPAAAAAHNyYy9ibHMxMjM4MS9wYWlyLnJzqAA
    QABQAAAAHAQAACQAAAKgAEAAUAAAADAEAAA0AAACoABAAFAAAABEBAAANAAAAAAAAAAEAAAD///8Dv/+W/78AaQM7VYAd
    moCAAefMIPV1pkwBp+1zAEGogsAACyz+//7///8BAosAgILYBPYB4Y1oiW++kwLOdqvfPagdAMZpulHOdt8Dy1nGFwBB4
    ILAAAuRAZABEAATAAAA0AEAABgAAACQARAAEwAAANQBAAARAAAAkAEQABMAAADWAQAAHAAAAHNyYy9ibHMxMjM4MS9lY3
    AucnMAkAEQABMAAAAZBQAADQAAAJABEAATAAAAGwUAAAkAAACQARAAEwAAABwFAAARAAAAkAEQABMAAAAfBQAAHAAAAAA
    AAAABAAEAAAABAjQAQaCEwAALuSCQARAAEwAAAGcEAAARAAAAkAEQABMAAABsBAAADQAAAJABEAATAAAAbgQAABUAAACQ
    ARAAEwAAAHAEAAAgAAAAHUxYLQgo9ADXXz44aOPbAInJGoj9roEBomOjmrkPTgGY6rCCSW3JAoBOWs9QOu4AimlEAQAAA
    ADgKxeO6UjMAXSpOluMVsgAolXvNe/8FADngsIBPcnDA8EWIDvuPnUAusRiAAwgWgDRCCkuAQAAALgh6L1iEMUA3/4Vlz
    tIpQGLCDH8A9S9AbsR/Cc0UtIDHfAS2hvXowEqPc423S/bAshidB8AAAAAKdKiiy66yAHqR06TLeDGAiSMtsYkvPEDAo/
    w3iCL+AGd1zE97u2BA4ilRy+cg4kDSMIIbgAAAAB7+wUWP99nAjJ7Fwrjx90CaW+GFDsANgMrVFv+4Zl3A8x9+g1bVtIB
    Aju2nPiBcwIH2iEDAQAAAJ4MOb5nECQDX97JALfLQgIx+rexS69LAYydZXIx6AACyy7dIo8TXQHUDYML8enzAuH4sWkBA
    AAAF+OXhGqYcQFbpdOtpXylAPrkHV2MkmwBFovSVX2eswF1O8QNmb5jAc0s5B7x42kCH8/TgAAAAACOyPDjGFbLAOdrHT
    0yPvIBmzNTJw/vYgALmsY2bZ2sAuVtNVN+EdEAIQ4duvj2agBw54F7AQAAAITtOaEl8tcBt7JLQTBKlADaqLKGnI8hAiN
    AhjM+PJkAhhWxv1LmigOwyY1aShP5A1Nl7dYAAAAAgyllb8bBEwFzRs+5ckvDAQgK+Wh+CbkCTntu5kll9wGxPNu1Sqf3
    AwZIdMD/xFwDUDIMYwEAAADZlYis6UwVARTxnQfMG4oChYnB+oJZtgK7IfzsX0loAZnbmVSOEeQDLK2Q2RB9ZgCjJpfpA
    AAAAGFomx1kiLMB8WQcxDiXuAEzNQgzG58oA8zGl/w2qpUB5PXXElTlBwN0goHTbRvzA2ZxjncBAAAAsNyerJ2fFwD4p1
    yCSo8PA1jJJY7GHlAC46GVD2alzAEkA84bmgrRATESRAc7nl0C2wVA1QAAAAC7g8uz8e40ALrVMMa8qTwCg7SGHg3HMwK
    X1V8Qqr1sAecXfByoRyECrC5iwcvqUAI+7ZRyAQAAALdJRnNiFqwCq1uLuXy1MABhhSxO22y1A4nJfwFciyICPjBrhRWY
    2QEHRAIu0MygA7HyBRoBAAAACt3saNGEYwELQBne0pLTATFZwTGPlzMBfdvdQN9bugO0gvaAZqWzAo9b2xG1SnoCqxP8l
    QAAAABB1qF5Oux2AxHckO6qpJkAOFCDmPNn2gBA0K3ZhMV1AI1/4Myjx68Bz4Kkl+BTaQNqzw6hAAAAAF5azL2b2fcBxL
    R4RCdSbgH6gMUimN8cAltmoKIpbwgDY39umQHPdABs/SyMLCpZA6nCekoBAAAAOkrobkl0JQA7G3jD49TsAKfO6e0qBnM
    AuDglhk69ZgJXD1chZ1ngAxiDz0OGTVoAz6osdwAAAAClBGOfovktAHDEowjxkjQAQPeCiUvyzgMOKTS1cjqnAzVXOenG
    BgUD30NOVe6ZOQGOXzXnAAAAAB6iMjVbOZ0DVAdezQfqpgC9qW0wO4NOAK017oqBhGYBx9//faDnQwNXx5sCKkWKACAWj
    joBAAAA2CzGjZPoDQMEcT27D0m1AZcE/dYovIoCMlNFlcVa/AAkCFtU60B8A/urDrK/uGIBGlglNAAAAAAZPrhcujnCAD
    +3PyWfJfQAas3qrBEL4ACZ8kczxmm9AUGJbx+Z8r8BivlNoJfI6AHlL5ayAAAAAP87K8huJ8gBeboJLBshqgI9cfWLxIg
    lAJsEMADCMygD6EFwNjblmAJEHC3SEGfVAt6lYSUBAAAAHBvSQPr5PAEmfg+Nb6A1AlUrxor8F4YAVnLqIm2NLgHv1QFv
    +tNLA4u5LIZrxj8DSNWojAAAAAAEtshpvla0AMEdB7C/n0ABZisb8FqpTwG3XuVoWRI+Ah0Yy7Uu30IDzkKpk/PAQwLp5
    GteAQAAAEsidVRxHmsC4e1rXtkmQQC6Rs6nltP1AKxmo5WhXwcCPWde/KPESAN9VqhAxDORA0WWElwAAAAAMwGY2/XT2Q
    IQmcoIRyvkA2zMWQbE0zICmU8AVjA1IAA7e3XcFeN7AisAv9ymskcDSjlaJAAAAAD4HpcL8ARMAYN8hGRkcBQCbPAzRnu
    ADgGcADvCmtCoALGnekQ/9QQAWEJVdObkBgDByoKxAAAAAI5NB9CkyAcCs4E10QZ9cwKdJEP2EfnnA6+5GAnDq+ICWTVS
    zO3S/gNQMEaut73NAwipRosBAAAAMsER0BpxEwA6v+6PM5fOAxsDYZ44FuQDYET/JL2yLQPLL82T+0MdA+NCf4NvNN8Ae
    eQTlwEAAAAwHHPK66qvA8qbrlN3FdwDs7lDTR7t5wFhGvjba0WeAgwqxCNKoa0Dea+OSG2vYQChp7vhAAAAAIel23tXDj
    cA2OiB4XGAlAGd5qsM8qHmAi16sAl3nlkAvTqPu6FNHgKIJyP6EpplA4sBxJ8AAAAAKftwGKNMXgFoTfq3P1SRAS9kQsg
    mbNoADvR/YPeO/wIFChd0xqYsAa9Jpvcbrs4AU418mAAAAADy1ulfhfhhAbJX0IORsB4CenTzNNbEEwDFSC0Thq8oA7hb
    5zxreScA9F2yLO8G6wO8ubBKAAAAAPClMzaxOrIBphygVrLJ2AMD4kRVrdPDAUHZ9d62vlID0Kd0oKbwuAFHeISI2tIYA
    KT8A2YBAAAA2/7o8uzatgEQKhBkAjf+Ae7CrVETIv0DDObhQjmP7wM2VRnEKRWiAvjTK9fEP/gD3j/AjAAAAADL9OWwd1
    w1Ail7h7GnrhYA5J3PUTLAPgKSJ3DkrTvkAqcq1FdndNgCRh0mXggHJgJuN4YfAAAAAPbhLcdA4t8A7kgBLIqFVAMmfdo
    AFLnkAxINi3OMYlkD4lIllEk7agAy4Si9mZulArqGxwwAAAAAlsZBLlrnlwD4L+qLZcRZAWxN03q2PjQCQT704DyVsAHp
    IxKDRvt2A7UNRHUEljsBEGqZNAEAAAAzuweXcUWYAq/w6M6mux4D0Dw9VFbJ9gJKrUiloSI5AhOtEfrcgEkBwkdnCbiT6
    AKBfNmQAAAAAI9LYx06RxUAEeAlTTxcvQDKBaLKVmPNAzvJTOHOiZcBD8RxwRl4DQJXCcmaD3C3AYEd+uAAAAAA9wbtJh
    Pc+gE0IDPFYe9FASDkgCSUJ98A0i0Hn6ScUwJbVr/yds1TAUP3otjOk8sCDkBgJgAAAADMRTNXOLGZAkewQu742AEAMGm
    42QCa7wJz9ZkIfCtmA0YzVJYUX7QAUUzY8PifHQMUlWutAAAAAJIQVuIptYQCpfqu3xsmWgJvURN56oyoAT4wSgs5vysC
    /5R/RwzFSAIHS2H9z0AHAnS2y6wAAAAAqGqPupy0+AAAgcHg06dwARqHXGpjbrMBZDmkmIbt5gDQbZwdkdIaACgEPFJvA
    akDniUvTQAAAABVP5G4i/RuAI3XbEr1qBcCc7xPfernkgEhTO0e9oSPAfcWMpCEStkDZYGgOoebwgHaXKVnAQAAAEpdU1
    WdPSMD2iCS5O69+AMshbQ5v8RQAxWvgmS9GpMDDPv5xEzX0QNT+YbGSBjbANOObIYBAAAA2S6BFVpB7gAYuXcAAmw9AJI
    rE1djIP0AzfpfP33oewE3pOVu/6a7An4374D6qY8Di/A+agEAAABcd2oSmRMaAU/ux2JpAKcCXx0FoADEWwJNd73jMzTq
    A/3sXkuC6awAzaHu8Mt2pgIIfABmAQAAAKy3+ap/R8YCgDhz6ndu4wCfRKb18LaHAbMXB2JDVRkDUgG3gjF4rAK6mexny
    7ZhAJdSno0AAAAAHQClESMUOQJ2e7v0A3fFAiBqkeyd/KABu1DB7qY9fAKc0cbcjSL4AkQyAyz50BcBlQcOvgAAAAAWVF
    9EmG3SAGrrpaCwPNkAJxf0anKeSAL2SDhM83ZvA8UV0dG07YkD70iDfOWUYwKHKH1rAQAAAPJnvz21OCUCR+Jbvo01XwF
    nyi7NedJdAtYwxPy5RlUBhcR4V7GObgGfq+rbiTaQAQYz31gAAAAAPaBJLiwQ9gJMjafU2IEJAYr3AT5FbzUAhJJyVhPH
    3ANPyIW4SMNDAFsvg4YHSOAAwnUtlgEAAADBYzawU5JHAUAbCIO9I9oAf6Dncr61MgIMu5svYOKVA20aYOnq0PoAUASGl
    CwmpwLDxBJhAQAAAHNyYy9ibHMxMjM4MS9iaWcucnMAoA4QABMAAADMAQAALQAAAKAOEAATAAAAzAEAADUAAACgDhAAEw
    AAABkCAAANAAAAoA4QABMAAAA4AwAAGAAAAKAOEAATAAAAOAMAACEAAACgDhAAEwAAAEIDAAAhAAAAoA4QABMAAABbAwA
    AFwAAAKAOEAATAAAAZAMAABcAAACgDhAAEwAAAHIDAAAwAAAAoA4QABMAAAB7AwAAMAAAAKAOEAATAAAApwMAABgAAACg
    DhAAEwAAALUDAAAYAAAAmC+KQpFEN3HP+8C1pdu16VvCVjnxEfFZpII/ktVeHKuYqgfYAVuDEr6FMSTDfQxVdF2+cv6x3
    oCnBtybdPGbwcFpm+SGR77vxp3BD8yhDCRvLOktqoR0StypsFzaiPl2UlE+mG3GMajIJwOwx39Zv/ML4MZHkafVUWPKBm
    cpKRSFCrcnOCEbLvxtLE0TDThTVHMKZbsKanYuycKBhSxykqHov6JLZhqocItLwqNRbMcZ6JLRJAaZ1oU1DvRwoGoQFsG
    kGQhsNx5Md0gntbywNLMMHDlKqthOT8qcW/NvLmjugo90b2OleBR4yIQIAseM+v++kOtsUKT3o/m+8nhxxkJMU19TSUdf
    QkxTMTIzODFHMV9YTUQ6U0hBLTI1Nl9TU1dVX1JPX05VTF8A0BAQABMAAAA/AAAALgAAANAQEAATAAAAPQAAABUAAADQE
    BAAEwAAAD0AAAANAAAAc3JjL2JsczEyMzgxL2Jscy5ycwAAAAAArve+1aE5BgLok91iZEwkAdIsbk61CS0C2+VwMbbEEQ
    GZYzb76G2KA7ycH+3PFk8AK2qmngEAAABhdHRlbXB0IHRvIGRpdmlkZSBieSB6ZXJvAAAAbxEQABIAAAB8AQAAFAAAAAA
    AAABhdHRlbXB0IHRvIGRpdmlkZSB3aXRoIG92ZXJmbG93c3JjL2JsczEyMzgxL2ZwLnJzAAAAbxEQABIAAAASAgAADQAA
    AG8REAASAAAAHgIAACYAAABvERAAEgAAAB4CAAAjAAAAbxEQABIAAAAkAgAAFwAAAG8REAASAAAAJAIAABQAAAAAAAAAq
    qr//////gHu//9UrP//AupBYg9rDyoBw5z9ShTOEwJLd2TXrEtDAu3pxpKm+V8Cox4RoAEAAABAEhAAFAAAABUBAAATAA
    AAQBIQABQAAAAeAQAAGAAAAEASEAAUAAAAJAEAABwAAABzcmMvYmxzMTIzODEvZWNwMi5ycwAAAAAEAEGQpcAAC7wGQBI
    QABQAAADmAgAACQAAAEASEAAUAAAA7gIAAA0AAABAEhAAFAAAAP4CAAAhAAAAuL0hwchWgAD1+24BqskAA7pwFz2uR7YA
    RNEK7ADpUwN65MZREMUtA0kBgkmkwiMALyuqJAAAAAB+KwRdBX2sAflVF+WERDwDNJME9ce9GwJp12rYgmRCA9BrWWVPJ
    4gA6DRrH9hnnAAFtgI+AQAAAAEouAiGVJMBeKIo6w5zsgIjyRINFpWmAQq1nU73MqoCm/2tGjUu2gJxczJjhFufAHdSXc
    4AAAAAvnlf8F8HqQJqaAc710nDAfOzmulytSoB0pm8jp0W+gEoPsuZi8IrAKw0qwwzzakDAkpsYAAAAACrqv/////+Ae7
    //1Ss//8C6kFiD2sPKgHDnP1KFM4TAkt3ZNesS0MC7enGkqb5XwKjHhGgAQAAAAgUEAALAAAAjwEAAA8AAAAIFBAACwAA
    AKcBAAATAAAACBQQAAsAAACqAQAADQAAAHNyYy9obWFjLnJzADQUEAAgAAAAVBQQABIAAAADAAAAAAAAAAEAAAAEAAAAa
    W5kZXggb3V0IG9mIGJvdW5kczogdGhlIGxlbiBpcyAgYnV0IHRoZSBpbmRleCBpcyAwMDAxMDIwMzA0MDUwNjA3MDgwOT
    EwMTExMjEzMTQxNTE2MTcxODE5MjAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ
    0NTQ2NDc0ODQ5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc3ODc5
    ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OQAAQBUQABAAAABQFRAAIgAAAHJhbmdlIGVuZCBpb
    mRleCAgb3V0IG9mIHJhbmdlIGZvciBzbGljZSBvZiBsZW5ndGggAABjYWxsZWQgYE9wdGlvbjo6dW53cmFwKClgIG9uIG
    EgYE5vbmVgIHZhbHVlALAVEAAcAAAA7gEAAB4AAABsaWJyYXJ5L3N0ZC9zcmMvcGFuaWNraW5nLnJzAEGIrMAACwEBAEH
    IrMAACwEBAEGIrcAACwEBAEHIrcAACwEBAEGIrsAACwEBAEHIrsAACwEBAEGIr8AACwEBAEHIr8AACwEBAEGIsMAACwEB
    AEHIsMAACwEBAEGIscAACwEBAEHIscAACwEBAEGIssAACwEBAEHIssAACwEBAEGIs8AACwEBAEHIs8AACwEBAEGItMAAC
    wEBAEHItMAACwEBAEGItcAACwEBAEHItcAACwEBAEGItsAACwEBAEHItsAACwEBAEGIt8AACwEBAEHIt8AACwEBAEGIuM
    AACwEBAEHIuMAACwEBAEGIucAACwEBAEHIucAACwEBAEGIusAACwEBAEHIusAACwEBAEGIu8AACwEBAEHIu8AACwEBAEG
    IvMAACwEBAEHIvMAACwEBAEGIvcAACwEBAEHIvcAACwEBAEGIvsAACwEBAEHIvsAACwEBAEGIv8AACwEBAEHIv8AACwEB
    AEGIwMAACwEBAEHIwMAACwEBAEGIwcAACwEBAEHIwcAACwEBAEGIwsAACwEBAEHIwsAACwEBAEGIw8AACwEBAEHIw8AAC
    wEBAEGIxMAACwEBAEHIxMAACwEBAEGIxcAACwEBAEHIxcAACwEBAEGIxsAACwEBAEHIxsAACwEBAEGIx8AACwEBAEHIx8
    AACwEBAEGIyMAACwEBAEHIyMAACwEBAEGIycAACwEBAEHIycAACwEBAEGIysAACwEBAEHIysAACwEBAEGIy8AACwEBAEH
    Iy8AACwEBAEGIzMAACwEBAEHIzMAACwEBAEGIzcAACwEBAEHIzcAACwEBAEGIzsAACwEBAEHIzsAACwEBAEGIz8AACwEB
    AEHIz8AACwEBAEGI0MAACwEBAEHI0MAACwEBAEGI0cAACwEBAEHI0cAACwEBAEGI0sAACwEBAEHI0sAACwEBAEGI08AAC
    wEBAEHI08AACwEBAEGI1MAACwEBAEHI1MAACwEBAEGI1cAACwEBAEHI1cAACwEBAEGI1sAACwEBAEHI1sAACwEBAEGI18
    AACwEBAEHI18AACwEBAEGI2MAACwEBAEHI2MAACwEBAEGI2cAACwEBAEHI2cAACwEBAEGI2sAACwEBAEHI2sAACwEBAEG
    I28AACwEBAEHI28AACwEBAEGI3MAACwEBAEHI3MAACwEBAEGI3cAACwEBAEHI3cAACwEBAEGI3sAACwEBAEHI3sAACwEB
    AEGI38AACwEBAEHI38AACwEBAEGI4MAACwEBAEHI4MAACwEBAEGI4cAACwEBAEHI4cAACwEBAEGI4sAACwEBAEHI4sAAC
    wEBAEGI48AACwEBAEHI48AACwEBAEGI5MAACwEBAEHI5MAACwEBAEGI5cAACwEBAEHI5cAACwEBAEGI5sAACwEBAEHI5s
    AACwEBAEGI58AACwEBAEHI58AACwEBAEGI6MAACwEBAEHI6MAACwEBAEGI6cAACwEBAEHI6cAACwEBAEGI6sAACwEBAEH
    I6sAACwEBAEGI68AACwEBAEHI68AACwEBAEGI7MAACwEBAEHI7MAACwEBAEGI7cAACwEBAEHI7cAACwEBAEGI7sAACwEB
    AEHI7sAACwEBAEGI78AACwEBAEHI78AACwEBAEGI8MAACwEBAEHI8MAACwEBAEGI8cAACwEBAEHI8cAACwEBAEGI8sAAC
    wEBAEHI8sAACwEBAEGI88AACwEBAEHI88AACwEBAEGI9MAACwEBAEHI9MAACwEBAEGI9cAACwEBAEHI9cAACwEBAEGI9s
    AACwEBAEHI9sAACwEBAEGI98AACwEBAEHI98AACwEBAEGI+MAACwEBAEHI+MAACwEBAEGI+cAACwEBAEHI+cAACwEBAEG
    I+sAACwEBAEHI+sAACwEBAEGI+8AACwEBAEHI+8AACwEBAEGI/MAACwEBAEHI/MAACwEBAEGI/cAACwEBAEHI/cAACwEB
    AEGI/sAACwEBAEHI/sAACwEBAEGI/8AACwEBAEHI/8AACwEBAEGIgMEACwEBAEHIgMEACwEBAEGIgcEACwEBAEHIgcEAC
    wEBAEGIgsEACwEBAEHIgsEACwEBAEGIg8EACwEBAEHIg8EACwEBAEGIhMEACwEBAEHIhMEACwEBAEGIhcEACwEBAEHIhc
    EACwEBAEGIhsEACwEBAEHIhsEACwEBAEGIh8EACwEBAEHIh8EACwEBAEGIiMEACwEBAEHIiMEACwEBAEGIicEACwEBAEH
    IicEACwEBAEGIisEACwEBAEHIisEACwEBAEGIi8EACwEBAEHIi8EACwEBAEGIjMEACwEBAEHIjMEACwEBAEGIjcEACwEB
    AEHIjcEACwEBAEGIjsEACwEBAEHIjsEACwEBAEGIj8EACwEBAEHIj8EACwEBAEGIkMEACwEBAEHIkMEACwEBAEGIkcEAC
    wEBAEHIkcEACwEBAEGIksEACwEBAEHIksEACwEBAEGIk8EACwEBAEHIk8EACwEBAEGIlMEACwEBAEHIlMEACwEBAEGIlc
    EACwEBAEHIlcEACwEBAEGIlsEACwEBAEHIlsEACwEBAEGIl8EACwEBAEHIl8EACwEBAEGImMEACwEBAEHImMEACwEBAEG
    ImcEACwEBAEHImcEACwEBAEGImsEACwEBAEHImsEACwEBAEGIm8EACwEBAEHIm8EACwEBAEGInMEACwEBAEHInMEACwEB
    AEGIncEACwEBAEHIncEACwEBAEGInsEACwEBAEHInsEACwEBAEGIn8EACwEBAEHIn8EACwEBAEGIoMEACwEBAEHIoMEAC
    wEBAEGIocEACwEBAEHIocEACwEBAEGIosEACwEBAEHIosEACwEBAEGIo8EACwEBAEHIo8EACwEBAEGIpMEACwEBAEHIpM
    EACwEBAEGIpcEACwEBAEHIpcEACwEBAEGIpsEACwEBAEHIpsEACwEBAEGIp8EACwEBAEHIp8EACwEBAEGIqMEACwEBAEH
    IqMEACwEBAEGIqcEACwEBAEHIqcEACwEBAEGIqsEACwEBAEHIqsEACwEBAEGIq8EACwEBAEHIq8EACwEBAEGIrMEACwEB
    AEHIrMEACwEBAEGIrcEACwEBAEHIrcEACwEBAEGIrsEACwEBAEHIrsEACwEBAEGIr8EACwEBAEHIr8EACwEBAEGIsMEAC
    wEBAEHIsMEACwEBAEGIscEACwEBAEHIscEACwEBAEGIssEACwEBAEHIssEACwEBAEGIs8EACwEBAEHIs8EACwEBAEGItM
    EACwEBAEHItMEACwEBAEGItcEACwEBAEHItcEACwEBAHsJcHJvZHVjZXJzAghsYW5ndWFnZQEEUnVzdAAMcHJvY2Vzc2V
    kLWJ5AwVydXN0Yx0xLjQ5LjAgKGUxODg0YThlMyAyMDIwLTEyLTI5KQZ3YWxydXMGMC4xOC4wDHdhc20tYmluZGdlbhIw
    LjIuNzAgKGI2MzU1YzI3MCk=
`.replace(/[^0-9a-zA-Z/+]/g, "");
const wasmBytes = decode$1(wasmBytesBase64$1);
function bls_init() {
  let ret = wasm.bls_init();
  return ret;
}
let cachegetUint8Memory0 = null;
function getUint8Memory0() {
  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
  }
  return cachegetUint8Memory0;
}
function passArray8ToWasm0(arg, malloc) {
  const ptr = malloc(arg.length * 1);
  getUint8Memory0().set(arg, ptr / 1);
  return [ptr, arg.length];
}
function bls_verify(sig, m2, w) {
  const [ptr0, len0] = passArray8ToWasm0(sig, wasm.__wbindgen_malloc);
  const [ptr1, len1] = passArray8ToWasm0(m2, wasm.__wbindgen_malloc);
  const [ptr2, len2] = passArray8ToWasm0(w, wasm.__wbindgen_malloc);
  const ret = wasm.bls_verify(ptr0, len0, ptr1, len1, ptr2, len2);
  return ret;
}
async function load(module2, imports) {
  if (typeof Response === "function" && module2 instanceof Response) {
    const bytes2 = await module2.arrayBuffer();
    return await WebAssembly.instantiate(bytes2, imports);
  } else {
    const instance = await WebAssembly.instantiate(module2, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module: module2 };
    } else {
      return instance;
    }
  }
}
async function init$d() {
  const imports = {};
  const { instance, module: module2 } = await load(wasmBytes, imports);
  wasm = instance.exports;
  init$d.__wbindgen_wasm_module = module2;
  return wasm;
}
let verify;
async function blsVerify(pk, sig, msg) {
  if (!verify) {
    await init$d();
    if (bls_init() !== 0) {
      throw new Error("Cannot initialize BLS");
    }
    verify = (pk1, sig1, msg1) => {
      return bls_verify(sig1, msg1, pk1) === 0;
    };
  }
  return verify(pk, sig, msg);
}
class UnverifiedCertificateError extends AgentError {
  constructor() {
    super(`Cannot lookup unverified certificate. Call 'verify()' first.`);
  }
}
function hashTreeToString(tree) {
  const indent = (s) => s.split("\n").map((x) => "  " + x).join("\n");
  function labelToString(label) {
    const decoder2 = new TextDecoder(void 0, { fatal: true });
    try {
      return JSON.stringify(decoder2.decode(label));
    } catch (e) {
      return `data(...${label.byteLength} bytes)`;
    }
  }
  switch (tree[0]) {
    case 0:
      return "()";
    case 1: {
      const left = hashTreeToString(tree[1]);
      const right = hashTreeToString(tree[2]);
      return `sub(
 left:
${indent(left)}
---
 right:
${indent(right)}
)`;
    }
    case 2: {
      const label = labelToString(tree[1]);
      const sub = hashTreeToString(tree[2]);
      return `label(
 label:
${indent(label)}
 sub:
${indent(sub)}
)`;
    }
    case 3: {
      return `leaf(...${tree[1].byteLength} bytes)`;
    }
    case 4: {
      return `pruned(${blobToHex(blobFromUint8Array(new Uint8Array(tree[1])))}`;
    }
    default: {
      return `unknown(${JSON.stringify(tree[0])})`;
    }
  }
}
function isBufferEqual(a, b) {
  if (a.length !== b.length) {
    return false;
  }
  for (let i2 = 0; i2 < a.length; i2++) {
    if (a[i2] !== b[i2]) {
      return false;
    }
  }
  return true;
}
class Certificate {
  constructor(response, _agent = getDefaultAgent()) {
    this._agent = _agent;
    this.verified = false;
    this._rootKey = null;
    this.cert = decode$2(response.certificate);
  }
  lookupEx(path) {
    this.checkState();
    return lookupPathEx(path, this.cert.tree);
  }
  lookup(path) {
    this.checkState();
    return lookup_path(path, this.cert.tree);
  }
  async verify() {
    const rootHash = await reconstruct(this.cert.tree);
    const derKey = await this._checkDelegation(this.cert.delegation);
    const sig = this.cert.signature;
    const key = extractDER(derKey);
    const msg = buffer$1.Buffer.concat([domain_sep("ic-state-root"), rootHash]);
    const res = await blsVerify(key, sig, msg);
    this.verified = res;
    return res;
  }
  checkState() {
    if (!this.verified) {
      throw new UnverifiedCertificateError();
    }
  }
  async _checkDelegation(d) {
    if (!d) {
      if (!this._rootKey) {
        if (this._agent.rootKey) {
          this._rootKey = this._agent.rootKey;
          return this._rootKey;
        }
        throw new Error(`Agent does not have a rootKey. Do you need to call 'fetchRootKey'?`);
      }
      return this._rootKey;
    }
    const cert = new Certificate(d, this._agent);
    if (!await cert.verify()) {
      throw new Error("fail to verify delegation certificate");
    }
    const lookup2 = cert.lookupEx(["subnet", d.subnet_id, "public_key"]);
    if (!lookup2) {
      throw new Error(`Could not find subnet key for subnet 0x${d.subnet_id.toString("hex")}`);
    }
    return buffer$1.Buffer.from(lookup2);
  }
}
const DER_PREFIX = buffer$1.Buffer.from("308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100", "hex");
const KEY_LENGTH = 96;
function extractDER(buf) {
  const expectedLength = DER_PREFIX.length + KEY_LENGTH;
  if (buf.length !== expectedLength) {
    throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);
  }
  const prefix = buf.slice(0, DER_PREFIX.length);
  if (!isBufferEqual(prefix, DER_PREFIX)) {
    throw new TypeError(`BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`);
  }
  return buf.slice(DER_PREFIX.length);
}
async function reconstruct(t) {
  switch (t[0]) {
    case 0:
      return hash(domain_sep("ic-hashtree-empty"));
    case 4:
      return buffer$1.Buffer.from(t[1]);
    case 3:
      return hash(buffer$1.Buffer.concat([
        domain_sep("ic-hashtree-leaf"),
        buffer$1.Buffer.from(t[1])
      ]));
    case 2:
      return hash(buffer$1.Buffer.concat([
        domain_sep("ic-hashtree-labeled"),
        buffer$1.Buffer.from(t[1]),
        buffer$1.Buffer.from(await reconstruct(t[2]))
      ]));
    case 1:
      return hash(buffer$1.Buffer.concat([
        domain_sep("ic-hashtree-fork"),
        buffer$1.Buffer.from(await reconstruct(t[1])),
        buffer$1.Buffer.from(await reconstruct(t[2]))
      ]));
    default:
      throw new Error("unreachable");
  }
}
function domain_sep(s) {
  const buf = buffer$1.Buffer.alloc(1);
  buf.writeUInt8(s.length, 0);
  return buffer$1.Buffer.concat([buf, buffer$1.Buffer.from(s)]);
}
function lookupPathEx(path, tree) {
  const maybeReturn = lookup_path(path.map((p) => {
    if (typeof p === "string") {
      return blobFromText(p);
    } else {
      return blobFromUint8Array(new Uint8Array(p));
    }
  }), tree);
  return maybeReturn && blobToUint8Array(blobFromBuffer(maybeReturn));
}
function lookup_path(path, tree) {
  if (path.length === 0) {
    switch (tree[0]) {
      case 3: {
        return buffer$1.Buffer.from(tree[1]);
      }
      default: {
        return void 0;
      }
    }
  }
  const t = find_label(path[0], flatten_forks(tree));
  if (t) {
    return lookup_path(path.slice(1), t);
  }
}
function flatten_forks(t) {
  switch (t[0]) {
    case 0:
      return [];
    case 1:
      return flatten_forks(t[1]).concat(flatten_forks(t[2]));
    default:
      return [t];
  }
}
function find_label(l, trees) {
  if (trees.length === 0) {
    return void 0;
  }
  for (const t of trees) {
    if (t[0] === 2) {
      const p = buffer$1.Buffer.from(t[1]);
      if (isBufferEqual(l, p)) {
        return t[2];
      }
    }
  }
}
const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1e3;
function defaultStrategy() {
  return chain(conditionalDelay(once(), 1e3), backoff(1e3, 1.2), timeout$1(FIVE_MINUTES_IN_MSEC));
}
function once() {
  let first = true;
  return async () => {
    if (first) {
      first = false;
      return true;
    }
    return false;
  };
}
function conditionalDelay(condition, timeInMsec) {
  return async (canisterId2, requestId, status) => {
    if (await condition(canisterId2, requestId, status)) {
      return new Promise((resolve) => setTimeout(resolve, timeInMsec));
    }
  };
}
function maxAttempts(count) {
  let attempts = count;
  return async (canisterId2, requestId, status) => {
    if (--attempts <= 0) {
      throw new Error(`Failed to retrieve a reply for request after ${count} attempts:
  Request ID: ${toHex(requestId)}
  Request status: ${status}
`);
    }
  };
}
function throttle(throttleInMsec) {
  return () => new Promise((resolve) => setTimeout(resolve, throttleInMsec));
}
function timeout$1(timeInMsec) {
  const end = Date.now() + timeInMsec;
  return async (canisterId2, requestId, status) => {
    if (Date.now() > end) {
      throw new Error(`Request timed out after ${timeInMsec} msec:
  Request ID: ${toHex(requestId)}
  Request status: ${status}
`);
    }
  };
}
function backoff(startingThrottleInMsec, backoffFactor) {
  let currentThrottling = startingThrottleInMsec;
  return () => new Promise((resolve) => setTimeout(() => {
    currentThrottling *= backoffFactor;
    resolve();
  }, currentThrottling));
}
function chain(...strategies) {
  return async (canisterId2, requestId, status) => {
    for (const a of strategies) {
      await a(canisterId2, requestId, status);
    }
  };
}
const strategy = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  defaultStrategy,
  once,
  conditionalDelay,
  maxAttempts,
  throttle,
  timeout: timeout$1,
  backoff,
  chain
}, Symbol.toStringTag, { value: "Module" }));
async function pollForResponse(agent, canisterId2, requestId, strategy2) {
  const path = [blobFromText("request_status"), requestId];
  const state = await agent.readState(canisterId2, { paths: [path] });
  const cert = new Certificate(state, agent);
  const verified = await cert.verify();
  if (!verified) {
    throw new Error("Fail to verify certificate");
  }
  const maybeBuf = cert.lookup([...path, blobFromText("status")]);
  let status;
  if (typeof maybeBuf === "undefined") {
    status = RequestStatusResponseStatus$1.Unknown;
  } else {
    status = maybeBuf.toString();
  }
  switch (status) {
    case RequestStatusResponseStatus$1.Replied: {
      return cert.lookup([...path, blobFromText("reply")]);
    }
    case RequestStatusResponseStatus$1.Received:
    case RequestStatusResponseStatus$1.Unknown:
    case RequestStatusResponseStatus$1.Processing:
      await strategy2(canisterId2, requestId, status);
      return pollForResponse(agent, canisterId2, requestId, strategy2);
    case RequestStatusResponseStatus$1.Rejected: {
      const rejectCode = cert.lookup([...path, blobFromText("reject_code")]).toString();
      const rejectMessage = cert.lookup([...path, blobFromText("reject_message")]).toString();
      throw new Error(`Call was rejected:
  Request ID: ${toHex(requestId)}
  Reject code: ${rejectCode}
  Reject text: ${rejectMessage}
`);
    }
    case RequestStatusResponseStatus$1.Done:
      throw new Error(`Call was marked as done but we never saw the reply:
  Request ID: ${toHex(requestId)}
`);
  }
  throw new Error("unreachable");
}
const index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  pollForResponse,
  strategy,
  defaultStrategy
}, Symbol.toStringTag, { value: "Module" }));
class ActorCallError extends AgentError {
  constructor(canisterId2, methodName, type, props) {
    super([
      `Call failed:`,
      `  Canister: ${canisterId2.toText()}`,
      `  Method: ${methodName} (${type})`,
      ...Object.getOwnPropertyNames(props).map((n) => `  "${n}": ${JSON.stringify(props[n])}`)
    ].join("\n"));
    this.canisterId = canisterId2;
    this.methodName = methodName;
    this.type = type;
    this.props = props;
  }
}
class QueryCallRejectedError extends ActorCallError {
  constructor(canisterId2, methodName, result) {
    var _a;
    super(canisterId2, methodName, "query", {
      Status: result.status,
      Code: (_a = ReplicaRejectCode$1[result.reject_code]) !== null && _a !== void 0 ? _a : `Unknown Code "${result.reject_code}"`,
      Message: result.reject_message
    });
    this.result = result;
  }
}
class UpdateCallRejectedError extends ActorCallError {
  constructor(canisterId2, methodName, requestId, response) {
    super(canisterId2, methodName, "update", {
      "Request ID": toHex(requestId),
      "HTTP status code": response.status.toString(),
      "HTTP status text": response.statusText
    });
    this.requestId = requestId;
    this.response = response;
  }
}
var CanisterInstallMode$1;
(function(CanisterInstallMode2) {
  CanisterInstallMode2["Install"] = "install";
  CanisterInstallMode2["Reinstall"] = "reinstall";
  CanisterInstallMode2["Upgrade"] = "upgrade";
})(CanisterInstallMode$1 || (CanisterInstallMode$1 = {}));
const metadataSymbol = Symbol.for("ic-agent-metadata");
class Actor {
  constructor(metadata) {
    this[metadataSymbol] = Object.freeze(metadata);
  }
  static agentOf(actor) {
    return actor[metadataSymbol].config.agent;
  }
  static interfaceOf(actor) {
    return actor[metadataSymbol].service;
  }
  static canisterIdOf(actor) {
    return Principal$2.from(actor[metadataSymbol].config.canisterId);
  }
  static async install(fields, config) {
    const mode = fields.mode === void 0 ? CanisterInstallMode$1.Install : fields.mode;
    const arg = fields.arg ? [...fields.arg] : [];
    const wasmModule = [...fields.module];
    const canisterId2 = typeof config.canisterId === "string" ? Principal$2.fromText(config.canisterId) : config.canisterId;
    await getManagementCanister(config).install_code({
      mode: { [mode]: null },
      arg,
      wasm_module: wasmModule,
      canister_id: canisterId2
    });
  }
  static async createCanister(config) {
    const { canister_id: canisterId2 } = await getManagementCanister(config || {}).provisional_create_canister_with_cycles({ amount: [], settings: [] });
    return canisterId2;
  }
  static async createAndInstallCanister(interfaceFactory, fields, config) {
    const canisterId2 = await this.createCanister(config);
    await this.install(Object.assign({}, fields), Object.assign(Object.assign({}, config), { canisterId: canisterId2 }));
    return this.createActor(interfaceFactory, Object.assign(Object.assign({}, config), { canisterId: canisterId2 }));
  }
  static createActorClass(interfaceFactory) {
    const service = interfaceFactory({ IDL });
    class CanisterActor extends Actor {
      constructor(config) {
        const canisterId2 = typeof config.canisterId === "string" ? Principal$2.fromText(config.canisterId) : config.canisterId;
        super({
          config: Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), config), { canisterId: canisterId2 }),
          service
        });
        for (const [methodName, func] of service._fields) {
          this[methodName] = _createActorMethod(this, methodName, func);
        }
      }
    }
    return CanisterActor;
  }
  static createActor(interfaceFactory, configuration) {
    return new (this.createActorClass(interfaceFactory))(configuration);
  }
}
function decodeReturnValue(types, msg) {
  const returnValues = decode$3(types, buffer$1.Buffer.from(msg));
  switch (returnValues.length) {
    case 0:
      return void 0;
    case 1:
      return returnValues[0];
    default:
      return returnValues;
  }
}
const DEFAULT_ACTOR_CONFIG = {
  pollingStrategyFactory: defaultStrategy
};
function _createActorMethod(actor, methodName, func) {
  let caller;
  if (func.annotations.includes("query")) {
    caller = async (options, ...args) => {
      var _a, _b;
      options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).queryTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));
      const agent = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();
      const cid = Principal$2.from(options.canisterId || actor[metadataSymbol].config.canisterId);
      const arg = encode$2(func.argTypes, args);
      const result = await agent.query(cid, { methodName, arg });
      switch (result.status) {
        case "rejected":
          throw new QueryCallRejectedError(cid, methodName, result);
        case "replied":
          return decodeReturnValue(func.retTypes, result.reply.arg);
      }
    };
  } else {
    caller = async (options, ...args) => {
      var _a, _b;
      options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).callTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));
      const agent = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();
      const { canisterId: canisterId2, effectiveCanisterId, pollingStrategyFactory } = Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), actor[metadataSymbol].config), options);
      const cid = Principal$2.from(canisterId2);
      const ecid = effectiveCanisterId !== void 0 ? Principal$2.from(effectiveCanisterId) : cid;
      const arg = encode$2(func.argTypes, args);
      const { requestId, response } = await agent.call(cid, {
        methodName,
        arg,
        effectiveCanisterId: ecid
      });
      if (!response.ok) {
        throw new UpdateCallRejectedError(cid, methodName, requestId, response);
      }
      const pollStrategy = pollingStrategyFactory();
      const responseBytes = await pollForResponse(agent, ecid, requestId, pollStrategy);
      if (responseBytes !== void 0) {
        return decodeReturnValue(func.retTypes, responseBytes);
      } else if (func.retTypes.length === 0) {
        return void 0;
      } else {
        throw new Error(`Call was returned undefined, but type [${func.retTypes.join(",")}].`);
      }
    };
  }
  const handler = (...args) => caller({}, ...args);
  handler.withOptions = (options) => (...args) => caller(options, ...args);
  return handler;
}
const assetCanister = ({ IDL: IDL2 }) => {
  return IDL2.Service({
    retrieve: IDL2.Func([IDL2.Text], [IDL2.Vec(IDL2.Nat8)], ["query"]),
    store: IDL2.Func([IDL2.Text, IDL2.Vec(IDL2.Nat8)], [], [])
  });
};
function createAssetCanisterActor(config) {
  return Actor.createActor(assetCanister, config);
}
const esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  polling: index,
  Cbor: cbor,
  ActorCallError,
  QueryCallRejectedError,
  UpdateCallRejectedError,
  get CanisterInstallMode() {
    return CanisterInstallMode$1;
  },
  Actor,
  get ReplicaRejectCode() {
    return ReplicaRejectCode$1;
  },
  Expiry,
  makeNonceTransform,
  makeExpiryTransform,
  get RequestStatusResponseStatus() {
    return RequestStatusResponseStatus$1;
  },
  HttpAgent,
  get ProxyMessageKind() {
    return ProxyMessageKind$1;
  },
  ProxyStubAgent,
  ProxyAgent,
  getDefaultAgent,
  SignIdentity,
  AnonymousIdentity,
  createIdentityDescriptor,
  isIdentityDescriptor,
  UnverifiedCertificateError,
  hashTreeToString,
  Certificate,
  reconstruct,
  lookupPathEx,
  lookup_path,
  get SubmitRequestType() {
    return SubmitRequestType$1;
  },
  createAssetCanisterActor,
  getManagementCanister,
  toHex,
  hash,
  requestIdOf,
  get verify() {
    return verify;
  },
  blsVerify
}, Symbol.toStringTag, { value: "Module" }));
const require$$5 = /* @__PURE__ */ getAugmentedNamespace(esm);
const require$$4 = /* @__PURE__ */ getAugmentedNamespace(esm$1);
var browserPonyfill = { exports: {} };
(function(module2, exports2) {
  var global2 = typeof self !== "undefined" ? self : commonjsGlobal;
  var __self__ = function() {
    function F() {
      this.fetch = false;
      this.DOMException = global2.DOMException;
    }
    F.prototype = global2;
    return new F();
  }();
  (function(self2) {
    (function(exports3) {
      var support = {
        searchParams: "URLSearchParams" in self2,
        iterable: "Symbol" in self2 && "iterator" in Symbol,
        blob: "FileReader" in self2 && "Blob" in self2 && function() {
          try {
            new Blob();
            return true;
          } catch (e) {
            return false;
          }
        }(),
        formData: "FormData" in self2,
        arrayBuffer: "ArrayBuffer" in self2
      };
      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      }
      if (support.arrayBuffer) {
        var viewClasses = [
          "[object Int8Array]",
          "[object Uint8Array]",
          "[object Uint8ClampedArray]",
          "[object Int16Array]",
          "[object Uint16Array]",
          "[object Int32Array]",
          "[object Uint32Array]",
          "[object Float32Array]",
          "[object Float64Array]"
        ];
        var isArrayBufferView2 = ArrayBuffer.isView || function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
      }
      function normalizeName(name) {
        if (typeof name !== "string") {
          name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
          throw new TypeError("Invalid character in header field name");
        }
        return name.toLowerCase();
      }
      function normalizeValue(value2) {
        if (typeof value2 !== "string") {
          value2 = String(value2);
        }
        return value2;
      }
      function iteratorFor(items) {
        var iterator = {
          next: function() {
            var value2 = items.shift();
            return { done: value2 === void 0, value: value2 };
          }
        };
        if (support.iterable) {
          iterator[Symbol.iterator] = function() {
            return iterator;
          };
        }
        return iterator;
      }
      function Headers(headers) {
        this.map = {};
        if (headers instanceof Headers) {
          headers.forEach(function(value2, name) {
            this.append(name, value2);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(header) {
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function(name) {
            this.append(name, headers[name]);
          }, this);
        }
      }
      Headers.prototype.append = function(name, value2) {
        name = normalizeName(name);
        value2 = normalizeValue(value2);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ", " + value2 : value2;
      };
      Headers.prototype["delete"] = function(name) {
        delete this.map[normalizeName(name)];
      };
      Headers.prototype.get = function(name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
      };
      Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name));
      };
      Headers.prototype.set = function(name, value2) {
        this.map[normalizeName(name)] = normalizeValue(value2);
      };
      Headers.prototype.forEach = function(callback, thisArg) {
        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
      };
      Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value2, name) {
          items.push(name);
        });
        return iteratorFor(items);
      };
      Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value2) {
          items.push(value2);
        });
        return iteratorFor(items);
      };
      Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value2, name) {
          items.push([name, value2]);
        });
        return iteratorFor(items);
      };
      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }
      function consumed(body) {
        if (body.bodyUsed) {
          return Promise.reject(new TypeError("Already read"));
        }
        body.bodyUsed = true;
      }
      function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
          reader.onload = function() {
            resolve(reader.result);
          };
          reader.onerror = function() {
            reject(reader.error);
          };
        });
      }
      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
      }
      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsText(blob);
        return promise;
      }
      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for (var i2 = 0; i2 < view.length; i2++) {
          chars[i2] = String.fromCharCode(view[i2]);
        }
        return chars.join("");
      }
      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0);
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer;
        }
      }
      function Body() {
        this.bodyUsed = false;
        this._initBody = function(body) {
          this._bodyInit = body;
          if (!body) {
            this._bodyText = "";
          } else if (typeof body === "string") {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView2(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }
          if (!this.headers.get("content-type")) {
            if (typeof body === "string") {
              this.headers.set("content-type", "text/plain;charset=UTF-8");
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set("content-type", this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
            }
          }
        };
        if (support.blob) {
          this.blob = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as blob");
            } else {
              return Promise.resolve(new Blob([this._bodyText]));
            }
          };
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
            } else {
              return this.blob().then(readBlobAsArrayBuffer);
            }
          };
        }
        this.text = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
          } else if (this._bodyFormData) {
            throw new Error("could not read FormData body as text");
          } else {
            return Promise.resolve(this._bodyText);
          }
        };
        if (support.formData) {
          this.formData = function() {
            return this.text().then(decode2);
          };
        }
        this.json = function() {
          return this.text().then(JSON.parse);
        };
        return this;
      }
      var methods2 = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
      function normalizeMethod(method2) {
        var upcased = method2.toUpperCase();
        return methods2.indexOf(upcased) > -1 ? upcased : method2;
      }
      function Request(input, options) {
        options = options || {};
        var body = options.body;
        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError("Already read");
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || "same-origin";
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || "GET");
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal;
        this.referrer = null;
        if ((this.method === "GET" || this.method === "HEAD") && body) {
          throw new TypeError("Body not allowed for GET or HEAD requests");
        }
        this._initBody(body);
      }
      Request.prototype.clone = function() {
        return new Request(this, { body: this._bodyInit });
      };
      function decode2(body) {
        var form = new FormData();
        body.trim().split("&").forEach(function(bytes2) {
          if (bytes2) {
            var split = bytes2.split("=");
            var name = split.shift().replace(/\+/g, " ");
            var value2 = split.join("=").replace(/\+/g, " ");
            form.append(decodeURIComponent(name), decodeURIComponent(value2));
          }
        });
        return form;
      }
      function parseHeaders2(rawHeaders) {
        var headers = new Headers();
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
        preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
          var parts = line.split(":");
          var key = parts.shift().trim();
          if (key) {
            var value2 = parts.join(":").trim();
            headers.append(key, value2);
          }
        });
        return headers;
      }
      Body.call(Request.prototype);
      function Response2(bodyInit, options) {
        if (!options) {
          options = {};
        }
        this.type = "default";
        this.status = options.status === void 0 ? 200 : options.status;
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = "statusText" in options ? options.statusText : "OK";
        this.headers = new Headers(options.headers);
        this.url = options.url || "";
        this._initBody(bodyInit);
      }
      Body.call(Response2.prototype);
      Response2.prototype.clone = function() {
        return new Response2(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        });
      };
      Response2.error = function() {
        var response = new Response2(null, { status: 0, statusText: "" });
        response.type = "error";
        return response;
      };
      var redirectStatuses = [301, 302, 303, 307, 308];
      Response2.redirect = function(url2, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError("Invalid status code");
        }
        return new Response2(null, { status, headers: { location: url2 } });
      };
      exports3.DOMException = self2.DOMException;
      try {
        new exports3.DOMException();
      } catch (err) {
        exports3.DOMException = function(message, name) {
          this.message = message;
          this.name = name;
          var error = Error(message);
          this.stack = error.stack;
        };
        exports3.DOMException.prototype = Object.create(Error.prototype);
        exports3.DOMException.prototype.constructor = exports3.DOMException;
      }
      function fetch2(input, init2) {
        return new Promise(function(resolve, reject) {
          var request2 = new Request(input, init2);
          if (request2.signal && request2.signal.aborted) {
            return reject(new exports3.DOMException("Aborted", "AbortError"));
          }
          var xhr2 = new XMLHttpRequest();
          function abortXhr() {
            xhr2.abort();
          }
          xhr2.onload = function() {
            var options = {
              status: xhr2.status,
              statusText: xhr2.statusText,
              headers: parseHeaders2(xhr2.getAllResponseHeaders() || "")
            };
            options.url = "responseURL" in xhr2 ? xhr2.responseURL : options.headers.get("X-Request-URL");
            var body = "response" in xhr2 ? xhr2.response : xhr2.responseText;
            resolve(new Response2(body, options));
          };
          xhr2.onerror = function() {
            reject(new TypeError("Network request failed"));
          };
          xhr2.ontimeout = function() {
            reject(new TypeError("Network request failed"));
          };
          xhr2.onabort = function() {
            reject(new exports3.DOMException("Aborted", "AbortError"));
          };
          xhr2.open(request2.method, request2.url, true);
          if (request2.credentials === "include") {
            xhr2.withCredentials = true;
          } else if (request2.credentials === "omit") {
            xhr2.withCredentials = false;
          }
          if ("responseType" in xhr2 && support.blob) {
            xhr2.responseType = "blob";
          }
          request2.headers.forEach(function(value2, name) {
            xhr2.setRequestHeader(name, value2);
          });
          if (request2.signal) {
            request2.signal.addEventListener("abort", abortXhr);
            xhr2.onreadystatechange = function() {
              if (xhr2.readyState === 4) {
                request2.signal.removeEventListener("abort", abortXhr);
              }
            };
          }
          xhr2.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
        });
      }
      fetch2.polyfill = true;
      if (!self2.fetch) {
        self2.fetch = fetch2;
        self2.Headers = Headers;
        self2.Request = Request;
        self2.Response = Response2;
      }
      exports3.Headers = Headers;
      exports3.Request = Request;
      exports3.Response = Response2;
      exports3.fetch = fetch2;
      Object.defineProperty(exports3, "__esModule", { value: true });
      return exports3;
    })({});
  })(__self__);
  __self__.fetch.ponyfill = true;
  delete __self__.fetch.polyfill;
  var ctx = __self__;
  exports2 = ctx.fetch;
  exports2.default = ctx.fetch;
  exports2.fetch = ctx.fetch;
  exports2.Headers = ctx.Headers;
  exports2.Request = ctx.Request;
  exports2.Response = ctx.Response;
  module2.exports = exports2;
})(browserPonyfill, browserPonyfill.exports);
var ext = {};
var ext_did = {};
Object.defineProperty(ext_did, "__esModule", { value: true });
ext_did.init = void 0;
ext_did.default = ({ IDL: IDL2 }) => {
  const TokenIndex = IDL2.Nat32;
  const AccountIdentifier = IDL2.Text;
  const TokenIdentifier = IDL2.Text;
  const Balance = IDL2.Nat;
  const Time = IDL2.Int;
  const SubAccount = IDL2.Vec(IDL2.Nat8);
  const Memo = IDL2.Vec(IDL2.Nat8);
  const Listing = IDL2.Record({
    locked: IDL2.Opt(Time),
    seller: IDL2.Principal,
    price: IDL2.Nat64
  });
  const User = IDL2.Variant({
    principal: IDL2.Principal,
    address: AccountIdentifier
  });
  const CommonError = IDL2.Variant({
    InvalidToken: TokenIdentifier,
    Other: IDL2.Text
  });
  const BalanceRequest = IDL2.Record({
    token: TokenIdentifier,
    user: User
  });
  const BalanceResult = IDL2.Variant({ ok: Balance, err: CommonError });
  const DetailsResult = IDL2.Variant({
    ok: IDL2.Tuple(AccountIdentifier, IDL2.Opt(Listing)),
    err: CommonError
  });
  const TokensResult = IDL2.Variant({
    ok: IDL2.Vec(TokenIndex),
    err: CommonError
  });
  const TokenExtResult = IDL2.Variant({
    ok: IDL2.Vec(IDL2.Tuple(TokenIndex, IDL2.Opt(Listing), IDL2.Opt(IDL2.Vec(IDL2.Nat8)))),
    err: CommonError
  });
  const TransferRequest = IDL2.Record({
    to: User,
    token: TokenIdentifier,
    notify: IDL2.Bool,
    from: User,
    memo: Memo,
    subaccount: IDL2.Opt(SubAccount),
    amount: Balance,
    fee: IDL2.Nat
  });
  const TransferResult = IDL2.Variant({
    ok: Balance,
    err: IDL2.Variant({
      CannotNotify: AccountIdentifier,
      InsufficientBalance: IDL2.Null,
      InvalidToken: TokenIdentifier,
      Rejected: IDL2.Null,
      Unauthorized: AccountIdentifier,
      Other: IDL2.Text
    })
  });
  const Metadata = IDL2.Variant({
    fungible: IDL2.Record({
      decimals: IDL2.Nat8,
      metadata: IDL2.Opt(IDL2.Vec(IDL2.Nat8)),
      name: IDL2.Text,
      symbol: IDL2.Text
    }),
    nonfungible: IDL2.Record({ metadata: IDL2.Opt(IDL2.Vec(IDL2.Nat8)) })
  });
  const MetadataResult = IDL2.Variant({ ok: Metadata, err: CommonError });
  const SupplyResult = IDL2.Variant({ ok: Balance, err: CommonError });
  return IDL2.Service({
    extensions: IDL2.Func([], [IDL2.Vec(IDL2.Text)], ["query"]),
    balance: IDL2.Func([BalanceRequest], [BalanceResult], ["query"]),
    details: IDL2.Func([TokenIdentifier], [DetailsResult], ["query"]),
    tokens: IDL2.Func([AccountIdentifier], [TokensResult], ["query"]),
    tokens_ext: IDL2.Func([AccountIdentifier], [TokenExtResult], ["query"]),
    transfer: IDL2.Func([TransferRequest], [TransferResult], []),
    metadata: IDL2.Func([TokenIdentifier], [MetadataResult], ["query"]),
    supply: IDL2.Func([TokenIdentifier], [SupplyResult], ["query"])
  });
};
const init$c = () => {
  return [];
};
ext_did.init = init$c;
var _default = {};
Object.defineProperty(_default, "__esModule", { value: true });
class NFT {
  constructor(canisterId2, agent) {
    this.agent = agent;
    this.canisterId = canisterId2;
  }
}
_default.default = NFT;
var account = {};
var cryptoJs = { exports: {} };
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var core = { exports: {} };
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var hasRequiredCore;
function requireCore() {
  if (hasRequiredCore)
    return core.exports;
  hasRequiredCore = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory();
      }
    })(commonjsGlobal, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined$1) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof commonjsGlobal !== "undefined" && commonjsGlobal.crypto) {
          crypto2 = commonjsGlobal.crypto;
        }
        if (!crypto2 && typeof commonjsRequire === "function") {
          try {
            crypto2 = require$$0;
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            init: function() {
            },
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          toString: function(encoder2) {
            return (encoder2 || Hex).stringify(this);
          },
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i2 = 0; i2 < thatSigBytes; i2++) {
                var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2.words = this.words.slice(0);
            return clone2;
          },
          random: function(nBytes) {
            var words = [];
            for (var i2 = 0; i2 < nBytes; i2 += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
              words[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i2 = 0; i2 < latin1StrLength; i2++) {
              words[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          _append: function(data2) {
            if (typeof data2 == "string") {
              data2 = Utf8.parse(data2);
            }
            this._data.concat(data2);
            this._nDataBytes += data2.sigBytes;
          },
          _process: function(doFlush) {
            var processedWords;
            var data2 = this._data;
            var dataWords = data2.words;
            var dataSigBytes = data2.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data2.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2._data = this._data.clone();
            return clone2;
          },
          _minBufferSize: 0
        });
        C_lib.Hasher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash2 = this._doFinalize();
            return hash2;
          },
          blockSize: 512 / 32,
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  })(core);
  return core.exports;
}
var x64Core = { exports: {} };
var hasRequiredX64Core;
function requireX64Core() {
  if (hasRequiredX64Core)
    return x64Core.exports;
  hasRequiredX64Core = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function(undefined$1) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        C_x64.Word = Base.extend({
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
        });
        C_x64.WordArray = Base.extend({
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i2 = 0; i2 < x64WordsLength; i2++) {
              var x64Word = x64Words[i2];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          clone: function() {
            var clone2 = Base.clone.call(this);
            var words = clone2.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i2 = 0; i2 < wordsLength; i2++) {
              words[i2] = words[i2].clone();
            }
            return clone2;
          }
        });
      })();
      return CryptoJS;
    });
  })(x64Core);
  return x64Core.exports;
}
var libTypedarrays = { exports: {} };
var hasRequiredLibTypedarrays;
function requireLibTypedarrays() {
  if (hasRequiredLibTypedarrays)
    return libTypedarrays.exports;
  hasRequiredLibTypedarrays = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i2 = 0; i2 < typedArrayByteLength; i2++) {
              words[i2 >>> 2] |= typedArray[i2] << 24 - i2 % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  })(libTypedarrays);
  return libTypedarrays.exports;
}
var encUtf16 = { exports: {} };
var hasRequiredEncUtf16;
function requireEncUtf16() {
  if (hasRequiredEncUtf16)
    return encUtf16.exports;
  hasRequiredEncUtf16 = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        C_enc.Utf16 = C_enc.Utf16BE = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = words[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words[i2 >>> 1] |= utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = swapEndian(words[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words[i2 >>> 1] |= swapEndian(utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  })(encUtf16);
  return encUtf16.exports;
}
var encBase64 = { exports: {} };
var hasRequiredEncBase64;
function requireEncBase64() {
  if (hasRequiredEncBase64)
    return encBase64.exports;
  hasRequiredEncBase64 = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        C_enc.Base64 = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map2 = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map2 = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map2.length; j++) {
                reverseMap[map2.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  })(encBase64);
  return encBase64.exports;
}
var encBase64url = { exports: {} };
var hasRequiredEncBase64url;
function requireEncBase64url() {
  if (hasRequiredEncBase64url)
    return encBase64url.exports;
  hasRequiredEncBase64url = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        C_enc.Base64url = {
          stringify: function(wordArray, urlSafe = true) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map2 = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str, urlSafe = true) {
            var base64StrLength = base64Str.length;
            var map2 = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map2.length; j++) {
                reverseMap[map2.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64url;
    });
  })(encBase64url);
  return encBase64url.exports;
}
var md5 = { exports: {} };
var hasRequiredMd5;
function requireMd5() {
  if (hasRequiredMd5)
    return md5.exports;
  hasRequiredMd5 = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i2 = 0; i2 < 64; i2++) {
            T[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c2 = H[2];
            var d = H[3];
            a = FF(a, b, c2, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c2, M_offset_1, 12, T[1]);
            c2 = FF(c2, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c2, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c2, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c2, M_offset_5, 12, T[5]);
            c2 = FF(c2, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c2, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c2, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c2, M_offset_9, 12, T[9]);
            c2 = FF(c2, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c2, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c2, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c2, M_offset_13, 12, T[13]);
            c2 = FF(c2, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c2, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c2, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c2, M_offset_6, 9, T[17]);
            c2 = GG(c2, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c2, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c2, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c2, M_offset_10, 9, T[21]);
            c2 = GG(c2, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c2, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c2, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c2, M_offset_14, 9, T[25]);
            c2 = GG(c2, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c2, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c2, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c2, M_offset_2, 9, T[29]);
            c2 = GG(c2, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c2, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c2, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c2, M_offset_8, 11, T[33]);
            c2 = HH(c2, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c2, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c2, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c2, M_offset_4, 11, T[37]);
            c2 = HH(c2, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c2, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c2, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c2, M_offset_0, 11, T[41]);
            c2 = HH(c2, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c2, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c2, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c2, M_offset_12, 11, T[45]);
            c2 = HH(c2, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c2, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c2, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c2, M_offset_7, 10, T[49]);
            c2 = II(c2, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c2, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c2, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c2, M_offset_3, 10, T[53]);
            c2 = II(c2, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c2, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c2, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c2, M_offset_15, 10, T[57]);
            c2 = II(c2, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c2, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c2, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c2, M_offset_11, 10, T[61]);
            c2 = II(c2, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c2, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c2 | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data2 = this._data;
            var dataWords = data2.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data2.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data2.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash2 = this._hash;
            var H = hash2.words;
            for (var i2 = 0; i2 < 4; i2++) {
              var H_i = H[i2];
              H[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash2;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function FF(a, b, c2, d, x, s, t) {
          var n = a + (b & c2 | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function GG(a, b, c2, d, x, s, t) {
          var n = a + (b & d | c2 & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function HH(a, b, c2, d, x, s, t) {
          var n = a + (b ^ c2 ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function II(a, b, c2, d, x, s, t) {
          var n = a + (c2 ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  })(md5);
  return md5.exports;
}
var sha1 = { exports: {} };
var hasRequiredSha1;
function requireSha1() {
  if (hasRequiredSha1)
    return sha1.exports;
  hasRequiredSha1 = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c2 = H[2];
            var d = H[3];
            var e = H[4];
            for (var i2 = 0; i2 < 80; i2++) {
              if (i2 < 16) {
                W[i2] = M[offset + i2] | 0;
              } else {
                var n = W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16];
                W[i2] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i2];
              if (i2 < 20) {
                t += (b & c2 | ~b & d) + 1518500249;
              } else if (i2 < 40) {
                t += (b ^ c2 ^ d) + 1859775393;
              } else if (i2 < 60) {
                t += (b & c2 | b & d | c2 & d) - 1894007588;
              } else {
                t += (b ^ c2 ^ d) - 899497514;
              }
              e = d;
              d = c2;
              c2 = b << 30 | b >>> 2;
              b = a;
              a = t;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c2 | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
          },
          _doFinalize: function() {
            var data2 = this._data;
            var dataWords = data2.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data2.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data2.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  })(sha1);
  return sha1.exports;
}
var sha256 = { exports: {} };
var hasRequiredSha256;
function requireSha256() {
  if (hasRequiredSha256)
    return sha256.exports;
  hasRequiredSha256 = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K2 = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K2[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c2 = H2[2];
            var d = H2[3];
            var e = H2[4];
            var f = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i2 = 0; i2 < 64; i2++) {
              if (i2 < 16) {
                W[i2] = M[offset + i2] | 0;
              } else {
                var gamma0x = W[i2 - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i2 - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i2] = gamma0 + W[i2 - 7] + gamma1 + W[i2 - 16];
              }
              var ch = e & f ^ ~e & g;
              var maj = a & b ^ a & c2 ^ b & c2;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K2[i2] + W[i2];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c2;
              c2 = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c2 | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e | 0;
            H2[5] = H2[5] + f | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data2 = this._data;
            var dataWords = data2.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data2.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data2.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  })(sha256);
  return sha256.exports;
}
var sha224$1 = { exports: {} };
var hasRequiredSha224;
function requireSha224() {
  if (hasRequiredSha224)
    return sha224$1.exports;
  hasRequiredSha224 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireSha256());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash2 = SHA256._doFinalize.call(this);
            hash2.sigBytes -= 4;
            return hash2;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  })(sha224$1);
  return sha224$1.exports;
}
var sha512 = { exports: {} };
var hasRequiredSha512;
function requireSha512() {
  if (hasRequiredSha512)
    return sha512.exports;
  hasRequiredSha512 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireX64Core());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K2 = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i2 = 0; i2 < 80; i2++) {
            W[i2] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i2 = 0; i2 < 80; i2++) {
              var Wil;
              var Wih;
              var Wi = W[i2];
              if (i2 < 16) {
                Wih = Wi.high = M[offset + i2 * 2] | 0;
                Wil = Wi.low = M[offset + i2 * 2 + 1] | 0;
              } else {
                var gamma0x = W[i2 - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i2 - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i2 - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i2 - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K2[i2];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data2 = this._data;
            var dataWords = data2.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data2.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data2.sigBytes = dataWords.length * 4;
            this._process();
            var hash2 = this._hash.toX32();
            return hash2;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  })(sha512);
  return sha512.exports;
}
var sha384 = { exports: {} };
var hasRequiredSha384;
function requireSha384() {
  if (hasRequiredSha384)
    return sha384.exports;
  hasRequiredSha384 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireX64Core(), requireSha512());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash2 = SHA512._doFinalize.call(this);
            hash2.sigBytes -= 16;
            return hash2;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  })(sha384);
  return sha384.exports;
}
var sha3 = { exports: {} };
var hasRequiredSha3;
function requireSha3() {
  if (hasRequiredSha3)
    return sha3.exports;
  hasRequiredSha3 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireX64Core());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i2 = 0; i2 < 24; i2++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i2] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i2 = 0; i2 < 25; i2++) {
            T[i2] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i2 = 0; i2 < nBlockSizeLanes; i2++) {
              var M2i = M[offset + 2 * i2];
              var M2i1 = M[offset + 2 * i2 + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i2];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data2 = this._data;
            var dataWords = data2.words;
            this._nDataBytes * 8;
            var nBitsLeft = data2.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data2.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i2 = 0; i2 < outputLengthLanes; i2++) {
              var lane = state[i2];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            var state = clone2._state = this._state.slice(0);
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = state[i2].clone();
            }
            return clone2;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  })(sha3);
  return sha3.exports;
}
var ripemd160 = { exports: {} };
var hasRequiredRipemd160;
function requireRipemd160() {
  if (hasRequiredRipemd160)
    return ripemd160.exports;
  hasRequiredRipemd160 = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      /** @preserve
      			(c) 2012 by Cédric Mesnil. All rights reserved.
      
      			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
      
      			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      
      			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      			*/
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i2 = 0; i2 < 80; i2 += 1) {
              t = al + M[offset + zl[i2]] | 0;
              if (i2 < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i2 < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i2 < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i2 < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i2]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i2]] | 0;
              if (i2 < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i2 < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i2 < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i2 < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i2]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data2 = this._data;
            var dataWords = data2.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data2.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data2.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash2 = this._hash;
            var H = hash2.words;
            for (var i2 = 0; i2 < 5; i2++) {
              var H_i = H[i2];
              H[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash2;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })();
      return CryptoJS.RIPEMD160;
    });
  })(ripemd160);
  return ripemd160.exports;
}
var hmac = { exports: {} };
var hasRequiredHmac;
function requireHmac() {
  if (hasRequiredHmac)
    return hmac.exports;
  hasRequiredHmac = 1;
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        C_algo.HMAC = Base.extend({
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i2 = 0; i2 < hasherBlockSize; i2++) {
              oKeyWords[i2] ^= 1549556828;
              iKeyWords[i2] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac2;
          }
        });
      })();
    });
  })(hmac);
  return hmac.exports;
}
var pbkdf2 = { exports: {} };
var hasRequiredPbkdf2;
function requirePbkdf2() {
  if (hasRequiredPbkdf2)
    return pbkdf2.exports;
  hasRequiredPbkdf2 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireSha1(), requireHmac());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA1 = C_algo.SHA1;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA1,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac2 = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac2.update(salt).finalize(blockIndex);
              hmac2.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i2 = 1; i2 < iterations; i2++) {
                intermediate = hmac2.finalize(intermediate);
                hmac2.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  })(pbkdf2);
  return pbkdf2.exports;
}
var evpkdf = { exports: {} };
var hasRequiredEvpkdf;
function requireEvpkdf() {
  if (hasRequiredEvpkdf)
    return evpkdf.exports;
  hasRequiredEvpkdf = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireSha1(), requireHmac());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i2 = 1; i2 < iterations; i2++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  })(evpkdf);
  return evpkdf.exports;
}
var cipherCore = { exports: {} };
var hasRequiredCipherCore;
function requireCipherCore() {
  if (hasRequiredCipherCore)
    return cipherCore.exports;
  hasRequiredCipherCore = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEvpkdf());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined$1) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          _createHelper: function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined$1;
            } else {
              block = this._prevBlock;
            }
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= block[i2];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          pad: function(data2, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data2.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i2 = 0; i2 < nPaddingBytes; i2 += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data2.concat(padding);
          },
          unpad: function(data2) {
            var nPaddingBytes = data2.words[data2.sigBytes - 1 >>> 2] & 255;
            data2.sigBytes -= nPaddingBytes;
          }
        };
        C_lib.BlockCipher = Cipher.extend({
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          _parse: function(ciphertext, format2) {
            if (typeof ciphertext == "string") {
              return format2.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          execute: function(password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  })(cipherCore);
  return cipherCore.exports;
}
var modeCfb = { exports: {} };
var hasRequiredModeCfb;
function requireModeCfb() {
  if (hasRequiredModeCfb)
    return modeCfb.exports;
  hasRequiredModeCfb = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.mode.CFB = function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i2 = 0; i2 < blockSize; i2++) {
            words[offset + i2] ^= keystream[i2];
          }
        }
        return CFB;
      }();
      return CryptoJS.mode.CFB;
    });
  })(modeCfb);
  return modeCfb.exports;
}
var modeCtr = { exports: {} };
var hasRequiredModeCtr;
function requireModeCtr() {
  if (hasRequiredModeCtr)
    return modeCtr.exports;
  hasRequiredModeCtr = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.mode.CTR = function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS.mode.CTR;
    });
  })(modeCtr);
  return modeCtr.exports;
}
var modeCtrGladman = { exports: {} };
var hasRequiredModeCtrGladman;
function requireModeCtrGladman() {
  if (hasRequiredModeCtrGladman)
    return modeCtrGladman.exports;
  hasRequiredModeCtrGladman = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      /** @preserve
       * Counter block mode compatible with  Dr Brian Gladman fileenc.c
       * derived from CryptoJS.mode.CTR
       * Jan Hruby jhruby.web@gmail.com
       */
      CryptoJS.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS.mode.CTRGladman;
    });
  })(modeCtrGladman);
  return modeCtrGladman.exports;
}
var modeOfb = { exports: {} };
var hasRequiredModeOfb;
function requireModeOfb() {
  if (hasRequiredModeOfb)
    return modeOfb.exports;
  hasRequiredModeOfb = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.mode.OFB = function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS.mode.OFB;
    });
  })(modeOfb);
  return modeOfb.exports;
}
var modeEcb = { exports: {} };
var hasRequiredModeEcb;
function requireModeEcb() {
  if (hasRequiredModeEcb)
    return modeEcb.exports;
  hasRequiredModeEcb = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.mode.ECB = function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS.mode.ECB;
    });
  })(modeEcb);
  return modeEcb.exports;
}
var padAnsix923 = { exports: {} };
var hasRequiredPadAnsix923;
function requirePadAnsix923() {
  if (hasRequiredPadAnsix923)
    return padAnsix923.exports;
  hasRequiredPadAnsix923 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.pad.AnsiX923 = {
        pad: function(data2, blockSize) {
          var dataSigBytes = data2.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data2.clamp();
          data2.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data2.sigBytes += nPaddingBytes;
        },
        unpad: function(data2) {
          var nPaddingBytes = data2.words[data2.sigBytes - 1 >>> 2] & 255;
          data2.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  })(padAnsix923);
  return padAnsix923.exports;
}
var padIso10126 = { exports: {} };
var hasRequiredPadIso10126;
function requirePadIso10126() {
  if (hasRequiredPadIso10126)
    return padIso10126.exports;
  hasRequiredPadIso10126 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.pad.Iso10126 = {
        pad: function(data2, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data2.sigBytes % blockSizeBytes;
          data2.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data2) {
          var nPaddingBytes = data2.words[data2.sigBytes - 1 >>> 2] & 255;
          data2.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  })(padIso10126);
  return padIso10126.exports;
}
var padIso97971 = { exports: {} };
var hasRequiredPadIso97971;
function requirePadIso97971() {
  if (hasRequiredPadIso97971)
    return padIso97971.exports;
  hasRequiredPadIso97971 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.pad.Iso97971 = {
        pad: function(data2, blockSize) {
          data2.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
          CryptoJS.pad.ZeroPadding.pad(data2, blockSize);
        },
        unpad: function(data2) {
          CryptoJS.pad.ZeroPadding.unpad(data2);
          data2.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  })(padIso97971);
  return padIso97971.exports;
}
var padZeropadding = { exports: {} };
var hasRequiredPadZeropadding;
function requirePadZeropadding() {
  if (hasRequiredPadZeropadding)
    return padZeropadding.exports;
  hasRequiredPadZeropadding = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.pad.ZeroPadding = {
        pad: function(data2, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data2.clamp();
          data2.sigBytes += blockSizeBytes - (data2.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data2) {
          var dataWords = data2.words;
          var i2 = data2.sigBytes - 1;
          for (var i2 = data2.sigBytes - 1; i2 >= 0; i2--) {
            if (dataWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) {
              data2.sigBytes = i2 + 1;
              break;
            }
          }
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  })(padZeropadding);
  return padZeropadding.exports;
}
var padNopadding = { exports: {} };
var hasRequiredPadNopadding;
function requirePadNopadding() {
  if (hasRequiredPadNopadding)
    return padNopadding.exports;
  hasRequiredPadNopadding = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS.pad.NoPadding;
    });
  })(padNopadding);
  return padNopadding.exports;
}
var formatHex = { exports: {} };
var hasRequiredFormatHex;
function requireFormatHex() {
  if (hasRequiredFormatHex)
    return formatHex.exports;
  hasRequiredFormatHex = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function(undefined$1) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        C_format.Hex = {
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  })(formatHex);
  return formatHex.exports;
}
var aes = { exports: {} };
var hasRequiredAes;
function requireAes() {
  if (hasRequiredAes)
    return aes.exports;
  hasRequiredAes = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i2 = 0; i2 < 256; i2++) {
            if (i2 < 128) {
              d[i2] = i2 << 1;
            } else {
              d[i2] = i2 << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i2 = 0; i2 < 256; i2++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  })(aes);
  return aes.exports;
}
var tripledes = { exports: {} };
var hasRequiredTripledes;
function requireTripledes() {
  if (hasRequiredTripledes)
    return tripledes.exports;
  hasRequiredTripledes = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i2 = 0; i2 < 56; i2++) {
              var keyBitPos = PC1[i2] - 1;
              keyBits[i2] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i2 = 0; i2 < 24; i2++) {
                subKey[i2 / 6 | 0] |= keyBits[(PC2[i2] - 1 + bitShift) % 28] << 31 - i2 % 6;
                subKey[4 + (i2 / 6 | 0)] |= keyBits[28 + (PC2[i2 + 24] - 1 + bitShift) % 28] << 31 - i2 % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i2 = 1; i2 < 7; i2++) {
                subKey[i2] = subKey[i2] >>> (i2 - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i2 = 0; i2 < 16; i2++) {
              invSubKeys[i2] = subKeys[15 - i2];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              for (var i2 = 0; i2 < 8; i2++) {
                f |= SBOX_P[i2][((rBlock ^ subKey[i2]) & SBOX_MASK[i2]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  })(tripledes);
  return tripledes.exports;
}
var rc4 = { exports: {} };
var hasRequiredRc4;
function requireRc4() {
  if (hasRequiredRc4)
    return rc4.exports;
  hasRequiredRc4 = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i2 = 0; i2 < 256; i2++) {
              S[i2] = i2;
            }
            for (var i2 = 0, j = 0; i2 < 256; i2++) {
              var keyByteIndex = i2 % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i2] + keyByte) % 256;
              var t = S[i2];
              S[i2] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i2 = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i2 = (i2 + 1) % 256;
            j = (j + S[i2]) % 256;
            var t = S[i2];
            S[i2] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i2] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i2;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i2 = this.cfg.drop; i2 > 0; i2--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  })(rc4);
  return rc4.exports;
}
var rabbit = { exports: {} };
var hasRequiredRabbit;
function requireRabbit() {
  if (hasRequiredRabbit)
    return rabbit.exports;
  hasRequiredRabbit = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K2 = this._key.words;
            var iv = this.cfg.iv;
            for (var i2 = 0; i2 < 4; i2++) {
              K2[i2] = (K2[i2] << 8 | K2[i2] >>> 24) & 16711935 | (K2[i2] << 24 | K2[i2] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K2[0],
              K2[3] << 16 | K2[2] >>> 16,
              K2[1],
              K2[0] << 16 | K2[3] >>> 16,
              K2[2],
              K2[1] << 16 | K2[0] >>> 16,
              K2[3],
              K2[2] << 16 | K2[1] >>> 16
            ];
            var C2 = this._C = [
              K2[2] << 16 | K2[2] >>> 16,
              K2[0] & 4294901760 | K2[1] & 65535,
              K2[3] << 16 | K2[3] >>> 16,
              K2[1] & 4294901760 | K2[2] & 65535,
              K2[0] << 16 | K2[0] >>> 16,
              K2[2] & 4294901760 | K2[3] & 65535,
              K2[1] << 16 | K2[1] >>> 16,
              K2[3] & 4294901760 | K2[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C2[i2] ^= X[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i22;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i22;
              C2[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S[i2] = (S[i2] << 8 | S[i2] >>> 24) & 16711935 | (S[i2] << 24 | S[i2] >>> 8) & 4278255360;
              M[offset + i2] ^= S[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C2[i2];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X[i2] + C2[i2];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i2] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  })(rabbit);
  return rabbit.exports;
}
var rabbitLegacy = { exports: {} };
var hasRequiredRabbitLegacy;
function requireRabbitLegacy() {
  if (hasRequiredRabbitLegacy)
    return rabbitLegacy.exports;
  hasRequiredRabbitLegacy = 1;
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K2 = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K2[0],
              K2[3] << 16 | K2[2] >>> 16,
              K2[1],
              K2[0] << 16 | K2[3] >>> 16,
              K2[2],
              K2[1] << 16 | K2[0] >>> 16,
              K2[3],
              K2[2] << 16 | K2[1] >>> 16
            ];
            var C2 = this._C = [
              K2[2] << 16 | K2[2] >>> 16,
              K2[0] & 4294901760 | K2[1] & 65535,
              K2[3] << 16 | K2[3] >>> 16,
              K2[1] & 4294901760 | K2[2] & 65535,
              K2[0] << 16 | K2[0] >>> 16,
              K2[2] & 4294901760 | K2[3] & 65535,
              K2[1] << 16 | K2[1] >>> 16,
              K2[3] & 4294901760 | K2[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C2[i2] ^= X[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i22;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i22;
              C2[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S[i2] = (S[i2] << 8 | S[i2] >>> 24) & 16711935 | (S[i2] << 24 | S[i2] >>> 8) & 4278255360;
              M[offset + i2] ^= S[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C2[i2];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X[i2] + C2[i2];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i2] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  })(rabbitLegacy);
  return rabbitLegacy.exports;
}
(function(module2, exports2) {
  (function(root2, factory, undef) {
    {
      module2.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy());
    }
  })(commonjsGlobal, function(CryptoJS) {
    return CryptoJS;
  });
})(cryptoJs);
var Buffer = buffer$1.Buffer;
var CRC_TABLE = [
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
];
if (typeof Int32Array !== "undefined") {
  CRC_TABLE = new Int32Array(CRC_TABLE);
}
function ensureBuffer(input) {
  if (Buffer.isBuffer(input)) {
    return input;
  }
  var hasNewBufferAPI = typeof Buffer.alloc === "function" && typeof Buffer.from === "function";
  if (typeof input === "number") {
    return hasNewBufferAPI ? Buffer.alloc(input) : new Buffer(input);
  } else if (typeof input === "string") {
    return hasNewBufferAPI ? Buffer.from(input) : new Buffer(input);
  } else {
    throw new Error("input must be buffer, number, or string, received " + typeof input);
  }
}
function bufferizeInt(num) {
  var tmp = ensureBuffer(4);
  tmp.writeInt32BE(num, 0);
  return tmp;
}
function _crc32(buf, previous) {
  buf = ensureBuffer(buf);
  if (Buffer.isBuffer(previous)) {
    previous = previous.readUInt32BE(0);
  }
  var crc = ~~previous ^ -1;
  for (var n = 0; n < buf.length; n++) {
    crc = CRC_TABLE[(crc ^ buf[n]) & 255] ^ crc >>> 8;
  }
  return crc ^ -1;
}
function crc32() {
  return bufferizeInt(_crc32.apply(null, arguments));
}
crc32.signed = function() {
  return _crc32.apply(null, arguments);
};
crc32.unsigned = function() {
  return _crc32.apply(null, arguments) >>> 0;
};
var bufferCrc32 = crc32;
var __importDefault$8 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(account, "__esModule", { value: true });
account.getAccountId = void 0;
const crypto_js_1 = __importDefault$8(cryptoJs.exports);
const buffer_crc32_1 = __importDefault$8(bufferCrc32);
const ACCOUNT_DOMAIN_SEPERATOR = "\naccount-id";
const SUB_ACCOUNT_ZERO = buffer$1.Buffer.alloc(32);
const byteArrayToWordArray = (byteArray) => {
  const wordArray = [];
  let i2;
  for (i2 = 0; i2 < byteArray.length; i2 += 1) {
    wordArray[i2 / 4 | 0] |= byteArray[i2] << 24 - 8 * i2;
  }
  const result = crypto_js_1.default.lib.WordArray.create(wordArray, byteArray.length);
  return result;
};
const wordToByteArray = (word, length) => {
  const byteArray = [];
  const xFF = 255;
  if (length > 0)
    byteArray.push(word >>> 24);
  if (length > 1)
    byteArray.push(word >>> 16 & xFF);
  if (length > 2)
    byteArray.push(word >>> 8 & xFF);
  if (length > 3)
    byteArray.push(word & xFF);
  return byteArray;
};
const wordArrayToByteArray = (wordArray, length) => {
  if (wordArray.hasOwnProperty("sigBytes") && wordArray.hasOwnProperty("words")) {
    length = wordArray.sigBytes;
    wordArray = wordArray.words;
  }
  let result = [];
  let bytes2;
  let i2 = 0;
  while (length > 0) {
    bytes2 = wordToByteArray(wordArray[i2], Math.min(4, length));
    length -= bytes2.length;
    result = [...result, bytes2];
    i2++;
  }
  return [].concat.apply([], result);
};
const intToHex = (val) => val < 0 ? (Number(val) >>> 0).toString(16) : Number(val).toString(16);
const generateChecksum = (hash2) => {
  const crc = buffer_crc32_1.default.unsigned(buffer$1.Buffer.from(hash2));
  const hex = intToHex(crc);
  return hex.padStart(8, "0");
};
const getAccountId = (principal, subAccount) => {
  const sha = crypto_js_1.default.algo.SHA224.create();
  sha.update(ACCOUNT_DOMAIN_SEPERATOR);
  sha.update(byteArrayToWordArray(principal.toUint8Array()));
  const subBuffer = buffer$1.Buffer.from(SUB_ACCOUNT_ZERO);
  if (subAccount) {
    subBuffer.writeUInt32BE(subAccount);
  }
  sha.update(byteArrayToWordArray(subBuffer));
  const hash2 = sha.finalize();
  const byteArray = wordArrayToByteArray(hash2, 28);
  const checksum = generateChecksum(byteArray);
  const val = checksum + hash2.toString();
  return val;
};
account.getAccountId = getAccountId;
account.default = {};
var number = {};
Object.defineProperty(number, "__esModule", { value: true });
number.from32bits = number.to32bits = void 0;
const to32bits = (num) => {
  const b = new ArrayBuffer(4);
  new DataView(b).setUint32(0, num);
  return Array.from(new Uint8Array(b));
};
number.to32bits = to32bits;
const from32bits = (ba) => {
  let value2;
  for (let i2 = 0; i2 < 4; i2 += 1) {
    value2 = value2 << 8 | ba[i2];
  }
  return value2;
};
number.from32bits = from32bits;
var canisters = {};
Object.defineProperty(canisters, "__esModule", { value: true });
canisters.NFT_CANISTERS = void 0;
canisters.NFT_CANISTERS = {
  WRAPPED_PUNKS: "bxdf4-baaaa-aaaah-qaruq-cai",
  WRAPPED_DRIP: "3db6u-aiaaa-aaaah-qbjbq-cai",
  IC_PUNKS: "qcg3w-tyaaa-aaaah-qakea-cai",
  IC_DRIP: "d3ttm-qaaaa-aaaai-qam4a-cai",
  ICP_BUNNY_MAIN: "xkbqi-2qaaa-aaaah-qbpqq-cai",
  ICP_BUNNY_STORAGE: [
    "efqhu-yqaaa-aaaaf-qaeda-cai",
    "ecrba-viaaa-aaaaf-qaedq-cai",
    "fp7fo-2aaaa-aaaaf-qaeea-cai",
    "fi6d2-xyaaa-aaaaf-qaeeq-cai",
    "fb5ig-bqaaa-aaaaf-qaefa-cai",
    "fg4os-miaaa-aaaaf-qaefq-cai",
    "ft377-naaaa-aaaaf-qaega-cai",
    "fu2zl-ayaaa-aaaaf-qaegq-cai",
    "f5zsx-wqaaa-aaaaf-qaeha-cai",
    "f2yud-3iaaa-aaaaf-qaehq-cai"
  ]
};
var standards = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.NFT = exports2.TOKEN = void 0;
  exports2.TOKEN = {
    dip20: "DIP20",
    xtc: "XTC",
    wicp: "WICP",
    ext: "EXT",
    icp: "ICP",
    rosetta: "ROSETTA"
  };
  exports2.NFT = {
    ext: "EXT",
    icpunks: "ICPunks",
    departuresLabs: "DepartureLabs",
    erc721: "ERC721",
    dip721: "DIP721",
    c3: "C3",
    nftOrigyn: "nftOrigyn"
  };
  exports2.default = {
    TOKEN: exports2.TOKEN,
    NFT: exports2.NFT
  };
})(standards);
var __awaiter$c = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault$7 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ext, "__esModule", { value: true });
const agent_1$7 = require$$5;
const principal_1$6 = require$$4;
const ext_did_1 = __importDefault$7(ext_did);
const default_1$5 = __importDefault$7(_default);
const account_1$1 = account;
const number_1 = number;
const canisters_1$1 = canisters;
const standards_1$5 = standards;
const getTokenIdentifier = (canister, index2) => {
  const padding = buffer$1.Buffer.from("\ntid");
  const array2 = new Uint8Array([
    ...padding,
    ...principal_1$6.Principal.fromText(canister).toUint8Array(),
    ...(0, number_1.to32bits)(index2)
  ]);
  return principal_1$6.Principal.fromUint8Array(array2).toText();
};
const extImageUrl = (canisterId2, index2, tokenIdentifier) => ({
  [canisters_1$1.NFT_CANISTERS.WRAPPED_PUNKS]: `https://${canisters_1$1.NFT_CANISTERS.IC_PUNKS}.raw.ic0.app/Token/${index2}`,
  [canisters_1$1.NFT_CANISTERS.WRAPPED_DRIP]: `https://${canisters_1$1.NFT_CANISTERS.IC_DRIP}.raw.ic0.app?tokenId=${index2}`
})[canisterId2] || `https://${canisterId2}.raw.ic0.app/?type=thumbnail&tokenid=${tokenIdentifier}`;
class EXT extends default_1$5.default {
  constructor(canisterId2, agent) {
    super(canisterId2, agent);
    this.standard = standards_1$5.NFT.ext;
    this.actor = agent_1$7.Actor.createActor(ext_did_1.default, {
      agent,
      canisterId: canisterId2
    });
  }
  getUserTokens(principal) {
    return __awaiter$c(this, void 0, void 0, function* () {
      const accountId = (0, account_1$1.getAccountId)(principal);
      const userTokensResult = yield this.actor.tokens_ext(accountId);
      if ("err" in userTokensResult)
        throw new Error(`${Object.keys(userTokensResult.err)[0]}: ${Object.values(userTokensResult.err)[0]}`);
      const tokens = userTokensResult.ok || [];
      return tokens.map((token2) => {
        const metadata = token2[2];
        const tokenIndex = token2[0];
        return this.serializeTokenData(metadata, getTokenIdentifier(this.canisterId, tokenIndex), tokenIndex);
      });
    });
  }
  getMetadata() {
    throw new Error("Method not implemented.");
  }
  transfer(to, tokenIndex) {
    return __awaiter$c(this, void 0, void 0, function* () {
      const tokenIdentifier = getTokenIdentifier(this.canisterId, tokenIndex);
      const from = yield this.agent.getPrincipal();
      const dummyMemmo = new Array(32).fill(0);
      const transferResult = yield this.actor.transfer({
        to: { principal: to },
        from: { principal: from },
        token: tokenIdentifier,
        amount: BigInt(1),
        memo: dummyMemmo,
        notify: false,
        subaccount: [],
        fee: BigInt(0)
      });
      if ("err" in transferResult)
        throw new Error(`${Object.keys(transferResult.err)[0]}: ${Object.values(transferResult.err)[0]}`);
    });
  }
  details(tokenIndex) {
    return __awaiter$c(this, void 0, void 0, function* () {
      const tokenIdentifier = getTokenIdentifier(this.canisterId, tokenIndex);
      const metadataResult = yield this.actor.metadata(tokenIdentifier);
      if ("err" in metadataResult)
        throw new Error(`${Object.keys(metadataResult.err)[0]}: ${Object.values(metadataResult.err)[0]}`);
      const { metadata = {} } = "nonfungible" in metadataResult.ok ? metadataResult.ok.nonfungible : {};
      return this.serializeTokenData(metadata, tokenIdentifier, tokenIndex);
    });
  }
  serializeTokenData(metadata, tokenIdentifier, tokenIndex) {
    return {
      id: tokenIdentifier,
      index: BigInt(tokenIndex),
      canister: this.canisterId,
      metadata: metadata.length ? metadata[0] : void 0,
      url: extImageUrl(this.canisterId, tokenIndex, tokenIdentifier),
      standard: this.standard
    };
  }
}
ext.default = EXT;
var ic_punks = {};
var icpunks_did = {};
Object.defineProperty(icpunks_did, "__esModule", { value: true });
icpunks_did.init = void 0;
icpunks_did.default = ({ IDL: IDL2 }) => {
  const Property = IDL2.Record({ value: IDL2.Text, name: IDL2.Text });
  const TokenDesc = IDL2.Record({
    id: IDL2.Nat,
    url: IDL2.Text,
    owner: IDL2.Principal,
    desc: IDL2.Text,
    name: IDL2.Text,
    properties: IDL2.Vec(Property)
  });
  const TokenIndex = IDL2.Nat;
  const ICPunk = IDL2.Service({
    data_of: IDL2.Func([TokenIndex], [TokenDesc], []),
    transfer_to: IDL2.Func([IDL2.Principal, TokenIndex], [IDL2.Bool], []),
    user_tokens: IDL2.Func([IDL2.Principal], [IDL2.Vec(IDL2.Nat)], [])
  });
  return ICPunk;
};
const init$b = ({ IDL: IDL2 }) => {
  return [IDL2.Text, IDL2.Text, IDL2.Nat, IDL2.Principal];
};
icpunks_did.init = init$b;
var __awaiter$b = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault$6 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ic_punks, "__esModule", { value: true });
const agent_1$6 = require$$5;
const icpunks_did_1 = __importDefault$6(icpunks_did);
const default_1$4 = __importDefault$6(_default);
const canisters_1 = canisters;
const standards_1$4 = standards;
const getICPBunnyCanisterId = (index2) => canisters_1.NFT_CANISTERS.ICP_BUNNY_STORAGE[index2 % 10];
const imageUrl = (canisterId2, index2, tokenDataUrl) => ({
  [canisters_1.NFT_CANISTERS.ICP_BUNNY_MAIN]: `https://${getICPBunnyCanisterId(index2)}.raw.ic0.app/Token/${index2}`
})[canisterId2] || `https://${canisterId2}.raw.ic0.app${tokenDataUrl}`;
class ICPUNKS extends default_1$4.default {
  constructor(canisterId2, agent) {
    super(canisterId2, agent);
    this.standard = standards_1$4.NFT.icpunks;
    this.serializeTokenData = (tokenData) => ({
      index: BigInt(tokenData.id),
      canister: this.canisterId,
      url: imageUrl(this.canisterId, Number.parseInt(tokenData.id.toString(), 10), tokenData.url),
      name: tokenData.name,
      metadata: tokenData,
      standard: this.standard
    });
    this.actor = agent_1$6.Actor.createActor(icpunks_did_1.default, {
      agent,
      canisterId: canisterId2
    });
  }
  getMetadata() {
    throw new Error("Method not implemented.");
  }
  getUserTokens(principal) {
    return __awaiter$b(this, void 0, void 0, function* () {
      const tokensIndexes = yield this.actor.user_tokens(principal);
      const tokensData = yield Promise.all(tokensIndexes.map((tokenIndex) => this.actor.data_of(tokenIndex)));
      return tokensData.map((token2) => this.serializeTokenData(token2));
    });
  }
  transfer(to, tokenIndex) {
    return __awaiter$b(this, void 0, void 0, function* () {
      const success = yield this.actor.transfer_to(to, BigInt(tokenIndex));
      if (!success) {
        throw new Error("Error transfering token");
      }
    });
  }
  details(tokenIndex) {
    return __awaiter$b(this, void 0, void 0, function* () {
      const tokenData = yield this.actor.data_of(BigInt(tokenIndex));
      return this.serializeTokenData(tokenData);
    });
  }
}
ic_punks.default = ICPUNKS;
var nft_origyn = {};
var nft_origyn_did = {};
Object.defineProperty(nft_origyn_did, "__esModule", { value: true });
nft_origyn_did.init = void 0;
nft_origyn_did.default = ({ IDL: IDL2 }) => {
  const CandyValue = IDL2.Rec();
  const Update = IDL2.Rec();
  const Principal2 = IDL2.Principal;
  IDL2.Record({
    "owner": Principal2,
    "storage_space": IDL2.Opt(IDL2.Nat)
  });
  const TokenIdentifier = IDL2.Text;
  const AccountIdentifier = IDL2.Text;
  const User = IDL2.Variant({
    "principal": IDL2.Principal,
    "address": AccountIdentifier
  });
  const BalanceRequest = IDL2.Record({
    "token": TokenIdentifier,
    "user": User
  });
  const Balance = IDL2.Nat;
  const CommonError = IDL2.Variant({
    "InvalidToken": TokenIdentifier,
    "Other": IDL2.Text
  });
  const BalanceResponse__1 = IDL2.Variant({
    "ok": Balance,
    "err": CommonError
  });
  const Property = IDL2.Record({
    "value": CandyValue,
    "name": IDL2.Text,
    "immutable": IDL2.Bool
  });
  CandyValue.fill(IDL2.Variant({
    "Int": IDL2.Int,
    "Nat": IDL2.Nat,
    "Empty": IDL2.Null,
    "Nat16": IDL2.Nat16,
    "Nat32": IDL2.Nat32,
    "Nat64": IDL2.Nat64,
    "Blob": IDL2.Vec(IDL2.Nat8),
    "Bool": IDL2.Bool,
    "Int8": IDL2.Int8,
    "Nat8": IDL2.Nat8,
    "Nats": IDL2.Variant({
      "thawed": IDL2.Vec(IDL2.Nat),
      "frozen": IDL2.Vec(IDL2.Nat)
    }),
    "Text": IDL2.Text,
    "Bytes": IDL2.Variant({
      "thawed": IDL2.Vec(IDL2.Nat8),
      "frozen": IDL2.Vec(IDL2.Nat8)
    }),
    "Int16": IDL2.Int16,
    "Int32": IDL2.Int32,
    "Int64": IDL2.Int64,
    "Option": IDL2.Opt(CandyValue),
    "Floats": IDL2.Variant({
      "thawed": IDL2.Vec(IDL2.Float64),
      "frozen": IDL2.Vec(IDL2.Float64)
    }),
    "Float": IDL2.Float64,
    "Principal": IDL2.Principal,
    "Array": IDL2.Variant({
      "thawed": IDL2.Vec(CandyValue),
      "frozen": IDL2.Vec(CandyValue)
    }),
    "Class": IDL2.Vec(Property)
  }));
  const Account = IDL2.Variant({
    "account_id": IDL2.Text,
    "principal": IDL2.Principal,
    "extensible": CandyValue
  });
  const ICTokenSpec = IDL2.Record({
    "fee": IDL2.Nat,
    "decimals": IDL2.Nat,
    "canister": IDL2.Principal,
    "standard": IDL2.Variant({
      "EXTFungible": IDL2.Null,
      "DIP20": IDL2.Null,
      "Ledger": IDL2.Null
    }),
    "symbol": IDL2.Text
  });
  const TokenSpec = IDL2.Variant({
    "ic": ICTokenSpec,
    "extensible": CandyValue
  });
  const EscrowRecord = IDL2.Record({
    "token": TokenSpec,
    "token_id": IDL2.Text,
    "seller": Account,
    "lock_to_date": IDL2.Opt(IDL2.Int),
    "buyer": Account,
    "amount": IDL2.Nat,
    "sale_id": IDL2.Opt(IDL2.Text)
  });
  const StakeRecord = IDL2.Record({
    "staker": Account,
    "token_id": IDL2.Text,
    "amount": IDL2.Nat
  });
  const BalanceResponse = IDL2.Record({
    "nfts": IDL2.Vec(IDL2.Text),
    "sales": IDL2.Vec(EscrowRecord),
    "stake": IDL2.Vec(StakeRecord),
    "multi_canister": IDL2.Opt(IDL2.Vec(IDL2.Principal)),
    "escrow": IDL2.Vec(EscrowRecord)
  });
  const Errors = IDL2.Variant({
    "nyi": IDL2.Null,
    "storage_configuration_error": IDL2.Null,
    "escrow_withdraw_payment_failed": IDL2.Null,
    "token_not_found": IDL2.Null,
    "owner_not_found": IDL2.Null,
    "content_not_found": IDL2.Null,
    "auction_ended": IDL2.Null,
    "out_of_range": IDL2.Null,
    "sale_id_does_not_match": IDL2.Null,
    "sale_not_found": IDL2.Null,
    "item_not_owned": IDL2.Null,
    "property_not_found": IDL2.Null,
    "validate_trx_wrong_host": IDL2.Null,
    "withdraw_too_large": IDL2.Null,
    "content_not_deserializable": IDL2.Null,
    "bid_too_low": IDL2.Null,
    "validate_deposit_wrong_amount": IDL2.Null,
    "existing_sale_found": IDL2.Null,
    "asset_mismatch": IDL2.Null,
    "escrow_cannot_be_removed": IDL2.Null,
    "deposit_burned": IDL2.Null,
    "cannot_restage_minted_token": IDL2.Null,
    "cannot_find_status_in_metadata": IDL2.Null,
    "receipt_data_mismatch": IDL2.Null,
    "validate_deposit_failed": IDL2.Null,
    "unauthorized_access": IDL2.Null,
    "item_already_minted": IDL2.Null,
    "no_escrow_found": IDL2.Null,
    "escrow_owner_not_the_owner": IDL2.Null,
    "improper_interface": IDL2.Null,
    "app_id_not_found": IDL2.Null,
    "token_non_transferable": IDL2.Null,
    "sale_not_over": IDL2.Null,
    "update_class_error": IDL2.Null,
    "malformed_metadata": IDL2.Null,
    "token_id_mismatch": IDL2.Null,
    "id_not_found_in_metadata": IDL2.Null,
    "auction_not_started": IDL2.Null,
    "library_not_found": IDL2.Null,
    "attempt_to_stage_system_data": IDL2.Null,
    "validate_deposit_wrong_buyer": IDL2.Null,
    "not_enough_storage": IDL2.Null,
    "sales_withdraw_payment_failed": IDL2.Null
  });
  const OrigynError = IDL2.Record({
    "text": IDL2.Text,
    "error": Errors,
    "number": IDL2.Nat32,
    "flag_point": IDL2.Text
  });
  const Result_19 = IDL2.Variant({
    "ok": BalanceResponse,
    "err": OrigynError
  });
  const Result_18 = IDL2.Variant({
    "ok": AccountIdentifier,
    "err": CommonError
  });
  const Result_17 = IDL2.Variant({ "ok": Account, "err": OrigynError });
  const EscrowReceipt = IDL2.Record({
    "token": TokenSpec,
    "token_id": IDL2.Text,
    "seller": Account,
    "buyer": Account,
    "amount": IDL2.Nat
  });
  const BidRequest = IDL2.Record({
    "escrow_receipt": EscrowReceipt,
    "sale_id": IDL2.Text
  });
  const TransactionID = IDL2.Variant({
    "nat": IDL2.Nat,
    "text": IDL2.Text,
    "extensible": CandyValue
  });
  const AuctionConfig = IDL2.Record({
    "start_price": IDL2.Nat,
    "token": TokenSpec,
    "reserve": IDL2.Opt(IDL2.Nat),
    "start_date": IDL2.Int,
    "min_increase": IDL2.Variant({
      "amount": IDL2.Nat,
      "percentage": IDL2.Float64
    }),
    "allow_list": IDL2.Opt(IDL2.Vec(IDL2.Principal)),
    "buy_now": IDL2.Opt(IDL2.Nat),
    "ending": IDL2.Variant({
      "waitForQuiet": IDL2.Record({
        "max": IDL2.Nat,
        "date": IDL2.Int,
        "fade": IDL2.Float64,
        "extention": IDL2.Nat64
      }),
      "date": IDL2.Int
    })
  });
  const PricingConfig = IDL2.Variant({
    "flat": IDL2.Record({ "token": TokenSpec, "amount": IDL2.Nat }),
    "extensible": IDL2.Variant({ "candyClass": IDL2.Null }),
    "instant": IDL2.Null,
    "auction": AuctionConfig,
    "dutch": IDL2.Record({
      "start_price": IDL2.Nat,
      "reserve": IDL2.Opt(IDL2.Nat),
      "decay_per_hour": IDL2.Float64
    })
  });
  const BidResponse = IDL2.Record({
    "token_id": IDL2.Text,
    "txn_type": IDL2.Variant({
      "escrow_deposit": IDL2.Record({
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_network_updated": IDL2.Record({
        "network": IDL2.Principal,
        "extensible": CandyValue
      }),
      "escrow_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_managers_updated": IDL2.Record({
        "managers": IDL2.Vec(IDL2.Principal),
        "extensible": CandyValue
      }),
      "auction_bid": IDL2.Record({
        "token": TokenSpec,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Text
      }),
      "burn": IDL2.Null,
      "data": IDL2.Null,
      "sale_ended": IDL2.Record({
        "token": TokenSpec,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Opt(IDL2.Text)
      }),
      "mint": IDL2.Record({
        "to": Account,
        "from": Account,
        "sale": IDL2.Opt(IDL2.Record({ "token": TokenSpec, "amount": IDL2.Nat })),
        "extensible": CandyValue
      }),
      "extensible": CandyValue,
      "owner_transfer": IDL2.Record({
        "to": Account,
        "from": Account,
        "extensible": CandyValue
      }),
      "sale_opened": IDL2.Record({
        "pricing": PricingConfig,
        "extensible": CandyValue,
        "sale_id": IDL2.Text
      }),
      "canister_owner_updated": IDL2.Record({
        "owner": IDL2.Principal,
        "extensible": CandyValue
      }),
      "sale_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      })
    }),
    "timestamp": IDL2.Int,
    "index": IDL2.Nat
  });
  const Result_16 = IDL2.Variant({ "ok": BidResponse, "err": OrigynError });
  const canister_id = IDL2.Principal;
  const definite_canister_settings = IDL2.Record({
    "freezing_threshold": IDL2.Nat,
    "controllers": IDL2.Opt(IDL2.Vec(IDL2.Principal)),
    "memory_allocation": IDL2.Nat,
    "compute_allocation": IDL2.Nat
  });
  const canister_status = IDL2.Record({
    "status": IDL2.Variant({
      "stopped": IDL2.Null,
      "stopping": IDL2.Null,
      "running": IDL2.Null
    }),
    "memory_size": IDL2.Nat,
    "cycles": IDL2.Nat,
    "settings": definite_canister_settings,
    "module_hash": IDL2.Opt(IDL2.Vec(IDL2.Nat8))
  });
  const ChunkRequest = IDL2.Record({
    "token_id": IDL2.Text,
    "chunk": IDL2.Opt(IDL2.Nat),
    "library_id": IDL2.Text
  });
  const AllocationRecordStable = IDL2.Record({
    "allocated_space": IDL2.Nat,
    "token_id": IDL2.Text,
    "available_space": IDL2.Nat,
    "canister": IDL2.Principal,
    "chunks": IDL2.Vec(IDL2.Nat),
    "library_id": IDL2.Text
  });
  const ChunkContent = IDL2.Variant({
    "remote": IDL2.Record({
      "args": ChunkRequest,
      "canister": IDL2.Principal
    }),
    "chunk": IDL2.Record({
      "total_chunks": IDL2.Nat,
      "content": IDL2.Vec(IDL2.Nat8),
      "storage_allocation": AllocationRecordStable,
      "current_chunk": IDL2.Opt(IDL2.Nat)
    })
  });
  const Result_15 = IDL2.Variant({ "ok": ChunkContent, "err": OrigynError });
  const CollectionInfo = IDL2.Record({
    "multi_canister_count": IDL2.Opt(IDL2.Nat),
    "managers": IDL2.Opt(IDL2.Vec(IDL2.Principal)),
    "owner": IDL2.Opt(IDL2.Principal),
    "metadata": IDL2.Opt(CandyValue),
    "logo": IDL2.Opt(IDL2.Text),
    "name": IDL2.Opt(IDL2.Text),
    "network": IDL2.Opt(IDL2.Principal),
    "fields": IDL2.Opt(IDL2.Vec(IDL2.Tuple(IDL2.Text, IDL2.Opt(IDL2.Nat), IDL2.Opt(IDL2.Nat)))),
    "token_ids_count": IDL2.Opt(IDL2.Nat),
    "available_space": IDL2.Opt(IDL2.Nat),
    "multi_canister": IDL2.Opt(IDL2.Vec(IDL2.Principal)),
    "token_ids": IDL2.Opt(IDL2.Vec(IDL2.Text)),
    "total_supply": IDL2.Opt(IDL2.Nat),
    "symbol": IDL2.Opt(IDL2.Text),
    "allocated_storage": IDL2.Opt(IDL2.Nat)
  });
  const Result_14 = IDL2.Variant({ "ok": CollectionInfo, "err": OrigynError });
  const CollectionUpdateItem = IDL2.Variant({
    "metadata": IDL2.Opt(CandyValue),
    "logo": IDL2.Opt(IDL2.Text),
    "name": IDL2.Opt(IDL2.Text),
    "symbol": IDL2.Opt(IDL2.Text)
  });
  const CollectionUpdateRequest = IDL2.Vec(CollectionUpdateItem);
  const Result_9 = IDL2.Variant({ "ok": IDL2.Bool, "err": OrigynError });
  const LogEntry = IDL2.Record({
    "data": CandyValue,
    "event": IDL2.Text,
    "timestamp": IDL2.Int,
    "caller": IDL2.Opt(IDL2.Principal)
  });
  const EndSaleResponse = IDL2.Record({
    "token_id": IDL2.Text,
    "txn_type": IDL2.Variant({
      "escrow_deposit": IDL2.Record({
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_network_updated": IDL2.Record({
        "network": IDL2.Principal,
        "extensible": CandyValue
      }),
      "escrow_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_managers_updated": IDL2.Record({
        "managers": IDL2.Vec(IDL2.Principal),
        "extensible": CandyValue
      }),
      "auction_bid": IDL2.Record({
        "token": TokenSpec,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Text
      }),
      "burn": IDL2.Null,
      "data": IDL2.Null,
      "sale_ended": IDL2.Record({
        "token": TokenSpec,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Opt(IDL2.Text)
      }),
      "mint": IDL2.Record({
        "to": Account,
        "from": Account,
        "sale": IDL2.Opt(IDL2.Record({ "token": TokenSpec, "amount": IDL2.Nat })),
        "extensible": CandyValue
      }),
      "extensible": CandyValue,
      "owner_transfer": IDL2.Record({
        "to": Account,
        "from": Account,
        "extensible": CandyValue
      }),
      "sale_opened": IDL2.Record({
        "pricing": PricingConfig,
        "extensible": CandyValue,
        "sale_id": IDL2.Text
      }),
      "canister_owner_updated": IDL2.Record({
        "owner": IDL2.Principal,
        "extensible": CandyValue
      }),
      "sale_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      })
    }),
    "timestamp": IDL2.Int,
    "index": IDL2.Nat
  });
  const Result_13 = IDL2.Variant({
    "ok": EndSaleResponse,
    "err": OrigynError
  });
  const DepositDetail = IDL2.Record({
    "token": TokenSpec,
    "trx_id": TransactionID,
    "seller": Account,
    "buyer": Account,
    "amount": IDL2.Nat,
    "sale_id": IDL2.Opt(IDL2.Text)
  });
  const EscrowRequest = IDL2.Record({
    "token_id": IDL2.Text,
    "deposit": DepositDetail,
    "lock_to_date": IDL2.Opt(IDL2.Int)
  });
  const TransactionRecord = IDL2.Record({
    "token_id": IDL2.Text,
    "txn_type": IDL2.Variant({
      "escrow_deposit": IDL2.Record({
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_network_updated": IDL2.Record({
        "network": IDL2.Principal,
        "extensible": CandyValue
      }),
      "escrow_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_managers_updated": IDL2.Record({
        "managers": IDL2.Vec(IDL2.Principal),
        "extensible": CandyValue
      }),
      "auction_bid": IDL2.Record({
        "token": TokenSpec,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Text
      }),
      "burn": IDL2.Null,
      "data": IDL2.Null,
      "sale_ended": IDL2.Record({
        "token": TokenSpec,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Opt(IDL2.Text)
      }),
      "mint": IDL2.Record({
        "to": Account,
        "from": Account,
        "sale": IDL2.Opt(IDL2.Record({ "token": TokenSpec, "amount": IDL2.Nat })),
        "extensible": CandyValue
      }),
      "extensible": CandyValue,
      "owner_transfer": IDL2.Record({
        "to": Account,
        "from": Account,
        "extensible": CandyValue
      }),
      "sale_opened": IDL2.Record({
        "pricing": PricingConfig,
        "extensible": CandyValue,
        "sale_id": IDL2.Text
      }),
      "canister_owner_updated": IDL2.Record({
        "owner": IDL2.Principal,
        "extensible": CandyValue
      }),
      "sale_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      })
    }),
    "timestamp": IDL2.Int,
    "index": IDL2.Nat
  });
  const EscrowResponse = IDL2.Record({
    "balance": IDL2.Nat,
    "receipt": EscrowReceipt,
    "transaction": TransactionRecord
  });
  const Result_12 = IDL2.Variant({ "ok": EscrowResponse, "err": OrigynError });
  const Result_2 = IDL2.Variant({ "ok": IDL2.Text, "err": OrigynError });
  const StorageMetrics = IDL2.Record({
    "available_space": IDL2.Nat,
    "allocated_storage": IDL2.Nat
  });
  const Result_11 = IDL2.Variant({ "ok": StorageMetrics, "err": OrigynError });
  const Result_10 = IDL2.Variant({
    "ok": IDL2.Vec(TransactionRecord),
    "err": OrigynError
  });
  const HeaderField = IDL2.Tuple(IDL2.Text, IDL2.Text);
  const HttpRequest = IDL2.Record({
    "url": IDL2.Text,
    "method": IDL2.Text,
    "body": IDL2.Vec(IDL2.Nat8),
    "headers": IDL2.Vec(HeaderField)
  });
  const HeaderField__1 = IDL2.Tuple(IDL2.Text, IDL2.Text);
  const StreamingCallbackToken = IDL2.Record({
    "key": IDL2.Text,
    "index": IDL2.Nat,
    "content_encoding": IDL2.Text
  });
  const StreamingStrategy = IDL2.Variant({
    "Callback": IDL2.Record({
      "token": StreamingCallbackToken,
      "callback": IDL2.Func([], [], [])
    })
  });
  const HTTPResponse = IDL2.Record({
    "body": IDL2.Vec(IDL2.Nat8),
    "headers": IDL2.Vec(HeaderField__1),
    "streaming_strategy": IDL2.Opt(StreamingStrategy),
    "status_code": IDL2.Nat16
  });
  const StreamingCallbackResponse = IDL2.Record({
    "token": IDL2.Opt(StreamingCallbackToken),
    "body": IDL2.Vec(IDL2.Nat8)
  });
  const ManageCommand = IDL2.Variant({
    "UpdateOwner": IDL2.Principal,
    "UpdateManagers": IDL2.Vec(IDL2.Principal),
    "UpdateNetwork": IDL2.Opt(IDL2.Principal)
  });
  const ManageStorageRequest = IDL2.Variant({
    "add_storage_canisters": IDL2.Vec(IDL2.Tuple(IDL2.Principal, IDL2.Nat, IDL2.Tuple(IDL2.Nat, IDL2.Nat, IDL2.Nat)))
  });
  const ManageStorageResponse = IDL2.Variant({
    "add_storage_canisters": IDL2.Tuple(IDL2.Nat, IDL2.Nat)
  });
  const Result_8 = IDL2.Variant({
    "ok": ManageStorageResponse,
    "err": OrigynError
  });
  const SalesConfig = IDL2.Record({
    "pricing": PricingConfig,
    "escrow_receipt": IDL2.Opt(EscrowReceipt)
  });
  const MarketTransferRequest = IDL2.Record({
    "token_id": IDL2.Text,
    "sales_config": SalesConfig
  });
  const MarketTransferRequestReponse = IDL2.Record({
    "token_id": IDL2.Text,
    "txn_type": IDL2.Variant({
      "escrow_deposit": IDL2.Record({
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_network_updated": IDL2.Record({
        "network": IDL2.Principal,
        "extensible": CandyValue
      }),
      "escrow_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_managers_updated": IDL2.Record({
        "managers": IDL2.Vec(IDL2.Principal),
        "extensible": CandyValue
      }),
      "auction_bid": IDL2.Record({
        "token": TokenSpec,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Text
      }),
      "burn": IDL2.Null,
      "data": IDL2.Null,
      "sale_ended": IDL2.Record({
        "token": TokenSpec,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Opt(IDL2.Text)
      }),
      "mint": IDL2.Record({
        "to": Account,
        "from": Account,
        "sale": IDL2.Opt(IDL2.Record({ "token": TokenSpec, "amount": IDL2.Nat })),
        "extensible": CandyValue
      }),
      "extensible": CandyValue,
      "owner_transfer": IDL2.Record({
        "to": Account,
        "from": Account,
        "extensible": CandyValue
      }),
      "sale_opened": IDL2.Record({
        "pricing": PricingConfig,
        "extensible": CandyValue,
        "sale_id": IDL2.Text
      }),
      "canister_owner_updated": IDL2.Record({
        "owner": IDL2.Principal,
        "extensible": CandyValue
      }),
      "sale_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      })
    }),
    "timestamp": IDL2.Int,
    "index": IDL2.Nat
  });
  const Result_7 = IDL2.Variant({
    "ok": MarketTransferRequestReponse,
    "err": OrigynError
  });
  const Metadata = IDL2.Variant({
    "fungible": IDL2.Record({
      "decimals": IDL2.Nat8,
      "metadata": IDL2.Opt(IDL2.Vec(IDL2.Nat8)),
      "name": IDL2.Text,
      "symbol": IDL2.Text
    }),
    "nonfungible": IDL2.Record({ "metadata": IDL2.Opt(IDL2.Vec(IDL2.Nat8)) })
  });
  const Result_6 = IDL2.Variant({ "ok": Metadata, "err": CommonError });
  const AuctionStateStable = IDL2.Record({
    "status": IDL2.Variant({
      "closed": IDL2.Null,
      "open": IDL2.Null,
      "not_started": IDL2.Null
    }),
    "participants": IDL2.Vec(IDL2.Tuple(IDL2.Principal, IDL2.Int)),
    "current_bid_amount": IDL2.Nat,
    "winner": IDL2.Opt(Account),
    "end_date": IDL2.Int,
    "wait_for_quiet_count": IDL2.Opt(IDL2.Nat),
    "current_escrow": IDL2.Opt(EscrowReceipt),
    "allow_list": IDL2.Opt(IDL2.Vec(IDL2.Tuple(IDL2.Principal, IDL2.Bool))),
    "min_next_bid": IDL2.Nat,
    "config": PricingConfig
  });
  const SaleStatusStable = IDL2.Record({
    "token_id": IDL2.Text,
    "sale_type": IDL2.Variant({ "auction": AuctionStateStable }),
    "sale_id": IDL2.Text
  });
  const NFTInfoStable = IDL2.Record({
    "metadata": CandyValue,
    "current_sale": IDL2.Opt(SaleStatusStable)
  });
  const Result_5 = IDL2.Variant({ "ok": NFTInfoStable, "err": OrigynError });
  const NftError = IDL2.Variant({
    "UnauthorizedOperator": IDL2.Null,
    "SelfTransfer": IDL2.Null,
    "TokenNotFound": IDL2.Null,
    "UnauthorizedOwner": IDL2.Null,
    "TxNotFound": IDL2.Null,
    "SelfApprove": IDL2.Null,
    "OperatorNotFound": IDL2.Null,
    "ExistedNFT": IDL2.Null,
    "OwnerNotFound": IDL2.Null,
    "Other": IDL2.Text
  });
  const OwnerOfResponse = IDL2.Variant({
    "Ok": IDL2.Opt(IDL2.Principal),
    "Err": NftError
  });
  const OwnerTransferRequest = IDL2.Record({
    "to": Account,
    "token_id": IDL2.Text,
    "from": Account
  });
  const OwnerTransferResponse = IDL2.Record({
    "transaction": TransactionRecord,
    "assets": IDL2.Vec(CandyValue)
  });
  const Result_4 = IDL2.Variant({
    "ok": OwnerTransferResponse,
    "err": OrigynError
  });
  const StageChunkArg = IDL2.Record({
    "content": IDL2.Vec(IDL2.Nat8),
    "token_id": IDL2.Text,
    "chunk": IDL2.Nat,
    "filedata": CandyValue,
    "library_id": IDL2.Text
  });
  const StageLibraryResponse = IDL2.Record({ "canister": IDL2.Principal });
  const Result_3 = IDL2.Variant({
    "ok": StageLibraryResponse,
    "err": OrigynError
  });
  const Memo = IDL2.Vec(IDL2.Nat8);
  const SubAccount = IDL2.Vec(IDL2.Nat8);
  const TransferRequest = IDL2.Record({
    "to": User,
    "token": TokenIdentifier,
    "notify": IDL2.Bool,
    "from": User,
    "memo": Memo,
    "subaccount": IDL2.Opt(SubAccount),
    "amount": Balance
  });
  const TransferResponse = IDL2.Variant({
    "ok": Balance,
    "err": IDL2.Variant({
      "CannotNotify": AccountIdentifier,
      "InsufficientBalance": IDL2.Null,
      "InvalidToken": TokenIdentifier,
      "Rejected": IDL2.Null,
      "Unauthorized": AccountIdentifier,
      "Other": IDL2.Text
    })
  });
  const Result__1 = IDL2.Variant({ "Ok": IDL2.Nat, "Err": NftError });
  const UpdateMode = IDL2.Variant({
    "Set": CandyValue,
    "Lock": CandyValue,
    "Next": IDL2.Vec(Update)
  });
  Update.fill(IDL2.Record({ "mode": UpdateMode, "name": IDL2.Text }));
  const UpdateRequest = IDL2.Record({
    "id": IDL2.Text,
    "update": IDL2.Vec(Update)
  });
  const NFTUpdateRequest = IDL2.Variant({
    "update": IDL2.Record({
      "token_id": IDL2.Text,
      "update": UpdateRequest,
      "app_id": IDL2.Text
    }),
    "replace": IDL2.Record({ "token_id": IDL2.Text, "data": CandyValue })
  });
  const NFTUpdateResponse = IDL2.Bool;
  const Result_1 = IDL2.Variant({
    "ok": NFTUpdateResponse,
    "err": OrigynError
  });
  const WithdrawDescription = IDL2.Record({
    "token": TokenSpec,
    "token_id": IDL2.Text,
    "seller": Account,
    "withdraw_to": Account,
    "buyer": Account,
    "amount": IDL2.Nat
  });
  const WithdrawRequest = IDL2.Variant({
    "sale": WithdrawDescription,
    "escrow": WithdrawDescription
  });
  const WithdrawResponse = IDL2.Record({
    "token_id": IDL2.Text,
    "txn_type": IDL2.Variant({
      "escrow_deposit": IDL2.Record({
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_network_updated": IDL2.Record({
        "network": IDL2.Principal,
        "extensible": CandyValue
      }),
      "escrow_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      }),
      "canister_managers_updated": IDL2.Record({
        "managers": IDL2.Vec(IDL2.Principal),
        "extensible": CandyValue
      }),
      "auction_bid": IDL2.Record({
        "token": TokenSpec,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Text
      }),
      "burn": IDL2.Null,
      "data": IDL2.Null,
      "sale_ended": IDL2.Record({
        "token": TokenSpec,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat,
        "sale_id": IDL2.Opt(IDL2.Text)
      }),
      "mint": IDL2.Record({
        "to": Account,
        "from": Account,
        "sale": IDL2.Opt(IDL2.Record({ "token": TokenSpec, "amount": IDL2.Nat })),
        "extensible": CandyValue
      }),
      "extensible": CandyValue,
      "owner_transfer": IDL2.Record({
        "to": Account,
        "from": Account,
        "extensible": CandyValue
      }),
      "sale_opened": IDL2.Record({
        "pricing": PricingConfig,
        "extensible": CandyValue,
        "sale_id": IDL2.Text
      }),
      "canister_owner_updated": IDL2.Record({
        "owner": IDL2.Principal,
        "extensible": CandyValue
      }),
      "sale_withdraw": IDL2.Record({
        "fee": IDL2.Nat,
        "token": TokenSpec,
        "token_id": IDL2.Text,
        "trx_id": TransactionID,
        "seller": Account,
        "extensible": CandyValue,
        "buyer": Account,
        "amount": IDL2.Nat
      })
    }),
    "timestamp": IDL2.Int,
    "index": IDL2.Nat
  });
  const Result = IDL2.Variant({ "ok": WithdrawResponse, "err": OrigynError });
  const Nft_Canister = IDL2.Service({
    "__advance_time": IDL2.Func([IDL2.Int], [IDL2.Int], []),
    "__set_time_mode": IDL2.Func([IDL2.Variant({ "test": IDL2.Null, "standard": IDL2.Null })], [IDL2.Bool], []),
    "balance": IDL2.Func([BalanceRequest], [BalanceResponse__1], ["query"]),
    "balanceEXT": IDL2.Func([BalanceRequest], [BalanceResponse__1], ["query"]),
    "balanceOfDip721": IDL2.Func([IDL2.Principal], [IDL2.Nat], ["query"]),
    "balance_of_nft_origyn": IDL2.Func([Account], [Result_19], ["query"]),
    "bearer": IDL2.Func([TokenIdentifier], [Result_18], ["query"]),
    "bearerEXT": IDL2.Func([TokenIdentifier], [Result_18], ["query"]),
    "bearer_batch_nft_origyn": IDL2.Func([IDL2.Vec(IDL2.Text)], [IDL2.Vec(Result_17)], ["query"]),
    "bearer_nft_origyn": IDL2.Func([IDL2.Text], [Result_17], ["query"]),
    "bid_nft_origyn": IDL2.Func([BidRequest], [Result_16], []),
    "canister_status": IDL2.Func([IDL2.Record({ "canister_id": canister_id })], [canister_status], []),
    "chunk_nft_origyn": IDL2.Func([ChunkRequest], [Result_15], ["query"]),
    "collection_nft_origyn": IDL2.Func([
      IDL2.Opt(IDL2.Vec(IDL2.Tuple(IDL2.Text, IDL2.Opt(IDL2.Nat), IDL2.Opt(IDL2.Nat))))
    ], [Result_14], ["query"]),
    "collection_update_origyn": IDL2.Func([CollectionUpdateRequest], [Result_9], []),
    "current_log": IDL2.Func([], [IDL2.Vec(LogEntry)], ["query"]),
    "cycles": IDL2.Func([], [IDL2.Nat], ["query"]),
    "end_sale_nft_origyn": IDL2.Func([IDL2.Text], [Result_13], []),
    "escrow_nft_origyn": IDL2.Func([EscrowRequest], [Result_12], []),
    "getEXTTokenIdentifier": IDL2.Func([IDL2.Text], [IDL2.Text], ["query"]),
    "get_access_key": IDL2.Func([], [Result_2], ["query"]),
    "get_canister_managers_nft_origyn": IDL2.Func([], [IDL2.Vec(Principal2)], ["query"]),
    "get_canister_network_nft_origyn": IDL2.Func([], [IDL2.Opt(Principal2)], ["query"]),
    "get_canister_owner_nft_origyn": IDL2.Func([], [Principal2], ["query"]),
    "get_nat_as_token_id_origyn": IDL2.Func([IDL2.Nat], [IDL2.Text], ["query"]),
    "get_owner_soulbound": IDL2.Func([CandyValue], [IDL2.Bool], []),
    "get_storage_metrics": IDL2.Func([], [Result_11], ["query"]),
    "get_token_id_as_nat_origyn": IDL2.Func([IDL2.Text], [IDL2.Nat], ["query"]),
    "harvest_log": IDL2.Func([IDL2.Nat], [IDL2.Vec(IDL2.Vec(LogEntry))], []),
    "history_nft_origyn": IDL2.Func([IDL2.Text, IDL2.Opt(IDL2.Nat), IDL2.Opt(IDL2.Nat)], [Result_10], ["query"]),
    "http_access_key": IDL2.Func([], [Result_2], []),
    "http_request": IDL2.Func([HttpRequest], [HTTPResponse], ["query"]),
    "http_request_streaming_callback": IDL2.Func([StreamingCallbackToken], [StreamingCallbackResponse], ["query"]),
    "log_history_page": IDL2.Func([IDL2.Nat], [IDL2.Vec(LogEntry)], ["query"]),
    "log_history_page_chunk": IDL2.Func([IDL2.Nat, IDL2.Nat, IDL2.Nat], [IDL2.Vec(LogEntry)], ["query"]),
    "log_history_size": IDL2.Func([], [IDL2.Nat], ["query"]),
    "manage_nft_origyn": IDL2.Func([ManageCommand], [Result_9], []),
    "manage_storage_nft_origyn": IDL2.Func([ManageStorageRequest], [Result_8], []),
    "market_transfer_batch_nft_origyn": IDL2.Func([IDL2.Vec(MarketTransferRequest)], [IDL2.Vec(Result_7)], []),
    "market_transfer_nft_origyn": IDL2.Func([MarketTransferRequest], [Result_7], []),
    "metadata": IDL2.Func([TokenIdentifier], [Result_6], ["query"]),
    "mint__batch_nft_origyn": IDL2.Func([IDL2.Vec(IDL2.Tuple(IDL2.Text, Account))], [IDL2.Vec(Result_2)], []),
    "mint_nft_origyn": IDL2.Func([IDL2.Text, Account], [Result_2], []),
    "nftStreamingCallback": IDL2.Func([StreamingCallbackToken], [StreamingCallbackResponse], ["query"]),
    "nft_batch_origyn": IDL2.Func([IDL2.Vec(IDL2.Text)], [IDL2.Vec(Result_5)], ["query"]),
    "nft_origyn": IDL2.Func([IDL2.Text], [Result_5], ["query"]),
    "nuke_log": IDL2.Func([], [], []),
    "ownerOf": IDL2.Func([IDL2.Nat], [OwnerOfResponse], ["query"]),
    "ownerOfDIP721": IDL2.Func([IDL2.Nat], [OwnerOfResponse], ["query"]),
    "owner_transfer_nft_origyn": IDL2.Func([OwnerTransferRequest], [Result_4], []),
    "set_log_harvester_id": IDL2.Func([IDL2.Principal], [], []),
    "stage_batch_nft_origyn": IDL2.Func([IDL2.Vec(IDL2.Record({ "metadata": CandyValue }))], [IDL2.Vec(Result_2)], []),
    "stage_library_nft_origyn": IDL2.Func([StageChunkArg], [Result_3], []),
    "stage_nft_origyn": IDL2.Func([IDL2.Record({ "metadata": CandyValue })], [Result_2], []),
    "transfer": IDL2.Func([TransferRequest], [TransferResponse], []),
    "transferEXT": IDL2.Func([TransferRequest], [TransferResponse], []),
    "transferFrom": IDL2.Func([IDL2.Principal, IDL2.Principal, IDL2.Nat], [Result__1], []),
    "transferFromDip721": IDL2.Func([IDL2.Principal, IDL2.Principal, IDL2.Nat], [Result__1], []),
    "update_app_nft_origyn": IDL2.Func([NFTUpdateRequest], [Result_1], []),
    "whoami": IDL2.Func([], [IDL2.Principal], ["query"]),
    "withdraw_nft_origyn": IDL2.Func([WithdrawRequest], [Result], [])
  });
  return Nft_Canister;
};
const init$a = ({ IDL: IDL2 }) => {
  const Principal2 = IDL2.Principal;
  const InitArgs = IDL2.Record({
    "owner": Principal2,
    "storage_space": IDL2.Opt(IDL2.Nat)
  });
  return [InitArgs];
};
nft_origyn_did.init = init$a;
var __awaiter$a = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault$5 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(nft_origyn, "__esModule", { value: true });
const agent_1$5 = require$$5;
const nft_origyn_did_1 = __importDefault$5(nft_origyn_did);
const default_1$3 = __importDefault$5(_default);
const standards_1$3 = standards;
class NFTOrigyn extends default_1$3.default {
  constructor(canisterId2, agent) {
    super(canisterId2, agent);
    this.standard = standards_1$3.NFT.nftOrigyn;
    this.serializeTokenData = (tokenData) => {
      if ("err" in tokenData)
        throw new Error(Object.keys(tokenData.err)[0]);
      const metadata = tokenData.ok.metadata;
      const tokenID = metadata.Class.find(({ name }) => name === "id").value.Text;
      return {
        index: tokenID,
        canister: this.canisterId,
        url: `https://${this.canisterId}.raw.ic0.app/-/${tokenID}`,
        name: tokenID,
        metadata,
        standard: this.standard
      };
    };
    this.actor = agent_1$5.Actor.createActor(nft_origyn_did_1.default, {
      agent,
      canisterId: canisterId2
    });
  }
  getUserTokens(principal) {
    return __awaiter$a(this, void 0, void 0, function* () {
      const tokensIndexes = yield this.actor.balance_of_nft_origyn({ principal });
      if ("err" in tokensIndexes) {
        throw new Error(Object.keys(tokensIndexes.err)[0]);
      }
      const tokensData = yield Promise.all(tokensIndexes.ok.nfts.map((item) => __awaiter$a(this, void 0, void 0, function* () {
        const userTokensResult = yield this.actor.nft_origyn(item);
        if ("err" in userTokensResult)
          throw new Error(Object.keys(userTokensResult.err)[0]);
        return { detail: userTokensResult, principal };
      })));
      return tokensData.map((token2) => this.serializeTokenData(token2.detail));
    });
  }
  getMetadata() {
    throw new Error("Method not implemented.");
  }
  transfer(to, tokenIndex) {
    return __awaiter$a(this, void 0, void 0, function* () {
      yield this.agent.getPrincipal();
      const balance = yield this.actor.balance_of_nft_origyn({ principal: to });
      if ("err" in balance) {
        throw new Error(Object.keys(balance.err)[0]);
      }
      const escrow = balance.ok.escrow.find(({ token_id }) => token_id === tokenIndex);
      if (!escrow) {
        throw new Error("No pending escrows for transfer.");
      }
      const transferResult = yield this.actor.market_transfer_nft_origyn({
        "token_id": tokenIndex,
        "sales_config": {
          pricing: { "instant": null },
          escrow_receipt: [escrow]
        }
      });
      if ("err" in transferResult)
        throw new Error(Object.keys(transferResult.err)[0]);
    });
  }
  details(tokenIndex) {
    return __awaiter$a(this, void 0, void 0, function* () {
      const tokenData = yield this.actor.nft_origyn(tokenIndex);
      return this.serializeTokenData(tokenData);
    });
  }
}
nft_origyn.default = NFTOrigyn;
var departure_labs = {};
var departure_labs_did = {};
Object.defineProperty(departure_labs_did, "__esModule", { value: true });
departure_labs_did.init = void 0;
departure_labs_did.default = ({ IDL: IDL2 }) => {
  const Property = IDL2.Rec();
  const Query = IDL2.Rec();
  const Update = IDL2.Rec();
  const Callback = IDL2.Func([], [], []);
  const StagedWrite = IDL2.Variant({
    "Init": IDL2.Record({ "size": IDL2.Nat, "callback": IDL2.Opt(Callback) }),
    "Chunk": IDL2.Record({
      "chunk": IDL2.Vec(IDL2.Nat8),
      "callback": IDL2.Opt(Callback)
    })
  });
  const AssetRequest = IDL2.Variant({
    "Put": IDL2.Record({
      "key": IDL2.Text,
      "contentType": IDL2.Text,
      "callback": IDL2.Opt(Callback),
      "payload": IDL2.Variant({
        "StagedData": IDL2.Null,
        "Payload": IDL2.Vec(IDL2.Nat8)
      })
    }),
    "Remove": IDL2.Record({ "key": IDL2.Text, "callback": IDL2.Opt(Callback) }),
    "StagedWrite": StagedWrite
  });
  const AuthorizeRequest = IDL2.Record({
    "p": IDL2.Principal,
    "id": IDL2.Text,
    "isAuthorized": IDL2.Bool
  });
  const Error2 = IDL2.Variant({
    "Immutable": IDL2.Null,
    "NotFound": IDL2.Null,
    "Unauthorized": IDL2.Null,
    "InvalidRequest": IDL2.Null,
    "AuthorizedPrincipalLimitReached": IDL2.Nat
  });
  const Result_1 = IDL2.Variant({ "ok": IDL2.Null, "err": Error2 });
  const ContractInfo = IDL2.Record({
    "nft_payload_size": IDL2.Nat,
    "memory_size": IDL2.Nat,
    "max_live_size": IDL2.Nat,
    "cycles": IDL2.Nat,
    "total_minted": IDL2.Nat,
    "heap_size": IDL2.Nat,
    "authorized_users": IDL2.Vec(IDL2.Principal)
  });
  const TopupCallback = IDL2.Func([], [], []);
  const Contract = IDL2.Variant({
    "ContractAuthorize": IDL2.Record({
      "isAuthorized": IDL2.Bool,
      "user": IDL2.Principal
    }),
    "Mint": IDL2.Record({ "id": IDL2.Text, "owner": IDL2.Principal })
  });
  const Token = IDL2.Variant({
    "Authorize": IDL2.Record({
      "id": IDL2.Text,
      "isAuthorized": IDL2.Bool,
      "user": IDL2.Principal
    }),
    "Transfer": IDL2.Record({
      "id": IDL2.Text,
      "to": IDL2.Principal,
      "from": IDL2.Principal
    })
  });
  const Message = IDL2.Record({
    "topupCallback": TopupCallback,
    "createdAt": IDL2.Int,
    "topupAmount": IDL2.Nat,
    "event": IDL2.Variant({ "ContractEvent": Contract, "TokenEvent": Token })
  });
  const Callback__1 = IDL2.Func([Message], [], []);
  const CallbackStatus = IDL2.Record({
    "failedCalls": IDL2.Nat,
    "failedCallsLimit": IDL2.Nat,
    "callback": IDL2.Opt(Callback__1),
    "noTopupCallLimit": IDL2.Nat,
    "callsSinceLastTopup": IDL2.Nat
  });
  const ContractMetadata = IDL2.Record({
    "name": IDL2.Text,
    "symbol": IDL2.Text
  });
  const HeaderField = IDL2.Tuple(IDL2.Text, IDL2.Text);
  const Request = IDL2.Record({
    "url": IDL2.Text,
    "method": IDL2.Text,
    "body": IDL2.Vec(IDL2.Nat8),
    "headers": IDL2.Vec(HeaderField)
  });
  const StreamingCallbackToken = IDL2.Record({
    "key": IDL2.Text,
    "index": IDL2.Nat,
    "content_encoding": IDL2.Text
  });
  const StreamingCallbackResponse = IDL2.Record({
    "token": IDL2.Opt(StreamingCallbackToken),
    "body": IDL2.Vec(IDL2.Nat8)
  });
  const StreamingCallback = IDL2.Func([StreamingCallbackToken], [StreamingCallbackResponse], ["query"]);
  const StreamingStrategy = IDL2.Variant({
    "Callback": IDL2.Record({
      "token": StreamingCallbackToken,
      "callback": StreamingCallback
    })
  });
  const Response2 = IDL2.Record({
    "body": IDL2.Vec(IDL2.Nat8),
    "headers": IDL2.Vec(HeaderField),
    "streaming_strategy": IDL2.Opt(StreamingStrategy),
    "status_code": IDL2.Nat16
  });
  const Value = IDL2.Variant({
    "Int": IDL2.Int,
    "Nat": IDL2.Nat,
    "Empty": IDL2.Null,
    "Bool": IDL2.Bool,
    "Text": IDL2.Text,
    "Float": IDL2.Float64,
    "Principal": IDL2.Principal,
    "Class": IDL2.Vec(Property)
  });
  Property.fill(IDL2.Record({ "value": Value, "name": IDL2.Text, "immutable": IDL2.Bool }));
  const Properties = IDL2.Vec(Property);
  const Egg = IDL2.Record({
    "contentType": IDL2.Text,
    "owner": IDL2.Opt(IDL2.Principal),
    "properties": Properties,
    "isPrivate": IDL2.Bool,
    "payload": IDL2.Variant({
      "StagedData": IDL2.Null,
      "Payload": IDL2.Vec(IDL2.Nat8)
    })
  });
  const Result_5 = IDL2.Variant({ "ok": IDL2.Principal, "err": Error2 });
  Query.fill(IDL2.Record({ "name": IDL2.Text, "next": IDL2.Vec(Query) }));
  const QueryMode = IDL2.Variant({ "All": IDL2.Null, "Some": IDL2.Vec(Query) });
  const QueryRequest = IDL2.Record({ "id": IDL2.Text, "mode": QueryMode });
  const Result = IDL2.Variant({ "ok": Properties, "err": Error2 });
  const Chunk = IDL2.Record({
    "data": IDL2.Vec(IDL2.Nat8),
    "totalPages": IDL2.Nat,
    "nextPage": IDL2.Opt(IDL2.Nat)
  });
  const PayloadResult = IDL2.Variant({
    "Complete": IDL2.Vec(IDL2.Nat8),
    "Chunk": Chunk
  });
  const PublicToken = IDL2.Record({
    "id": IDL2.Text,
    "contentType": IDL2.Text,
    "owner": IDL2.Principal,
    "createdAt": IDL2.Int,
    "properties": Properties,
    "payload": PayloadResult
  });
  const Result_4 = IDL2.Variant({ "ok": PublicToken, "err": Error2 });
  const Result_3 = IDL2.Variant({ "ok": Chunk, "err": Error2 });
  const Metadata = IDL2.Record({
    "id": IDL2.Text,
    "contentType": IDL2.Text,
    "owner": IDL2.Principal,
    "createdAt": IDL2.Int,
    "properties": Properties
  });
  const Result_2 = IDL2.Variant({ "ok": Metadata, "err": Error2 });
  const UpdateEventCallback = IDL2.Variant({
    "Set": Callback__1,
    "Remove": IDL2.Null
  });
  const UpdateMode = IDL2.Variant({ "Set": Value, "Next": IDL2.Vec(Update) });
  Update.fill(IDL2.Record({ "mode": UpdateMode, "name": IDL2.Text }));
  const UpdateRequest = IDL2.Record({
    "id": IDL2.Text,
    "update": IDL2.Vec(Update)
  });
  const Hub = IDL2.Service({
    "assetRequest": IDL2.Func([AssetRequest], [], []),
    "authorize": IDL2.Func([AuthorizeRequest], [Result_1], []),
    "balanceOf": IDL2.Func([IDL2.Principal], [IDL2.Vec(IDL2.Text)], []),
    "getAuthorized": IDL2.Func([IDL2.Text], [IDL2.Vec(IDL2.Principal)], ["query"]),
    "getContractInfo": IDL2.Func([], [ContractInfo], []),
    "getEventCallbackStatus": IDL2.Func([], [CallbackStatus], []),
    "getMetadata": IDL2.Func([], [ContractMetadata], ["query"]),
    "getTotalMinted": IDL2.Func([], [IDL2.Nat], ["query"]),
    "http_request": IDL2.Func([Request], [Response2], ["query"]),
    "http_request_streaming_callback": IDL2.Func([StreamingCallbackToken], [StreamingCallbackResponse], ["query"]),
    "init": IDL2.Func([IDL2.Vec(IDL2.Principal), ContractMetadata], [], []),
    "isAuthorized": IDL2.Func([IDL2.Text, IDL2.Principal], [IDL2.Bool], ["query"]),
    "listAssets": IDL2.Func([], [IDL2.Vec(IDL2.Tuple(IDL2.Text, IDL2.Text, IDL2.Nat))], ["query"]),
    "mint": IDL2.Func([Egg], [IDL2.Text], []),
    "nftStreamingCallback": IDL2.Func([StreamingCallbackToken], [StreamingCallbackResponse], ["query"]),
    "ownerOf": IDL2.Func([IDL2.Text], [Result_5], ["query"]),
    "queryProperties": IDL2.Func([QueryRequest], [Result], ["query"]),
    "staticStreamingCallback": IDL2.Func([StreamingCallbackToken], [StreamingCallbackResponse], ["query"]),
    "tokenByIndex": IDL2.Func([IDL2.Text], [Result_4], []),
    "tokenChunkByIndex": IDL2.Func([IDL2.Text, IDL2.Nat], [Result_3], []),
    "tokenMetadataByIndex": IDL2.Func([IDL2.Text], [Result_2], []),
    "transfer": IDL2.Func([IDL2.Principal, IDL2.Text], [Result_1], []),
    "updateContractOwners": IDL2.Func([IDL2.Principal, IDL2.Bool], [Result_1], []),
    "updateEventCallback": IDL2.Func([UpdateEventCallback], [], []),
    "updateProperties": IDL2.Func([UpdateRequest], [Result], []),
    "wallet_receive": IDL2.Func([], [], []),
    "writeStaged": IDL2.Func([StagedWrite], [], [])
  });
  return Hub;
};
const init$9 = ({}) => {
  return [];
};
departure_labs_did.init = init$9;
var __awaiter$9 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(departure_labs, "__esModule", { value: true });
const agent_1$4 = require$$5;
const departure_labs_did_1 = __importDefault$4(departure_labs_did);
const default_1$2 = __importDefault$4(_default);
const standards_1$2 = standards;
class DepartureLabs extends default_1$2.default {
  constructor(canisterId2, agent) {
    super(canisterId2, agent);
    this.standard = standards_1$2.NFT.departuresLabs;
    this.serializeTokenData = (tokenData) => ({
      index: BigInt(tokenData.id),
      canister: this.canisterId,
      url: `https://${this.canisterId}.raw.ic0.app/nft/${tokenData.id}`,
      metadata: tokenData,
      standard: this.standard
    });
    this.actor = agent_1$4.Actor.createActor(departure_labs_did_1.default, {
      agent,
      canisterId: canisterId2
    });
  }
  getMetadata() {
    throw new Error("Method not implemented.");
  }
  getUserTokens(principal) {
    return __awaiter$9(this, void 0, void 0, function* () {
      const tokensIndexes = yield this.actor.balanceOf(principal);
      const tokensData = yield Promise.all(tokensIndexes.map((tokenIndex) => __awaiter$9(this, void 0, void 0, function* () {
        const userTokensResult = yield this.actor.tokenMetadataByIndex(tokenIndex);
        if ("err" in userTokensResult)
          throw new Error(Object.keys(userTokensResult.err)[0]);
        return userTokensResult.ok;
      })));
      return tokensData.map((token2) => this.serializeTokenData(token2));
    });
  }
  transfer(to, tokenIndex) {
    return __awaiter$9(this, void 0, void 0, function* () {
      const transferResult = yield this.actor.transfer(to, tokenIndex.toString(10));
      if ("err" in transferResult)
        throw new Error(Object.keys(transferResult.err)[0]);
    });
  }
  details(tokenIndex) {
    return __awaiter$9(this, void 0, void 0, function* () {
      const tokenData = yield this.actor.tokenMetadataByIndex(tokenIndex.toString(10));
      if ("err" in tokenData)
        throw new Error(Object.keys(tokenData.err)[0]);
      return this.serializeTokenData(tokenData.ok);
    });
  }
}
departure_labs.default = DepartureLabs;
var dip_721 = {};
var dip_721_did = {};
Object.defineProperty(dip_721_did, "__esModule", { value: true });
dip_721_did.default = ({ IDL: IDL2 }) => {
  const Vec2 = IDL2.Rec();
  IDL2.Record({
    "cap": IDL2.Opt(IDL2.Principal),
    "logo": IDL2.Opt(IDL2.Text),
    "name": IDL2.Opt(IDL2.Text),
    "custodians": IDL2.Opt(IDL2.Vec(IDL2.Principal)),
    "symbol": IDL2.Opt(IDL2.Text)
  });
  const NftError = IDL2.Variant({
    "UnauthorizedOperator": IDL2.Null,
    "SelfTransfer": IDL2.Null,
    "TokenNotFound": IDL2.Null,
    "UnauthorizedOwner": IDL2.Null,
    "SelfApprove": IDL2.Null,
    "OperatorNotFound": IDL2.Null,
    "ExistedNFT": IDL2.Null,
    "OwnerNotFound": IDL2.Null
  });
  const Result = IDL2.Variant({ "Ok": IDL2.Nat, "Err": NftError });
  const Result_1 = IDL2.Variant({ "Ok": IDL2.Bool, "Err": NftError });
  const ManualReply = IDL2.Record({
    "logo": IDL2.Opt(IDL2.Text),
    "name": IDL2.Opt(IDL2.Text),
    "created_at": IDL2.Nat64,
    "upgraded_at": IDL2.Nat64,
    "custodians": IDL2.Vec(IDL2.Principal),
    "symbol": IDL2.Opt(IDL2.Text)
  });
  Vec2.fill(IDL2.Vec(IDL2.Tuple(IDL2.Text, IDL2.Variant({
    "Nat64Content": IDL2.Nat64,
    "Nat32Content": IDL2.Nat32,
    "BoolContent": IDL2.Bool,
    "Nat8Content": IDL2.Nat8,
    "Int64Content": IDL2.Int64,
    "IntContent": IDL2.Int,
    "NatContent": IDL2.Nat,
    "Nat16Content": IDL2.Nat16,
    "Int32Content": IDL2.Int32,
    "Int8Content": IDL2.Int8,
    "FloatContent": IDL2.Float64,
    "Int16Content": IDL2.Int16,
    "BlobContent": IDL2.Vec(IDL2.Nat8),
    "NestedContent": Vec2,
    "Principal": IDL2.Principal,
    "TextContent": IDL2.Text
  }))));
  const GenericValue = IDL2.Variant({
    "Nat64Content": IDL2.Nat64,
    "Nat32Content": IDL2.Nat32,
    "BoolContent": IDL2.Bool,
    "Nat8Content": IDL2.Nat8,
    "Int64Content": IDL2.Int64,
    "IntContent": IDL2.Int,
    "NatContent": IDL2.Nat,
    "Nat16Content": IDL2.Nat16,
    "Int32Content": IDL2.Int32,
    "Int8Content": IDL2.Int8,
    "FloatContent": IDL2.Float64,
    "Int16Content": IDL2.Int16,
    "BlobContent": IDL2.Vec(IDL2.Nat8),
    "NestedContent": Vec2,
    "Principal": IDL2.Principal,
    "TextContent": IDL2.Text
  });
  const Result_2 = IDL2.Variant({
    "Ok": IDL2.Opt(IDL2.Principal),
    "Err": NftError
  });
  const ManualReply_1 = IDL2.Variant({
    "Ok": IDL2.Vec(IDL2.Nat),
    "Err": NftError
  });
  const TokenMetadata = IDL2.Record({
    "transferred_at": IDL2.Opt(IDL2.Nat64),
    "transferred_by": IDL2.Opt(IDL2.Principal),
    "owner": IDL2.Opt(IDL2.Principal),
    "operator": IDL2.Opt(IDL2.Principal),
    "approved_at": IDL2.Opt(IDL2.Nat64),
    "approved_by": IDL2.Opt(IDL2.Principal),
    "properties": IDL2.Vec(IDL2.Tuple(IDL2.Text, GenericValue)),
    "is_burned": IDL2.Bool,
    "token_identifier": IDL2.Nat,
    "burned_at": IDL2.Opt(IDL2.Nat64),
    "burned_by": IDL2.Opt(IDL2.Principal),
    "minted_at": IDL2.Nat64,
    "minted_by": IDL2.Principal
  });
  const ManualReply_2 = IDL2.Variant({
    "Ok": IDL2.Vec(TokenMetadata),
    "Err": NftError
  });
  const Stats = IDL2.Record({
    "cycles": IDL2.Nat,
    "total_transactions": IDL2.Nat,
    "total_unique_holders": IDL2.Nat,
    "total_supply": IDL2.Nat
  });
  const SupportedInterface = IDL2.Variant({
    "Burn": IDL2.Null,
    "Mint": IDL2.Null,
    "Approval": IDL2.Null
  });
  const ManualReply_3 = IDL2.Variant({ "Ok": TokenMetadata, "Err": NftError });
  return IDL2.Service({
    "approve": IDL2.Func([IDL2.Principal, IDL2.Nat], [Result], []),
    "balanceOf": IDL2.Func([IDL2.Principal], [Result], ["query"]),
    "burn": IDL2.Func([IDL2.Nat], [Result], []),
    "custodians": IDL2.Func([], [IDL2.Vec(IDL2.Principal)], ["query"]),
    "cycles": IDL2.Func([], [IDL2.Nat], ["query"]),
    "dfx_info": IDL2.Func([], [IDL2.Text], ["query"]),
    "dip721_approve": IDL2.Func([IDL2.Principal, IDL2.Nat], [Result], []),
    "dip721_balance_of": IDL2.Func([IDL2.Principal], [Result], ["query"]),
    "dip721_burn": IDL2.Func([IDL2.Nat], [Result], []),
    "dip721_custodians": IDL2.Func([], [IDL2.Vec(IDL2.Principal)], ["query"]),
    "dip721_cycles": IDL2.Func([], [IDL2.Nat], ["query"]),
    "dip721_is_approved_for_all": IDL2.Func([IDL2.Principal, IDL2.Principal], [Result_1], ["query"]),
    "dip721_logo": IDL2.Func([], [IDL2.Opt(IDL2.Text)], ["query"]),
    "dip721_metadata": IDL2.Func([], [ManualReply], ["query"]),
    "dip721_mint": IDL2.Func([IDL2.Principal, IDL2.Nat, IDL2.Vec(IDL2.Tuple(IDL2.Text, GenericValue))], [Result], []),
    "dip721_name": IDL2.Func([], [IDL2.Opt(IDL2.Text)], ["query"]),
    "dip721_operator_of": IDL2.Func([IDL2.Nat], [Result_2], ["query"]),
    "dip721_operator_token_identifiers": IDL2.Func([IDL2.Principal], [ManualReply_1], ["query"]),
    "dip721_operator_token_metadata": IDL2.Func([IDL2.Principal], [ManualReply_2], ["query"]),
    "dip721_owner_of": IDL2.Func([IDL2.Nat], [Result_2], ["query"]),
    "dip721_owner_token_identifiers": IDL2.Func([IDL2.Principal], [ManualReply_1], ["query"]),
    "dip721_owner_token_metadata": IDL2.Func([IDL2.Principal], [ManualReply_2], ["query"]),
    "dip721_set_approval_for_all": IDL2.Func([IDL2.Principal, IDL2.Bool], [Result], []),
    "dip721_set_custodians": IDL2.Func([IDL2.Vec(IDL2.Principal)], [], []),
    "dip721_set_logo": IDL2.Func([IDL2.Text], [], []),
    "dip721_set_name": IDL2.Func([IDL2.Text], [], []),
    "dip721_set_symbol": IDL2.Func([IDL2.Text], [], []),
    "dip721_stats": IDL2.Func([], [Stats], ["query"]),
    "dip721_supported_interfaces": IDL2.Func([], [IDL2.Vec(SupportedInterface)], ["query"]),
    "dip721_symbol": IDL2.Func([], [IDL2.Opt(IDL2.Text)], ["query"]),
    "dip721_token_metadata": IDL2.Func([IDL2.Nat], [ManualReply_3], ["query"]),
    "dip721_total_supply": IDL2.Func([], [IDL2.Nat], ["query"]),
    "dip721_total_transactions": IDL2.Func([], [IDL2.Nat], ["query"]),
    "dip721_total_unique_holders": IDL2.Func([], [IDL2.Nat], ["query"]),
    "dip721_transfer": IDL2.Func([IDL2.Principal, IDL2.Nat], [Result], []),
    "dip721_transfer_from": IDL2.Func([IDL2.Principal, IDL2.Principal, IDL2.Nat], [Result], []),
    "git_commit_hash": IDL2.Func([], [IDL2.Text], ["query"]),
    "isApprovedForAll": IDL2.Func([IDL2.Principal, IDL2.Principal], [Result_1], ["query"]),
    "logo": IDL2.Func([], [IDL2.Opt(IDL2.Text)], ["query"]),
    "metadata": IDL2.Func([], [ManualReply], ["query"]),
    "mint": IDL2.Func([IDL2.Principal, IDL2.Nat, IDL2.Vec(IDL2.Tuple(IDL2.Text, GenericValue))], [Result], []),
    "name": IDL2.Func([], [IDL2.Opt(IDL2.Text)], ["query"]),
    "operatorOf": IDL2.Func([IDL2.Nat], [Result_2], ["query"]),
    "operatorTokenIdentifiers": IDL2.Func([IDL2.Principal], [ManualReply_1], ["query"]),
    "operatorTokenMetadata": IDL2.Func([IDL2.Principal], [ManualReply_2], ["query"]),
    "ownerOf": IDL2.Func([IDL2.Nat], [Result_2], ["query"]),
    "ownerTokenIdentifiers": IDL2.Func([IDL2.Principal], [ManualReply_1], ["query"]),
    "ownerTokenMetadata": IDL2.Func([IDL2.Principal], [ManualReply_2], ["query"]),
    "rust_toolchain_info": IDL2.Func([], [IDL2.Text], ["query"]),
    "setApprovalForAll": IDL2.Func([IDL2.Principal, IDL2.Bool], [Result], []),
    "setCustodians": IDL2.Func([IDL2.Vec(IDL2.Principal)], [], []),
    "setLogo": IDL2.Func([IDL2.Text], [], []),
    "setName": IDL2.Func([IDL2.Text], [], []),
    "setSymbol": IDL2.Func([IDL2.Text], [], []),
    "stats": IDL2.Func([], [Stats], ["query"]),
    "supportedInterfaces": IDL2.Func([], [IDL2.Vec(SupportedInterface)], ["query"]),
    "symbol": IDL2.Func([], [IDL2.Opt(IDL2.Text)], ["query"]),
    "tokenMetadata": IDL2.Func([IDL2.Nat], [ManualReply_3], ["query"]),
    "totalSupply": IDL2.Func([], [IDL2.Nat], ["query"]),
    "totalTransactions": IDL2.Func([], [IDL2.Nat], ["query"]),
    "totalUniqueHolders": IDL2.Func([], [IDL2.Nat], ["query"]),
    "transfer": IDL2.Func([IDL2.Principal, IDL2.Nat], [Result], []),
    "transferFrom": IDL2.Func([IDL2.Principal, IDL2.Principal, IDL2.Nat], [Result], [])
  });
};
var __awaiter$8 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault$3 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(dip_721, "__esModule", { value: true });
const agent_1$3 = require$$5;
const dip_721_did_1 = __importDefault$3(dip_721_did);
const default_1$1 = __importDefault$3(_default);
const standards_1$1 = standards;
const extractMetadataValue = (metadata) => {
  const metadataKey = Object.keys(metadata)[0];
  const value2 = metadata[metadataKey];
  return typeof value2 === "object" ? JSON.stringify(value2) : value2;
};
class ERC721 extends default_1$1.default {
  constructor(canisterId2, agent) {
    super(canisterId2, agent);
    this.standard = standards_1$1.NFT.dip721;
    this.actor = agent_1$3.Actor.createActor(dip_721_did_1.default, {
      agent,
      canisterId: canisterId2
    });
  }
  backwardsCompatibleGuard(legacyMethod, newMethod) {
    return (params = []) => __awaiter$8(this, void 0, void 0, function* () {
      let res;
      try {
        res = yield this.actor[newMethod](...params);
      } catch (err) {
        res = yield this.actor[legacyMethod](...params);
      }
      return res;
    });
  }
  getUserTokens(principal) {
    return __awaiter$8(this, void 0, void 0, function* () {
      const guardedGetUserTokens = this.backwardsCompatibleGuard("ownerTokenMetadata", "dip721_owner_token_metadata");
      const userTokensResult = yield guardedGetUserTokens([principal]);
      const tokens = userTokensResult["Ok"] || [];
      if (!tokens.length)
        return [];
      const formattedTokenData = tokens.map((token2) => {
        var _a, _b;
        const tokenIndex = token2.token_identifier;
        const formatedMetadata = this.formatMetadata(token2);
        if (!formatedMetadata)
          return;
        const operator = (_b = (_a = token2.operator) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.toText();
        return this.serializeTokenData(formatedMetadata, tokenIndex, principal.toText(), operator);
      }).filter((token2) => token2);
      return formattedTokenData;
    });
  }
  transfer(to, tokenIndex) {
    return __awaiter$8(this, void 0, void 0, function* () {
      const guardedTransfer = this.backwardsCompatibleGuard("transfer", "dip721_transfer");
      const transferResult = yield guardedTransfer([to, BigInt(tokenIndex)]);
      if ("Err" in transferResult)
        throw new Error(`${Object.keys(transferResult.Err)[0]}: ${Object.values(transferResult.Err)[0]}`);
    });
  }
  details(tokenIndex) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter$8(this, void 0, void 0, function* () {
      const guardedDetails = this.backwardsCompatibleGuard("tokenMetadata", "dip721_token_metadata");
      const metadataResult = yield guardedDetails([BigInt(tokenIndex)]);
      if ("Err" in metadataResult)
        throw new Error(`${Object.keys(metadataResult.Err)[0]}: ${Object.values(metadataResult.Err)[0]}`);
      const metadata = metadataResult === null || metadataResult === void 0 ? void 0 : metadataResult.Ok;
      const formatedMetadata = this.formatMetadata(metadata);
      const owner = (_c = (_b = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.owner) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.toText) === null || _c === void 0 ? void 0 : _c.call(_b);
      const operator = (_f = (_e = (_d = metadata === null || metadata === void 0 ? void 0 : metadata.operator) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.toText) === null || _f === void 0 ? void 0 : _f.call(_e);
      return this.serializeTokenData(formatedMetadata, tokenIndex, owner, operator);
    });
  }
  getMetadata() {
    var _a;
    return __awaiter$8(this, void 0, void 0, function* () {
      const guardedGetMetadata = this.backwardsCompatibleGuard("metadata", "dip721_get_metadata");
      const metadata = yield guardedGetMetadata();
      return {
        icon: metadata === null || metadata === void 0 ? void 0 : metadata.logo[0],
        name: ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.name) === null || _a === void 0 ? void 0 : _a[0]) || "",
        standard: this.standard,
        canisterId: this.canisterId,
        tokens: [],
        description: ""
      };
    });
  }
  serializeTokenData(metadata, tokenIndex, owner, operator) {
    var _a, _b;
    return {
      index: BigInt(tokenIndex),
      canister: this.canisterId,
      metadata,
      owner,
      url: ((_b = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.location) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.TextContent) || "",
      standard: this.standard,
      operator
    };
  }
  formatMetadata(metadata) {
    const metadataResult = { properties: new Array() };
    if (!(metadata === null || metadata === void 0 ? void 0 : metadata.properties) || !Array.isArray(metadata.properties)) {
      console.warn(`Oops! Failed to format the metadata properties for token, field is missing or invalid. See ${JSON.stringify(metadata)}`);
      console.log(metadata);
      return;
    }
    metadata.properties.forEach((prop) => {
      const propertyName = prop[0];
      metadataResult[propertyName] = { value: prop[1] };
      const value2 = (() => {
        try {
          return extractMetadataValue(prop[1]);
        } catch (err) {
          console.warn(`Oops! Failed to extract metadata value for property ${propertyName}, is that a valid key value pair?`);
          console.error(err);
        }
      })();
      metadataResult.properties = [
        ...metadataResult.properties,
        { name: prop[0], value: value2 }
      ];
    });
    metadataResult.properties = metadataResult.properties.filter(({ name }) => !["location", "thumbnail", "contentHash", "contentType"].includes(name));
    return metadataResult;
  }
}
dip_721.default = ERC721;
var constants = {};
Object.defineProperty(constants, "__esModule", { value: true });
constants.KYASSHU_URL = constants.IC_HOST = void 0;
constants.IC_HOST = "https://ic0.app/";
constants.KYASSHU_URL = "https://kyasshu.fleek.co";
var nft_registry_did = {};
Object.defineProperty(nft_registry_did, "__esModule", { value: true });
nft_registry_did.init = void 0;
nft_registry_did.default = ({ IDL: IDL2 }) => {
  const detail_value = IDL2.Rec();
  detail_value.fill(IDL2.Variant({
    "I64": IDL2.Int64,
    "U64": IDL2.Nat64,
    "Vec": IDL2.Vec(detail_value),
    "Slice": IDL2.Vec(IDL2.Nat8),
    "Text": IDL2.Text,
    "True": IDL2.Null,
    "False": IDL2.Null,
    "Float": IDL2.Float64,
    "Principal": IDL2.Principal
  }));
  const nft_canister = IDL2.Record({
    "thumbnail": IDL2.Text,
    "name": IDL2.Text,
    "frontend": IDL2.Opt(IDL2.Text),
    "description": IDL2.Text,
    "details": IDL2.Vec(IDL2.Tuple(IDL2.Text, detail_value)),
    "principal_id": IDL2.Principal
  });
  const operation_error = IDL2.Variant({
    "NotAuthorized": IDL2.Null,
    "BadParameters": IDL2.Null,
    "Unknown": IDL2.Text,
    "NonExistentItem": IDL2.Null
  });
  const operation_response = IDL2.Variant({
    "Ok": IDL2.Opt(IDL2.Text),
    "Err": operation_error
  });
  return IDL2.Service({
    "add": IDL2.Func([nft_canister], [operation_response], []),
    "get": IDL2.Func([IDL2.Principal], [IDL2.Opt(nft_canister)], ["query"]),
    "get_all": IDL2.Func([], [IDL2.Vec(nft_canister)], ["query"]),
    "name": IDL2.Func([], [IDL2.Text], ["query"]),
    "remove": IDL2.Func([IDL2.Principal], [operation_response], []),
    "set_controller": IDL2.Func([IDL2.Principal], [operation_response], [])
  });
};
const init$8 = () => {
  return [];
};
nft_registry_did.init = init$8;
var standard_registry = {};
var registry_standard_did = {};
Object.defineProperty(registry_standard_did, "__esModule", { value: true });
registry_standard_did.init = void 0;
registry_standard_did.default = ({ IDL: IDL2 }) => {
  const detail_value = IDL2.Rec();
  detail_value.fill(IDL2.Variant({
    "I64": IDL2.Int64,
    "U64": IDL2.Nat64,
    "Vec": IDL2.Vec(detail_value),
    "Slice": IDL2.Vec(IDL2.Nat8),
    "Text": IDL2.Text,
    "True": IDL2.Null,
    "False": IDL2.Null,
    "Float": IDL2.Float64,
    "Principal": IDL2.Principal
  }));
  const metadata = IDL2.Record({
    "thumbnail": IDL2.Text,
    "name": IDL2.Text,
    "frontend": IDL2.Opt(IDL2.Text),
    "description": IDL2.Text,
    "principal_id": IDL2.Principal,
    "details": IDL2.Vec(IDL2.Tuple(IDL2.Text, detail_value))
  });
  const error = IDL2.Variant({
    "NotAuthorized": IDL2.Null,
    "BadParameters": IDL2.Null,
    "Unknown": IDL2.Text,
    "NonExistantCanister": IDL2.Null
  });
  const response = IDL2.Variant({ "Ok": IDL2.Opt(IDL2.Text), "Err": error });
  return IDL2.Service({
    "add": IDL2.Func([metadata], [response], []),
    "get": IDL2.Func([IDL2.Principal], [IDL2.Opt(metadata)], ["query"]),
    "name": IDL2.Func([], [IDL2.Text], ["query"]),
    "remove": IDL2.Func([IDL2.Principal], [response], [])
  });
};
const init$7 = () => {
  return [];
};
registry_standard_did.init = init$7;
var registry = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.formatMetadata = exports2.formatRegistryDetails = exports2.parseDetailValue = void 0;
  const BOOLEAN_DETAIL_TYPE = ["True", "False"];
  const parseDetailValue = (detailValue) => {
    const key = Object.keys(detailValue)[0];
    const value2 = BOOLEAN_DETAIL_TYPE.includes(key) ? Boolean(key) : Object.values(detailValue)[0];
    if (Array.isArray(value2)) {
      return value2.map((v) => typeof value2 === "number" ? v : (0, exports2.parseDetailValue)(v));
    }
    return value2;
  };
  exports2.parseDetailValue = parseDetailValue;
  const formatRegistryDetails = (details) => {
    const formattedDetails = {};
    for (const [key, detailValue] of details) {
      formattedDetails[key] = (0, exports2.parseDetailValue)(detailValue);
    }
    return formattedDetails;
  };
  exports2.formatRegistryDetails = formatRegistryDetails;
  const formatMetadata = (metadata) => Object.assign(Object.assign({}, metadata), { details: (0, exports2.formatRegistryDetails)(metadata.details) });
  exports2.formatMetadata = formatMetadata;
})(registry);
var __awaiter$7 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(standard_registry, "__esModule", { value: true });
const agent_1$2 = require$$5;
const principal_1$5 = require$$4;
const constants_1 = constants;
const registry_standard_did_1 = __importDefault$2(registry_standard_did);
const registry_1 = registry;
const cross_fetch_1$1 = __importDefault$2(browserPonyfill.exports);
const DEFAULT_AGENT = new agent_1$2.HttpAgent({ fetch: cross_fetch_1$1.default, host: constants_1.IC_HOST });
class Registry {
  constructor(canisterId2, agent = DEFAULT_AGENT) {
    this.name = () => __awaiter$7(this, void 0, void 0, function* () {
      return this.actor.name();
    });
    this.add = (metadata) => __awaiter$7(this, void 0, void 0, function* () {
      return this.actor.add(metadata !== null && metadata !== void 0 ? metadata : []);
    });
    this.get = (principalId) => __awaiter$7(this, void 0, void 0, function* () {
      const data2 = yield this.actor.get(principal_1$5.Principal.fromText(principalId));
      if (data2.length === 0)
        return void 0;
      return (0, registry_1.formatMetadata)(data2[0]);
    });
    this.remove = (principalId) => __awaiter$7(this, void 0, void 0, function* () {
      return this.actor.remove(principal_1$5.Principal.fromText(principalId));
    });
    this.actor = agent_1$2.Actor.createActor(registry_standard_did_1.default, {
      agent,
      canisterId: canisterId2
    });
    this.canisterId = canisterId2;
  }
}
standard_registry.default = Registry;
var actorFactory = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.generateActor = exports2.createExtendedActorClass = void 0;
  const agent_12 = require$$5;
  const principal_12 = require$$4;
  const createExtendedActorClass = (agent, methods2, canisterId2, IDLFactory) => {
    class ExtendedActor extends agent_12.Actor.createActorClass(IDLFactory) {
      constructor() {
        const principalCanisterId = typeof canisterId2 === "string" ? principal_12.Principal.fromText(canisterId2) : canisterId2;
        super({ agent, canisterId: principalCanisterId });
        Object.keys(this).forEach((methodName) => {
          this[`_${methodName}`] = this[methodName];
        });
        Object.keys(methods2).forEach((methodName) => {
          this[methodName] = (...args) => methods2[methodName](this, ...args);
        });
      }
    }
    return ExtendedActor;
  };
  exports2.createExtendedActorClass = createExtendedActorClass;
  function generateActor({ agent, canisterId: canisterId2, IDL: IDL2 }) {
    return agent_12.Actor.createActor(IDL2, {
      agent,
      canisterId: principal_12.Principal.fromText(canisterId2)
    });
  }
  exports2.generateActor = generateActor;
  exports2.default = { createExtendedActorClass: exports2.createExtendedActorClass, generateActor };
})(actorFactory);
var ccc = {};
var c3_did = {};
Object.defineProperty(c3_did, "__esModule", { value: true });
c3_did.init = void 0;
c3_did.default = ({ IDL: IDL2 }) => {
  const TokenIndex__1 = IDL2.Nat;
  const TokenIndex = IDL2.Nat;
  const TransferResponse = IDL2.Variant({
    "ok": TokenIndex,
    "err": IDL2.Variant({
      "ListOnMarketPlace": IDL2.Null,
      "NotAllowTransferToSelf": IDL2.Null,
      "NotOwnerOrNotApprove": IDL2.Null,
      "Other": IDL2.Null
    })
  });
  const TokenDetails = IDL2.Record({
    "id": IDL2.Nat,
    "rarityScore": IDL2.Float64
  });
  const GetTokenResponse = IDL2.Variant({
    "ok": TokenDetails,
    "err": IDL2.Variant({ "NotFoundIndex": IDL2.Null })
  });
  const C2NFT = IDL2.Service({
    "getAllNFT": IDL2.Func([IDL2.Principal], [IDL2.Vec(IDL2.Tuple(TokenIndex__1, IDL2.Principal))], ["query"]),
    "getNftStoreCIDByIndex": IDL2.Func([TokenIndex__1], [IDL2.Principal], ["query"]),
    "getTokenById": IDL2.Func([IDL2.Nat], [GetTokenResponse], ["query"]),
    "transferFrom": IDL2.Func([IDL2.Principal, IDL2.Principal, TokenIndex__1], [TransferResponse], [])
  });
  return C2NFT;
};
const init$6 = ({ IDL: IDL2 }) => {
  return [IDL2.Principal, IDL2.Principal, IDL2.Principal];
};
c3_did.init = init$6;
var __awaiter$6 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ccc, "__esModule", { value: true });
const agent_1$1 = require$$5;
const c3_did_1 = __importDefault$1(c3_did);
const default_1 = __importDefault$1(_default);
const standards_1 = standards;
class CCC extends default_1.default {
  constructor(canisterId2, agent) {
    super(canisterId2, agent);
    this.standard = standards_1.NFT.c3;
    this.serializeTokenData = (tokenData, prinId) => {
      return {
        index: BigInt(tokenData.id),
        canister: this.canisterId,
        url: `https://${prinId.toText()}.raw.ic0.app/token/${tokenData.id}`,
        name: `${tokenData.id}`,
        metadata: tokenData,
        standard: this.standard
      };
    };
    this.actor = agent_1$1.Actor.createActor(c3_did_1.default, {
      agent,
      canisterId: canisterId2
    });
  }
  getMetadata() {
    throw new Error("Method not implemented.");
  }
  getUserTokens(principal) {
    return __awaiter$6(this, void 0, void 0, function* () {
      const tokensIndexes = yield this.actor.getAllNFT(principal);
      const tokensData = yield Promise.all(tokensIndexes.map((item) => __awaiter$6(this, void 0, void 0, function* () {
        const tokenIndex = item[0];
        const principal2 = item[1];
        const userTokensResult = yield this.actor.getTokenById(tokenIndex);
        if ("err" in userTokensResult)
          throw new Error(Object.keys(userTokensResult.err)[0]);
        return { detail: userTokensResult.ok, principal: principal2 };
      })));
      return tokensData.map((token2) => this.serializeTokenData(token2.detail, token2.principal));
    });
  }
  transfer(to, tokenIndex) {
    return __awaiter$6(this, void 0, void 0, function* () {
      const from = yield this.agent.getPrincipal();
      const transferResult = yield this.actor.transferFrom(from, to, BigInt(tokenIndex));
      if ("err" in transferResult)
        throw new Error(Object.keys(transferResult.err)[0]);
    });
  }
  details(tokenIndex) {
    return __awaiter$6(this, void 0, void 0, function* () {
      const tokenData = yield this.actor.getTokenById(BigInt(tokenIndex));
      if ("err" in tokenData)
        throw new Error(Object.keys(tokenData.err)[0]);
      const prinId = yield this.actor.getNftStoreCIDByIndex(BigInt(tokenIndex));
      if (!prinId)
        throw new Error("Error tokenIndex");
      return this.serializeTokenData(tokenData.ok, prinId);
    });
  }
}
ccc.default = CCC;
(function(exports2) {
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value2) {
      return value2 instanceof P ? value2 : new P(function(resolve) {
        resolve(value2);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value2) {
        try {
          step(generator.next(value2));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value2) {
        try {
          step(generator["throw"](value2));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.getCachedUserNFTs = exports2.getBatchedNFTs = exports2.getAllUserNFTs = exports2.getAllNFTS = exports2.getNFTInfo = exports2.getNFTActor = exports2.getUserCollectionTokens = exports2.NFTRegistry = void 0;
  const axios_1 = __importDefault2(axios$2.exports);
  const agent_12 = require$$5;
  const principal_12 = require$$4;
  const cross_fetch_12 = __importDefault2(browserPonyfill.exports);
  const ext_1 = __importDefault2(ext);
  const ic_punks_1 = __importDefault2(ic_punks);
  const nft_origyn_1 = __importDefault2(nft_origyn);
  const departure_labs_1 = __importDefault2(departure_labs);
  const dip_721_1 = __importDefault2(dip_721);
  const standards_12 = standards;
  const constants_12 = constants;
  const nft_registry_did_1 = __importDefault2(nft_registry_did);
  const standard_registry_1 = __importDefault2(standard_registry);
  const actorFactory_1 = actorFactory;
  const registry_12 = registry;
  const ccc_1 = __importDefault2(ccc);
  const CANISTER_ID = "ctqxp-yyaaa-aaaah-abbda-cai";
  const BATCH_AMOUNT = 5;
  const NFT_STANDARDS = {
    [standards_12.NFT.ext]: ext_1.default,
    [standards_12.NFT.icpunks]: ic_punks_1.default,
    [standards_12.NFT.nftOrigyn]: nft_origyn_1.default,
    [standards_12.NFT.departuresLabs]: departure_labs_1.default,
    [standards_12.NFT.erc721]: dip_721_1.default,
    [standards_12.NFT.dip721]: dip_721_1.default,
    [standards_12.NFT.c3]: ccc_1.default
  };
  const DEFAULT_AGENT2 = new agent_12.HttpAgent({ fetch: cross_fetch_12.default, host: constants_12.IC_HOST });
  class NFTRegistry extends standard_registry_1.default {
    constructor(agent) {
      super(CANISTER_ID, agent);
      this.getAll = () => __awaiter2(this, void 0, void 0, function* () {
        const canistersMetadata = yield this.actor.get_all();
        return canistersMetadata.map(registry_12.formatMetadata);
      });
      this.actor = (0, actorFactory_1.generateActor)({ agent: agent || DEFAULT_AGENT2, canisterId: CANISTER_ID, IDL: nft_registry_did_1.default });
    }
  }
  exports2.NFTRegistry = NFTRegistry;
  const getUserCollectionTokens = (collection, user, agent = DEFAULT_AGENT2, callback = () => {
  }) => __awaiter2(void 0, void 0, void 0, function* () {
    try {
      const NFTActor = (0, exports2.getNFTActor)({
        canisterId: collection.principal_id.toString(),
        agent,
        standard: collection.standard
      });
      const details = yield NFTActor.getUserTokens(user);
      const collectionDetails = {
        name: collection.name,
        canisterId: collection.principal_id.toString(),
        standard: collection.standard,
        description: collection.description,
        icon: collection.icon,
        tokens: details.map((detail) => Object.assign(Object.assign({}, detail), { collection: collection.name }))
      };
      if (callback) {
        yield callback === null || callback === void 0 ? void 0 : callback(collectionDetails);
      }
      return collectionDetails;
    } catch (e) {
      console.error(e);
      return {
        name: collection.name,
        canisterId: collection.principal_id.toString(),
        standard: collection.standard,
        tokens: []
      };
    }
  });
  exports2.getUserCollectionTokens = getUserCollectionTokens;
  const standardNormaliser = ({ standard }) => {
    const userStandardNormalised = standard.toUpperCase();
    const systemStandardNormalised = standards_12.NFT.dip721.toUpperCase();
    const startsWithDip721 = userStandardNormalised.startsWith(systemStandardNormalised);
    const hasSuffix = userStandardNormalised.split(systemStandardNormalised).filter((v) => v).length > 0;
    const hasDeprecatedDip721Term = startsWithDip721 && hasSuffix;
    if (hasDeprecatedDip721Term) {
      console.warn(`Warning! Use the term DIP721, not ${standard}, suffixed and others are being deprecated and support will be dropped soon!`);
      return standards_12.NFT.dip721;
    }
    return userStandardNormalised;
  };
  const getNFTActor = ({ canisterId: canisterId2, agent, standard }) => {
    const standardNormalised = standardNormaliser({
      standard
    });
    if (!(standardNormalised in NFT_STANDARDS)) {
      console.error(`Standard ${standardNormalised} is not implemented`);
      throw new Error(`standard is not supported: ${standardNormalised}`);
    }
    return new NFT_STANDARDS[standardNormalised](canisterId2, agent);
  };
  exports2.getNFTActor = getNFTActor;
  const getNFTInfo = ({ nftCanisterId, agent = DEFAULT_AGENT2 }) => __awaiter2(void 0, void 0, void 0, function* () {
    const registry2 = new NFTRegistry(agent);
    const result = yield registry2.get(nftCanisterId);
    if (!result)
      return result;
    return Object.assign(Object.assign({}, result), { icon: result.thumbnail, standard: result.details.standard });
  });
  exports2.getNFTInfo = getNFTInfo;
  const getAllNFTS = ({ agent = DEFAULT_AGENT2 } = {}) => __awaiter2(void 0, void 0, void 0, function* () {
    const registry2 = new NFTRegistry(agent);
    const allNFTs = yield registry2.getAll();
    return allNFTs.map((nft2) => Object.assign(Object.assign({}, nft2), { icon: nft2.thumbnail, standard: nft2.details.standard }));
  });
  exports2.getAllNFTS = getAllNFTS;
  const getAllUserNFTs = ({ user, agent = DEFAULT_AGENT2 }) => __awaiter2(void 0, void 0, void 0, function* () {
    const NFTCollections = yield (0, exports2.getAllNFTS)({ agent });
    const userPrincipal = user instanceof principal_12.Principal ? user : principal_12.Principal.fromText(user);
    const result = yield Promise.all(NFTCollections.map((collection) => (0, exports2.getUserCollectionTokens)(collection, userPrincipal, agent)));
    return result.filter((element) => element.tokens.length);
  });
  exports2.getAllUserNFTs = getAllUserNFTs;
  const getBatchedNFTs = ({ principal, callback, batchSize = BATCH_AMOUNT, onFinish, agent = DEFAULT_AGENT2 }) => __awaiter2(void 0, void 0, void 0, function* () {
    const NFTCollections = yield (0, exports2.getAllNFTS)({ agent });
    let result = [];
    for (let i2 = 0; i2 < NFTCollections.length; i2 += batchSize) {
      const batch = NFTCollections.slice(i2, i2 + batchSize);
      const batchResult = yield Promise.all(batch.map((collection) => (0, exports2.getUserCollectionTokens)(collection, principal, agent, callback)));
      result = [...result, ...batchResult];
    }
    if (onFinish) {
      yield onFinish === null || onFinish === void 0 ? void 0 : onFinish(result);
    }
    return result.filter((element) => {
      var _a;
      return (_a = element === null || element === void 0 ? void 0 : element.tokens) === null || _a === void 0 ? void 0 : _a.length;
    });
  });
  exports2.getBatchedNFTs = getBatchedNFTs;
  const getCachedUserNFTs = ({ userPID, refresh }) => __awaiter2(void 0, void 0, void 0, function* () {
    const url2 = `${constants_12.KYASSHU_URL}/dab/user/nfts/${userPID}`;
    const result = yield axios_1.default.get(url2, { params: { refresh } });
    return result.data;
  });
  exports2.getCachedUserNFTs = getCachedUserNFTs;
  exports2.default = {
    getBatchedNFTs: exports2.getBatchedNFTs,
    getNFTActor: exports2.getNFTActor,
    getNFTInfo: exports2.getNFTInfo,
    getAllNFTS: exports2.getAllNFTS,
    getAllUserNFTs: exports2.getAllUserNFTs,
    getCachedUserNFTs: exports2.getCachedUserNFTs
  };
})(nfts_registry);
var canister_registry = {};
var canister_registry_did = {};
Object.defineProperty(canister_registry_did, "__esModule", { value: true });
canister_registry_did.init = void 0;
canister_registry_did.default = ({ IDL: IDL2 }) => {
  const detail_value = IDL2.Rec();
  detail_value.fill(IDL2.Variant({
    "I64": IDL2.Int64,
    "U64": IDL2.Nat64,
    "Vec": IDL2.Vec(detail_value),
    "Slice": IDL2.Vec(IDL2.Nat8),
    "Text": IDL2.Text,
    "True": IDL2.Null,
    "False": IDL2.Null,
    "Float": IDL2.Float64,
    "Principal": IDL2.Principal
  }));
  const canister_metadata = IDL2.Record({
    "thumbnail": IDL2.Text,
    "name": IDL2.Text,
    "frontend": IDL2.Opt(IDL2.Text),
    "description": IDL2.Text,
    "principal_id": IDL2.Principal,
    "details": IDL2.Vec(IDL2.Tuple(IDL2.Text, detail_value))
  });
  const operation_error = IDL2.Variant({
    "NotAuthorized": IDL2.Null,
    "BadParameters": IDL2.Null,
    "Unknown": IDL2.Text,
    "NonExistentItem": IDL2.Null
  });
  const operation_response = IDL2.Variant({
    "Ok": IDL2.Opt(IDL2.Text),
    "Err": operation_error
  });
  return IDL2.Service({
    "add": IDL2.Func([canister_metadata], [operation_response], []),
    "get": IDL2.Func([IDL2.Principal], [IDL2.Opt(canister_metadata)], ["query"]),
    "get_all": IDL2.Func([], [IDL2.Vec(canister_metadata)], ["query"]),
    "name": IDL2.Func([], [IDL2.Text], ["query"]),
    "remove": IDL2.Func([IDL2.Principal], [operation_response], [])
  });
};
const init$5 = () => {
  return [];
};
canister_registry_did.init = init$5;
(function(exports2) {
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value2) {
      return value2 instanceof P ? value2 : new P(function(resolve) {
        resolve(value2);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value2) {
        try {
          step(generator.next(value2));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value2) {
        try {
          step(generator["throw"](value2));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.getAll = exports2.getMultipleCanisterInfo = exports2.getCanisterInfo = exports2.CanisterRegistry = void 0;
  const agent_12 = require$$5;
  const cross_fetch_12 = __importDefault2(browserPonyfill.exports);
  const canister_registry_did_1 = __importDefault2(canister_registry_did);
  const constants_12 = constants;
  const standard_registry_1 = __importDefault2(standard_registry);
  const actorFactory_1 = actorFactory;
  const registry_12 = registry;
  const principal_12 = require$$4;
  const CANISTER_ID = "curr3-vaaaa-aaaah-abbdq-cai";
  const DEFAULT_AGENT2 = new agent_12.HttpAgent({ fetch: cross_fetch_12.default, host: constants_12.IC_HOST });
  const formatBackwardsCompatible = (metadata) => {
    if (!metadata) {
      return metadata;
    }
    const { thumbnail, name, description, frontend, details } = metadata;
    return { url: (frontend === null || frontend === void 0 ? void 0 : frontend[0]) || "", name, description, version: Number(details.version), logo_url: thumbnail };
  };
  class CanisterRegistry extends standard_registry_1.default {
    constructor(agent) {
      super(CANISTER_ID, agent);
      this.getAll = () => __awaiter2(this, void 0, void 0, function* () {
        const canistersMetadata = yield this.actor.get_all();
        return canistersMetadata.map(registry_12.formatMetadata);
      });
      this.actor = (0, actorFactory_1.generateActor)({ agent: agent || DEFAULT_AGENT2, canisterId: CANISTER_ID, IDL: canister_registry_did_1.default });
    }
  }
  exports2.CanisterRegistry = CanisterRegistry;
  const getCanisterInfo = ({ canisterId: canisterId2, agent = DEFAULT_AGENT2 }) => __awaiter2(void 0, void 0, void 0, function* () {
    const canisterRegistry = new CanisterRegistry(agent);
    const canister = yield canisterRegistry.get(principal_12.Principal.from(canisterId2).toString());
    const formattedCanister = formatBackwardsCompatible(canister);
    return formattedCanister && Object.assign(Object.assign({}, formattedCanister), { canisterId: canisterId2.toString() });
  });
  exports2.getCanisterInfo = getCanisterInfo;
  const getMultipleCanisterInfo = ({ canisterIds, agent = DEFAULT_AGENT2 }) => __awaiter2(void 0, void 0, void 0, function* () {
    const canistersMetadata = yield Promise.all(canisterIds.map((canisterId2) => (0, exports2.getCanisterInfo)({ canisterId: canisterId2, agent })));
    if (canistersMetadata.length === 0)
      return [];
    return canistersMetadata.filter((canister) => !!canister);
  });
  exports2.getMultipleCanisterInfo = getMultipleCanisterInfo;
  const getAll = (agent) => __awaiter2(void 0, void 0, void 0, function* () {
    const allCanisters = yield new CanisterRegistry(agent).getAll();
    return allCanisters.map(formatBackwardsCompatible);
  });
  exports2.getAll = getAll;
  exports2.default = {
    getCanisterInfo: exports2.getCanisterInfo,
    getMultipleCanisterInfo: exports2.getMultipleCanisterInfo,
    getAll: (agent) => new CanisterRegistry(agent).getAll
  };
})(canister_registry);
var token_registry = {};
var token_registry_did = {};
Object.defineProperty(token_registry_did, "__esModule", { value: true });
token_registry_did.init = void 0;
token_registry_did.default = ({ IDL: IDL2 }) => {
  const detail_value = IDL2.Rec();
  detail_value.fill(IDL2.Variant({
    "I64": IDL2.Int64,
    "U64": IDL2.Nat64,
    "Vec": IDL2.Vec(detail_value),
    "Slice": IDL2.Vec(IDL2.Nat8),
    "Text": IDL2.Text,
    "True": IDL2.Null,
    "False": IDL2.Null,
    "Float": IDL2.Float64,
    "Principal": IDL2.Principal
  }));
  const token2 = IDL2.Record({
    "thumbnail": IDL2.Text,
    "name": IDL2.Text,
    "frontend": IDL2.Opt(IDL2.Text),
    "description": IDL2.Text,
    "principal_id": IDL2.Principal,
    "details": IDL2.Vec(IDL2.Tuple(IDL2.Text, detail_value))
  });
  const operation_error = IDL2.Variant({
    "NotAuthorized": IDL2.Null,
    "BadParameters": IDL2.Null,
    "Unknown": IDL2.Text,
    "NonExistentItem": IDL2.Null
  });
  const operation_response = IDL2.Variant({
    "Ok": IDL2.Opt(IDL2.Text),
    "Err": operation_error
  });
  return IDL2.Service({
    "add": IDL2.Func([token2], [operation_response], []),
    "get": IDL2.Func([IDL2.Principal], [IDL2.Opt(token2)], ["query"]),
    "get_all": IDL2.Func([], [IDL2.Vec(token2)], ["query"]),
    "name": IDL2.Func([], [IDL2.Text], ["query"]),
    "remove": IDL2.Func([IDL2.Principal], [operation_response], []),
    "set_controller": IDL2.Func([IDL2.Principal], [operation_response], [])
  });
};
const init$4 = () => {
  return [];
};
token_registry_did.init = init$4;
var token_standards = {};
var methods = {};
var __awaiter$5 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(methods, "__esModule", { value: true });
methods.parseAmountToSend = methods.getDecimalsFromMetadata = void 0;
const send$5 = (_actor, _params) => __awaiter$5(void 0, void 0, void 0, function* () {
  throw Error("Standard Not Implemented");
});
const getMetadata$5 = (_actor) => __awaiter$5(void 0, void 0, void 0, function* () {
  throw Error("Standard Not Implemented");
});
const getBalance$5 = (_actor, _user) => __awaiter$5(void 0, void 0, void 0, function* () {
  throw Error("Standard Not Implemented");
});
const burnXTC$5 = (_actor, _params) => __awaiter$5(void 0, void 0, void 0, function* () {
  throw Error("Standard Not Implemented");
});
const getDecimals$5 = (_actor) => __awaiter$5(void 0, void 0, void 0, function* () {
  throw Error("Standard Not Implemented");
});
const getDecimalsFromMetadata = (metadata) => {
  return "fungible" in metadata ? metadata.fungible.decimals : 0;
};
methods.getDecimalsFromMetadata = getDecimalsFromMetadata;
const parseAmountToSend = (amount, decimals) => {
  return BigInt(parseFloat(amount) * Math.pow(10, decimals));
};
methods.parseAmountToSend = parseAmountToSend;
methods.default = {
  send: send$5,
  getMetadata: getMetadata$5,
  getBalance: getBalance$5,
  burnXTC: burnXTC$5,
  getDecimals: getDecimals$5
};
var xtcMethods = {};
var __awaiter$4 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(xtcMethods, "__esModule", { value: true });
const principal_1$4 = require$$4;
const methods_1$4 = methods;
const getMetadata$4 = (actor) => __awaiter$4(void 0, void 0, void 0, function* () {
  const metadataResult = yield actor._getMetadata();
  return {
    fungible: {
      symbol: metadataResult.symbol,
      decimals: metadataResult.decimals,
      name: metadataResult.name,
      logo: metadataResult.logo,
      fee: metadataResult.fee,
      totalSupply: metadataResult.totalSupply,
      owner: metadataResult.owner
    }
  };
});
const send$4 = (actor, { to, amount }) => __awaiter$4(void 0, void 0, void 0, function* () {
  const transferResult = yield actor._transferErc20(principal_1$4.Principal.fromText(to), amount);
  if ("Ok" in transferResult)
    return { transactionId: transferResult.Ok.toString() };
  throw new Error(Object.keys(transferResult.Err)[0]);
});
const getBalance$4 = (actor, user) => __awaiter$4(void 0, void 0, void 0, function* () {
  const decimals = yield getDecimals$4(actor);
  const value2 = (yield actor._balanceOf(user)).toString();
  return { value: value2, decimals };
});
const burnXTC$4 = (actor, { to, amount }) => __awaiter$4(void 0, void 0, void 0, function* () {
  const decimals = yield getDecimals$4(actor);
  const parsedAmount = (0, methods_1$4.parseAmountToSend)(amount, decimals);
  return actor._burn({ canister_id: to, amount: parsedAmount });
});
const getDecimals$4 = (actor) => __awaiter$4(void 0, void 0, void 0, function* () {
  return (0, methods_1$4.getDecimalsFromMetadata)(yield getMetadata$4(actor));
});
xtcMethods.default = {
  send: send$4,
  getMetadata: getMetadata$4,
  getBalance: getBalance$4,
  burnXTC: burnXTC$4,
  getDecimals: getDecimals$4
};
var extMethods = {};
var __awaiter$3 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(extMethods, "__esModule", { value: true });
const agent_1 = require$$5;
const principal_1$3 = require$$4;
const methods_1$3 = methods;
const getMetadata$3 = (actor) => __awaiter$3(void 0, void 0, void 0, function* () {
  actor._balance;
  const token2 = agent_1.Actor.canisterIdOf(actor).toText();
  const extensions = yield actor._extensions();
  if (!extensions.includes("@ext/common"))
    throw new Error("The provided canister does not implement commont extension");
  const metadataResult = yield actor._metadata(token2);
  if ("ok" in metadataResult)
    return metadataResult.ok;
  throw new Error(Object.keys(metadataResult.err)[0]);
});
const send$3 = (actor, { to, from, amount }) => __awaiter$3(void 0, void 0, void 0, function* () {
  const dummyMemmo = new Array(32).fill(0);
  const token2 = agent_1.Actor.canisterIdOf(actor).toText();
  const data2 = {
    to: { principal: principal_1$3.Principal.fromText(to) },
    from: { principal: principal_1$3.Principal.from(from) },
    amount,
    token: token2,
    memo: dummyMemmo,
    notify: false,
    subaccount: [],
    fee: BigInt(0)
  };
  const transferResult = yield actor._transfer(data2);
  if ("ok" in transferResult)
    return { amount: transferResult.ok.toString() };
  throw new Error(Object.keys(transferResult.err)[0]);
});
const getBalance$3 = (actor, user) => __awaiter$3(void 0, void 0, void 0, function* () {
  const token2 = agent_1.Actor.canisterIdOf(actor).toText();
  const balanceResult = yield actor._balance({
    token: token2,
    user: { principal: user }
  });
  const decimals = yield getDecimals$3(actor);
  if ("ok" in balanceResult)
    return { value: balanceResult.ok.toString(), decimals };
  throw new Error(Object.keys(balanceResult.err)[0]);
});
const burnXTC$3 = (_actor, _params) => __awaiter$3(void 0, void 0, void 0, function* () {
  throw new Error("BURN NOT SUPPORTED");
});
const getDecimals$3 = (actor) => __awaiter$3(void 0, void 0, void 0, function* () {
  return (0, methods_1$3.getDecimalsFromMetadata)(yield getMetadata$3(actor));
});
extMethods.default = {
  send: send$3,
  getMetadata: getMetadata$3,
  getBalance: getBalance$3,
  burnXTC: burnXTC$3,
  getDecimals: getDecimals$3
};
var dip20Methods = {};
var __awaiter$2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(dip20Methods, "__esModule", { value: true });
const principal_1$2 = require$$4;
const methods_1$2 = methods;
const getMetadata$2 = (actor) => __awaiter$2(void 0, void 0, void 0, function* () {
  const metadataResult = yield actor._getMetadata();
  return {
    fungible: {
      symbol: metadataResult.symbol,
      decimals: metadataResult.decimals,
      name: metadataResult.name,
      logo: metadataResult.logo,
      fee: metadataResult.fee,
      totalSupply: metadataResult.totalSupply,
      owner: metadataResult.owner
    }
  };
});
const send$2 = (actor, { to, amount }) => __awaiter$2(void 0, void 0, void 0, function* () {
  const transferResult = yield actor._transfer(principal_1$2.Principal.fromText(to), amount);
  if ("Ok" in transferResult)
    return { transactionId: transferResult.Ok.toString() };
  throw new Error(Object.keys(transferResult.Err)[0]);
});
const getBalance$2 = (actor, user) => __awaiter$2(void 0, void 0, void 0, function* () {
  const decimals = yield getDecimals$2(actor);
  const value2 = (yield actor._balanceOf(user)).toString();
  return { value: value2, decimals };
});
const burnXTC$2 = (_actor, _params) => __awaiter$2(void 0, void 0, void 0, function* () {
  throw new Error("BURN NOT SUPPORTED");
});
const getDecimals$2 = (actor) => __awaiter$2(void 0, void 0, void 0, function* () {
  return (0, methods_1$2.getDecimalsFromMetadata)(yield getMetadata$2(actor));
});
dip20Methods.default = {
  send: send$2,
  getMetadata: getMetadata$2,
  getBalance: getBalance$2,
  burnXTC: burnXTC$2,
  getDecimals: getDecimals$2
};
var xtc_did = {};
Object.defineProperty(xtc_did, "__esModule", { value: true });
xtc_did.init = void 0;
xtc_did.default = ({ IDL: IDL2 }) => {
  const TxError = IDL2.Variant({
    "InsufficientAllowance": IDL2.Null,
    "InsufficientBalance": IDL2.Null,
    "ErrorOperationStyle": IDL2.Null,
    "Unauthorized": IDL2.Null,
    "LedgerTrap": IDL2.Null,
    "ErrorTo": IDL2.Null,
    "Other": IDL2.Null,
    "BlockUsed": IDL2.Null,
    "AmountTooSmall": IDL2.Null
  });
  const TxReceipt = IDL2.Variant({ "Ok": IDL2.Nat, "Err": TxError });
  const TransactionId = IDL2.Nat64;
  const BurnError = IDL2.Variant({
    "InsufficientBalance": IDL2.Null,
    "InvalidTokenContract": IDL2.Null,
    "NotSufficientLiquidity": IDL2.Null
  });
  const BurnResult = IDL2.Variant({ "Ok": TransactionId, "Err": BurnError });
  const TransactionStatus = IDL2.Variant({
    "FAILED": IDL2.Null,
    "SUCCEEDED": IDL2.Null
  });
  const EventDetail = IDL2.Variant({
    "Approve": IDL2.Record({ "to": IDL2.Principal, "from": IDL2.Principal }),
    "Burn": IDL2.Record({ "to": IDL2.Principal, "from": IDL2.Principal }),
    "Mint": IDL2.Record({ "to": IDL2.Principal }),
    "CanisterCreated": IDL2.Record({
      "from": IDL2.Principal,
      "canister": IDL2.Principal
    }),
    "CanisterCalled": IDL2.Record({
      "from": IDL2.Principal,
      "method_name": IDL2.Text,
      "canister": IDL2.Principal
    }),
    "Transfer": IDL2.Record({ "to": IDL2.Principal, "from": IDL2.Principal }),
    "TransferFrom": IDL2.Record({
      "to": IDL2.Principal,
      "from": IDL2.Principal,
      "caller": IDL2.Principal
    })
  });
  const Event = IDL2.Record({
    "fee": IDL2.Nat64,
    "status": TransactionStatus,
    "kind": EventDetail,
    "cycles": IDL2.Nat64,
    "timestamp": IDL2.Nat64
  });
  const EventsConnection = IDL2.Record({
    "data": IDL2.Vec(Event),
    "next_offset": TransactionId,
    "next_canister_id": IDL2.Opt(IDL2.Principal)
  });
  const Metadata = IDL2.Record({
    "fee": IDL2.Nat,
    "decimals": IDL2.Nat8,
    "owner": IDL2.Principal,
    "logo": IDL2.Text,
    "name": IDL2.Text,
    "totalSupply": IDL2.Nat,
    "symbol": IDL2.Text
  });
  const Operation = IDL2.Variant({
    "transferFrom": IDL2.Null,
    "burn": IDL2.Null,
    "mint": IDL2.Null,
    "approve": IDL2.Null,
    "canisterCalled": IDL2.Null,
    "transfer": IDL2.Null,
    "canisterCreated": IDL2.Null
  });
  const Time = IDL2.Int;
  const TxRecord = IDL2.Record({
    "op": Operation,
    "to": IDL2.Principal,
    "fee": IDL2.Nat,
    "status": TransactionStatus,
    "from": IDL2.Principal,
    "timestamp": Time,
    "caller": IDL2.Opt(IDL2.Principal),
    "index": IDL2.Nat,
    "amount": IDL2.Nat
  });
  const MintError = IDL2.Variant({ "NotSufficientLiquidity": IDL2.Null });
  const MintResult = IDL2.Variant({ "Ok": TransactionId, "Err": MintError });
  const Stats = IDL2.Record({
    "fee": IDL2.Nat,
    "transfers_count": IDL2.Nat64,
    "balance": IDL2.Nat64,
    "mints_count": IDL2.Nat64,
    "transfers_from_count": IDL2.Nat64,
    "canisters_created_count": IDL2.Nat64,
    "supply": IDL2.Nat,
    "burns_count": IDL2.Nat64,
    "approvals_count": IDL2.Nat64,
    "proxy_calls_count": IDL2.Nat64,
    "history_events": IDL2.Nat64
  });
  const ResultCall = IDL2.Variant({
    "Ok": IDL2.Record({ "return": IDL2.Vec(IDL2.Nat8) }),
    "Err": IDL2.Text
  });
  const CreateResult = IDL2.Variant({
    "Ok": IDL2.Record({ "canister_id": IDL2.Principal }),
    "Err": IDL2.Text
  });
  const ResultSend = IDL2.Variant({ "Ok": IDL2.Null, "Err": IDL2.Text });
  return IDL2.Service({
    "allowance": IDL2.Func([IDL2.Principal, IDL2.Principal], [IDL2.Nat], ["query"]),
    "approve": IDL2.Func([IDL2.Principal, IDL2.Nat], [TxReceipt], []),
    "balance": IDL2.Func([IDL2.Opt(IDL2.Principal)], [IDL2.Nat64], []),
    "balanceOf": IDL2.Func([IDL2.Principal], [IDL2.Nat], ["query"]),
    "burn": IDL2.Func([IDL2.Record({ "canister_id": IDL2.Principal, "amount": IDL2.Nat64 })], [BurnResult], []),
    "decimals": IDL2.Func([], [IDL2.Nat8], ["query"]),
    "events": IDL2.Func([IDL2.Record({ "offset": IDL2.Opt(IDL2.Nat64), "limit": IDL2.Nat16 })], [EventsConnection], ["query"]),
    "getMetadata": IDL2.Func([], [Metadata], ["query"]),
    "getTransaction": IDL2.Func([IDL2.Nat], [TxRecord], []),
    "getTransactions": IDL2.Func([IDL2.Nat, IDL2.Nat], [IDL2.Vec(TxRecord)], []),
    "get_transaction": IDL2.Func([TransactionId], [IDL2.Opt(Event)], []),
    "halt": IDL2.Func([], [], []),
    "historySize": IDL2.Func([], [IDL2.Nat], ["query"]),
    "logo": IDL2.Func([], [IDL2.Text], ["query"]),
    "mint": IDL2.Func([IDL2.Principal, IDL2.Nat], [MintResult], []),
    "name": IDL2.Func([], [IDL2.Text], ["query"]),
    "nameErc20": IDL2.Func([], [IDL2.Text], ["query"]),
    "stats": IDL2.Func([], [Stats], ["query"]),
    "symbol": IDL2.Func([], [IDL2.Text], ["query"]),
    "totalSupply": IDL2.Func([], [IDL2.Nat], ["query"]),
    "transfer": IDL2.Func([IDL2.Principal, IDL2.Nat], [TxReceipt], []),
    "transferErc20": IDL2.Func([IDL2.Principal, IDL2.Nat], [TxReceipt], []),
    "transferFrom": IDL2.Func([IDL2.Principal, IDL2.Principal, IDL2.Nat], [TxReceipt], []),
    "wallet_balance": IDL2.Func([], [IDL2.Record({ "amount": IDL2.Nat64 })], ["query"]),
    "wallet_call": IDL2.Func([
      IDL2.Record({
        "args": IDL2.Vec(IDL2.Nat8),
        "cycles": IDL2.Nat64,
        "method_name": IDL2.Text,
        "canister": IDL2.Principal
      })
    ], [ResultCall], []),
    "wallet_create_canister": IDL2.Func([
      IDL2.Record({
        "controller": IDL2.Opt(IDL2.Principal),
        "cycles": IDL2.Nat64
      })
    ], [CreateResult], []),
    "wallet_create_wallet": IDL2.Func([
      IDL2.Record({
        "controller": IDL2.Opt(IDL2.Principal),
        "cycles": IDL2.Nat64
      })
    ], [CreateResult], []),
    "wallet_send": IDL2.Func([IDL2.Record({ "canister": IDL2.Principal, "amount": IDL2.Nat64 })], [ResultSend], [])
  });
};
const init$3 = () => {
  return [];
};
xtc_did.init = init$3;
var dip_20_did = {};
Object.defineProperty(dip_20_did, "__esModule", { value: true });
dip_20_did.init = void 0;
dip_20_did.default = ({ IDL: IDL2 }) => {
  const TxError = IDL2.Variant({
    "InsufficientAllowance": IDL2.Null,
    "InsufficientBalance": IDL2.Null,
    "ErrorOperationStyle": IDL2.Null,
    "Unauthorized": IDL2.Null,
    "LedgerTrap": IDL2.Null,
    "ErrorTo": IDL2.Null,
    "Other": IDL2.Null,
    "BlockUsed": IDL2.Null,
    "AmountTooSmall": IDL2.Null
  });
  const Result = IDL2.Variant({ "Ok": IDL2.Nat, "Err": TxError });
  const Metadata = IDL2.Record({
    "fee": IDL2.Nat,
    "decimals": IDL2.Nat8,
    "owner": IDL2.Principal,
    "logo": IDL2.Text,
    "name": IDL2.Text,
    "totalSupply": IDL2.Nat,
    "symbol": IDL2.Text
  });
  const TokenInfo = IDL2.Record({
    "holderNumber": IDL2.Nat64,
    "deployTime": IDL2.Nat64,
    "metadata": Metadata,
    "historySize": IDL2.Nat64,
    "cycles": IDL2.Nat64,
    "feeTo": IDL2.Principal
  });
  return IDL2.Service({
    "allowance": IDL2.Func([IDL2.Principal, IDL2.Principal], [IDL2.Nat], ["query"]),
    "approve": IDL2.Func([IDL2.Principal, IDL2.Nat], [Result], []),
    "balanceOf": IDL2.Func([IDL2.Principal], [IDL2.Nat], ["query"]),
    "decimals": IDL2.Func([], [IDL2.Nat8], ["query"]),
    "getAllowanceSize": IDL2.Func([], [IDL2.Nat64], ["query"]),
    "getBlockUsed": IDL2.Func([], [IDL2.Vec(IDL2.Nat64)], ["query"]),
    "getHolders": IDL2.Func([IDL2.Nat64, IDL2.Nat64], [IDL2.Vec(IDL2.Tuple(IDL2.Principal, IDL2.Nat))], ["query"]),
    "getMetadata": IDL2.Func([], [Metadata], ["query"]),
    "getTokenInfo": IDL2.Func([], [TokenInfo], ["query"]),
    "getUserApprovals": IDL2.Func([IDL2.Principal], [IDL2.Vec(IDL2.Tuple(IDL2.Principal, IDL2.Nat))], ["query"]),
    "historySize": IDL2.Func([], [IDL2.Nat64], ["query"]),
    "isBlockUsed": IDL2.Func([IDL2.Nat64], [IDL2.Bool], ["query"]),
    "logo": IDL2.Func([], [IDL2.Text], ["query"]),
    "mint": IDL2.Func([IDL2.Opt(IDL2.Vec(IDL2.Nat8)), IDL2.Nat64], [Result], []),
    "mintFor": IDL2.Func([IDL2.Opt(IDL2.Vec(IDL2.Nat8)), IDL2.Nat64, IDL2.Principal], [Result], []),
    "name": IDL2.Func([], [IDL2.Text], ["query"]),
    "owner": IDL2.Func([], [IDL2.Principal], ["query"]),
    "setFee": IDL2.Func([IDL2.Nat], [], []),
    "setFeeTo": IDL2.Func([IDL2.Principal], [], []),
    "setGenesis": IDL2.Func([], [Result], []),
    "setLogo": IDL2.Func([IDL2.Text], [], []),
    "setName": IDL2.Func([IDL2.Text], [], []),
    "setOwner": IDL2.Func([IDL2.Principal], [], []),
    "symbol": IDL2.Func([], [IDL2.Text], ["query"]),
    "totalSupply": IDL2.Func([], [IDL2.Nat], ["query"]),
    "transfer": IDL2.Func([IDL2.Principal, IDL2.Nat], [Result], []),
    "transferFrom": IDL2.Func([IDL2.Principal, IDL2.Principal, IDL2.Nat], [Result], []),
    "withdraw": IDL2.Func([IDL2.Nat64, IDL2.Text], [Result], [])
  });
};
const init$2 = ({ IDL: IDL2 }) => {
  return [
    IDL2.Text,
    IDL2.Text,
    IDL2.Text,
    IDL2.Nat8,
    IDL2.Nat,
    IDL2.Principal,
    IDL2.Nat,
    IDL2.Principal,
    IDL2.Principal
  ];
};
dip_20_did.init = init$2;
var ledger_did = {};
Object.defineProperty(ledger_did, "__esModule", { value: true });
ledger_did.init = void 0;
ledger_did.default = ({ IDL: IDL2 }) => {
  const AccountIdentifier = IDL2.Text;
  const Duration = IDL2.Record({ secs: IDL2.Nat64, nanos: IDL2.Nat32 });
  const ArchiveOptions = IDL2.Record({
    max_message_size_bytes: IDL2.Opt(IDL2.Nat32),
    node_max_memory_size_bytes: IDL2.Opt(IDL2.Nat32),
    controller_id: IDL2.Principal
  });
  const ICPTs = IDL2.Record({ e8s: IDL2.Nat64 });
  IDL2.Record({
    send_whitelist: IDL2.Vec(IDL2.Tuple(IDL2.Principal)),
    minting_account: AccountIdentifier,
    transaction_window: IDL2.Opt(Duration),
    max_message_size_bytes: IDL2.Opt(IDL2.Nat32),
    archive_options: IDL2.Opt(ArchiveOptions),
    initial_values: IDL2.Vec(IDL2.Tuple(AccountIdentifier, ICPTs))
  });
  const AccountBalanceArgs = IDL2.Record({ account: AccountIdentifier });
  const SubAccount = IDL2.Vec(IDL2.Nat8);
  const BlockHeight = IDL2.Nat64;
  const NotifyCanisterArgs = IDL2.Record({
    to_subaccount: IDL2.Opt(SubAccount),
    from_subaccount: IDL2.Opt(SubAccount),
    to_canister: IDL2.Principal,
    max_fee: ICPTs,
    block_height: BlockHeight
  });
  const Memo = IDL2.Nat64;
  const TimeStamp = IDL2.Record({ timestamp_nanos: IDL2.Nat64 });
  const SendArgs = IDL2.Record({
    to: AccountIdentifier,
    fee: ICPTs,
    memo: Memo,
    from_subaccount: IDL2.Opt(SubAccount),
    created_at_time: IDL2.Opt(TimeStamp),
    amount: ICPTs
  });
  return IDL2.Service({
    account_balance_dfx: IDL2.Func([AccountBalanceArgs], [ICPTs], ["query"]),
    notify_dfx: IDL2.Func([NotifyCanisterArgs], [], []),
    send_dfx: IDL2.Func([SendArgs], [BlockHeight], [])
  });
};
const init$1 = ({ IDL: IDL2 }) => {
  const AccountIdentifier = IDL2.Text;
  const Duration = IDL2.Record({ secs: IDL2.Nat64, nanos: IDL2.Nat32 });
  const ArchiveOptions = IDL2.Record({
    max_message_size_bytes: IDL2.Opt(IDL2.Nat32),
    node_max_memory_size_bytes: IDL2.Opt(IDL2.Nat32),
    controller_id: IDL2.Principal
  });
  const ICPTs = IDL2.Record({ e8s: IDL2.Nat64 });
  const LedgerCanisterInitPayload = IDL2.Record({
    send_whitelist: IDL2.Vec(IDL2.Tuple(IDL2.Principal)),
    minting_account: AccountIdentifier,
    transaction_window: IDL2.Opt(Duration),
    max_message_size_bytes: IDL2.Opt(IDL2.Nat32),
    archive_options: IDL2.Opt(ArchiveOptions),
    initial_values: IDL2.Vec(IDL2.Tuple(AccountIdentifier, ICPTs))
  });
  return [LedgerCanisterInitPayload];
};
ledger_did.init = init$1;
var wicp_did = {};
Object.defineProperty(wicp_did, "__esModule", { value: true });
wicp_did.init = void 0;
wicp_did.default = ({ IDL: IDL2 }) => {
  const TxError = IDL2.Variant({
    "InsufficientAllowance": IDL2.Null,
    "InsufficientBalance": IDL2.Null,
    "ErrorOperationStyle": IDL2.Null,
    "Unauthorized": IDL2.Null,
    "LedgerTrap": IDL2.Null,
    "ErrorTo": IDL2.Null,
    "Other": IDL2.Null,
    "BlockUsed": IDL2.Null,
    "AmountTooSmall": IDL2.Null
  });
  const TxReceipt = IDL2.Variant({ "Ok": IDL2.Nat, "Err": TxError });
  const Metadata = IDL2.Record({
    "fee": IDL2.Nat,
    "decimals": IDL2.Nat8,
    "owner": IDL2.Principal,
    "logo": IDL2.Text,
    "name": IDL2.Text,
    "totalSupply": IDL2.Nat,
    "symbol": IDL2.Text
  });
  const TokenInfo = IDL2.Record({
    "holderNumber": IDL2.Nat64,
    "deployTime": IDL2.Nat64,
    "metadata": Metadata,
    "historySize": IDL2.Nat64,
    "cycles": IDL2.Nat64,
    "feeTo": IDL2.Principal
  });
  return IDL2.Service({
    "allowance": IDL2.Func([IDL2.Principal, IDL2.Principal], [IDL2.Nat], ["query"]),
    "approve": IDL2.Func([IDL2.Principal, IDL2.Nat], [TxReceipt], []),
    "balanceOf": IDL2.Func([IDL2.Principal], [IDL2.Nat], ["query"]),
    "decimals": IDL2.Func([], [IDL2.Nat8], ["query"]),
    "getAllowanceSize": IDL2.Func([], [IDL2.Nat64], ["query"]),
    "getHolders": IDL2.Func([IDL2.Nat64, IDL2.Nat64], [IDL2.Vec(IDL2.Tuple(IDL2.Principal, IDL2.Nat))], ["query"]),
    "getLogo": IDL2.Func([], [IDL2.Text], ["query"]),
    "getMetadata": IDL2.Func([], [Metadata], ["query"]),
    "getTokenInfo": IDL2.Func([], [TokenInfo], ["query"]),
    "getUserApprovals": IDL2.Func([IDL2.Principal], [IDL2.Vec(IDL2.Tuple(IDL2.Principal, IDL2.Nat))], ["query"]),
    "historySize": IDL2.Func([], [IDL2.Nat64], ["query"]),
    "mint": IDL2.Func([IDL2.Opt(IDL2.Vec(IDL2.Nat8)), IDL2.Nat64], [TxReceipt], []),
    "name": IDL2.Func([], [IDL2.Text], ["query"]),
    "owner": IDL2.Func([], [IDL2.Principal], ["query"]),
    "setFee": IDL2.Func([IDL2.Nat], [], []),
    "setFeeTo": IDL2.Func([IDL2.Principal], [], []),
    "setLogo": IDL2.Func([IDL2.Text], [], []),
    "setName": IDL2.Func([IDL2.Text], [], []),
    "setOwner": IDL2.Func([IDL2.Principal], [], []),
    "symbol": IDL2.Func([], [IDL2.Text], ["query"]),
    "totalSupply": IDL2.Func([], [IDL2.Nat], ["query"]),
    "transfer": IDL2.Func([IDL2.Principal, IDL2.Nat], [TxReceipt], []),
    "transferFrom": IDL2.Func([IDL2.Principal, IDL2.Principal, IDL2.Nat], [TxReceipt], []),
    "withdraw": IDL2.Func([IDL2.Nat64, IDL2.Text], [TxReceipt], [])
  });
};
const init = ({ IDL: IDL2 }) => {
  return [
    IDL2.Text,
    IDL2.Text,
    IDL2.Text,
    IDL2.Nat8,
    IDL2.Nat,
    IDL2.Principal,
    IDL2.Nat,
    IDL2.Principal,
    IDL2.Principal
  ];
};
wicp_did.init = init;
var wicpMethods = {};
var __awaiter$1 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(wicpMethods, "__esModule", { value: true });
const principal_1$1 = require$$4;
const methods_1$1 = methods;
const getMetadata$1 = (actor) => __awaiter$1(void 0, void 0, void 0, function* () {
  const metadataResult = yield actor._getMetadata();
  return {
    fungible: {
      symbol: metadataResult.symbol,
      decimals: metadataResult.decimals,
      name: metadataResult.name,
      logo: metadataResult.logo,
      fee: metadataResult.fee,
      totalSupply: metadataResult.totalSupply,
      owner: metadataResult.owner
    }
  };
});
const send$1 = (actor, { to, amount }) => __awaiter$1(void 0, void 0, void 0, function* () {
  const transferResult = yield actor._transfer(principal_1$1.Principal.fromText(to), amount);
  if ("Ok" in transferResult)
    return { transactionId: transferResult.Ok.toString() };
  throw new Error(Object.keys(transferResult.Err)[0]);
});
const getBalance$1 = (actor, user) => __awaiter$1(void 0, void 0, void 0, function* () {
  const decimals = yield getDecimals$1(actor);
  const value2 = (yield actor._balanceOf(user)).toString();
  return { value: value2, decimals };
});
const burnXTC$1 = (_actor, _params) => __awaiter$1(void 0, void 0, void 0, function* () {
  throw new Error("BURN NOT SUPPORTED");
});
const getDecimals$1 = (actor) => __awaiter$1(void 0, void 0, void 0, function* () {
  return (0, methods_1$1.getDecimalsFromMetadata)(yield getMetadata$1(actor));
});
wicpMethods.default = {
  send: send$1,
  getMetadata: getMetadata$1,
  getBalance: getBalance$1,
  burnXTC: burnXTC$1,
  getDecimals: getDecimals$1
};
var rosettaMethods = {};
var validations = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.validateToken = exports2.validateCanisterId = exports2.validateAccountId = exports2.validatePrincipalId = exports2.isValidPrincipal = exports2.ALPHANUM_REGEX = exports2.PRINCIPAL_REGEX = exports2.CANISTER_MAX_LENGTH = void 0;
  const principal_12 = require$$4;
  exports2.CANISTER_MAX_LENGTH = 27;
  exports2.PRINCIPAL_REGEX = /(\w{5}-){10}\w{3}/;
  exports2.ALPHANUM_REGEX = /^[a-zA-Z0-9]+$/;
  const isValidPrincipal = (text) => principal_12.Principal.fromText(text).toText() === text;
  exports2.isValidPrincipal = isValidPrincipal;
  const validatePrincipalId = (text) => {
    try {
      return Boolean(exports2.PRINCIPAL_REGEX.test(text) && (0, exports2.isValidPrincipal)(text));
    } catch (e) {
      return false;
    }
  };
  exports2.validatePrincipalId = validatePrincipalId;
  const validateAccountId = (text) => text.length === 64 && exports2.ALPHANUM_REGEX.test(text);
  exports2.validateAccountId = validateAccountId;
  const validateCanisterId = (text) => {
    try {
      return Boolean(text.length <= exports2.CANISTER_MAX_LENGTH && (0, exports2.isValidPrincipal)(text));
    } catch (e) {
      return false;
    }
  };
  exports2.validateCanisterId = validateCanisterId;
  const validateToken = (metadata) => Boolean(!!metadata.decimal && !!metadata.name && !!metadata.symbol);
  exports2.validateToken = validateToken;
})(validations);
var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(rosettaMethods, "__esModule", { value: true });
const principal_1 = require$$4;
const cross_fetch_1 = __importDefault(browserPonyfill.exports);
const methods_1 = methods;
const account_1 = account;
const validations_1 = validations;
const DECIMALS = 8;
const NET_ID = {
  blockchain: "Internet Computer",
  network: "00000000000000020101"
};
const ROSETTA_URL = "https://rosetta-api.internetcomputer.org";
const getMetadata = (_actor) => __awaiter(void 0, void 0, void 0, function* () {
  return {
    fungible: {
      symbol: "ICP",
      decimals: DECIMALS,
      name: "ICP",
      fee: 1e4
    }
  };
});
const send = (actor, { to, amount, opts }) => __awaiter(void 0, void 0, void 0, function* () {
  const defaultArgs = {
    fee: BigInt(1e4),
    memo: BigInt(0)
  };
  const response = yield actor._send_dfx({
    to: (0, validations_1.isValidPrincipal)(to) ? (0, account_1.getAccountId)(principal_1.Principal.fromText(to)) : to,
    fee: { e8s: (opts === null || opts === void 0 ? void 0 : opts.fee) || defaultArgs.fee },
    amount: { e8s: amount },
    memo: (opts === null || opts === void 0 ? void 0 : opts.memo) ? BigInt(opts.memo) : defaultArgs.memo,
    from_subaccount: [],
    created_at_time: []
  });
  return { height: yield response.toString() };
});
const getBalance = (actor, user) => __awaiter(void 0, void 0, void 0, function* () {
  const accountId = (0, account_1.getAccountId)(user);
  const decimals = yield getDecimals();
  const response = yield (0, cross_fetch_1.default)(`${ROSETTA_URL}/account/balance`, {
    method: "POST",
    body: JSON.stringify({
      network_identifier: NET_ID,
      account_identifier: {
        address: accountId
      }
    }),
    headers: {
      "Content-Type": "application/json",
      Accept: "*/*"
    }
  });
  if (!response.ok) {
    return { value: "Error", decimals, error: response.statusText };
  }
  const { balances } = yield response.json();
  const [{ value: value2, currency }] = balances;
  return { value: value2, decimals: currency.decimals };
});
const burnXTC = (_actor, _params) => __awaiter(void 0, void 0, void 0, function* () {
  throw new Error("BURN NOT SUPPORTED");
});
const getDecimals = (actor) => __awaiter(void 0, void 0, void 0, function* () {
  return (0, methods_1.getDecimalsFromMetadata)(yield getMetadata());
});
rosettaMethods.default = {
  send,
  getMetadata,
  getBalance,
  burnXTC,
  getDecimals
};
var icpStandardMethods = {};
var hasRequiredIcpStandardMethods;
function requireIcpStandardMethods() {
  if (hasRequiredIcpStandardMethods)
    return icpStandardMethods;
  hasRequiredIcpStandardMethods = 1;
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value2) {
      return value2 instanceof P ? value2 : new P(function(resolve) {
        resolve(value2);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value2) {
        try {
          step(generator.next(value2));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value2) {
        try {
          step(generator["throw"](value2));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(icpStandardMethods, "__esModule", { value: true });
  const principal_12 = require$$4;
  const agent_12 = require$$5;
  const methods_12 = methods;
  const account_12 = account;
  const validations_12 = validations;
  const registries_1 = requireRegistries();
  const getMetadata2 = (_actor) => __awaiter2(void 0, void 0, void 0, function* () {
    var _a, _b, _c;
    const agent = agent_12.Actor.agentOf(_actor);
    try {
      const tokenRegistry = new registries_1.TokenRegistry(agent);
      const token2 = yield tokenRegistry.get(agent_12.Actor.canisterIdOf(_actor).toString());
      const { fee = 2e-3, decimals = 8 } = (token2 === null || token2 === void 0 ? void 0 : token2.details) || {};
      const numberFee = Number((_a = fee === null || fee === void 0 ? void 0 : fee.toString) === null || _a === void 0 ? void 0 : _a.call(fee));
      const numberDecimals = Number((_b = decimals === null || decimals === void 0 ? void 0 : decimals.toString) === null || _b === void 0 ? void 0 : _b.call(decimals));
      const parsedFee = numberFee * Math.pow(10, numberDecimals);
      return {
        fungible: {
          symbol: ((_c = token2 === null || token2 === void 0 ? void 0 : token2.details) === null || _c === void 0 ? void 0 : _c.symbol) || "ICP",
          name: (token2 === null || token2 === void 0 ? void 0 : token2.name) || "ICP",
          decimals: numberDecimals,
          fee: parsedFee
        }
      };
    } catch (e) {
      console.error("Error while fetching token metadata, falling back to default values", e);
      return {
        fungible: {
          symbol: "ICP",
          name: "ICP",
          decimals: 8,
          fee: 1e4
        }
      };
    }
  });
  const send2 = (actor, { to, amount, opts }) => __awaiter2(void 0, void 0, void 0, function* () {
    const metadata = yield getMetadata2(actor);
    const { fee = 2e-3, decimals = BigInt(8) } = (metadata === null || metadata === void 0 ? void 0 : metadata.fungible) || {};
    const defaultArgs = {
      fee: BigInt(fee * Math.pow(10, parseInt(decimals.toString(), 10))),
      memo: BigInt(0)
    };
    const response = yield actor._send_dfx({
      to: (0, validations_12.validatePrincipalId)(to) ? (0, account_12.getAccountId)(principal_12.Principal.fromText(to)) : to,
      fee: { e8s: (opts === null || opts === void 0 ? void 0 : opts.fee) || defaultArgs.fee },
      amount: { e8s: amount },
      memo: (opts === null || opts === void 0 ? void 0 : opts.memo) ? BigInt(opts.memo) : defaultArgs.memo,
      from_subaccount: [],
      created_at_time: []
    });
    return { height: yield response.toString() };
  });
  const getBalance2 = (actor, user) => __awaiter2(void 0, void 0, void 0, function* () {
    try {
      const account2 = (0, account_12.getAccountId)(user);
      const balance = yield actor._account_balance_dfx({ account: account2 });
      return { value: balance.e8s.toString(), decimals: 8 };
    } catch (e) {
      return {
        value: "Error",
        decimals: 8,
        error: "Error while fetching your balance"
      };
    }
  });
  const burnXTC2 = (_actor, _params) => __awaiter2(void 0, void 0, void 0, function* () {
    throw new Error("BURN NOT SUPPORTED");
  });
  const getDecimals2 = (actor) => __awaiter2(void 0, void 0, void 0, function* () {
    return (0, methods_12.getDecimalsFromMetadata)(yield getMetadata2(actor));
  });
  icpStandardMethods.default = {
    send: send2,
    getMetadata: getMetadata2,
    getBalance: getBalance2,
    burnXTC: burnXTC2,
    getDecimals: getDecimals2
  };
  return icpStandardMethods;
}
var hasRequiredToken_standards;
function requireToken_standards() {
  if (hasRequiredToken_standards)
    return token_standards;
  hasRequiredToken_standards = 1;
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value2) {
      return value2 instanceof P ? value2 : new P(function(resolve) {
        resolve(value2);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value2) {
        try {
          step(generator.next(value2));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value2) {
        try {
          step(generator["throw"](value2));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(token_standards, "__esModule", { value: true });
  token_standards.parseBalance = token_standards.createTokenActor = void 0;
  const actorFactory_1 = actorFactory;
  const methods_12 = __importDefault2(methods);
  const xtcMethods_1 = __importDefault2(xtcMethods);
  const extMethods_1 = __importDefault2(extMethods);
  const dip20Methods_1 = __importDefault2(dip20Methods);
  const ext_did_12 = __importDefault2(ext_did);
  const xtc_did_1 = __importDefault2(xtc_did);
  const dip_20_did_1 = __importDefault2(dip_20_did);
  const ledger_did_1 = __importDefault2(ledger_did);
  const standards_12 = standards;
  const wicp_did_1 = __importDefault2(wicp_did);
  const wicpMethods_1 = __importDefault2(wicpMethods);
  const rosettaMethods_1 = __importDefault2(rosettaMethods);
  const icpStandardMethods_1 = __importDefault2(requireIcpStandardMethods());
  const getMethods = (standard) => ({
    [standards_12.TOKEN.xtc]: xtcMethods_1.default,
    [standards_12.TOKEN.ext]: extMethods_1.default,
    [standards_12.TOKEN.dip20]: dip20Methods_1.default,
    [standards_12.TOKEN.wicp]: wicpMethods_1.default,
    [standards_12.TOKEN.rosetta]: rosettaMethods_1.default,
    [standards_12.TOKEN.icp]: icpStandardMethods_1.default
  })[standard] || methods_12.default;
  const getIdl = (standard) => {
    const idl = {
      [standards_12.TOKEN.xtc]: xtc_did_1.default,
      [standards_12.TOKEN.ext]: ext_did_12.default,
      [standards_12.TOKEN.dip20]: dip_20_did_1.default,
      [standards_12.TOKEN.wicp]: wicp_did_1.default,
      [standards_12.TOKEN.rosetta]: ledger_did_1.default,
      [standards_12.TOKEN.icp]: ledger_did_1.default
    }[standard];
    if (!idl)
      throw new Error(`Standard ${standard} Not Implemented`);
    return idl;
  };
  const createTokenActor = (canisterId2, agent, standard) => __awaiter2(void 0, void 0, void 0, function* () {
    const idl = getIdl(standard);
    const actor = new ((0, actorFactory_1.createExtendedActorClass)(agent, getMethods(standard), canisterId2, idl))();
    return actor;
  });
  token_standards.createTokenActor = createTokenActor;
  const parseBalance = (balance) => {
    return (parseInt(balance.value, 10) / Math.pow(10, balance.decimals)).toString();
  };
  token_standards.parseBalance = parseBalance;
  token_standards.default = {};
  return token_standards;
}
var hasRequiredToken_registry;
function requireToken_registry() {
  if (hasRequiredToken_registry)
    return token_registry;
  hasRequiredToken_registry = 1;
  (function(exports2) {
    var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTokens = exports2.TokenRegistry = exports2.getTokenActor = exports2.TOKEN_STANDARDS = void 0;
    const agent_12 = require$$5;
    const cross_fetch_12 = __importDefault2(browserPonyfill.exports);
    const token_registry_did_1 = __importDefault2(token_registry_did);
    const standard_registry_1 = __importDefault2(standard_registry);
    const actorFactory_1 = actorFactory;
    const registry_12 = registry;
    const constants_12 = constants;
    const token_standards_1 = requireToken_standards();
    const standards_12 = standards;
    const CANISTER_ID = "b7hhy-tyaaa-aaaah-abbja-cai";
    const DEFAULT_AGENT2 = new agent_12.HttpAgent({ fetch: cross_fetch_12.default, host: constants_12.IC_HOST });
    exports2.TOKEN_STANDARDS = Object.values(standards_12.TOKEN);
    const getTokenActor = ({ canisterId: canisterId2, agent, standard }) => {
      if (!exports2.TOKEN_STANDARDS.includes(standard)) {
        console.error(`Standard ${standard} is not implemented`);
        throw new Error(`standard is not supported: ${standard}`);
      }
      return (0, token_standards_1.createTokenActor)(canisterId2, agent, standard);
    };
    exports2.getTokenActor = getTokenActor;
    class TokenRegistry extends standard_registry_1.default {
      constructor(agent) {
        super(CANISTER_ID, agent);
        this.getAll = () => __awaiter2(this, void 0, void 0, function* () {
          const tokenCanistersMetadata = yield this.actor.get_all();
          return tokenCanistersMetadata.map(registry_12.formatMetadata);
        });
        this.actor = (0, actorFactory_1.generateActor)({
          agent: agent || DEFAULT_AGENT2,
          canisterId: CANISTER_ID,
          IDL: token_registry_did_1.default
        });
      }
    }
    exports2.TokenRegistry = TokenRegistry;
    const getTokens = ({ agent = DEFAULT_AGENT2 } = {}) => __awaiter2(void 0, void 0, void 0, function* () {
      const tokenRegistry = new TokenRegistry(agent);
      const tokenCanisters = yield tokenRegistry.getAll();
      return tokenCanisters.map((token2) => Object.assign(Object.assign({}, token2), { logo: token2.thumbnail, name: token2.name, description: token2.description, website: token2.frontend.length ? token2.frontend[0] : "", principal_id: token2.principal_id, standard: token2.details.standard, total_supply: [token2.details.total_supply], symbol: token2.details.symbol }));
    });
    exports2.getTokens = getTokens;
    exports2.default = {
      getTokenActor: exports2.getTokenActor,
      getTokens: exports2.getTokens,
      addToken: ({ agent, tokenInfo }) => __awaiter2(void 0, void 0, void 0, function* () {
        return new TokenRegistry(agent).add(tokenInfo);
      }),
      removeToken: ({ agent, canisterId: canisterId2 }) => __awaiter2(void 0, void 0, void 0, function* () {
        return new TokenRegistry(agent).remove(canisterId2);
      })
    };
  })(token_registry);
  return token_registry;
}
var address_book = {};
var address_book_did = {};
Object.defineProperty(address_book_did, "__esModule", { value: true });
const addressBookIDL = ({ IDL: IDL2 }) => {
  const valueType = IDL2.Variant({
    "PrincipalId": IDL2.Principal,
    "AccountId": IDL2.Text,
    "Icns": IDL2.Text
  });
  const address = IDL2.Record({
    "name": IDL2.Text,
    "description": IDL2.Opt(IDL2.Text),
    "emoji": IDL2.Opt(IDL2.Text),
    "value": valueType
  });
  const operation_error = IDL2.Variant({
    "NotAuthorized": IDL2.Null,
    "BadParameters": IDL2.Null,
    "Unknown": IDL2.Text,
    "NonExistentItem": IDL2.Null
  });
  const operation_response = IDL2.Variant({
    "Ok": IDL2.Null,
    "Err": operation_error
  });
  return IDL2.Service({
    "add": IDL2.Func([address], [operation_response], []),
    "get_all": IDL2.Func([], [IDL2.Vec(address)], []),
    "name": IDL2.Func([], [IDL2.Text], ["query"]),
    "remove": IDL2.Func([IDL2.Text], [operation_response], [])
  });
};
address_book_did.default = addressBookIDL;
(function(exports2) {
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value2) {
      return value2 instanceof P ? value2 : new P(function(resolve) {
        resolve(value2);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value2) {
        try {
          step(generator.next(value2));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value2) {
        try {
          step(generator["throw"](value2));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.removeAddress = exports2.addAddress = exports2.getAddresses = exports2.getAddressBookActor = void 0;
  const agent_12 = require$$5;
  const address_book_did_1 = __importDefault2(address_book_did);
  const CANISTER_ID = "i73cm-daaaa-aaaah-abhea-cai";
  const getAddressBookActor = (agent) => {
    const actor = agent_12.Actor.createActor(address_book_did_1.default, { agent, canisterId: CANISTER_ID });
    return actor;
  };
  exports2.getAddressBookActor = getAddressBookActor;
  const getAddresses = (agent) => __awaiter2(void 0, void 0, void 0, function* () {
    const actor = (0, exports2.getAddressBookActor)(agent);
    const addresses = yield actor.get_all();
    return addresses.map((address) => ({
      name: address.name,
      description: address.description,
      emoji: address.emoji,
      value: address.value
    }));
  });
  exports2.getAddresses = getAddresses;
  const addAddress = (agent, newAddress) => __awaiter2(void 0, void 0, void 0, function* () {
    const actor = (0, exports2.getAddressBookActor)(agent);
    const addResponse = yield actor.add({
      name: newAddress.name,
      description: newAddress.description,
      emoji: newAddress.emoji,
      value: newAddress.value
    });
    return addResponse;
  });
  exports2.addAddress = addAddress;
  const removeAddress = (agent, addressName) => __awaiter2(void 0, void 0, void 0, function* () {
    const actor = (0, exports2.getAddressBookActor)(agent);
    const removeResponse = yield actor.remove(addressName);
    return removeResponse;
  });
  exports2.removeAddress = removeAddress;
  exports2.default = {
    getAddressBookActor: exports2.getAddressBookActor,
    getAddresses: exports2.getAddresses,
    addAddress: exports2.addAddress,
    removeAddress: exports2.removeAddress
  };
})(address_book);
var hasRequiredRegistries;
function requireRegistries() {
  if (hasRequiredRegistries)
    return registries;
  hasRequiredRegistries = 1;
  (function(exports2) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports3) {
      for (var p in m2)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(nfts_registry, exports2);
    __exportStar(canister_registry, exports2);
    __exportStar(requireToken_registry(), exports2);
    __exportStar(address_book, exports2);
  })(registries);
  return registries;
}
var nft = {};
Object.defineProperty(nft, "__esModule", { value: true });
var token = {};
Object.defineProperty(token, "__esModule", { value: true });
(function(exports2) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m2, k);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m2[k];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports3) {
    for (var p in m2)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
        __createBinding(exports3, m2, p);
  };
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.HttpAgent = exports2.Principal = exports2.standards = exports2.TokenInterfaces = exports2.NFTInterfaces = void 0;
  __exportStar(requireRegistries(), exports2);
  __exportStar(nft, exports2);
  __exportStar(token, exports2);
  exports2.NFTInterfaces = __importStar2(nft);
  exports2.TokenInterfaces = __importStar2(token);
  var standards_12 = standards;
  Object.defineProperty(exports2, "standards", { enumerable: true, get: function() {
    return __importDefault2(standards_12).default;
  } });
  var principal_12 = require$$4;
  Object.defineProperty(exports2, "Principal", { enumerable: true, get: function() {
    return principal_12.Principal;
  } });
  var agent_12 = require$$5;
  Object.defineProperty(exports2, "HttpAgent", { enumerable: true, get: function() {
    return agent_12.HttpAgent;
  } });
})(dist);
const alphabet = "abcdefghijklmnopqrstuvwxyz234567";
const lookupTable = /* @__PURE__ */ Object.create(null);
for (let i2 = 0; i2 < alphabet.length; i2++) {
  lookupTable[alphabet[i2]] = i2;
}
lookupTable["0"] = lookupTable.o;
lookupTable["1"] = lookupTable.i;
function encode(input) {
  let skip = 0;
  let bits = 0;
  let output = "";
  function encodeByte(byte) {
    if (skip < 0) {
      bits |= byte >> -skip;
    } else {
      bits = byte << skip & 248;
    }
    if (skip > 3) {
      skip -= 8;
      return 1;
    }
    if (skip < 4) {
      output += alphabet[bits >> 3];
      skip += 5;
    }
    return 0;
  }
  for (let i2 = 0; i2 < input.length; ) {
    i2 += encodeByte(input[i2]);
  }
  return output + (skip < 0 ? alphabet[bits >> 3] : "");
}
function decode(input) {
  let skip = 0;
  let byte = 0;
  const output = new Uint8Array(input.length * 4 / 3 | 0);
  let o = 0;
  function decodeChar(char) {
    let val = lookupTable[char.toLowerCase()];
    if (val === void 0) {
      throw new Error(`Invalid character: ${JSON.stringify(char)}`);
    }
    val <<= 3;
    byte |= val >>> skip;
    skip += 5;
    if (skip >= 8) {
      output[o++] = byte;
      skip -= 8;
      if (skip > 0) {
        byte = val << 5 - skip & 255;
      } else {
        byte = 0;
      }
    }
  }
  for (const c2 of input) {
    decodeChar(c2);
  }
  return output.slice(0, o);
}
const lookUpTable = new Uint32Array([
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
]);
function getCrc32(buf) {
  const b = new Uint8Array(buf);
  let crc = -1;
  for (let i2 = 0; i2 < b.length; i2++) {
    const byte = b[i2];
    const t = (byte ^ crc) & 255;
    crc = lookUpTable[t] ^ crc >>> 8;
  }
  return (crc ^ -1) >>> 0;
}
function sha224(data2) {
  const shaObj = sha256$1.exports.sha224.create();
  shaObj.update(data2);
  return new Uint8Array(shaObj.array());
}
const SELF_AUTHENTICATING_SUFFIX = 2;
const ANONYMOUS_SUFFIX = 4;
const MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR = "aaaaa-aa";
const fromHexString = (hexString) => {
  var _a;
  return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map((byte) => parseInt(byte, 16)));
};
const toHexString = (bytes2) => bytes2.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
class Principal {
  constructor(_arr) {
    this._arr = _arr;
    this._isPrincipal = true;
  }
  static anonymous() {
    return new this(new Uint8Array([ANONYMOUS_SUFFIX]));
  }
  static managementCanister() {
    return this.fromHex(MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR);
  }
  static selfAuthenticating(publicKey) {
    const sha = sha224(publicKey);
    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));
  }
  static from(other) {
    if (typeof other === "string") {
      return Principal.fromText(other);
    } else if (typeof other === "object" && other !== null && other._isPrincipal === true) {
      return new Principal(other._arr);
    }
    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);
  }
  static fromHex(hex) {
    return new this(fromHexString(hex));
  }
  static fromText(text) {
    const canisterIdNoDash = text.toLowerCase().replace(/-/g, "");
    let arr = decode(canisterIdNoDash);
    arr = arr.slice(4, arr.length);
    const principal = new this(arr);
    if (principal.toText() !== text) {
      throw new Error(`Principal "${principal.toText()}" does not have a valid checksum (original value "${text}" may not be a valid Principal ID).`);
    }
    return principal;
  }
  static fromUint8Array(arr) {
    return new this(arr);
  }
  isAnonymous() {
    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;
  }
  toUint8Array() {
    return this._arr;
  }
  toHex() {
    return toHexString(this._arr).toUpperCase();
  }
  toText() {
    const checksumArrayBuf = new ArrayBuffer(4);
    const view = new DataView(checksumArrayBuf);
    view.setUint32(0, getCrc32(this._arr));
    const checksum = new Uint8Array(checksumArrayBuf);
    const bytes2 = Uint8Array.from(this._arr);
    const array2 = new Uint8Array([...checksum, ...bytes2]);
    const result = encode(array2);
    const matches = result.match(/.{1,5}/g);
    if (!matches) {
      throw new Error();
    }
    return matches.join("-");
  }
  toString() {
    return this.toText();
  }
  compareTo(other) {
    for (let i2 = 0; i2 < Math.min(this._arr.length, other._arr.length); i2++) {
      if (this._arr[i2] < other._arr[i2])
        return "lt";
      else if (this._arr[i2] > other._arr[i2])
        return "gt";
    }
    if (this._arr.length < other._arr.length)
      return "lt";
    if (this._arr.length > other._arr.length)
      return "gt";
    return "eq";
  }
  ltEq(other) {
    const cmp = this.compareTo(other);
    return cmp == "lt" || cmp == "eq";
  }
  gtEq(other) {
    const cmp = this.compareTo(other);
    return cmp == "gt" || cmp == "eq";
  }
}
const clone = (obj) => {
  const cloneObj = structuredClone(obj);
  return cloneObj;
};
const getRemoteBoxes = (remoteItems) => {
  remoteItems = Object.values(remoteItems);
  const remoteBoxes = [...Array(tradeBoxNum).keys()].map((i2) => {
    var _a;
    return {
      id: i2,
      item: (_a = remoteItems.find((item) => item.slot === i2)) != null ? _a : null
    };
  });
  return remoteBoxes;
};
const getLocalBoxes = (localItems) => {
  localItems = Object.values(localItems);
  const localBoxes = [...Array(tradeBoxNum).keys()].map((i2) => {
    var _a;
    return {
      id: i2,
      item: (_a = localItems.find((item) => item.slot === i2)) != null ? _a : null
    };
  });
  return localBoxes;
};
const getInventoryBoxes = (inventoryItems) => {
  inventoryItems = Object.values(inventoryItems);
  const inventoryBoxes = [...Array(inventoryBoxNum).keys()].map((i2) => {
    var _a;
    return {
      id: i2,
      item: (_a = inventoryItems.find((item) => item.slot === i2)) != null ? _a : null
    };
  });
  return inventoryBoxes;
};
const getUserTokens = async ({
  agent,
  user
}) => {
  let collections = [];
  collections = await dist.getAllUserNFTs({
    agent,
    user
  });
  console.log("collections: ", collections);
  const newTokens = {};
  let slot = 0;
  collections.forEach((collection) => {
    collection.tokens.forEach((token2) => {
      var _a, _b, _c, _d;
      const token_id = token2.index.toString();
      let newToken = {
        canister_id: token2.canister,
        collection: token2.collection,
        token_id,
        slot,
        standard: token2.standard,
        index: token2.index
      };
      const jsonMetadata = (_b = (_a = token2.metadata) == null ? void 0 : _a.json) == null ? void 0 : _b.value.TextContent;
      if (jsonMetadata) {
        const parseMetadata = JSON.parse(jsonMetadata);
        console.log("parseMetadata: ", parseMetadata);
        newToken.name = (_c = parseMetadata.name) != null ? _c : token2.collection;
        newToken.url = (_d = parseMetadata.image) != null ? _d : collection.icon;
      } else {
        newToken.name = token2.collection;
        newToken.url = collection.icon;
      }
      newTokens[token_id] = newToken;
      slot++;
    });
  });
  console.log("newTokens: ", newTokens);
  return newTokens;
};
const getExtension = (url2) => {
  const extension = url2.split(".").pop().toLowerCase();
  return extension;
};
const isImage = (url2) => {
  if (!url2)
    return false;
  const imageExtensions = ["apng", "avif", "gif", "jpg", "jpeg", "jfif", "pjpeg", "pjp", "png", "svg", "webp", "bmp", "ico", "cur", "tif", "tiff"];
  const extension = getExtension(url2);
  const flag = imageExtensions.indexOf(extension) >= 0;
  return flag;
};
const isMedia = (url2) => {
  if (!url2)
    return false;
  const mediaExtensions = ["mp4", "mov", "wav", "mp3", "ogg", "webm", "avi"];
  const extension = getExtension(url2);
  const flag = mediaExtensions.indexOf(extension) >= 0;
  return flag;
};
const isModel = (url2) => {
  if (!url2)
    return false;
  const modelExtensions = ["glb"];
  const extension = getExtension(url2);
  const flag = modelExtensions.indexOf(extension) >= 0;
  return flag;
};
const existItems = (boxes) => {
  if (!boxes || !boxes.length)
    return false;
  const flag = !!boxes.filter((box) => {
    var _a;
    return (_a = box == null ? void 0 : box.item) == null ? void 0 : _a.canister_id;
  }).length;
  return flag;
};
const getPrincipalId = (principal) => {
  if (!principal)
    return "";
  if (Array.isArray(principal)) {
    if (!principal.length)
      return "";
    principal = principal[0];
  }
  const principalId = principal._arr ? Principal.fromUint8Array(principal._arr).toText() : "";
  return principalId;
};
const canisterItemsToTokens = (canisterItems, userTokens) => {
  if (!Array.isArray(canisterItems) || !userTokens)
    return {};
  const tokens = {};
  canisterItems.forEach((item) => {
    userTokens[item.token_id] && (tokens[item.token_id] = userTokens[item.token_id]);
  });
  return tokens;
};
const deepEqual = (object1, object2) => {
  const keys1 = Object.keys(object1);
  const keys2 = Object.keys(object2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (const key of keys1) {
    const val1 = object1[key];
    const val2 = object2[key];
    const areObjects = isObject(val1) && isObject(val2);
    if (areObjects && !deepEqual(val1, val2) || !areObjects && val1 !== val2) {
      return false;
    }
  }
  return true;
};
const isObject = (object) => {
  return object != null && typeof object === "object";
};
const getMismatchedItems = (focusItems, compareItems) => {
  const mismatchedItems = [];
  focusItems.forEach((focusItem) => {
    if (!compareItems.find((compareItem) => compareItem.name === focusItem.name && compareItem.canister_id === focusItem.canister_id && compareItem.token_id === focusItem.token_id)) {
      mismatchedItems.push(focusItem);
    }
  });
  return mismatchedItems;
};
var ReplicaRejectCode;
(function(ReplicaRejectCode2) {
  ReplicaRejectCode2[ReplicaRejectCode2["SysFatal"] = 1] = "SysFatal";
  ReplicaRejectCode2[ReplicaRejectCode2["SysTransient"] = 2] = "SysTransient";
  ReplicaRejectCode2[ReplicaRejectCode2["DestinationInvalid"] = 3] = "DestinationInvalid";
  ReplicaRejectCode2[ReplicaRejectCode2["CanisterReject"] = 4] = "CanisterReject";
  ReplicaRejectCode2[ReplicaRejectCode2["CanisterError"] = 5] = "CanisterError";
})(ReplicaRejectCode || (ReplicaRejectCode = {}));
class PipeArrayBuffer {
  constructor(buffer2, length = (buffer2 === null || buffer2 === void 0 ? void 0 : buffer2.byteLength) || 0) {
    this._buffer = buffer2 || new ArrayBuffer(0);
    this._view = new Uint8Array(this._buffer, 0, length);
  }
  get buffer() {
    return this._view.slice();
  }
  get byteLength() {
    return this._view.byteLength;
  }
  read(num) {
    const result = this._view.subarray(0, num);
    this._view = this._view.subarray(num);
    return result.slice().buffer;
  }
  readUint8() {
    const result = this._view[0];
    this._view = this._view.subarray(1);
    return result;
  }
  write(buf) {
    const b = new Uint8Array(buf);
    const offset = this._view.byteLength;
    if (this._view.byteOffset + this._view.byteLength + b.byteLength >= this._buffer.byteLength) {
      this.alloc(b.byteLength);
    } else {
      this._view = new Uint8Array(this._buffer, this._view.byteOffset, this._view.byteLength + b.byteLength);
    }
    this._view.set(b, offset);
  }
  get end() {
    return this._view.byteLength === 0;
  }
  alloc(amount) {
    const b = new ArrayBuffer((this._buffer.byteLength + amount) * 1.2 | 0);
    const v = new Uint8Array(b, 0, this._view.byteLength + amount);
    v.set(this._view);
    this._buffer = b;
    this._view = v;
  }
}
function eob() {
  throw new Error("unexpected end of buffer");
}
function safeRead(pipe, num) {
  if (pipe.byteLength < num) {
    eob();
  }
  return pipe.read(num);
}
function safeReadUint8(pipe) {
  const byte = pipe.readUint8();
  if (byte === void 0) {
    eob();
  }
  return byte;
}
function slebEncode(value2) {
  if (typeof value2 === "number") {
    value2 = BigInt(value2);
  }
  const isNeg = value2 < BigInt(0);
  if (isNeg) {
    value2 = -value2 - BigInt(1);
  }
  const byteLength2 = (value2 === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value2)))) + 1;
  const pipe = new PipeArrayBuffer(new ArrayBuffer(byteLength2), 0);
  while (true) {
    const i2 = getLowerBytes(value2);
    value2 /= BigInt(128);
    if (isNeg && value2 === BigInt(0) && (i2 & 64) !== 0 || !isNeg && value2 === BigInt(0) && (i2 & 64) === 0) {
      pipe.write(new Uint8Array([i2]));
      break;
    } else {
      pipe.write(new Uint8Array([i2 | 128]));
    }
  }
  function getLowerBytes(num) {
    const bytes2 = num % BigInt(128);
    if (isNeg) {
      return Number(BigInt(128) - bytes2 - BigInt(1));
    } else {
      return Number(bytes2);
    }
  }
  return pipe.buffer;
}
function writeUIntLE(value2, byteLength2) {
  if (BigInt(value2) < BigInt(0)) {
    throw new Error("Cannot write negative values.");
  }
  return writeIntLE(value2, byteLength2);
}
function writeIntLE(value2, byteLength2) {
  value2 = BigInt(value2);
  const pipe = new PipeArrayBuffer(new ArrayBuffer(Math.min(1, byteLength2)), 0);
  let i2 = 0;
  let mul = BigInt(256);
  let sub = BigInt(0);
  let byte = Number(value2 % mul);
  pipe.write(new Uint8Array([byte]));
  while (++i2 < byteLength2) {
    if (value2 < 0 && sub === BigInt(0) && byte !== 0) {
      sub = BigInt(1);
    }
    byte = Number((value2 / mul - sub) % BigInt(256));
    pipe.write(new Uint8Array([byte]));
    mul *= BigInt(256);
  }
  return pipe.buffer;
}
function readUIntLE(pipe, byteLength2) {
  let val = BigInt(safeReadUint8(pipe));
  let mul = BigInt(1);
  let i2 = 0;
  while (++i2 < byteLength2) {
    mul *= BigInt(256);
    const byte = BigInt(safeReadUint8(pipe));
    val = val + mul * byte;
  }
  return val;
}
function readIntLE(pipe, byteLength2) {
  let val = readUIntLE(pipe, byteLength2);
  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength2 - 1) + BigInt(7));
  if (val >= mul) {
    val -= mul * BigInt(2);
  }
  return val;
}
function iexp2(n) {
  const nBig = BigInt(n);
  if (n < 0) {
    throw new RangeError("Input must be non-negative");
  }
  return BigInt(1) << nBig;
}
const toReadableString_max = 400;
class Type {
  display() {
    return this.name;
  }
  valueToString(x) {
    return toReadableString(x);
  }
  buildTypeTable(typeTable) {
    if (!typeTable.has(this)) {
      this._buildTypeTableImpl(typeTable);
    }
  }
}
class PrimitiveType extends Type {
  checkType(t) {
    if (this.name !== t.name) {
      throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
    }
    return t;
  }
  _buildTypeTableImpl(typeTable) {
    return;
  }
}
class ConstructType extends Type {
  checkType(t) {
    if (t instanceof RecClass) {
      const ty = t.getType();
      if (typeof ty === "undefined") {
        throw new Error("type mismatch with uninitialized type");
      }
      return ty;
    }
    throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
  }
  encodeType(typeTable) {
    return typeTable.indexOf(this.name);
  }
}
class FloatClass extends PrimitiveType {
  constructor(_bits) {
    super();
    this._bits = _bits;
    if (_bits !== 32 && _bits !== 64) {
      throw new Error("not a valid float type");
    }
  }
  accept(v, d) {
    return v.visitFloat(this, d);
  }
  covariant(x) {
    if (typeof x === "number" || x instanceof Number)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
  }
  encodeValue(x) {
    const buf = new ArrayBuffer(this._bits / 8);
    const view = new DataView(buf);
    if (this._bits === 32) {
      view.setFloat32(0, x, true);
    } else {
      view.setFloat64(0, x, true);
    }
    return buf;
  }
  encodeType() {
    const opcode = this._bits === 32 ? -13 : -14;
    return slebEncode(opcode);
  }
  decodeValue(b, t) {
    this.checkType(t);
    const bytes2 = safeRead(b, this._bits / 8);
    const view = new DataView(bytes2);
    if (this._bits === 32) {
      return view.getFloat32(0, true);
    } else {
      return view.getFloat64(0, true);
    }
  }
  get name() {
    return "float" + this._bits;
  }
  valueToString(x) {
    return x.toString();
  }
}
class FixedIntClass extends PrimitiveType {
  constructor(_bits) {
    super();
    this._bits = _bits;
  }
  accept(v, d) {
    return v.visitFixedInt(this, d);
  }
  covariant(x) {
    const min = iexp2(this._bits - 1) * BigInt(-1);
    const max = iexp2(this._bits - 1) - BigInt(1);
    let ok = false;
    if (typeof x === "bigint") {
      ok = x >= min && x <= max;
    } else if (Number.isInteger(x)) {
      const v = BigInt(x);
      ok = v >= min && v <= max;
    } else {
      ok = false;
    }
    if (ok)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
  }
  encodeValue(x) {
    return writeIntLE(x, this._bits / 8);
  }
  encodeType() {
    const offset = Math.log2(this._bits) - 3;
    return slebEncode(-9 - offset);
  }
  decodeValue(b, t) {
    this.checkType(t);
    const num = readIntLE(b, this._bits / 8);
    if (this._bits <= 32) {
      return Number(num);
    } else {
      return num;
    }
  }
  get name() {
    return `int${this._bits}`;
  }
  valueToString(x) {
    return x.toString();
  }
}
class FixedNatClass extends PrimitiveType {
  constructor(_bits) {
    super();
    this._bits = _bits;
  }
  accept(v, d) {
    return v.visitFixedNat(this, d);
  }
  covariant(x) {
    const max = iexp2(this._bits);
    let ok = false;
    if (typeof x === "bigint" && x >= BigInt(0)) {
      ok = x < max;
    } else if (Number.isInteger(x) && x >= 0) {
      const v = BigInt(x);
      ok = v < max;
    } else {
      ok = false;
    }
    if (ok)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
  }
  encodeValue(x) {
    return writeUIntLE(x, this._bits / 8);
  }
  encodeType() {
    const offset = Math.log2(this._bits) - 3;
    return slebEncode(-5 - offset);
  }
  decodeValue(b, t) {
    this.checkType(t);
    const num = readUIntLE(b, this._bits / 8);
    if (this._bits <= 32) {
      return Number(num);
    } else {
      return num;
    }
  }
  get name() {
    return `nat${this._bits}`;
  }
  valueToString(x) {
    return x.toString();
  }
}
class RecClass extends ConstructType {
  constructor() {
    super(...arguments);
    this._id = RecClass._counter++;
    this._type = void 0;
  }
  accept(v, d) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return v.visitRec(this, this._type, d);
  }
  fill(t) {
    this._type = t;
  }
  getType() {
    return this._type;
  }
  covariant(x) {
    if (this._type ? this._type.covariant(x) : false)
      return true;
    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);
  }
  encodeValue(x) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.encodeValue(x);
  }
  _buildTypeTableImpl(typeTable) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    typeTable.add(this, new Uint8Array([]));
    this._type.buildTypeTable(typeTable);
    typeTable.merge(this, this._type.name);
  }
  decodeValue(b, t) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.decodeValue(b, t);
  }
  get name() {
    return `rec_${this._id}`;
  }
  display() {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return `\u03BC${this.name}.${this._type.name}`;
  }
  valueToString(x) {
    if (!this._type) {
      throw Error("Recursive type uninitialized.");
    }
    return this._type.valueToString(x);
  }
}
RecClass._counter = 0;
function toReadableString(x) {
  const str = JSON.stringify(x, (_key, value2) => typeof value2 === "bigint" ? `BigInt(${value2})` : value2);
  return str && str.length > toReadableString_max ? str.substring(0, toReadableString_max - 3) + "..." : str;
}
new FloatClass(32);
new FloatClass(64);
new FixedIntClass(8);
new FixedIntClass(16);
new FixedIntClass(32);
new FixedIntClass(64);
new FixedNatClass(8);
new FixedNatClass(16);
new FixedNatClass(32);
new FixedNatClass(64);
function concat(...buffers) {
  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));
  let index2 = 0;
  for (const b of buffers) {
    result.set(new Uint8Array(b), index2);
    index2 += b.byteLength;
  }
  return result.buffer;
}
const hexRe = new RegExp(/^([0-9A-F]{2})*$/i);
function fromHex(hex) {
  if (!hexRe.test(hex)) {
    throw new Error("Invalid hexadecimal string.");
  }
  const buffer2 = [...hex].reduce((acc, curr, i2) => {
    acc[i2 / 2 | 0] = (acc[i2 / 2 | 0] || "") + curr;
    return acc;
  }, []).map((x) => Number.parseInt(x, 16));
  return new Uint8Array(buffer2).buffer;
}
globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s); i2 < p.length; i2++) {
      if (e.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i2]))
        t[p[i2]] = s[p[i2]];
    }
  return t;
};
new TextEncoder().encode("\nic-request");
class PrincipalEncoder {
  get name() {
    return "Principal";
  }
  get priority() {
    return 0;
  }
  match(value2) {
    return value2 && value2._isPrincipal === true;
  }
  encode(v) {
    return src.value.bytes(v.toUint8Array());
  }
}
class BufferEncoder {
  get name() {
    return "Buffer";
  }
  get priority() {
    return 1;
  }
  match(value2) {
    return value2 instanceof ArrayBuffer || ArrayBuffer.isView(value2);
  }
  encode(v) {
    return src.value.bytes(new Uint8Array(v));
  }
}
class BigIntEncoder {
  get name() {
    return "BigInt";
  }
  get priority() {
    return 1;
  }
  match(value2) {
    return typeof value2 === `bigint`;
  }
  encode(v) {
    if (v > BigInt(0)) {
      return src.value.tagged(2, src.value.bytes(fromHex(v.toString(16))));
    } else {
      return src.value.tagged(3, src.value.bytes(fromHex((BigInt("-1") * v).toString(16))));
    }
  }
}
const serializer = src.SelfDescribeCborSerializer.withDefaultEncoders(true);
serializer.addEncoder(new PrincipalEncoder());
serializer.addEncoder(new BufferEncoder());
serializer.addEncoder(new BigIntEncoder());
var CborTag;
(function(CborTag2) {
  CborTag2[CborTag2["Uint64LittleEndian"] = 71] = "Uint64LittleEndian";
  CborTag2[CborTag2["Semantic"] = 55799] = "Semantic";
})(CborTag || (CborTag = {}));
class Uint8ArrayDecoder extends src$1.Decoder {
  createByteString(raw2) {
    return concat(...raw2);
  }
  createByteStringFromHeap(start, end) {
    if (start === end) {
      return new ArrayBuffer(0);
    }
    return new Uint8Array(this._heap.slice(start, end));
  }
}
var SubmitRequestType;
(function(SubmitRequestType2) {
  SubmitRequestType2["Call"] = "call";
})(SubmitRequestType || (SubmitRequestType = {}));
BigInt(1e6);
BigInt(60 * 1e3);
var RequestStatusResponseStatus;
(function(RequestStatusResponseStatus2) {
  RequestStatusResponseStatus2["Received"] = "received";
  RequestStatusResponseStatus2["Processing"] = "processing";
  RequestStatusResponseStatus2["Replied"] = "replied";
  RequestStatusResponseStatus2["Rejected"] = "rejected";
  RequestStatusResponseStatus2["Unknown"] = "unknown";
  RequestStatusResponseStatus2["Done"] = "done";
})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));
var ProxyMessageKind;
(function(ProxyMessageKind2) {
  ProxyMessageKind2["Error"] = "err";
  ProxyMessageKind2["GetPrincipal"] = "gp";
  ProxyMessageKind2["GetPrincipalResponse"] = "gpr";
  ProxyMessageKind2["Query"] = "q";
  ProxyMessageKind2["QueryResponse"] = "qr";
  ProxyMessageKind2["Call"] = "c";
  ProxyMessageKind2["CallResponse"] = "cr";
  ProxyMessageKind2["ReadState"] = "rs";
  ProxyMessageKind2["ReadStateResponse"] = "rsr";
  ProxyMessageKind2["Status"] = "s";
  ProxyMessageKind2["StatusResponse"] = "sr";
})(ProxyMessageKind || (ProxyMessageKind = {}));
const wasmBytesBase64 = ``;
decode$1(wasmBytesBase64);
fromHex("308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100");
var CanisterInstallMode;
(function(CanisterInstallMode2) {
  CanisterInstallMode2["Install"] = "install";
  CanisterInstallMode2["Reinstall"] = "reinstall";
  CanisterInstallMode2["Upgrade"] = "upgrade";
})(CanisterInstallMode || (CanisterInstallMode = {}));
const idlFactory = ({ IDL: IDL2 }) => {
  const Item = IDL2.Record({
    "token_id": IDL2.Int32,
    "name": IDL2.Text,
    "canister_id": IDL2.Principal
  });
  const Trade2 = IDL2.Record({
    "id": IDL2.Text,
    "guest_items": IDL2.Vec(Item),
    "fulfilled": IDL2.Bool,
    "host": IDL2.Principal,
    "guest_accept": IDL2.Bool,
    "host_escrow_items": IDL2.Vec(Item),
    "guest": IDL2.Opt(IDL2.Principal),
    "guest_escrow_items": IDL2.Vec(Item),
    "host_items": IDL2.Vec(Item),
    "host_accept": IDL2.Bool
  });
  return IDL2.Service({
    "accept": IDL2.Func([IDL2.Text], [Trade2], []),
    "add_item_to_escrow": IDL2.Func([IDL2.Text, Item], [Trade2], []),
    "add_item_to_trade": IDL2.Func([IDL2.Text, Item], [Trade2], []),
    "cancel": IDL2.Func([IDL2.Text], [Trade2], []),
    "create_trade": IDL2.Func([], [Trade2], []),
    "delete_trade": IDL2.Func([IDL2.Text], [Trade2], []),
    "get_all_trades": IDL2.Func([], [IDL2.Vec(Trade2)], ["query"]),
    "get_trade_by_id": IDL2.Func([IDL2.Text], [Trade2], ["query"]),
    "join_trade": IDL2.Func([IDL2.Text], [Trade2], []),
    "leave_trade": IDL2.Func([IDL2.Text], [Trade2], []),
    "remove_item_from_trade": IDL2.Func([IDL2.Text, Item], [Trade2], []),
    "withdraw_from_escrow": IDL2.Func([IDL2.Text], [Trade2], [])
  });
};
const ModalBox = ({
  children
}) => {
  return /* @__PURE__ */ jsx("div", {
    style: {
      position: "absolute",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)",
      zIndex: 2,
      width: "50%",
      height: "50%",
      backgroundColor: "black",
      border: ".2em solid rgb(12, 30, 32)",
      borderRadius: ".6em"
    },
    children
  });
};
const BagBoxStyle = {
  position: "relative",
  width: "40px",
  display: "inline-block",
  height: "40px",
  margin: "4px",
  alignItems: "center",
  justifyContent: "center",
  backgroundImage: "radial-gradient(#0c1e20 0%, #101010 66%)",
  borderRadius: "2px",
  boxShadow: "0px 0px 0px 2px #2f3639"
};
const BagBox = ({
  children,
  isOver,
  candrop
}) => {
  return /* @__PURE__ */ jsx("div", {
    isover: isOver,
    candrop,
    style: {
      border: candrop ? `1px solid ${isOver ? "green" : "gold"}` : "1px solid #0c1e20",
      ...BagBoxStyle
    },
    children
  });
};
const BagBox$1 = React.memo(BagBox);
const RemoteBox = ({
  children
}) => {
  return /* @__PURE__ */ jsx("div", {
    style: BagBoxStyle,
    children
  });
};
const RemoteBox$1 = React.memo(RemoteBox);
var react3dViewer = { exports: {} };
/*!
 *  react-3d-viewer v1.0.12
 *  By https://github.com/dwqdaiwenqi 
 *  Github: https://github.com/dwqdaiwenqi/react-3d-viewer
 *  MIT Licensed.
 */
(function(module2, exports2) {
  !function(e, t) {
    module2.exports = t();
  }(window, function() {
    return function(e) {
      var t = {};
      function n(r) {
        if (t[r])
          return t[r].exports;
        var i2 = t[r] = { i: r, l: false, exports: {} };
        return e[r].call(i2.exports, i2, i2.exports, n), i2.l = true, i2.exports;
      }
      return n.m = e, n.c = t, n.d = function(e2, t2, r) {
        n.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: r });
      }, n.r = function(e2) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
      }, n.t = function(e2, t2) {
        if (1 & t2 && (e2 = n(e2)), 8 & t2)
          return e2;
        if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
          return e2;
        var r = /* @__PURE__ */ Object.create(null);
        if (n.r(r), Object.defineProperty(r, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
          for (var i2 in e2)
            n.d(r, i2, function(t3) {
              return e2[t3];
            }.bind(null, i2));
        return r;
      }, n.n = function(e2) {
        var t2 = e2 && e2.__esModule ? function() {
          return e2.default;
        } : function() {
          return e2;
        };
        return n.d(t2, "a", t2), t2;
      }, n.o = function(e2, t2) {
        return Object.prototype.hasOwnProperty.call(e2, t2);
      }, n.p = "", n(n.s = 13);
    }([function(e, t, n) {
      function r() {
      }
      n.r(t), n.d(t, "WebGLRenderTargetCube", function() {
        return Yt;
      }), n.d(t, "WebGLRenderTarget", function() {
        return qt;
      }), n.d(t, "WebGLRenderer", function() {
        return oi;
      }), n.d(t, "ShaderLib", function() {
        return on;
      }), n.d(t, "UniformsLib", function() {
        return an;
      }), n.d(t, "UniformsUtils", function() {
        return tn;
      }), n.d(t, "ShaderChunk", function() {
        return en;
      }), n.d(t, "FogExp2", function() {
        return si;
      }), n.d(t, "Fog", function() {
        return ci;
      }), n.d(t, "Scene", function() {
        return ui;
      }), n.d(t, "Sprite", function() {
        return pi;
      }), n.d(t, "LOD", function() {
        return fi;
      }), n.d(t, "SkinnedMesh", function() {
        return vi;
      }), n.d(t, "Skeleton", function() {
        return mi;
      }), n.d(t, "Bone", function() {
        return gi;
      }), n.d(t, "Mesh", function() {
        return kn;
      }), n.d(t, "LineSegments", function() {
        return bi;
      }), n.d(t, "LineLoop", function() {
        return wi;
      }), n.d(t, "Line", function() {
        return xi;
      }), n.d(t, "Points", function() {
        return Mi;
      }), n.d(t, "Group", function() {
        return ni;
      }), n.d(t, "VideoTexture", function() {
        return Ei;
      }), n.d(t, "DataTexture", function() {
        return Zt;
      }), n.d(t, "CompressedTexture", function() {
        return Ti;
      }), n.d(t, "CubeTexture", function() {
        return Vn;
      }), n.d(t, "CanvasTexture", function() {
        return Si;
      }), n.d(t, "DepthTexture", function() {
        return Ai;
      }), n.d(t, "Texture", function() {
        return Wt;
      }), n.d(t, "CompressedTextureLoader", function() {
        return no;
      }), n.d(t, "DataTextureLoader", function() {
        return ro;
      }), n.d(t, "CubeTextureLoader", function() {
        return ao;
      }), n.d(t, "TextureLoader", function() {
        return oo;
      }), n.d(t, "ObjectLoader", function() {
        return cs;
      }), n.d(t, "MaterialLoader", function() {
        return ns;
      }), n.d(t, "BufferGeometryLoader", function() {
        return rs;
      }), n.d(t, "DefaultLoadingManager", function() {
        return $a;
      }), n.d(t, "LoadingManager", function() {
        return Qa;
      }), n.d(t, "JSONLoader", function() {
        return ss;
      }), n.d(t, "ImageLoader", function() {
        return io;
      }), n.d(t, "ImageBitmapLoader", function() {
        return ps;
      }), n.d(t, "FontLoader", function() {
        return vs;
      }), n.d(t, "FileLoader", function() {
        return to;
      }), n.d(t, "Loader", function() {
        return as;
      }), n.d(t, "LoaderUtils", function() {
        return os;
      }), n.d(t, "Cache", function() {
        return Ka;
      }), n.d(t, "AudioLoader", function() {
        return xs;
      }), n.d(t, "SpotLightShadow", function() {
        return Io;
      }), n.d(t, "SpotLight", function() {
        return Do;
      }), n.d(t, "PointLight", function() {
        return Uo;
      }), n.d(t, "RectAreaLight", function() {
        return zo;
      }), n.d(t, "HemisphereLight", function() {
        return Oo;
      }), n.d(t, "DirectionalLightShadow", function() {
        return Bo;
      }), n.d(t, "DirectionalLight", function() {
        return Fo;
      }), n.d(t, "AmbientLight", function() {
        return Go;
      }), n.d(t, "LightShadow", function() {
        return No;
      }), n.d(t, "Light", function() {
        return Po;
      }), n.d(t, "StereoCamera", function() {
        return bs;
      }), n.d(t, "PerspectiveCamera", function() {
        return ri;
      }), n.d(t, "OrthographicCamera", function() {
        return fn;
      }), n.d(t, "CubeCamera", function() {
        return ws;
      }), n.d(t, "ArrayCamera", function() {
        return ii;
      }), n.d(t, "Camera", function() {
        return pn;
      }), n.d(t, "AudioListener", function() {
        return _s;
      }), n.d(t, "PositionalAudio", function() {
        return Es;
      }), n.d(t, "AudioContext", function() {
        return ys;
      }), n.d(t, "AudioAnalyser", function() {
        return Ts;
      }), n.d(t, "Audio", function() {
        return Ms;
      }), n.d(t, "VectorKeyframeTrack", function() {
        return $o;
      }), n.d(t, "StringKeyframeTrack", function() {
        return Qo;
      }), n.d(t, "QuaternionKeyframeTrack", function() {
        return Ko;
      }), n.d(t, "NumberKeyframeTrack", function() {
        return Zo;
      }), n.d(t, "ColorKeyframeTrack", function() {
        return Yo;
      }), n.d(t, "BooleanKeyframeTrack", function() {
        return qo;
      }), n.d(t, "PropertyMixer", function() {
        return Ss;
      }), n.d(t, "PropertyBinding", function() {
        return Cs;
      }), n.d(t, "KeyframeTrack", function() {
        return Xo;
      }), n.d(t, "AnimationUtils", function() {
        return Ho;
      }), n.d(t, "AnimationObjectGroup", function() {
        return Ps;
      }), n.d(t, "AnimationMixer", function() {
        return Ns;
      }), n.d(t, "AnimationClip", function() {
        return es;
      }), n.d(t, "Uniform", function() {
        return Is;
      }), n.d(t, "InstancedBufferGeometry", function() {
        return Ds;
      }), n.d(t, "BufferGeometry", function() {
        return Pn;
      }), n.d(t, "Geometry", function() {
        return vn;
      }), n.d(t, "InterleavedBufferAttribute", function() {
        return hi;
      }), n.d(t, "InstancedInterleavedBuffer", function() {
        return Us;
      }), n.d(t, "InterleavedBuffer", function() {
        return li;
      }), n.d(t, "InstancedBufferAttribute", function() {
        return Bs;
      }), n.d(t, "Face3", function() {
        return mn;
      }), n.d(t, "Object3D", function() {
        return dn;
      }), n.d(t, "Raycaster", function() {
        return Fs;
      }), n.d(t, "Layers", function() {
        return ln;
      }), n.d(t, "EventDispatcher", function() {
        return r;
      }), n.d(t, "Clock", function() {
        return Hs;
      }), n.d(t, "QuaternionLinearInterpolant", function() {
        return Jo;
      }), n.d(t, "LinearInterpolant", function() {
        return Vo;
      }), n.d(t, "DiscreteInterpolant", function() {
        return Wo;
      }), n.d(t, "CubicInterpolant", function() {
        return jo;
      }), n.d(t, "Interpolant", function() {
        return ko;
      }), n.d(t, "Triangle", function() {
        return Hn;
      }), n.d(t, "Math", function() {
        return Bt;
      }), n.d(t, "Spherical", function() {
        return ks;
      }), n.d(t, "Cylindrical", function() {
        return js;
      }), n.d(t, "Plane", function() {
        return Qt;
      }), n.d(t, "Frustum", function() {
        return $t;
      }), n.d(t, "Sphere", function() {
        return Kt;
      }), n.d(t, "Ray", function() {
        return zn;
      }), n.d(t, "Matrix4", function() {
        return Gt;
      }), n.d(t, "Matrix3", function() {
        return kt;
      }), n.d(t, "Box3", function() {
        return Jt;
      }), n.d(t, "Box2", function() {
        return Vs;
      }), n.d(t, "Line3", function() {
        return Ws;
      }), n.d(t, "Euler", function() {
        return un;
      }), n.d(t, "Vector4", function() {
        return Xt;
      }), n.d(t, "Vector3", function() {
        return Ht;
      }), n.d(t, "Vector2", function() {
        return Ft;
      }), n.d(t, "Quaternion", function() {
        return zt;
      }), n.d(t, "Color", function() {
        return rn;
      }), n.d(t, "ImmediateRenderObject", function() {
        return Xs;
      }), n.d(t, "VertexNormalsHelper", function() {
        return qs;
      }), n.d(t, "SpotLightHelper", function() {
        return Ys;
      }), n.d(t, "SkeletonHelper", function() {
        return Zs;
      }), n.d(t, "PointLightHelper", function() {
        return Js;
      }), n.d(t, "RectAreaLightHelper", function() {
        return Ks;
      }), n.d(t, "HemisphereLightHelper", function() {
        return Qs;
      }), n.d(t, "GridHelper", function() {
        return $s;
      }), n.d(t, "PolarGridHelper", function() {
        return ec;
      }), n.d(t, "FaceNormalsHelper", function() {
        return tc;
      }), n.d(t, "DirectionalLightHelper", function() {
        return nc;
      }), n.d(t, "CameraHelper", function() {
        return rc;
      }), n.d(t, "BoxHelper", function() {
        return ic2;
      }), n.d(t, "Box3Helper", function() {
        return ac;
      }), n.d(t, "PlaneHelper", function() {
        return oc;
      }), n.d(t, "ArrowHelper", function() {
        return sc;
      }), n.d(t, "AxesHelper", function() {
        return cc;
      }), n.d(t, "Shape", function() {
        return Co;
      }), n.d(t, "Path", function() {
        return Ro;
      }), n.d(t, "ShapePath", function() {
        return fs;
      }), n.d(t, "Font", function() {
        return ms;
      }), n.d(t, "CurvePath", function() {
        return Lo;
      }), n.d(t, "Curve", function() {
        return so;
      }), n.d(t, "ImageUtils", function() {
        return jt;
      }), n.d(t, "ShapeUtils", function() {
        return ma;
      }), n.d(t, "WebGLUtils", function() {
        return ti;
      }), n.d(t, "WireframeGeometry", function() {
        return Li;
      }), n.d(t, "ParametricGeometry", function() {
        return Ri;
      }), n.d(t, "ParametricBufferGeometry", function() {
        return Ci;
      }), n.d(t, "TetrahedronGeometry", function() {
        return Ni;
      }), n.d(t, "TetrahedronBufferGeometry", function() {
        return Ii;
      }), n.d(t, "OctahedronGeometry", function() {
        return Di;
      }), n.d(t, "OctahedronBufferGeometry", function() {
        return Ui;
      }), n.d(t, "IcosahedronGeometry", function() {
        return Bi;
      }), n.d(t, "IcosahedronBufferGeometry", function() {
        return Fi;
      }), n.d(t, "DodecahedronGeometry", function() {
        return Gi;
      }), n.d(t, "DodecahedronBufferGeometry", function() {
        return zi;
      }), n.d(t, "PolyhedronGeometry", function() {
        return Pi;
      }), n.d(t, "PolyhedronBufferGeometry", function() {
        return Oi;
      }), n.d(t, "TubeGeometry", function() {
        return Hi;
      }), n.d(t, "TubeBufferGeometry", function() {
        return ki;
      }), n.d(t, "TorusKnotGeometry", function() {
        return ji;
      }), n.d(t, "TorusKnotBufferGeometry", function() {
        return Vi;
      }), n.d(t, "TorusGeometry", function() {
        return Wi;
      }), n.d(t, "TorusBufferGeometry", function() {
        return Xi;
      }), n.d(t, "TextGeometry", function() {
        return _a;
      }), n.d(t, "TextBufferGeometry", function() {
        return Ma;
      }), n.d(t, "SphereGeometry", function() {
        return Ea;
      }), n.d(t, "SphereBufferGeometry", function() {
        return Ta;
      }), n.d(t, "RingGeometry", function() {
        return Sa;
      }), n.d(t, "RingBufferGeometry", function() {
        return Aa;
      }), n.d(t, "PlaneGeometry", function() {
        return In;
      }), n.d(t, "PlaneBufferGeometry", function() {
        return Dn;
      }), n.d(t, "LatheGeometry", function() {
        return La;
      }), n.d(t, "LatheBufferGeometry", function() {
        return Ra;
      }), n.d(t, "ShapeGeometry", function() {
        return Ca;
      }), n.d(t, "ShapeBufferGeometry", function() {
        return Pa;
      }), n.d(t, "ExtrudeGeometry", function() {
        return ya;
      }), n.d(t, "ExtrudeBufferGeometry", function() {
        return xa;
      }), n.d(t, "EdgesGeometry", function() {
        return Na;
      }), n.d(t, "ConeGeometry", function() {
        return Ua;
      }), n.d(t, "ConeBufferGeometry", function() {
        return Ba;
      }), n.d(t, "CylinderGeometry", function() {
        return Ia;
      }), n.d(t, "CylinderBufferGeometry", function() {
        return Da;
      }), n.d(t, "CircleGeometry", function() {
        return Fa;
      }), n.d(t, "CircleBufferGeometry", function() {
        return Ga;
      }), n.d(t, "BoxGeometry", function() {
        return On;
      }), n.d(t, "BoxBufferGeometry", function() {
        return Nn;
      }), n.d(t, "ShadowMaterial", function() {
        return Ha;
      }), n.d(t, "SpriteMaterial", function() {
        return di;
      }), n.d(t, "RawShaderMaterial", function() {
        return ka;
      }), n.d(t, "ShaderMaterial", function() {
        return Gn;
      }), n.d(t, "PointsMaterial", function() {
        return _i;
      }), n.d(t, "MeshPhysicalMaterial", function() {
        return Va;
      }), n.d(t, "MeshStandardMaterial", function() {
        return ja;
      }), n.d(t, "MeshPhongMaterial", function() {
        return Wa;
      }), n.d(t, "MeshToonMaterial", function() {
        return Xa;
      }), n.d(t, "MeshNormalMaterial", function() {
        return qa;
      }), n.d(t, "MeshLambertMaterial", function() {
        return Ya;
      }), n.d(t, "MeshDepthMaterial", function() {
        return Kr;
      }), n.d(t, "MeshDistanceMaterial", function() {
        return Qr;
      }), n.d(t, "MeshBasicMaterial", function() {
        return Fn;
      }), n.d(t, "LineDashedMaterial", function() {
        return Za;
      }), n.d(t, "LineBasicMaterial", function() {
        return yi;
      }), n.d(t, "Material", function() {
        return Bn;
      }), n.d(t, "Float64BufferAttribute", function() {
        return An;
      }), n.d(t, "Float32BufferAttribute", function() {
        return Sn;
      }), n.d(t, "Uint32BufferAttribute", function() {
        return Tn;
      }), n.d(t, "Int32BufferAttribute", function() {
        return En;
      }), n.d(t, "Uint16BufferAttribute", function() {
        return Mn;
      }), n.d(t, "Int16BufferAttribute", function() {
        return _n;
      }), n.d(t, "Uint8ClampedBufferAttribute", function() {
        return wn;
      }), n.d(t, "Uint8BufferAttribute", function() {
        return bn;
      }), n.d(t, "Int8BufferAttribute", function() {
        return xn;
      }), n.d(t, "BufferAttribute", function() {
        return yn;
      }), n.d(t, "ArcCurve", function() {
        return uo;
      }), n.d(t, "CatmullRomCurve3", function() {
        return go;
      }), n.d(t, "CubicBezierCurve", function() {
        return bo;
      }), n.d(t, "CubicBezierCurve3", function() {
        return wo;
      }), n.d(t, "EllipseCurve", function() {
        return co;
      }), n.d(t, "LineCurve", function() {
        return _o;
      }), n.d(t, "LineCurve3", function() {
        return Mo;
      }), n.d(t, "QuadraticBezierCurve", function() {
        return Eo;
      }), n.d(t, "QuadraticBezierCurve3", function() {
        return To;
      }), n.d(t, "SplineCurve", function() {
        return So;
      }), n.d(t, "REVISION", function() {
        return i2;
      }), n.d(t, "MOUSE", function() {
        return a;
      }), n.d(t, "CullFaceNone", function() {
        return o;
      }), n.d(t, "CullFaceBack", function() {
        return s;
      }), n.d(t, "CullFaceFront", function() {
        return c2;
      }), n.d(t, "CullFaceFrontBack", function() {
        return u;
      }), n.d(t, "FrontFaceDirectionCW", function() {
        return l;
      }), n.d(t, "FrontFaceDirectionCCW", function() {
        return h;
      }), n.d(t, "BasicShadowMap", function() {
        return d;
      }), n.d(t, "PCFShadowMap", function() {
        return p;
      }), n.d(t, "PCFSoftShadowMap", function() {
        return f;
      }), n.d(t, "FrontSide", function() {
        return m2;
      }), n.d(t, "BackSide", function() {
        return g;
      }), n.d(t, "DoubleSide", function() {
        return v;
      }), n.d(t, "FlatShading", function() {
        return y;
      }), n.d(t, "SmoothShading", function() {
        return x;
      }), n.d(t, "NoColors", function() {
        return b;
      }), n.d(t, "FaceColors", function() {
        return w;
      }), n.d(t, "VertexColors", function() {
        return _;
      }), n.d(t, "NoBlending", function() {
        return M;
      }), n.d(t, "NormalBlending", function() {
        return E;
      }), n.d(t, "AdditiveBlending", function() {
        return T;
      }), n.d(t, "SubtractiveBlending", function() {
        return S;
      }), n.d(t, "MultiplyBlending", function() {
        return A;
      }), n.d(t, "CustomBlending", function() {
        return L;
      }), n.d(t, "AddEquation", function() {
        return R;
      }), n.d(t, "SubtractEquation", function() {
        return C;
      }), n.d(t, "ReverseSubtractEquation", function() {
        return P;
      }), n.d(t, "MinEquation", function() {
        return O;
      }), n.d(t, "MaxEquation", function() {
        return N;
      }), n.d(t, "ZeroFactor", function() {
        return I;
      }), n.d(t, "OneFactor", function() {
        return D;
      }), n.d(t, "SrcColorFactor", function() {
        return U;
      }), n.d(t, "OneMinusSrcColorFactor", function() {
        return B;
      }), n.d(t, "SrcAlphaFactor", function() {
        return F;
      }), n.d(t, "OneMinusSrcAlphaFactor", function() {
        return G;
      }), n.d(t, "DstAlphaFactor", function() {
        return z;
      }), n.d(t, "OneMinusDstAlphaFactor", function() {
        return H;
      }), n.d(t, "DstColorFactor", function() {
        return k;
      }), n.d(t, "OneMinusDstColorFactor", function() {
        return j;
      }), n.d(t, "SrcAlphaSaturateFactor", function() {
        return V;
      }), n.d(t, "NeverDepth", function() {
        return W;
      }), n.d(t, "AlwaysDepth", function() {
        return X;
      }), n.d(t, "LessDepth", function() {
        return q;
      }), n.d(t, "LessEqualDepth", function() {
        return Y;
      }), n.d(t, "EqualDepth", function() {
        return Z;
      }), n.d(t, "GreaterEqualDepth", function() {
        return J;
      }), n.d(t, "GreaterDepth", function() {
        return K2;
      }), n.d(t, "NotEqualDepth", function() {
        return Q;
      }), n.d(t, "MultiplyOperation", function() {
        return $;
      }), n.d(t, "MixOperation", function() {
        return ee;
      }), n.d(t, "AddOperation", function() {
        return te;
      }), n.d(t, "NoToneMapping", function() {
        return ne;
      }), n.d(t, "LinearToneMapping", function() {
        return re;
      }), n.d(t, "ReinhardToneMapping", function() {
        return ie;
      }), n.d(t, "Uncharted2ToneMapping", function() {
        return ae;
      }), n.d(t, "CineonToneMapping", function() {
        return oe;
      }), n.d(t, "UVMapping", function() {
        return se;
      }), n.d(t, "CubeReflectionMapping", function() {
        return ce;
      }), n.d(t, "CubeRefractionMapping", function() {
        return ue;
      }), n.d(t, "EquirectangularReflectionMapping", function() {
        return le;
      }), n.d(t, "EquirectangularRefractionMapping", function() {
        return he;
      }), n.d(t, "SphericalReflectionMapping", function() {
        return de;
      }), n.d(t, "CubeUVReflectionMapping", function() {
        return pe;
      }), n.d(t, "CubeUVRefractionMapping", function() {
        return fe;
      }), n.d(t, "RepeatWrapping", function() {
        return me;
      }), n.d(t, "ClampToEdgeWrapping", function() {
        return ge;
      }), n.d(t, "MirroredRepeatWrapping", function() {
        return ve;
      }), n.d(t, "NearestFilter", function() {
        return ye;
      }), n.d(t, "NearestMipMapNearestFilter", function() {
        return xe;
      }), n.d(t, "NearestMipMapLinearFilter", function() {
        return be;
      }), n.d(t, "LinearFilter", function() {
        return we;
      }), n.d(t, "LinearMipMapNearestFilter", function() {
        return _e;
      }), n.d(t, "LinearMipMapLinearFilter", function() {
        return Me;
      }), n.d(t, "UnsignedByteType", function() {
        return Ee;
      }), n.d(t, "ByteType", function() {
        return Te;
      }), n.d(t, "ShortType", function() {
        return Se;
      }), n.d(t, "UnsignedShortType", function() {
        return Ae;
      }), n.d(t, "IntType", function() {
        return Le;
      }), n.d(t, "UnsignedIntType", function() {
        return Re;
      }), n.d(t, "FloatType", function() {
        return Ce;
      }), n.d(t, "HalfFloatType", function() {
        return Pe;
      }), n.d(t, "UnsignedShort4444Type", function() {
        return Oe;
      }), n.d(t, "UnsignedShort5551Type", function() {
        return Ne;
      }), n.d(t, "UnsignedShort565Type", function() {
        return Ie;
      }), n.d(t, "UnsignedInt248Type", function() {
        return De;
      }), n.d(t, "AlphaFormat", function() {
        return Ue;
      }), n.d(t, "RGBFormat", function() {
        return Be;
      }), n.d(t, "RGBAFormat", function() {
        return Fe;
      }), n.d(t, "LuminanceFormat", function() {
        return Ge;
      }), n.d(t, "LuminanceAlphaFormat", function() {
        return ze;
      }), n.d(t, "RGBEFormat", function() {
        return He;
      }), n.d(t, "DepthFormat", function() {
        return ke;
      }), n.d(t, "DepthStencilFormat", function() {
        return je;
      }), n.d(t, "RGB_S3TC_DXT1_Format", function() {
        return Ve;
      }), n.d(t, "RGBA_S3TC_DXT1_Format", function() {
        return We;
      }), n.d(t, "RGBA_S3TC_DXT3_Format", function() {
        return Xe;
      }), n.d(t, "RGBA_S3TC_DXT5_Format", function() {
        return qe;
      }), n.d(t, "RGB_PVRTC_4BPPV1_Format", function() {
        return Ye;
      }), n.d(t, "RGB_PVRTC_2BPPV1_Format", function() {
        return Ze;
      }), n.d(t, "RGBA_PVRTC_4BPPV1_Format", function() {
        return Je;
      }), n.d(t, "RGBA_PVRTC_2BPPV1_Format", function() {
        return Ke;
      }), n.d(t, "RGB_ETC1_Format", function() {
        return Qe;
      }), n.d(t, "RGBA_ASTC_4x4_Format", function() {
        return $e;
      }), n.d(t, "RGBA_ASTC_5x4_Format", function() {
        return et;
      }), n.d(t, "RGBA_ASTC_5x5_Format", function() {
        return tt;
      }), n.d(t, "RGBA_ASTC_6x5_Format", function() {
        return nt;
      }), n.d(t, "RGBA_ASTC_6x6_Format", function() {
        return rt;
      }), n.d(t, "RGBA_ASTC_8x5_Format", function() {
        return it;
      }), n.d(t, "RGBA_ASTC_8x6_Format", function() {
        return at;
      }), n.d(t, "RGBA_ASTC_8x8_Format", function() {
        return ot;
      }), n.d(t, "RGBA_ASTC_10x5_Format", function() {
        return st;
      }), n.d(t, "RGBA_ASTC_10x6_Format", function() {
        return ct;
      }), n.d(t, "RGBA_ASTC_10x8_Format", function() {
        return ut;
      }), n.d(t, "RGBA_ASTC_10x10_Format", function() {
        return lt;
      }), n.d(t, "RGBA_ASTC_12x10_Format", function() {
        return ht;
      }), n.d(t, "RGBA_ASTC_12x12_Format", function() {
        return dt;
      }), n.d(t, "LoopOnce", function() {
        return pt;
      }), n.d(t, "LoopRepeat", function() {
        return ft;
      }), n.d(t, "LoopPingPong", function() {
        return mt;
      }), n.d(t, "InterpolateDiscrete", function() {
        return gt;
      }), n.d(t, "InterpolateLinear", function() {
        return vt;
      }), n.d(t, "InterpolateSmooth", function() {
        return yt;
      }), n.d(t, "ZeroCurvatureEnding", function() {
        return xt;
      }), n.d(t, "ZeroSlopeEnding", function() {
        return bt;
      }), n.d(t, "WrapAroundEnding", function() {
        return wt;
      }), n.d(t, "TrianglesDrawMode", function() {
        return _t;
      }), n.d(t, "TriangleStripDrawMode", function() {
        return Mt;
      }), n.d(t, "TriangleFanDrawMode", function() {
        return Et;
      }), n.d(t, "LinearEncoding", function() {
        return Tt;
      }), n.d(t, "sRGBEncoding", function() {
        return St;
      }), n.d(t, "GammaEncoding", function() {
        return At;
      }), n.d(t, "RGBEEncoding", function() {
        return Lt;
      }), n.d(t, "LogLuvEncoding", function() {
        return Rt;
      }), n.d(t, "RGBM7Encoding", function() {
        return Ct;
      }), n.d(t, "RGBM16Encoding", function() {
        return Pt;
      }), n.d(t, "RGBDEncoding", function() {
        return Ot;
      }), n.d(t, "BasicDepthPacking", function() {
        return Nt;
      }), n.d(t, "RGBADepthPacking", function() {
        return It;
      }), n.d(t, "TangentSpaceNormalMap", function() {
        return Dt;
      }), n.d(t, "ObjectSpaceNormalMap", function() {
        return Ut;
      }), n.d(t, "CubeGeometry", function() {
        return On;
      }), n.d(t, "Face4", function() {
        return uc;
      }), n.d(t, "LineStrip", function() {
        return lc;
      }), n.d(t, "LinePieces", function() {
        return hc;
      }), n.d(t, "MeshFaceMaterial", function() {
        return dc;
      }), n.d(t, "MultiMaterial", function() {
        return pc;
      }), n.d(t, "PointCloud", function() {
        return fc;
      }), n.d(t, "Particle", function() {
        return mc;
      }), n.d(t, "ParticleSystem", function() {
        return gc;
      }), n.d(t, "PointCloudMaterial", function() {
        return vc;
      }), n.d(t, "ParticleBasicMaterial", function() {
        return yc;
      }), n.d(t, "ParticleSystemMaterial", function() {
        return xc;
      }), n.d(t, "Vertex", function() {
        return bc;
      }), n.d(t, "DynamicBufferAttribute", function() {
        return wc;
      }), n.d(t, "Int8Attribute", function() {
        return _c;
      }), n.d(t, "Uint8Attribute", function() {
        return Mc;
      }), n.d(t, "Uint8ClampedAttribute", function() {
        return Ec;
      }), n.d(t, "Int16Attribute", function() {
        return Tc;
      }), n.d(t, "Uint16Attribute", function() {
        return Sc;
      }), n.d(t, "Int32Attribute", function() {
        return Ac;
      }), n.d(t, "Uint32Attribute", function() {
        return Lc;
      }), n.d(t, "Float32Attribute", function() {
        return Rc;
      }), n.d(t, "Float64Attribute", function() {
        return Cc;
      }), n.d(t, "ClosedSplineCurve3", function() {
        return Pc;
      }), n.d(t, "SplineCurve3", function() {
        return Oc;
      }), n.d(t, "Spline", function() {
        return Nc;
      }), n.d(t, "AxisHelper", function() {
        return Ic;
      }), n.d(t, "BoundingBoxHelper", function() {
        return Dc;
      }), n.d(t, "EdgesHelper", function() {
        return Uc;
      }), n.d(t, "WireframeHelper", function() {
        return Bc;
      }), n.d(t, "XHRLoader", function() {
        return Fc;
      }), n.d(t, "BinaryTextureLoader", function() {
        return Gc;
      }), n.d(t, "GeometryUtils", function() {
        return zc;
      }), n.d(t, "Projector", function() {
        return Hc;
      }), n.d(t, "CanvasRenderer", function() {
        return kc;
      }), n.d(t, "SceneUtils", function() {
        return jc;
      }), n.d(t, "LensFlare", function() {
        return Vc;
      }), void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52)), void 0 === Number.isInteger && (Number.isInteger = function(e2) {
        return "number" == typeof e2 && isFinite(e2) && Math.floor(e2) === e2;
      }), void 0 === Math.sign && (Math.sign = function(e2) {
        return e2 < 0 ? -1 : e2 > 0 ? 1 : +e2;
      }), "name" in Function.prototype == false && Object.defineProperty(Function.prototype, "name", { get: function() {
        return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
      } }), void 0 === Object.assign && (Object.assign = function(e2) {
        if (void 0 === e2 || null === e2)
          throw new TypeError("Cannot convert undefined or null to object");
        for (var t2 = Object(e2), n2 = 1; n2 < arguments.length; n2++) {
          var r2 = arguments[n2];
          if (void 0 !== r2 && null !== r2)
            for (var i3 in r2)
              Object.prototype.hasOwnProperty.call(r2, i3) && (t2[i3] = r2[i3]);
        }
        return t2;
      }), Object.assign(r.prototype, { addEventListener: function(e2, t2) {
        void 0 === this._listeners && (this._listeners = {});
        var n2 = this._listeners;
        void 0 === n2[e2] && (n2[e2] = []), -1 === n2[e2].indexOf(t2) && n2[e2].push(t2);
      }, hasEventListener: function(e2, t2) {
        if (void 0 === this._listeners)
          return false;
        var n2 = this._listeners;
        return void 0 !== n2[e2] && -1 !== n2[e2].indexOf(t2);
      }, removeEventListener: function(e2, t2) {
        if (void 0 !== this._listeners) {
          var n2 = this._listeners[e2];
          if (void 0 !== n2) {
            var r2 = n2.indexOf(t2);
            -1 !== r2 && n2.splice(r2, 1);
          }
        }
      }, dispatchEvent: function(e2) {
        if (void 0 !== this._listeners) {
          var t2 = this._listeners[e2.type];
          if (void 0 !== t2) {
            e2.target = this;
            for (var n2 = t2.slice(0), r2 = 0, i3 = n2.length; r2 < i3; r2++)
              n2[r2].call(this, e2);
          }
        }
      } });
      var i2 = "95", a = { LEFT: 0, MIDDLE: 1, RIGHT: 2 }, o = 0, s = 1, c2 = 2, u = 3, l = 0, h = 1, d = 0, p = 1, f = 2, m2 = 0, g = 1, v = 2, y = 1, x = 2, b = 0, w = 1, _ = 2, M = 0, E = 1, T = 2, S = 3, A = 4, L = 5, R = 100, C = 101, P = 102, O = 103, N = 104, I = 200, D = 201, U = 202, B = 203, F = 204, G = 205, z = 206, H = 207, k = 208, j = 209, V = 210, W = 0, X = 1, q = 2, Y = 3, Z = 4, J = 5, K2 = 6, Q = 7, $ = 0, ee = 1, te = 2, ne = 0, re = 1, ie = 2, ae = 3, oe = 4, se = 300, ce = 301, ue = 302, le = 303, he = 304, de = 305, pe = 306, fe = 307, me = 1e3, ge = 1001, ve = 1002, ye = 1003, xe = 1004, be = 1005, we = 1006, _e = 1007, Me = 1008, Ee = 1009, Te = 1010, Se = 1011, Ae = 1012, Le = 1013, Re = 1014, Ce = 1015, Pe = 1016, Oe = 1017, Ne = 1018, Ie = 1019, De = 1020, Ue = 1021, Be = 1022, Fe = 1023, Ge = 1024, ze = 1025, He = Fe, ke = 1026, je = 1027, Ve = 33776, We = 33777, Xe = 33778, qe = 33779, Ye = 35840, Ze = 35841, Je = 35842, Ke = 35843, Qe = 36196, $e = 37808, et = 37809, tt = 37810, nt = 37811, rt = 37812, it = 37813, at = 37814, ot = 37815, st = 37816, ct = 37817, ut = 37818, lt = 37819, ht = 37820, dt = 37821, pt = 2200, ft = 2201, mt = 2202, gt = 2300, vt = 2301, yt = 2302, xt = 2400, bt = 2401, wt = 2402, _t = 0, Mt = 1, Et = 2, Tt = 3e3, St = 3001, At = 3007, Lt = 3002, Rt = 3003, Ct = 3004, Pt = 3005, Ot = 3006, Nt = 3200, It = 3201, Dt = 0, Ut = 1, Bt = { DEG2RAD: Math.PI / 180, RAD2DEG: 180 / Math.PI, generateUUID: function() {
        for (var e2 = [], t2 = 0; t2 < 256; t2++)
          e2[t2] = (t2 < 16 ? "0" : "") + t2.toString(16);
        return function() {
          var t3 = 4294967295 * Math.random() | 0, n2 = 4294967295 * Math.random() | 0, r2 = 4294967295 * Math.random() | 0, i3 = 4294967295 * Math.random() | 0;
          return (e2[255 & t3] + e2[t3 >> 8 & 255] + e2[t3 >> 16 & 255] + e2[t3 >> 24 & 255] + "-" + e2[255 & n2] + e2[n2 >> 8 & 255] + "-" + e2[n2 >> 16 & 15 | 64] + e2[n2 >> 24 & 255] + "-" + e2[63 & r2 | 128] + e2[r2 >> 8 & 255] + "-" + e2[r2 >> 16 & 255] + e2[r2 >> 24 & 255] + e2[255 & i3] + e2[i3 >> 8 & 255] + e2[i3 >> 16 & 255] + e2[i3 >> 24 & 255]).toUpperCase();
        };
      }(), clamp: function(e2, t2, n2) {
        return Math.max(t2, Math.min(n2, e2));
      }, euclideanModulo: function(e2, t2) {
        return (e2 % t2 + t2) % t2;
      }, mapLinear: function(e2, t2, n2, r2, i3) {
        return r2 + (e2 - t2) * (i3 - r2) / (n2 - t2);
      }, lerp: function(e2, t2, n2) {
        return (1 - n2) * e2 + n2 * t2;
      }, smoothstep: function(e2, t2, n2) {
        return e2 <= t2 ? 0 : e2 >= n2 ? 1 : (e2 = (e2 - t2) / (n2 - t2)) * e2 * (3 - 2 * e2);
      }, smootherstep: function(e2, t2, n2) {
        return e2 <= t2 ? 0 : e2 >= n2 ? 1 : (e2 = (e2 - t2) / (n2 - t2)) * e2 * e2 * (e2 * (6 * e2 - 15) + 10);
      }, randInt: function(e2, t2) {
        return e2 + Math.floor(Math.random() * (t2 - e2 + 1));
      }, randFloat: function(e2, t2) {
        return e2 + Math.random() * (t2 - e2);
      }, randFloatSpread: function(e2) {
        return e2 * (0.5 - Math.random());
      }, degToRad: function(e2) {
        return e2 * Bt.DEG2RAD;
      }, radToDeg: function(e2) {
        return e2 * Bt.RAD2DEG;
      }, isPowerOfTwo: function(e2) {
        return 0 == (e2 & e2 - 1) && 0 !== e2;
      }, ceilPowerOfTwo: function(e2) {
        return Math.pow(2, Math.ceil(Math.log(e2) / Math.LN2));
      }, floorPowerOfTwo: function(e2) {
        return Math.pow(2, Math.floor(Math.log(e2) / Math.LN2));
      } };
      function Ft(e2, t2) {
        this.x = e2 || 0, this.y = t2 || 0;
      }
      function Gt() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
      }
      function zt(e2, t2, n2, r2) {
        this._x = e2 || 0, this._y = t2 || 0, this._z = n2 || 0, this._w = void 0 !== r2 ? r2 : 1;
      }
      function Ht(e2, t2, n2) {
        this.x = e2 || 0, this.y = t2 || 0, this.z = n2 || 0;
      }
      function kt() {
        this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
      }
      Object.defineProperties(Ft.prototype, { width: { get: function() {
        return this.x;
      }, set: function(e2) {
        this.x = e2;
      } }, height: { get: function() {
        return this.y;
      }, set: function(e2) {
        this.y = e2;
      } } }), Object.assign(Ft.prototype, { isVector2: true, set: function(e2, t2) {
        return this.x = e2, this.y = t2, this;
      }, setScalar: function(e2) {
        return this.x = e2, this.y = e2, this;
      }, setX: function(e2) {
        return this.x = e2, this;
      }, setY: function(e2) {
        return this.y = e2, this;
      }, setComponent: function(e2, t2) {
        switch (e2) {
          case 0:
            this.x = t2;
            break;
          case 1:
            this.y = t2;
            break;
          default:
            throw new Error("index is out of range: " + e2);
        }
        return this;
      }, getComponent: function(e2) {
        switch (e2) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          default:
            throw new Error("index is out of range: " + e2);
        }
      }, clone: function() {
        return new this.constructor(this.x, this.y);
      }, copy: function(e2) {
        return this.x = e2.x, this.y = e2.y, this;
      }, add: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e2, t2)) : (this.x += e2.x, this.y += e2.y, this);
      }, addScalar: function(e2) {
        return this.x += e2, this.y += e2, this;
      }, addVectors: function(e2, t2) {
        return this.x = e2.x + t2.x, this.y = e2.y + t2.y, this;
      }, addScaledVector: function(e2, t2) {
        return this.x += e2.x * t2, this.y += e2.y * t2, this;
      }, sub: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e2, t2)) : (this.x -= e2.x, this.y -= e2.y, this);
      }, subScalar: function(e2) {
        return this.x -= e2, this.y -= e2, this;
      }, subVectors: function(e2, t2) {
        return this.x = e2.x - t2.x, this.y = e2.y - t2.y, this;
      }, multiply: function(e2) {
        return this.x *= e2.x, this.y *= e2.y, this;
      }, multiplyScalar: function(e2) {
        return this.x *= e2, this.y *= e2, this;
      }, divide: function(e2) {
        return this.x /= e2.x, this.y /= e2.y, this;
      }, divideScalar: function(e2) {
        return this.multiplyScalar(1 / e2);
      }, applyMatrix3: function(e2) {
        var t2 = this.x, n2 = this.y, r2 = e2.elements;
        return this.x = r2[0] * t2 + r2[3] * n2 + r2[6], this.y = r2[1] * t2 + r2[4] * n2 + r2[7], this;
      }, min: function(e2) {
        return this.x = Math.min(this.x, e2.x), this.y = Math.min(this.y, e2.y), this;
      }, max: function(e2) {
        return this.x = Math.max(this.x, e2.x), this.y = Math.max(this.y, e2.y), this;
      }, clamp: function(e2, t2) {
        return this.x = Math.max(e2.x, Math.min(t2.x, this.x)), this.y = Math.max(e2.y, Math.min(t2.y, this.y)), this;
      }, clampScalar: function() {
        var e2 = new Ft(), t2 = new Ft();
        return function(n2, r2) {
          return e2.set(n2, n2), t2.set(r2, r2), this.clamp(e2, t2);
        };
      }(), clampLength: function(e2, t2) {
        var n2 = this.length();
        return this.divideScalar(n2 || 1).multiplyScalar(Math.max(e2, Math.min(t2, n2)));
      }, floor: function() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
      }, ceil: function() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
      }, round: function() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
      }, roundToZero: function() {
        return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
      }, negate: function() {
        return this.x = -this.x, this.y = -this.y, this;
      }, dot: function(e2) {
        return this.x * e2.x + this.y * e2.y;
      }, cross: function(e2) {
        return this.x * e2.y - this.y * e2.x;
      }, lengthSq: function() {
        return this.x * this.x + this.y * this.y;
      }, length: function() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
      }, manhattanLength: function() {
        return Math.abs(this.x) + Math.abs(this.y);
      }, normalize: function() {
        return this.divideScalar(this.length() || 1);
      }, angle: function() {
        var e2 = Math.atan2(this.y, this.x);
        return e2 < 0 && (e2 += 2 * Math.PI), e2;
      }, distanceTo: function(e2) {
        return Math.sqrt(this.distanceToSquared(e2));
      }, distanceToSquared: function(e2) {
        var t2 = this.x - e2.x, n2 = this.y - e2.y;
        return t2 * t2 + n2 * n2;
      }, manhattanDistanceTo: function(e2) {
        return Math.abs(this.x - e2.x) + Math.abs(this.y - e2.y);
      }, setLength: function(e2) {
        return this.normalize().multiplyScalar(e2);
      }, lerp: function(e2, t2) {
        return this.x += (e2.x - this.x) * t2, this.y += (e2.y - this.y) * t2, this;
      }, lerpVectors: function(e2, t2, n2) {
        return this.subVectors(t2, e2).multiplyScalar(n2).add(e2);
      }, equals: function(e2) {
        return e2.x === this.x && e2.y === this.y;
      }, fromArray: function(e2, t2) {
        return void 0 === t2 && (t2 = 0), this.x = e2[t2], this.y = e2[t2 + 1], this;
      }, toArray: function(e2, t2) {
        return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this.x, e2[t2 + 1] = this.y, e2;
      }, fromBufferAttribute: function(e2, t2, n2) {
        return void 0 !== n2 && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = e2.getX(t2), this.y = e2.getY(t2), this;
      }, rotateAround: function(e2, t2) {
        var n2 = Math.cos(t2), r2 = Math.sin(t2), i3 = this.x - e2.x, a2 = this.y - e2.y;
        return this.x = i3 * n2 - a2 * r2 + e2.x, this.y = i3 * r2 + a2 * n2 + e2.y, this;
      } }), Object.assign(Gt.prototype, { isMatrix4: true, set: function(e2, t2, n2, r2, i3, a2, o2, s2, c3, u2, l2, h2, d2, p2, f2, m3) {
        var g2 = this.elements;
        return g2[0] = e2, g2[4] = t2, g2[8] = n2, g2[12] = r2, g2[1] = i3, g2[5] = a2, g2[9] = o2, g2[13] = s2, g2[2] = c3, g2[6] = u2, g2[10] = l2, g2[14] = h2, g2[3] = d2, g2[7] = p2, g2[11] = f2, g2[15] = m3, this;
      }, identity: function() {
        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
      }, clone: function() {
        return new Gt().fromArray(this.elements);
      }, copy: function(e2) {
        var t2 = this.elements, n2 = e2.elements;
        return t2[0] = n2[0], t2[1] = n2[1], t2[2] = n2[2], t2[3] = n2[3], t2[4] = n2[4], t2[5] = n2[5], t2[6] = n2[6], t2[7] = n2[7], t2[8] = n2[8], t2[9] = n2[9], t2[10] = n2[10], t2[11] = n2[11], t2[12] = n2[12], t2[13] = n2[13], t2[14] = n2[14], t2[15] = n2[15], this;
      }, copyPosition: function(e2) {
        var t2 = this.elements, n2 = e2.elements;
        return t2[12] = n2[12], t2[13] = n2[13], t2[14] = n2[14], this;
      }, extractBasis: function(e2, t2, n2) {
        return e2.setFromMatrixColumn(this, 0), t2.setFromMatrixColumn(this, 1), n2.setFromMatrixColumn(this, 2), this;
      }, makeBasis: function(e2, t2, n2) {
        return this.set(e2.x, t2.x, n2.x, 0, e2.y, t2.y, n2.y, 0, e2.z, t2.z, n2.z, 0, 0, 0, 0, 1), this;
      }, extractRotation: function() {
        var e2 = new Ht();
        return function(t2) {
          var n2 = this.elements, r2 = t2.elements, i3 = 1 / e2.setFromMatrixColumn(t2, 0).length(), a2 = 1 / e2.setFromMatrixColumn(t2, 1).length(), o2 = 1 / e2.setFromMatrixColumn(t2, 2).length();
          return n2[0] = r2[0] * i3, n2[1] = r2[1] * i3, n2[2] = r2[2] * i3, n2[3] = 0, n2[4] = r2[4] * a2, n2[5] = r2[5] * a2, n2[6] = r2[6] * a2, n2[7] = 0, n2[8] = r2[8] * o2, n2[9] = r2[9] * o2, n2[10] = r2[10] * o2, n2[11] = 0, n2[12] = 0, n2[13] = 0, n2[14] = 0, n2[15] = 1, this;
        };
      }(), makeRotationFromEuler: function(e2) {
        e2 && e2.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
        var t2 = this.elements, n2 = e2.x, r2 = e2.y, i3 = e2.z, a2 = Math.cos(n2), o2 = Math.sin(n2), s2 = Math.cos(r2), c3 = Math.sin(r2), u2 = Math.cos(i3), l2 = Math.sin(i3);
        if ("XYZ" === e2.order) {
          var h2 = a2 * u2, d2 = a2 * l2, p2 = o2 * u2, f2 = o2 * l2;
          t2[0] = s2 * u2, t2[4] = -s2 * l2, t2[8] = c3, t2[1] = d2 + p2 * c3, t2[5] = h2 - f2 * c3, t2[9] = -o2 * s2, t2[2] = f2 - h2 * c3, t2[6] = p2 + d2 * c3, t2[10] = a2 * s2;
        } else if ("YXZ" === e2.order) {
          var m3 = s2 * u2, g2 = s2 * l2, v2 = c3 * u2, y2 = c3 * l2;
          t2[0] = m3 + y2 * o2, t2[4] = v2 * o2 - g2, t2[8] = a2 * c3, t2[1] = a2 * l2, t2[5] = a2 * u2, t2[9] = -o2, t2[2] = g2 * o2 - v2, t2[6] = y2 + m3 * o2, t2[10] = a2 * s2;
        } else if ("ZXY" === e2.order) {
          m3 = s2 * u2, g2 = s2 * l2, v2 = c3 * u2, y2 = c3 * l2;
          t2[0] = m3 - y2 * o2, t2[4] = -a2 * l2, t2[8] = v2 + g2 * o2, t2[1] = g2 + v2 * o2, t2[5] = a2 * u2, t2[9] = y2 - m3 * o2, t2[2] = -a2 * c3, t2[6] = o2, t2[10] = a2 * s2;
        } else if ("ZYX" === e2.order) {
          h2 = a2 * u2, d2 = a2 * l2, p2 = o2 * u2, f2 = o2 * l2;
          t2[0] = s2 * u2, t2[4] = p2 * c3 - d2, t2[8] = h2 * c3 + f2, t2[1] = s2 * l2, t2[5] = f2 * c3 + h2, t2[9] = d2 * c3 - p2, t2[2] = -c3, t2[6] = o2 * s2, t2[10] = a2 * s2;
        } else if ("YZX" === e2.order) {
          var x2 = a2 * s2, b2 = a2 * c3, w2 = o2 * s2, _2 = o2 * c3;
          t2[0] = s2 * u2, t2[4] = _2 - x2 * l2, t2[8] = w2 * l2 + b2, t2[1] = l2, t2[5] = a2 * u2, t2[9] = -o2 * u2, t2[2] = -c3 * u2, t2[6] = b2 * l2 + w2, t2[10] = x2 - _2 * l2;
        } else if ("XZY" === e2.order) {
          x2 = a2 * s2, b2 = a2 * c3, w2 = o2 * s2, _2 = o2 * c3;
          t2[0] = s2 * u2, t2[4] = -l2, t2[8] = c3 * u2, t2[1] = x2 * l2 + _2, t2[5] = a2 * u2, t2[9] = b2 * l2 - w2, t2[2] = w2 * l2 - b2, t2[6] = o2 * u2, t2[10] = _2 * l2 + x2;
        }
        return t2[3] = 0, t2[7] = 0, t2[11] = 0, t2[12] = 0, t2[13] = 0, t2[14] = 0, t2[15] = 1, this;
      }, makeRotationFromQuaternion: function() {
        var e2 = new Ht(0, 0, 0), t2 = new Ht(1, 1, 1);
        return function(n2) {
          return this.compose(e2, n2, t2);
        };
      }(), lookAt: function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new Ht();
        return function(r2, i3, a2) {
          var o2 = this.elements;
          return n2.subVectors(r2, i3), 0 === n2.lengthSq() && (n2.z = 1), n2.normalize(), e2.crossVectors(a2, n2), 0 === e2.lengthSq() && (1 === Math.abs(a2.z) ? n2.x += 1e-4 : n2.z += 1e-4, n2.normalize(), e2.crossVectors(a2, n2)), e2.normalize(), t2.crossVectors(n2, e2), o2[0] = e2.x, o2[4] = t2.x, o2[8] = n2.x, o2[1] = e2.y, o2[5] = t2.y, o2[9] = n2.y, o2[2] = e2.z, o2[6] = t2.z, o2[10] = n2.z, this;
        };
      }(), multiply: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(e2, t2)) : this.multiplyMatrices(this, e2);
      }, premultiply: function(e2) {
        return this.multiplyMatrices(e2, this);
      }, multiplyMatrices: function(e2, t2) {
        var n2 = e2.elements, r2 = t2.elements, i3 = this.elements, a2 = n2[0], o2 = n2[4], s2 = n2[8], c3 = n2[12], u2 = n2[1], l2 = n2[5], h2 = n2[9], d2 = n2[13], p2 = n2[2], f2 = n2[6], m3 = n2[10], g2 = n2[14], v2 = n2[3], y2 = n2[7], x2 = n2[11], b2 = n2[15], w2 = r2[0], _2 = r2[4], M2 = r2[8], E2 = r2[12], T2 = r2[1], S2 = r2[5], A2 = r2[9], L2 = r2[13], R2 = r2[2], C2 = r2[6], P2 = r2[10], O2 = r2[14], N2 = r2[3], I2 = r2[7], D2 = r2[11], U2 = r2[15];
        return i3[0] = a2 * w2 + o2 * T2 + s2 * R2 + c3 * N2, i3[4] = a2 * _2 + o2 * S2 + s2 * C2 + c3 * I2, i3[8] = a2 * M2 + o2 * A2 + s2 * P2 + c3 * D2, i3[12] = a2 * E2 + o2 * L2 + s2 * O2 + c3 * U2, i3[1] = u2 * w2 + l2 * T2 + h2 * R2 + d2 * N2, i3[5] = u2 * _2 + l2 * S2 + h2 * C2 + d2 * I2, i3[9] = u2 * M2 + l2 * A2 + h2 * P2 + d2 * D2, i3[13] = u2 * E2 + l2 * L2 + h2 * O2 + d2 * U2, i3[2] = p2 * w2 + f2 * T2 + m3 * R2 + g2 * N2, i3[6] = p2 * _2 + f2 * S2 + m3 * C2 + g2 * I2, i3[10] = p2 * M2 + f2 * A2 + m3 * P2 + g2 * D2, i3[14] = p2 * E2 + f2 * L2 + m3 * O2 + g2 * U2, i3[3] = v2 * w2 + y2 * T2 + x2 * R2 + b2 * N2, i3[7] = v2 * _2 + y2 * S2 + x2 * C2 + b2 * I2, i3[11] = v2 * M2 + y2 * A2 + x2 * P2 + b2 * D2, i3[15] = v2 * E2 + y2 * L2 + x2 * O2 + b2 * U2, this;
      }, multiplyScalar: function(e2) {
        var t2 = this.elements;
        return t2[0] *= e2, t2[4] *= e2, t2[8] *= e2, t2[12] *= e2, t2[1] *= e2, t2[5] *= e2, t2[9] *= e2, t2[13] *= e2, t2[2] *= e2, t2[6] *= e2, t2[10] *= e2, t2[14] *= e2, t2[3] *= e2, t2[7] *= e2, t2[11] *= e2, t2[15] *= e2, this;
      }, applyToBufferAttribute: function() {
        var e2 = new Ht();
        return function(t2) {
          for (var n2 = 0, r2 = t2.count; n2 < r2; n2++)
            e2.x = t2.getX(n2), e2.y = t2.getY(n2), e2.z = t2.getZ(n2), e2.applyMatrix4(this), t2.setXYZ(n2, e2.x, e2.y, e2.z);
          return t2;
        };
      }(), determinant: function() {
        var e2 = this.elements, t2 = e2[0], n2 = e2[4], r2 = e2[8], i3 = e2[12], a2 = e2[1], o2 = e2[5], s2 = e2[9], c3 = e2[13], u2 = e2[2], l2 = e2[6], h2 = e2[10], d2 = e2[14];
        return e2[3] * (+i3 * s2 * l2 - r2 * c3 * l2 - i3 * o2 * h2 + n2 * c3 * h2 + r2 * o2 * d2 - n2 * s2 * d2) + e2[7] * (+t2 * s2 * d2 - t2 * c3 * h2 + i3 * a2 * h2 - r2 * a2 * d2 + r2 * c3 * u2 - i3 * s2 * u2) + e2[11] * (+t2 * c3 * l2 - t2 * o2 * d2 - i3 * a2 * l2 + n2 * a2 * d2 + i3 * o2 * u2 - n2 * c3 * u2) + e2[15] * (-r2 * o2 * u2 - t2 * s2 * l2 + t2 * o2 * h2 + r2 * a2 * l2 - n2 * a2 * h2 + n2 * s2 * u2);
      }, transpose: function() {
        var e2, t2 = this.elements;
        return e2 = t2[1], t2[1] = t2[4], t2[4] = e2, e2 = t2[2], t2[2] = t2[8], t2[8] = e2, e2 = t2[6], t2[6] = t2[9], t2[9] = e2, e2 = t2[3], t2[3] = t2[12], t2[12] = e2, e2 = t2[7], t2[7] = t2[13], t2[13] = e2, e2 = t2[11], t2[11] = t2[14], t2[14] = e2, this;
      }, setPosition: function(e2) {
        var t2 = this.elements;
        return t2[12] = e2.x, t2[13] = e2.y, t2[14] = e2.z, this;
      }, getInverse: function(e2, t2) {
        var n2 = this.elements, r2 = e2.elements, i3 = r2[0], a2 = r2[1], o2 = r2[2], s2 = r2[3], c3 = r2[4], u2 = r2[5], l2 = r2[6], h2 = r2[7], d2 = r2[8], p2 = r2[9], f2 = r2[10], m3 = r2[11], g2 = r2[12], v2 = r2[13], y2 = r2[14], x2 = r2[15], b2 = p2 * y2 * h2 - v2 * f2 * h2 + v2 * l2 * m3 - u2 * y2 * m3 - p2 * l2 * x2 + u2 * f2 * x2, w2 = g2 * f2 * h2 - d2 * y2 * h2 - g2 * l2 * m3 + c3 * y2 * m3 + d2 * l2 * x2 - c3 * f2 * x2, _2 = d2 * v2 * h2 - g2 * p2 * h2 + g2 * u2 * m3 - c3 * v2 * m3 - d2 * u2 * x2 + c3 * p2 * x2, M2 = g2 * p2 * l2 - d2 * v2 * l2 - g2 * u2 * f2 + c3 * v2 * f2 + d2 * u2 * y2 - c3 * p2 * y2, E2 = i3 * b2 + a2 * w2 + o2 * _2 + s2 * M2;
        if (0 === E2) {
          var T2 = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
          if (true === t2)
            throw new Error(T2);
          return console.warn(T2), this.identity();
        }
        var S2 = 1 / E2;
        return n2[0] = b2 * S2, n2[1] = (v2 * f2 * s2 - p2 * y2 * s2 - v2 * o2 * m3 + a2 * y2 * m3 + p2 * o2 * x2 - a2 * f2 * x2) * S2, n2[2] = (u2 * y2 * s2 - v2 * l2 * s2 + v2 * o2 * h2 - a2 * y2 * h2 - u2 * o2 * x2 + a2 * l2 * x2) * S2, n2[3] = (p2 * l2 * s2 - u2 * f2 * s2 - p2 * o2 * h2 + a2 * f2 * h2 + u2 * o2 * m3 - a2 * l2 * m3) * S2, n2[4] = w2 * S2, n2[5] = (d2 * y2 * s2 - g2 * f2 * s2 + g2 * o2 * m3 - i3 * y2 * m3 - d2 * o2 * x2 + i3 * f2 * x2) * S2, n2[6] = (g2 * l2 * s2 - c3 * y2 * s2 - g2 * o2 * h2 + i3 * y2 * h2 + c3 * o2 * x2 - i3 * l2 * x2) * S2, n2[7] = (c3 * f2 * s2 - d2 * l2 * s2 + d2 * o2 * h2 - i3 * f2 * h2 - c3 * o2 * m3 + i3 * l2 * m3) * S2, n2[8] = _2 * S2, n2[9] = (g2 * p2 * s2 - d2 * v2 * s2 - g2 * a2 * m3 + i3 * v2 * m3 + d2 * a2 * x2 - i3 * p2 * x2) * S2, n2[10] = (c3 * v2 * s2 - g2 * u2 * s2 + g2 * a2 * h2 - i3 * v2 * h2 - c3 * a2 * x2 + i3 * u2 * x2) * S2, n2[11] = (d2 * u2 * s2 - c3 * p2 * s2 - d2 * a2 * h2 + i3 * p2 * h2 + c3 * a2 * m3 - i3 * u2 * m3) * S2, n2[12] = M2 * S2, n2[13] = (d2 * v2 * o2 - g2 * p2 * o2 + g2 * a2 * f2 - i3 * v2 * f2 - d2 * a2 * y2 + i3 * p2 * y2) * S2, n2[14] = (g2 * u2 * o2 - c3 * v2 * o2 - g2 * a2 * l2 + i3 * v2 * l2 + c3 * a2 * y2 - i3 * u2 * y2) * S2, n2[15] = (c3 * p2 * o2 - d2 * u2 * o2 + d2 * a2 * l2 - i3 * p2 * l2 - c3 * a2 * f2 + i3 * u2 * f2) * S2, this;
      }, scale: function(e2) {
        var t2 = this.elements, n2 = e2.x, r2 = e2.y, i3 = e2.z;
        return t2[0] *= n2, t2[4] *= r2, t2[8] *= i3, t2[1] *= n2, t2[5] *= r2, t2[9] *= i3, t2[2] *= n2, t2[6] *= r2, t2[10] *= i3, t2[3] *= n2, t2[7] *= r2, t2[11] *= i3, this;
      }, getMaxScaleOnAxis: function() {
        var e2 = this.elements, t2 = e2[0] * e2[0] + e2[1] * e2[1] + e2[2] * e2[2], n2 = e2[4] * e2[4] + e2[5] * e2[5] + e2[6] * e2[6], r2 = e2[8] * e2[8] + e2[9] * e2[9] + e2[10] * e2[10];
        return Math.sqrt(Math.max(t2, n2, r2));
      }, makeTranslation: function(e2, t2, n2) {
        return this.set(1, 0, 0, e2, 0, 1, 0, t2, 0, 0, 1, n2, 0, 0, 0, 1), this;
      }, makeRotationX: function(e2) {
        var t2 = Math.cos(e2), n2 = Math.sin(e2);
        return this.set(1, 0, 0, 0, 0, t2, -n2, 0, 0, n2, t2, 0, 0, 0, 0, 1), this;
      }, makeRotationY: function(e2) {
        var t2 = Math.cos(e2), n2 = Math.sin(e2);
        return this.set(t2, 0, n2, 0, 0, 1, 0, 0, -n2, 0, t2, 0, 0, 0, 0, 1), this;
      }, makeRotationZ: function(e2) {
        var t2 = Math.cos(e2), n2 = Math.sin(e2);
        return this.set(t2, -n2, 0, 0, n2, t2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
      }, makeRotationAxis: function(e2, t2) {
        var n2 = Math.cos(t2), r2 = Math.sin(t2), i3 = 1 - n2, a2 = e2.x, o2 = e2.y, s2 = e2.z, c3 = i3 * a2, u2 = i3 * o2;
        return this.set(c3 * a2 + n2, c3 * o2 - r2 * s2, c3 * s2 + r2 * o2, 0, c3 * o2 + r2 * s2, u2 * o2 + n2, u2 * s2 - r2 * a2, 0, c3 * s2 - r2 * o2, u2 * s2 + r2 * a2, i3 * s2 * s2 + n2, 0, 0, 0, 0, 1), this;
      }, makeScale: function(e2, t2, n2) {
        return this.set(e2, 0, 0, 0, 0, t2, 0, 0, 0, 0, n2, 0, 0, 0, 0, 1), this;
      }, makeShear: function(e2, t2, n2) {
        return this.set(1, t2, n2, 0, e2, 1, n2, 0, e2, t2, 1, 0, 0, 0, 0, 1), this;
      }, compose: function(e2, t2, n2) {
        var r2 = this.elements, i3 = t2._x, a2 = t2._y, o2 = t2._z, s2 = t2._w, c3 = i3 + i3, u2 = a2 + a2, l2 = o2 + o2, h2 = i3 * c3, d2 = i3 * u2, p2 = i3 * l2, f2 = a2 * u2, m3 = a2 * l2, g2 = o2 * l2, v2 = s2 * c3, y2 = s2 * u2, x2 = s2 * l2, b2 = n2.x, w2 = n2.y, _2 = n2.z;
        return r2[0] = (1 - (f2 + g2)) * b2, r2[1] = (d2 + x2) * b2, r2[2] = (p2 - y2) * b2, r2[3] = 0, r2[4] = (d2 - x2) * w2, r2[5] = (1 - (h2 + g2)) * w2, r2[6] = (m3 + v2) * w2, r2[7] = 0, r2[8] = (p2 + y2) * _2, r2[9] = (m3 - v2) * _2, r2[10] = (1 - (h2 + f2)) * _2, r2[11] = 0, r2[12] = e2.x, r2[13] = e2.y, r2[14] = e2.z, r2[15] = 1, this;
      }, decompose: function() {
        var e2 = new Ht(), t2 = new Gt();
        return function(n2, r2, i3) {
          var a2 = this.elements, o2 = e2.set(a2[0], a2[1], a2[2]).length(), s2 = e2.set(a2[4], a2[5], a2[6]).length(), c3 = e2.set(a2[8], a2[9], a2[10]).length();
          this.determinant() < 0 && (o2 = -o2), n2.x = a2[12], n2.y = a2[13], n2.z = a2[14], t2.copy(this);
          var u2 = 1 / o2, l2 = 1 / s2, h2 = 1 / c3;
          return t2.elements[0] *= u2, t2.elements[1] *= u2, t2.elements[2] *= u2, t2.elements[4] *= l2, t2.elements[5] *= l2, t2.elements[6] *= l2, t2.elements[8] *= h2, t2.elements[9] *= h2, t2.elements[10] *= h2, r2.setFromRotationMatrix(t2), i3.x = o2, i3.y = s2, i3.z = c3, this;
        };
      }(), makePerspective: function(e2, t2, n2, r2, i3, a2) {
        void 0 === a2 && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
        var o2 = this.elements, s2 = 2 * i3 / (t2 - e2), c3 = 2 * i3 / (n2 - r2), u2 = (t2 + e2) / (t2 - e2), l2 = (n2 + r2) / (n2 - r2), h2 = -(a2 + i3) / (a2 - i3), d2 = -2 * a2 * i3 / (a2 - i3);
        return o2[0] = s2, o2[4] = 0, o2[8] = u2, o2[12] = 0, o2[1] = 0, o2[5] = c3, o2[9] = l2, o2[13] = 0, o2[2] = 0, o2[6] = 0, o2[10] = h2, o2[14] = d2, o2[3] = 0, o2[7] = 0, o2[11] = -1, o2[15] = 0, this;
      }, makeOrthographic: function(e2, t2, n2, r2, i3, a2) {
        var o2 = this.elements, s2 = 1 / (t2 - e2), c3 = 1 / (n2 - r2), u2 = 1 / (a2 - i3), l2 = (t2 + e2) * s2, h2 = (n2 + r2) * c3, d2 = (a2 + i3) * u2;
        return o2[0] = 2 * s2, o2[4] = 0, o2[8] = 0, o2[12] = -l2, o2[1] = 0, o2[5] = 2 * c3, o2[9] = 0, o2[13] = -h2, o2[2] = 0, o2[6] = 0, o2[10] = -2 * u2, o2[14] = -d2, o2[3] = 0, o2[7] = 0, o2[11] = 0, o2[15] = 1, this;
      }, equals: function(e2) {
        for (var t2 = this.elements, n2 = e2.elements, r2 = 0; r2 < 16; r2++)
          if (t2[r2] !== n2[r2])
            return false;
        return true;
      }, fromArray: function(e2, t2) {
        void 0 === t2 && (t2 = 0);
        for (var n2 = 0; n2 < 16; n2++)
          this.elements[n2] = e2[n2 + t2];
        return this;
      }, toArray: function(e2, t2) {
        void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0);
        var n2 = this.elements;
        return e2[t2] = n2[0], e2[t2 + 1] = n2[1], e2[t2 + 2] = n2[2], e2[t2 + 3] = n2[3], e2[t2 + 4] = n2[4], e2[t2 + 5] = n2[5], e2[t2 + 6] = n2[6], e2[t2 + 7] = n2[7], e2[t2 + 8] = n2[8], e2[t2 + 9] = n2[9], e2[t2 + 10] = n2[10], e2[t2 + 11] = n2[11], e2[t2 + 12] = n2[12], e2[t2 + 13] = n2[13], e2[t2 + 14] = n2[14], e2[t2 + 15] = n2[15], e2;
      } }), Object.assign(zt, { slerp: function(e2, t2, n2, r2) {
        return n2.copy(e2).slerp(t2, r2);
      }, slerpFlat: function(e2, t2, n2, r2, i3, a2, o2) {
        var s2 = n2[r2 + 0], c3 = n2[r2 + 1], u2 = n2[r2 + 2], l2 = n2[r2 + 3], h2 = i3[a2 + 0], d2 = i3[a2 + 1], p2 = i3[a2 + 2], f2 = i3[a2 + 3];
        if (l2 !== f2 || s2 !== h2 || c3 !== d2 || u2 !== p2) {
          var m3 = 1 - o2, g2 = s2 * h2 + c3 * d2 + u2 * p2 + l2 * f2, v2 = g2 >= 0 ? 1 : -1, y2 = 1 - g2 * g2;
          if (y2 > Number.EPSILON) {
            var x2 = Math.sqrt(y2), b2 = Math.atan2(x2, g2 * v2);
            m3 = Math.sin(m3 * b2) / x2, o2 = Math.sin(o2 * b2) / x2;
          }
          var w2 = o2 * v2;
          if (s2 = s2 * m3 + h2 * w2, c3 = c3 * m3 + d2 * w2, u2 = u2 * m3 + p2 * w2, l2 = l2 * m3 + f2 * w2, m3 === 1 - o2) {
            var _2 = 1 / Math.sqrt(s2 * s2 + c3 * c3 + u2 * u2 + l2 * l2);
            s2 *= _2, c3 *= _2, u2 *= _2, l2 *= _2;
          }
        }
        e2[t2] = s2, e2[t2 + 1] = c3, e2[t2 + 2] = u2, e2[t2 + 3] = l2;
      } }), Object.defineProperties(zt.prototype, { x: { get: function() {
        return this._x;
      }, set: function(e2) {
        this._x = e2, this.onChangeCallback();
      } }, y: { get: function() {
        return this._y;
      }, set: function(e2) {
        this._y = e2, this.onChangeCallback();
      } }, z: { get: function() {
        return this._z;
      }, set: function(e2) {
        this._z = e2, this.onChangeCallback();
      } }, w: { get: function() {
        return this._w;
      }, set: function(e2) {
        this._w = e2, this.onChangeCallback();
      } } }), Object.assign(zt.prototype, { set: function(e2, t2, n2, r2) {
        return this._x = e2, this._y = t2, this._z = n2, this._w = r2, this.onChangeCallback(), this;
      }, clone: function() {
        return new this.constructor(this._x, this._y, this._z, this._w);
      }, copy: function(e2) {
        return this._x = e2.x, this._y = e2.y, this._z = e2.z, this._w = e2.w, this.onChangeCallback(), this;
      }, setFromEuler: function(e2, t2) {
        if (!e2 || !e2.isEuler)
          throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
        var n2 = e2._x, r2 = e2._y, i3 = e2._z, a2 = e2.order, o2 = Math.cos, s2 = Math.sin, c3 = o2(n2 / 2), u2 = o2(r2 / 2), l2 = o2(i3 / 2), h2 = s2(n2 / 2), d2 = s2(r2 / 2), p2 = s2(i3 / 2);
        return "XYZ" === a2 ? (this._x = h2 * u2 * l2 + c3 * d2 * p2, this._y = c3 * d2 * l2 - h2 * u2 * p2, this._z = c3 * u2 * p2 + h2 * d2 * l2, this._w = c3 * u2 * l2 - h2 * d2 * p2) : "YXZ" === a2 ? (this._x = h2 * u2 * l2 + c3 * d2 * p2, this._y = c3 * d2 * l2 - h2 * u2 * p2, this._z = c3 * u2 * p2 - h2 * d2 * l2, this._w = c3 * u2 * l2 + h2 * d2 * p2) : "ZXY" === a2 ? (this._x = h2 * u2 * l2 - c3 * d2 * p2, this._y = c3 * d2 * l2 + h2 * u2 * p2, this._z = c3 * u2 * p2 + h2 * d2 * l2, this._w = c3 * u2 * l2 - h2 * d2 * p2) : "ZYX" === a2 ? (this._x = h2 * u2 * l2 - c3 * d2 * p2, this._y = c3 * d2 * l2 + h2 * u2 * p2, this._z = c3 * u2 * p2 - h2 * d2 * l2, this._w = c3 * u2 * l2 + h2 * d2 * p2) : "YZX" === a2 ? (this._x = h2 * u2 * l2 + c3 * d2 * p2, this._y = c3 * d2 * l2 + h2 * u2 * p2, this._z = c3 * u2 * p2 - h2 * d2 * l2, this._w = c3 * u2 * l2 - h2 * d2 * p2) : "XZY" === a2 && (this._x = h2 * u2 * l2 - c3 * d2 * p2, this._y = c3 * d2 * l2 - h2 * u2 * p2, this._z = c3 * u2 * p2 + h2 * d2 * l2, this._w = c3 * u2 * l2 + h2 * d2 * p2), false !== t2 && this.onChangeCallback(), this;
      }, setFromAxisAngle: function(e2, t2) {
        var n2 = t2 / 2, r2 = Math.sin(n2);
        return this._x = e2.x * r2, this._y = e2.y * r2, this._z = e2.z * r2, this._w = Math.cos(n2), this.onChangeCallback(), this;
      }, setFromRotationMatrix: function(e2) {
        var t2, n2 = e2.elements, r2 = n2[0], i3 = n2[4], a2 = n2[8], o2 = n2[1], s2 = n2[5], c3 = n2[9], u2 = n2[2], l2 = n2[6], h2 = n2[10], d2 = r2 + s2 + h2;
        return d2 > 0 ? (t2 = 0.5 / Math.sqrt(d2 + 1), this._w = 0.25 / t2, this._x = (l2 - c3) * t2, this._y = (a2 - u2) * t2, this._z = (o2 - i3) * t2) : r2 > s2 && r2 > h2 ? (t2 = 2 * Math.sqrt(1 + r2 - s2 - h2), this._w = (l2 - c3) / t2, this._x = 0.25 * t2, this._y = (i3 + o2) / t2, this._z = (a2 + u2) / t2) : s2 > h2 ? (t2 = 2 * Math.sqrt(1 + s2 - r2 - h2), this._w = (a2 - u2) / t2, this._x = (i3 + o2) / t2, this._y = 0.25 * t2, this._z = (c3 + l2) / t2) : (t2 = 2 * Math.sqrt(1 + h2 - r2 - s2), this._w = (o2 - i3) / t2, this._x = (a2 + u2) / t2, this._y = (c3 + l2) / t2, this._z = 0.25 * t2), this.onChangeCallback(), this;
      }, setFromUnitVectors: function() {
        var e2, t2 = new Ht();
        return function(n2, r2) {
          return void 0 === t2 && (t2 = new Ht()), (e2 = n2.dot(r2) + 1) < 1e-6 ? (e2 = 0, Math.abs(n2.x) > Math.abs(n2.z) ? t2.set(-n2.y, n2.x, 0) : t2.set(0, -n2.z, n2.y)) : t2.crossVectors(n2, r2), this._x = t2.x, this._y = t2.y, this._z = t2.z, this._w = e2, this.normalize();
        };
      }(), angleTo: function(e2) {
        return 2 * Math.acos(Math.abs(Bt.clamp(this.dot(e2), -1, 1)));
      }, rotateTowards: function(e2, t2) {
        var n2 = this.angleTo(e2);
        if (0 === n2)
          return this;
        var r2 = Math.min(1, t2 / n2);
        return this.slerp(e2, r2), this;
      }, inverse: function() {
        return this.conjugate();
      }, conjugate: function() {
        return this._x *= -1, this._y *= -1, this._z *= -1, this.onChangeCallback(), this;
      }, dot: function(e2) {
        return this._x * e2._x + this._y * e2._y + this._z * e2._z + this._w * e2._w;
      }, lengthSq: function() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
      }, length: function() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
      }, normalize: function() {
        var e2 = this.length();
        return 0 === e2 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e2 = 1 / e2, this._x = this._x * e2, this._y = this._y * e2, this._z = this._z * e2, this._w = this._w * e2), this.onChangeCallback(), this;
      }, multiply: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(e2, t2)) : this.multiplyQuaternions(this, e2);
      }, premultiply: function(e2) {
        return this.multiplyQuaternions(e2, this);
      }, multiplyQuaternions: function(e2, t2) {
        var n2 = e2._x, r2 = e2._y, i3 = e2._z, a2 = e2._w, o2 = t2._x, s2 = t2._y, c3 = t2._z, u2 = t2._w;
        return this._x = n2 * u2 + a2 * o2 + r2 * c3 - i3 * s2, this._y = r2 * u2 + a2 * s2 + i3 * o2 - n2 * c3, this._z = i3 * u2 + a2 * c3 + n2 * s2 - r2 * o2, this._w = a2 * u2 - n2 * o2 - r2 * s2 - i3 * c3, this.onChangeCallback(), this;
      }, slerp: function(e2, t2) {
        if (0 === t2)
          return this;
        if (1 === t2)
          return this.copy(e2);
        var n2 = this._x, r2 = this._y, i3 = this._z, a2 = this._w, o2 = a2 * e2._w + n2 * e2._x + r2 * e2._y + i3 * e2._z;
        if (o2 < 0 ? (this._w = -e2._w, this._x = -e2._x, this._y = -e2._y, this._z = -e2._z, o2 = -o2) : this.copy(e2), o2 >= 1)
          return this._w = a2, this._x = n2, this._y = r2, this._z = i3, this;
        var s2 = 1 - o2 * o2;
        if (s2 <= Number.EPSILON) {
          var c3 = 1 - t2;
          return this._w = c3 * a2 + t2 * this._w, this._x = c3 * n2 + t2 * this._x, this._y = c3 * r2 + t2 * this._y, this._z = c3 * i3 + t2 * this._z, this.normalize();
        }
        var u2 = Math.sqrt(s2), l2 = Math.atan2(u2, o2), h2 = Math.sin((1 - t2) * l2) / u2, d2 = Math.sin(t2 * l2) / u2;
        return this._w = a2 * h2 + this._w * d2, this._x = n2 * h2 + this._x * d2, this._y = r2 * h2 + this._y * d2, this._z = i3 * h2 + this._z * d2, this.onChangeCallback(), this;
      }, equals: function(e2) {
        return e2._x === this._x && e2._y === this._y && e2._z === this._z && e2._w === this._w;
      }, fromArray: function(e2, t2) {
        return void 0 === t2 && (t2 = 0), this._x = e2[t2], this._y = e2[t2 + 1], this._z = e2[t2 + 2], this._w = e2[t2 + 3], this.onChangeCallback(), this;
      }, toArray: function(e2, t2) {
        return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this._x, e2[t2 + 1] = this._y, e2[t2 + 2] = this._z, e2[t2 + 3] = this._w, e2;
      }, onChange: function(e2) {
        return this.onChangeCallback = e2, this;
      }, onChangeCallback: function() {
      } }), Object.assign(Ht.prototype, { isVector3: true, set: function(e2, t2, n2) {
        return this.x = e2, this.y = t2, this.z = n2, this;
      }, setScalar: function(e2) {
        return this.x = e2, this.y = e2, this.z = e2, this;
      }, setX: function(e2) {
        return this.x = e2, this;
      }, setY: function(e2) {
        return this.y = e2, this;
      }, setZ: function(e2) {
        return this.z = e2, this;
      }, setComponent: function(e2, t2) {
        switch (e2) {
          case 0:
            this.x = t2;
            break;
          case 1:
            this.y = t2;
            break;
          case 2:
            this.z = t2;
            break;
          default:
            throw new Error("index is out of range: " + e2);
        }
        return this;
      }, getComponent: function(e2) {
        switch (e2) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          case 2:
            return this.z;
          default:
            throw new Error("index is out of range: " + e2);
        }
      }, clone: function() {
        return new this.constructor(this.x, this.y, this.z);
      }, copy: function(e2) {
        return this.x = e2.x, this.y = e2.y, this.z = e2.z, this;
      }, add: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e2, t2)) : (this.x += e2.x, this.y += e2.y, this.z += e2.z, this);
      }, addScalar: function(e2) {
        return this.x += e2, this.y += e2, this.z += e2, this;
      }, addVectors: function(e2, t2) {
        return this.x = e2.x + t2.x, this.y = e2.y + t2.y, this.z = e2.z + t2.z, this;
      }, addScaledVector: function(e2, t2) {
        return this.x += e2.x * t2, this.y += e2.y * t2, this.z += e2.z * t2, this;
      }, sub: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e2, t2)) : (this.x -= e2.x, this.y -= e2.y, this.z -= e2.z, this);
      }, subScalar: function(e2) {
        return this.x -= e2, this.y -= e2, this.z -= e2, this;
      }, subVectors: function(e2, t2) {
        return this.x = e2.x - t2.x, this.y = e2.y - t2.y, this.z = e2.z - t2.z, this;
      }, multiply: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(e2, t2)) : (this.x *= e2.x, this.y *= e2.y, this.z *= e2.z, this);
      }, multiplyScalar: function(e2) {
        return this.x *= e2, this.y *= e2, this.z *= e2, this;
      }, multiplyVectors: function(e2, t2) {
        return this.x = e2.x * t2.x, this.y = e2.y * t2.y, this.z = e2.z * t2.z, this;
      }, applyEuler: function() {
        var e2 = new zt();
        return function(t2) {
          return t2 && t2.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(e2.setFromEuler(t2));
        };
      }(), applyAxisAngle: function() {
        var e2 = new zt();
        return function(t2, n2) {
          return this.applyQuaternion(e2.setFromAxisAngle(t2, n2));
        };
      }(), applyMatrix3: function(e2) {
        var t2 = this.x, n2 = this.y, r2 = this.z, i3 = e2.elements;
        return this.x = i3[0] * t2 + i3[3] * n2 + i3[6] * r2, this.y = i3[1] * t2 + i3[4] * n2 + i3[7] * r2, this.z = i3[2] * t2 + i3[5] * n2 + i3[8] * r2, this;
      }, applyMatrix4: function(e2) {
        var t2 = this.x, n2 = this.y, r2 = this.z, i3 = e2.elements, a2 = 1 / (i3[3] * t2 + i3[7] * n2 + i3[11] * r2 + i3[15]);
        return this.x = (i3[0] * t2 + i3[4] * n2 + i3[8] * r2 + i3[12]) * a2, this.y = (i3[1] * t2 + i3[5] * n2 + i3[9] * r2 + i3[13]) * a2, this.z = (i3[2] * t2 + i3[6] * n2 + i3[10] * r2 + i3[14]) * a2, this;
      }, applyQuaternion: function(e2) {
        var t2 = this.x, n2 = this.y, r2 = this.z, i3 = e2.x, a2 = e2.y, o2 = e2.z, s2 = e2.w, c3 = s2 * t2 + a2 * r2 - o2 * n2, u2 = s2 * n2 + o2 * t2 - i3 * r2, l2 = s2 * r2 + i3 * n2 - a2 * t2, h2 = -i3 * t2 - a2 * n2 - o2 * r2;
        return this.x = c3 * s2 + h2 * -i3 + u2 * -o2 - l2 * -a2, this.y = u2 * s2 + h2 * -a2 + l2 * -i3 - c3 * -o2, this.z = l2 * s2 + h2 * -o2 + c3 * -a2 - u2 * -i3, this;
      }, project: function() {
        var e2 = new Gt();
        return function(t2) {
          return e2.multiplyMatrices(t2.projectionMatrix, e2.getInverse(t2.matrixWorld)), this.applyMatrix4(e2);
        };
      }(), unproject: function() {
        var e2 = new Gt();
        return function(t2) {
          return e2.multiplyMatrices(t2.matrixWorld, e2.getInverse(t2.projectionMatrix)), this.applyMatrix4(e2);
        };
      }(), transformDirection: function(e2) {
        var t2 = this.x, n2 = this.y, r2 = this.z, i3 = e2.elements;
        return this.x = i3[0] * t2 + i3[4] * n2 + i3[8] * r2, this.y = i3[1] * t2 + i3[5] * n2 + i3[9] * r2, this.z = i3[2] * t2 + i3[6] * n2 + i3[10] * r2, this.normalize();
      }, divide: function(e2) {
        return this.x /= e2.x, this.y /= e2.y, this.z /= e2.z, this;
      }, divideScalar: function(e2) {
        return this.multiplyScalar(1 / e2);
      }, min: function(e2) {
        return this.x = Math.min(this.x, e2.x), this.y = Math.min(this.y, e2.y), this.z = Math.min(this.z, e2.z), this;
      }, max: function(e2) {
        return this.x = Math.max(this.x, e2.x), this.y = Math.max(this.y, e2.y), this.z = Math.max(this.z, e2.z), this;
      }, clamp: function(e2, t2) {
        return this.x = Math.max(e2.x, Math.min(t2.x, this.x)), this.y = Math.max(e2.y, Math.min(t2.y, this.y)), this.z = Math.max(e2.z, Math.min(t2.z, this.z)), this;
      }, clampScalar: function() {
        var e2 = new Ht(), t2 = new Ht();
        return function(n2, r2) {
          return e2.set(n2, n2, n2), t2.set(r2, r2, r2), this.clamp(e2, t2);
        };
      }(), clampLength: function(e2, t2) {
        var n2 = this.length();
        return this.divideScalar(n2 || 1).multiplyScalar(Math.max(e2, Math.min(t2, n2)));
      }, floor: function() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
      }, ceil: function() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
      }, round: function() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
      }, roundToZero: function() {
        return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
      }, negate: function() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
      }, dot: function(e2) {
        return this.x * e2.x + this.y * e2.y + this.z * e2.z;
      }, lengthSq: function() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      }, length: function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      }, manhattanLength: function() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
      }, normalize: function() {
        return this.divideScalar(this.length() || 1);
      }, setLength: function(e2) {
        return this.normalize().multiplyScalar(e2);
      }, lerp: function(e2, t2) {
        return this.x += (e2.x - this.x) * t2, this.y += (e2.y - this.y) * t2, this.z += (e2.z - this.z) * t2, this;
      }, lerpVectors: function(e2, t2, n2) {
        return this.subVectors(t2, e2).multiplyScalar(n2).add(e2);
      }, cross: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(e2, t2)) : this.crossVectors(this, e2);
      }, crossVectors: function(e2, t2) {
        var n2 = e2.x, r2 = e2.y, i3 = e2.z, a2 = t2.x, o2 = t2.y, s2 = t2.z;
        return this.x = r2 * s2 - i3 * o2, this.y = i3 * a2 - n2 * s2, this.z = n2 * o2 - r2 * a2, this;
      }, projectOnVector: function(e2) {
        var t2 = e2.dot(this) / e2.lengthSq();
        return this.copy(e2).multiplyScalar(t2);
      }, projectOnPlane: function() {
        var e2 = new Ht();
        return function(t2) {
          return e2.copy(this).projectOnVector(t2), this.sub(e2);
        };
      }(), reflect: function() {
        var e2 = new Ht();
        return function(t2) {
          return this.sub(e2.copy(t2).multiplyScalar(2 * this.dot(t2)));
        };
      }(), angleTo: function(e2) {
        var t2 = this.dot(e2) / Math.sqrt(this.lengthSq() * e2.lengthSq());
        return Math.acos(Bt.clamp(t2, -1, 1));
      }, distanceTo: function(e2) {
        return Math.sqrt(this.distanceToSquared(e2));
      }, distanceToSquared: function(e2) {
        var t2 = this.x - e2.x, n2 = this.y - e2.y, r2 = this.z - e2.z;
        return t2 * t2 + n2 * n2 + r2 * r2;
      }, manhattanDistanceTo: function(e2) {
        return Math.abs(this.x - e2.x) + Math.abs(this.y - e2.y) + Math.abs(this.z - e2.z);
      }, setFromSpherical: function(e2) {
        var t2 = Math.sin(e2.phi) * e2.radius;
        return this.x = t2 * Math.sin(e2.theta), this.y = Math.cos(e2.phi) * e2.radius, this.z = t2 * Math.cos(e2.theta), this;
      }, setFromCylindrical: function(e2) {
        return this.x = e2.radius * Math.sin(e2.theta), this.y = e2.y, this.z = e2.radius * Math.cos(e2.theta), this;
      }, setFromMatrixPosition: function(e2) {
        var t2 = e2.elements;
        return this.x = t2[12], this.y = t2[13], this.z = t2[14], this;
      }, setFromMatrixScale: function(e2) {
        var t2 = this.setFromMatrixColumn(e2, 0).length(), n2 = this.setFromMatrixColumn(e2, 1).length(), r2 = this.setFromMatrixColumn(e2, 2).length();
        return this.x = t2, this.y = n2, this.z = r2, this;
      }, setFromMatrixColumn: function(e2, t2) {
        return this.fromArray(e2.elements, 4 * t2);
      }, equals: function(e2) {
        return e2.x === this.x && e2.y === this.y && e2.z === this.z;
      }, fromArray: function(e2, t2) {
        return void 0 === t2 && (t2 = 0), this.x = e2[t2], this.y = e2[t2 + 1], this.z = e2[t2 + 2], this;
      }, toArray: function(e2, t2) {
        return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this.x, e2[t2 + 1] = this.y, e2[t2 + 2] = this.z, e2;
      }, fromBufferAttribute: function(e2, t2, n2) {
        return void 0 !== n2 && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = e2.getX(t2), this.y = e2.getY(t2), this.z = e2.getZ(t2), this;
      } }), Object.assign(kt.prototype, { isMatrix3: true, set: function(e2, t2, n2, r2, i3, a2, o2, s2, c3) {
        var u2 = this.elements;
        return u2[0] = e2, u2[1] = r2, u2[2] = o2, u2[3] = t2, u2[4] = i3, u2[5] = s2, u2[6] = n2, u2[7] = a2, u2[8] = c3, this;
      }, identity: function() {
        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
      }, clone: function() {
        return new this.constructor().fromArray(this.elements);
      }, copy: function(e2) {
        var t2 = this.elements, n2 = e2.elements;
        return t2[0] = n2[0], t2[1] = n2[1], t2[2] = n2[2], t2[3] = n2[3], t2[4] = n2[4], t2[5] = n2[5], t2[6] = n2[6], t2[7] = n2[7], t2[8] = n2[8], this;
      }, setFromMatrix4: function(e2) {
        var t2 = e2.elements;
        return this.set(t2[0], t2[4], t2[8], t2[1], t2[5], t2[9], t2[2], t2[6], t2[10]), this;
      }, applyToBufferAttribute: function() {
        var e2 = new Ht();
        return function(t2) {
          for (var n2 = 0, r2 = t2.count; n2 < r2; n2++)
            e2.x = t2.getX(n2), e2.y = t2.getY(n2), e2.z = t2.getZ(n2), e2.applyMatrix3(this), t2.setXYZ(n2, e2.x, e2.y, e2.z);
          return t2;
        };
      }(), multiply: function(e2) {
        return this.multiplyMatrices(this, e2);
      }, premultiply: function(e2) {
        return this.multiplyMatrices(e2, this);
      }, multiplyMatrices: function(e2, t2) {
        var n2 = e2.elements, r2 = t2.elements, i3 = this.elements, a2 = n2[0], o2 = n2[3], s2 = n2[6], c3 = n2[1], u2 = n2[4], l2 = n2[7], h2 = n2[2], d2 = n2[5], p2 = n2[8], f2 = r2[0], m3 = r2[3], g2 = r2[6], v2 = r2[1], y2 = r2[4], x2 = r2[7], b2 = r2[2], w2 = r2[5], _2 = r2[8];
        return i3[0] = a2 * f2 + o2 * v2 + s2 * b2, i3[3] = a2 * m3 + o2 * y2 + s2 * w2, i3[6] = a2 * g2 + o2 * x2 + s2 * _2, i3[1] = c3 * f2 + u2 * v2 + l2 * b2, i3[4] = c3 * m3 + u2 * y2 + l2 * w2, i3[7] = c3 * g2 + u2 * x2 + l2 * _2, i3[2] = h2 * f2 + d2 * v2 + p2 * b2, i3[5] = h2 * m3 + d2 * y2 + p2 * w2, i3[8] = h2 * g2 + d2 * x2 + p2 * _2, this;
      }, multiplyScalar: function(e2) {
        var t2 = this.elements;
        return t2[0] *= e2, t2[3] *= e2, t2[6] *= e2, t2[1] *= e2, t2[4] *= e2, t2[7] *= e2, t2[2] *= e2, t2[5] *= e2, t2[8] *= e2, this;
      }, determinant: function() {
        var e2 = this.elements, t2 = e2[0], n2 = e2[1], r2 = e2[2], i3 = e2[3], a2 = e2[4], o2 = e2[5], s2 = e2[6], c3 = e2[7], u2 = e2[8];
        return t2 * a2 * u2 - t2 * o2 * c3 - n2 * i3 * u2 + n2 * o2 * s2 + r2 * i3 * c3 - r2 * a2 * s2;
      }, getInverse: function(e2, t2) {
        e2 && e2.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
        var n2 = e2.elements, r2 = this.elements, i3 = n2[0], a2 = n2[1], o2 = n2[2], s2 = n2[3], c3 = n2[4], u2 = n2[5], l2 = n2[6], h2 = n2[7], d2 = n2[8], p2 = d2 * c3 - u2 * h2, f2 = u2 * l2 - d2 * s2, m3 = h2 * s2 - c3 * l2, g2 = i3 * p2 + a2 * f2 + o2 * m3;
        if (0 === g2) {
          var v2 = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
          if (true === t2)
            throw new Error(v2);
          return console.warn(v2), this.identity();
        }
        var y2 = 1 / g2;
        return r2[0] = p2 * y2, r2[1] = (o2 * h2 - d2 * a2) * y2, r2[2] = (u2 * a2 - o2 * c3) * y2, r2[3] = f2 * y2, r2[4] = (d2 * i3 - o2 * l2) * y2, r2[5] = (o2 * s2 - u2 * i3) * y2, r2[6] = m3 * y2, r2[7] = (a2 * l2 - h2 * i3) * y2, r2[8] = (c3 * i3 - a2 * s2) * y2, this;
      }, transpose: function() {
        var e2, t2 = this.elements;
        return e2 = t2[1], t2[1] = t2[3], t2[3] = e2, e2 = t2[2], t2[2] = t2[6], t2[6] = e2, e2 = t2[5], t2[5] = t2[7], t2[7] = e2, this;
      }, getNormalMatrix: function(e2) {
        return this.setFromMatrix4(e2).getInverse(this).transpose();
      }, transposeIntoArray: function(e2) {
        var t2 = this.elements;
        return e2[0] = t2[0], e2[1] = t2[3], e2[2] = t2[6], e2[3] = t2[1], e2[4] = t2[4], e2[5] = t2[7], e2[6] = t2[2], e2[7] = t2[5], e2[8] = t2[8], this;
      }, setUvTransform: function(e2, t2, n2, r2, i3, a2, o2) {
        var s2 = Math.cos(i3), c3 = Math.sin(i3);
        this.set(n2 * s2, n2 * c3, -n2 * (s2 * a2 + c3 * o2) + a2 + e2, -r2 * c3, r2 * s2, -r2 * (-c3 * a2 + s2 * o2) + o2 + t2, 0, 0, 1);
      }, scale: function(e2, t2) {
        var n2 = this.elements;
        return n2[0] *= e2, n2[3] *= e2, n2[6] *= e2, n2[1] *= t2, n2[4] *= t2, n2[7] *= t2, this;
      }, rotate: function(e2) {
        var t2 = Math.cos(e2), n2 = Math.sin(e2), r2 = this.elements, i3 = r2[0], a2 = r2[3], o2 = r2[6], s2 = r2[1], c3 = r2[4], u2 = r2[7];
        return r2[0] = t2 * i3 + n2 * s2, r2[3] = t2 * a2 + n2 * c3, r2[6] = t2 * o2 + n2 * u2, r2[1] = -n2 * i3 + t2 * s2, r2[4] = -n2 * a2 + t2 * c3, r2[7] = -n2 * o2 + t2 * u2, this;
      }, translate: function(e2, t2) {
        var n2 = this.elements;
        return n2[0] += e2 * n2[2], n2[3] += e2 * n2[5], n2[6] += e2 * n2[8], n2[1] += t2 * n2[2], n2[4] += t2 * n2[5], n2[7] += t2 * n2[8], this;
      }, equals: function(e2) {
        for (var t2 = this.elements, n2 = e2.elements, r2 = 0; r2 < 9; r2++)
          if (t2[r2] !== n2[r2])
            return false;
        return true;
      }, fromArray: function(e2, t2) {
        void 0 === t2 && (t2 = 0);
        for (var n2 = 0; n2 < 9; n2++)
          this.elements[n2] = e2[n2 + t2];
        return this;
      }, toArray: function(e2, t2) {
        void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0);
        var n2 = this.elements;
        return e2[t2] = n2[0], e2[t2 + 1] = n2[1], e2[t2 + 2] = n2[2], e2[t2 + 3] = n2[3], e2[t2 + 4] = n2[4], e2[t2 + 5] = n2[5], e2[t2 + 6] = n2[6], e2[t2 + 7] = n2[7], e2[t2 + 8] = n2[8], e2;
      } });
      var jt = { getDataURL: function(e2) {
        var t2;
        if (e2 instanceof HTMLCanvasElement)
          t2 = e2;
        else {
          "undefined" != typeof OffscreenCanvas ? t2 = new OffscreenCanvas(e2.width, e2.height) : ((t2 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")).width = e2.width, t2.height = e2.height);
          var n2 = t2.getContext("2d");
          e2 instanceof ImageData ? n2.putImageData(e2, 0, 0) : n2.drawImage(e2, 0, 0, e2.width, e2.height);
        }
        return t2.width > 2048 || t2.height > 2048 ? t2.toDataURL("image/jpeg", 0.6) : t2.toDataURL("image/png");
      } }, Vt = 0;
      function Wt(e2, t2, n2, r2, i3, a2, o2, s2, c3, u2) {
        Object.defineProperty(this, "id", { value: Vt++ }), this.uuid = Bt.generateUUID(), this.name = "", this.image = void 0 !== e2 ? e2 : Wt.DEFAULT_IMAGE, this.mipmaps = [], this.mapping = void 0 !== t2 ? t2 : Wt.DEFAULT_MAPPING, this.wrapS = void 0 !== n2 ? n2 : ge, this.wrapT = void 0 !== r2 ? r2 : ge, this.magFilter = void 0 !== i3 ? i3 : we, this.minFilter = void 0 !== a2 ? a2 : Me, this.anisotropy = void 0 !== c3 ? c3 : 1, this.format = void 0 !== o2 ? o2 : Fe, this.type = void 0 !== s2 ? s2 : Ee, this.offset = new Ft(0, 0), this.repeat = new Ft(1, 1), this.center = new Ft(0, 0), this.rotation = 0, this.matrixAutoUpdate = true, this.matrix = new kt(), this.generateMipmaps = true, this.premultiplyAlpha = false, this.flipY = true, this.unpackAlignment = 4, this.encoding = void 0 !== u2 ? u2 : Tt, this.version = 0, this.onUpdate = null;
      }
      function Xt(e2, t2, n2, r2) {
        this.x = e2 || 0, this.y = t2 || 0, this.z = n2 || 0, this.w = void 0 !== r2 ? r2 : 1;
      }
      function qt(e2, t2, n2) {
        this.width = e2, this.height = t2, this.scissor = new Xt(0, 0, e2, t2), this.scissorTest = false, this.viewport = new Xt(0, 0, e2, t2), void 0 === (n2 = n2 || {}).minFilter && (n2.minFilter = we), this.texture = new Wt(void 0, void 0, n2.wrapS, n2.wrapT, n2.magFilter, n2.minFilter, n2.format, n2.type, n2.anisotropy, n2.encoding), this.texture.generateMipmaps = void 0 === n2.generateMipmaps || n2.generateMipmaps, this.depthBuffer = void 0 === n2.depthBuffer || n2.depthBuffer, this.stencilBuffer = void 0 === n2.stencilBuffer || n2.stencilBuffer, this.depthTexture = void 0 !== n2.depthTexture ? n2.depthTexture : null;
      }
      function Yt(e2, t2, n2) {
        qt.call(this, e2, t2, n2), this.activeCubeFace = 0, this.activeMipMapLevel = 0;
      }
      function Zt(e2, t2, n2, r2, i3, a2, o2, s2, c3, u2, l2, h2) {
        Wt.call(this, null, a2, o2, s2, c3, u2, r2, i3, l2, h2), this.image = { data: e2, width: t2, height: n2 }, this.magFilter = void 0 !== c3 ? c3 : ye, this.minFilter = void 0 !== u2 ? u2 : ye, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
      }
      function Jt(e2, t2) {
        this.min = void 0 !== e2 ? e2 : new Ht(1 / 0, 1 / 0, 1 / 0), this.max = void 0 !== t2 ? t2 : new Ht(-1 / 0, -1 / 0, -1 / 0);
      }
      function Kt(e2, t2) {
        this.center = void 0 !== e2 ? e2 : new Ht(), this.radius = void 0 !== t2 ? t2 : 0;
      }
      function Qt(e2, t2) {
        this.normal = void 0 !== e2 ? e2 : new Ht(1, 0, 0), this.constant = void 0 !== t2 ? t2 : 0;
      }
      function $t(e2, t2, n2, r2, i3, a2) {
        this.planes = [void 0 !== e2 ? e2 : new Qt(), void 0 !== t2 ? t2 : new Qt(), void 0 !== n2 ? n2 : new Qt(), void 0 !== r2 ? r2 : new Qt(), void 0 !== i3 ? i3 : new Qt(), void 0 !== a2 ? a2 : new Qt()];
      }
      Wt.DEFAULT_IMAGE = void 0, Wt.DEFAULT_MAPPING = se, Wt.prototype = Object.assign(Object.create(r.prototype), { constructor: Wt, isTexture: true, updateMatrix: function() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.name = e2.name, this.image = e2.image, this.mipmaps = e2.mipmaps.slice(0), this.mapping = e2.mapping, this.wrapS = e2.wrapS, this.wrapT = e2.wrapT, this.magFilter = e2.magFilter, this.minFilter = e2.minFilter, this.anisotropy = e2.anisotropy, this.format = e2.format, this.type = e2.type, this.offset.copy(e2.offset), this.repeat.copy(e2.repeat), this.center.copy(e2.center), this.rotation = e2.rotation, this.matrixAutoUpdate = e2.matrixAutoUpdate, this.matrix.copy(e2.matrix), this.generateMipmaps = e2.generateMipmaps, this.premultiplyAlpha = e2.premultiplyAlpha, this.flipY = e2.flipY, this.unpackAlignment = e2.unpackAlignment, this.encoding = e2.encoding, this;
      }, toJSON: function(e2) {
        var t2 = void 0 === e2 || "string" == typeof e2;
        if (!t2 && void 0 !== e2.textures[this.uuid])
          return e2.textures[this.uuid];
        var n2 = { metadata: { version: 4.5, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, mapping: this.mapping, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], center: [this.center.x, this.center.y], rotation: this.rotation, wrap: [this.wrapS, this.wrapT], format: this.format, minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY };
        if (void 0 !== this.image) {
          var r2 = this.image;
          if (void 0 === r2.uuid && (r2.uuid = Bt.generateUUID()), !t2 && void 0 === e2.images[r2.uuid]) {
            var i3;
            if (Array.isArray(r2)) {
              i3 = [];
              for (var a2 = 0, o2 = r2.length; a2 < o2; a2++)
                i3.push(jt.getDataURL(r2[a2]));
            } else
              i3 = jt.getDataURL(r2);
            e2.images[r2.uuid] = { uuid: r2.uuid, url: i3 };
          }
          n2.image = r2.uuid;
        }
        return t2 || (e2.textures[this.uuid] = n2), n2;
      }, dispose: function() {
        this.dispatchEvent({ type: "dispose" });
      }, transformUv: function(e2) {
        if (this.mapping === se) {
          if (e2.applyMatrix3(this.matrix), e2.x < 0 || e2.x > 1)
            switch (this.wrapS) {
              case me:
                e2.x = e2.x - Math.floor(e2.x);
                break;
              case ge:
                e2.x = e2.x < 0 ? 0 : 1;
                break;
              case ve:
                1 === Math.abs(Math.floor(e2.x) % 2) ? e2.x = Math.ceil(e2.x) - e2.x : e2.x = e2.x - Math.floor(e2.x);
            }
          if (e2.y < 0 || e2.y > 1)
            switch (this.wrapT) {
              case me:
                e2.y = e2.y - Math.floor(e2.y);
                break;
              case ge:
                e2.y = e2.y < 0 ? 0 : 1;
                break;
              case ve:
                1 === Math.abs(Math.floor(e2.y) % 2) ? e2.y = Math.ceil(e2.y) - e2.y : e2.y = e2.y - Math.floor(e2.y);
            }
          this.flipY && (e2.y = 1 - e2.y);
        }
      } }), Object.defineProperty(Wt.prototype, "needsUpdate", { set: function(e2) {
        true === e2 && this.version++;
      } }), Object.assign(Xt.prototype, { isVector4: true, set: function(e2, t2, n2, r2) {
        return this.x = e2, this.y = t2, this.z = n2, this.w = r2, this;
      }, setScalar: function(e2) {
        return this.x = e2, this.y = e2, this.z = e2, this.w = e2, this;
      }, setX: function(e2) {
        return this.x = e2, this;
      }, setY: function(e2) {
        return this.y = e2, this;
      }, setZ: function(e2) {
        return this.z = e2, this;
      }, setW: function(e2) {
        return this.w = e2, this;
      }, setComponent: function(e2, t2) {
        switch (e2) {
          case 0:
            this.x = t2;
            break;
          case 1:
            this.y = t2;
            break;
          case 2:
            this.z = t2;
            break;
          case 3:
            this.w = t2;
            break;
          default:
            throw new Error("index is out of range: " + e2);
        }
        return this;
      }, getComponent: function(e2) {
        switch (e2) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          case 2:
            return this.z;
          case 3:
            return this.w;
          default:
            throw new Error("index is out of range: " + e2);
        }
      }, clone: function() {
        return new this.constructor(this.x, this.y, this.z, this.w);
      }, copy: function(e2) {
        return this.x = e2.x, this.y = e2.y, this.z = e2.z, this.w = void 0 !== e2.w ? e2.w : 1, this;
      }, add: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e2, t2)) : (this.x += e2.x, this.y += e2.y, this.z += e2.z, this.w += e2.w, this);
      }, addScalar: function(e2) {
        return this.x += e2, this.y += e2, this.z += e2, this.w += e2, this;
      }, addVectors: function(e2, t2) {
        return this.x = e2.x + t2.x, this.y = e2.y + t2.y, this.z = e2.z + t2.z, this.w = e2.w + t2.w, this;
      }, addScaledVector: function(e2, t2) {
        return this.x += e2.x * t2, this.y += e2.y * t2, this.z += e2.z * t2, this.w += e2.w * t2, this;
      }, sub: function(e2, t2) {
        return void 0 !== t2 ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e2, t2)) : (this.x -= e2.x, this.y -= e2.y, this.z -= e2.z, this.w -= e2.w, this);
      }, subScalar: function(e2) {
        return this.x -= e2, this.y -= e2, this.z -= e2, this.w -= e2, this;
      }, subVectors: function(e2, t2) {
        return this.x = e2.x - t2.x, this.y = e2.y - t2.y, this.z = e2.z - t2.z, this.w = e2.w - t2.w, this;
      }, multiplyScalar: function(e2) {
        return this.x *= e2, this.y *= e2, this.z *= e2, this.w *= e2, this;
      }, applyMatrix4: function(e2) {
        var t2 = this.x, n2 = this.y, r2 = this.z, i3 = this.w, a2 = e2.elements;
        return this.x = a2[0] * t2 + a2[4] * n2 + a2[8] * r2 + a2[12] * i3, this.y = a2[1] * t2 + a2[5] * n2 + a2[9] * r2 + a2[13] * i3, this.z = a2[2] * t2 + a2[6] * n2 + a2[10] * r2 + a2[14] * i3, this.w = a2[3] * t2 + a2[7] * n2 + a2[11] * r2 + a2[15] * i3, this;
      }, divideScalar: function(e2) {
        return this.multiplyScalar(1 / e2);
      }, setAxisAngleFromQuaternion: function(e2) {
        this.w = 2 * Math.acos(e2.w);
        var t2 = Math.sqrt(1 - e2.w * e2.w);
        return t2 < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e2.x / t2, this.y = e2.y / t2, this.z = e2.z / t2), this;
      }, setAxisAngleFromRotationMatrix: function(e2) {
        var t2, n2, r2, i3, a2 = e2.elements, o2 = a2[0], s2 = a2[4], c3 = a2[8], u2 = a2[1], l2 = a2[5], h2 = a2[9], d2 = a2[2], p2 = a2[6], f2 = a2[10];
        if (Math.abs(s2 - u2) < 0.01 && Math.abs(c3 - d2) < 0.01 && Math.abs(h2 - p2) < 0.01) {
          if (Math.abs(s2 + u2) < 0.1 && Math.abs(c3 + d2) < 0.1 && Math.abs(h2 + p2) < 0.1 && Math.abs(o2 + l2 + f2 - 3) < 0.1)
            return this.set(1, 0, 0, 0), this;
          t2 = Math.PI;
          var m3 = (o2 + 1) / 2, g2 = (l2 + 1) / 2, v2 = (f2 + 1) / 2, y2 = (s2 + u2) / 4, x2 = (c3 + d2) / 4, b2 = (h2 + p2) / 4;
          return m3 > g2 && m3 > v2 ? m3 < 0.01 ? (n2 = 0, r2 = 0.707106781, i3 = 0.707106781) : (r2 = y2 / (n2 = Math.sqrt(m3)), i3 = x2 / n2) : g2 > v2 ? g2 < 0.01 ? (n2 = 0.707106781, r2 = 0, i3 = 0.707106781) : (n2 = y2 / (r2 = Math.sqrt(g2)), i3 = b2 / r2) : v2 < 0.01 ? (n2 = 0.707106781, r2 = 0.707106781, i3 = 0) : (n2 = x2 / (i3 = Math.sqrt(v2)), r2 = b2 / i3), this.set(n2, r2, i3, t2), this;
        }
        var w2 = Math.sqrt((p2 - h2) * (p2 - h2) + (c3 - d2) * (c3 - d2) + (u2 - s2) * (u2 - s2));
        return Math.abs(w2) < 1e-3 && (w2 = 1), this.x = (p2 - h2) / w2, this.y = (c3 - d2) / w2, this.z = (u2 - s2) / w2, this.w = Math.acos((o2 + l2 + f2 - 1) / 2), this;
      }, min: function(e2) {
        return this.x = Math.min(this.x, e2.x), this.y = Math.min(this.y, e2.y), this.z = Math.min(this.z, e2.z), this.w = Math.min(this.w, e2.w), this;
      }, max: function(e2) {
        return this.x = Math.max(this.x, e2.x), this.y = Math.max(this.y, e2.y), this.z = Math.max(this.z, e2.z), this.w = Math.max(this.w, e2.w), this;
      }, clamp: function(e2, t2) {
        return this.x = Math.max(e2.x, Math.min(t2.x, this.x)), this.y = Math.max(e2.y, Math.min(t2.y, this.y)), this.z = Math.max(e2.z, Math.min(t2.z, this.z)), this.w = Math.max(e2.w, Math.min(t2.w, this.w)), this;
      }, clampScalar: function() {
        var e2, t2;
        return function(n2, r2) {
          return void 0 === e2 && (e2 = new Xt(), t2 = new Xt()), e2.set(n2, n2, n2, n2), t2.set(r2, r2, r2, r2), this.clamp(e2, t2);
        };
      }(), clampLength: function(e2, t2) {
        var n2 = this.length();
        return this.divideScalar(n2 || 1).multiplyScalar(Math.max(e2, Math.min(t2, n2)));
      }, floor: function() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
      }, ceil: function() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
      }, round: function() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
      }, roundToZero: function() {
        return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this;
      }, negate: function() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
      }, dot: function(e2) {
        return this.x * e2.x + this.y * e2.y + this.z * e2.z + this.w * e2.w;
      }, lengthSq: function() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
      }, length: function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      }, manhattanLength: function() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
      }, normalize: function() {
        return this.divideScalar(this.length() || 1);
      }, setLength: function(e2) {
        return this.normalize().multiplyScalar(e2);
      }, lerp: function(e2, t2) {
        return this.x += (e2.x - this.x) * t2, this.y += (e2.y - this.y) * t2, this.z += (e2.z - this.z) * t2, this.w += (e2.w - this.w) * t2, this;
      }, lerpVectors: function(e2, t2, n2) {
        return this.subVectors(t2, e2).multiplyScalar(n2).add(e2);
      }, equals: function(e2) {
        return e2.x === this.x && e2.y === this.y && e2.z === this.z && e2.w === this.w;
      }, fromArray: function(e2, t2) {
        return void 0 === t2 && (t2 = 0), this.x = e2[t2], this.y = e2[t2 + 1], this.z = e2[t2 + 2], this.w = e2[t2 + 3], this;
      }, toArray: function(e2, t2) {
        return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this.x, e2[t2 + 1] = this.y, e2[t2 + 2] = this.z, e2[t2 + 3] = this.w, e2;
      }, fromBufferAttribute: function(e2, t2, n2) {
        return void 0 !== n2 && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), this.x = e2.getX(t2), this.y = e2.getY(t2), this.z = e2.getZ(t2), this.w = e2.getW(t2), this;
      } }), qt.prototype = Object.assign(Object.create(r.prototype), { constructor: qt, isWebGLRenderTarget: true, setSize: function(e2, t2) {
        this.width === e2 && this.height === t2 || (this.width = e2, this.height = t2, this.dispose()), this.viewport.set(0, 0, e2, t2), this.scissor.set(0, 0, e2, t2);
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.width = e2.width, this.height = e2.height, this.viewport.copy(e2.viewport), this.texture = e2.texture.clone(), this.depthBuffer = e2.depthBuffer, this.stencilBuffer = e2.stencilBuffer, this.depthTexture = e2.depthTexture, this;
      }, dispose: function() {
        this.dispatchEvent({ type: "dispose" });
      } }), Yt.prototype = Object.create(qt.prototype), Yt.prototype.constructor = Yt, Yt.prototype.isWebGLRenderTargetCube = true, Zt.prototype = Object.create(Wt.prototype), Zt.prototype.constructor = Zt, Zt.prototype.isDataTexture = true, Object.assign(Jt.prototype, { isBox3: true, set: function(e2, t2) {
        return this.min.copy(e2), this.max.copy(t2), this;
      }, setFromArray: function(e2) {
        for (var t2 = 1 / 0, n2 = 1 / 0, r2 = 1 / 0, i3 = -1 / 0, a2 = -1 / 0, o2 = -1 / 0, s2 = 0, c3 = e2.length; s2 < c3; s2 += 3) {
          var u2 = e2[s2], l2 = e2[s2 + 1], h2 = e2[s2 + 2];
          u2 < t2 && (t2 = u2), l2 < n2 && (n2 = l2), h2 < r2 && (r2 = h2), u2 > i3 && (i3 = u2), l2 > a2 && (a2 = l2), h2 > o2 && (o2 = h2);
        }
        return this.min.set(t2, n2, r2), this.max.set(i3, a2, o2), this;
      }, setFromBufferAttribute: function(e2) {
        for (var t2 = 1 / 0, n2 = 1 / 0, r2 = 1 / 0, i3 = -1 / 0, a2 = -1 / 0, o2 = -1 / 0, s2 = 0, c3 = e2.count; s2 < c3; s2++) {
          var u2 = e2.getX(s2), l2 = e2.getY(s2), h2 = e2.getZ(s2);
          u2 < t2 && (t2 = u2), l2 < n2 && (n2 = l2), h2 < r2 && (r2 = h2), u2 > i3 && (i3 = u2), l2 > a2 && (a2 = l2), h2 > o2 && (o2 = h2);
        }
        return this.min.set(t2, n2, r2), this.max.set(i3, a2, o2), this;
      }, setFromPoints: function(e2) {
        this.makeEmpty();
        for (var t2 = 0, n2 = e2.length; t2 < n2; t2++)
          this.expandByPoint(e2[t2]);
        return this;
      }, setFromCenterAndSize: function() {
        var e2 = new Ht();
        return function(t2, n2) {
          var r2 = e2.copy(n2).multiplyScalar(0.5);
          return this.min.copy(t2).sub(r2), this.max.copy(t2).add(r2), this;
        };
      }(), setFromObject: function(e2) {
        return this.makeEmpty(), this.expandByObject(e2);
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.min.copy(e2.min), this.max.copy(e2.max), this;
      }, makeEmpty: function() {
        return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
      }, isEmpty: function() {
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
      }, getCenter: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Box3: .getCenter() target is now required"), e2 = new Ht()), this.isEmpty() ? e2.set(0, 0, 0) : e2.addVectors(this.min, this.max).multiplyScalar(0.5);
      }, getSize: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Box3: .getSize() target is now required"), e2 = new Ht()), this.isEmpty() ? e2.set(0, 0, 0) : e2.subVectors(this.max, this.min);
      }, expandByPoint: function(e2) {
        return this.min.min(e2), this.max.max(e2), this;
      }, expandByVector: function(e2) {
        return this.min.sub(e2), this.max.add(e2), this;
      }, expandByScalar: function(e2) {
        return this.min.addScalar(-e2), this.max.addScalar(e2), this;
      }, expandByObject: function() {
        var e2, t2, n2, r2 = new Ht();
        function i3(i4) {
          var a2 = i4.geometry;
          if (void 0 !== a2) {
            if (a2.isGeometry) {
              var o2 = a2.vertices;
              for (t2 = 0, n2 = o2.length; t2 < n2; t2++)
                r2.copy(o2[t2]), r2.applyMatrix4(i4.matrixWorld), e2.expandByPoint(r2);
            } else if (a2.isBufferGeometry) {
              var s2 = a2.attributes.position;
              if (void 0 !== s2)
                for (t2 = 0, n2 = s2.count; t2 < n2; t2++)
                  r2.fromBufferAttribute(s2, t2).applyMatrix4(i4.matrixWorld), e2.expandByPoint(r2);
            }
          }
        }
        return function(t3) {
          return e2 = this, t3.updateMatrixWorld(true), t3.traverse(i3), this;
        };
      }(), containsPoint: function(e2) {
        return !(e2.x < this.min.x || e2.x > this.max.x || e2.y < this.min.y || e2.y > this.max.y || e2.z < this.min.z || e2.z > this.max.z);
      }, containsBox: function(e2) {
        return this.min.x <= e2.min.x && e2.max.x <= this.max.x && this.min.y <= e2.min.y && e2.max.y <= this.max.y && this.min.z <= e2.min.z && e2.max.z <= this.max.z;
      }, getParameter: function(e2, t2) {
        return void 0 === t2 && (console.warn("THREE.Box3: .getParameter() target is now required"), t2 = new Ht()), t2.set((e2.x - this.min.x) / (this.max.x - this.min.x), (e2.y - this.min.y) / (this.max.y - this.min.y), (e2.z - this.min.z) / (this.max.z - this.min.z));
      }, intersectsBox: function(e2) {
        return !(e2.max.x < this.min.x || e2.min.x > this.max.x || e2.max.y < this.min.y || e2.min.y > this.max.y || e2.max.z < this.min.z || e2.min.z > this.max.z);
      }, intersectsSphere: function() {
        var e2 = new Ht();
        return function(t2) {
          return this.clampPoint(t2.center, e2), e2.distanceToSquared(t2.center) <= t2.radius * t2.radius;
        };
      }(), intersectsPlane: function(e2) {
        var t2, n2;
        return e2.normal.x > 0 ? (t2 = e2.normal.x * this.min.x, n2 = e2.normal.x * this.max.x) : (t2 = e2.normal.x * this.max.x, n2 = e2.normal.x * this.min.x), e2.normal.y > 0 ? (t2 += e2.normal.y * this.min.y, n2 += e2.normal.y * this.max.y) : (t2 += e2.normal.y * this.max.y, n2 += e2.normal.y * this.min.y), e2.normal.z > 0 ? (t2 += e2.normal.z * this.min.z, n2 += e2.normal.z * this.max.z) : (t2 += e2.normal.z * this.max.z, n2 += e2.normal.z * this.min.z), t2 <= e2.constant && n2 >= e2.constant;
      }, intersectsTriangle: function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new Ht(), r2 = new Ht(), i3 = new Ht(), a2 = new Ht(), o2 = new Ht(), s2 = new Ht(), c3 = new Ht(), u2 = new Ht();
        function l2(r3) {
          var i4, a3;
          for (i4 = 0, a3 = r3.length - 3; i4 <= a3; i4 += 3) {
            o2.fromArray(r3, i4);
            var s3 = c3.x * Math.abs(o2.x) + c3.y * Math.abs(o2.y) + c3.z * Math.abs(o2.z), u3 = e2.dot(o2), l3 = t2.dot(o2), h2 = n2.dot(o2);
            if (Math.max(-Math.max(u3, l3, h2), Math.min(u3, l3, h2)) > s3)
              return false;
          }
          return true;
        }
        return function(o3) {
          if (this.isEmpty())
            return false;
          this.getCenter(s2), c3.subVectors(this.max, s2), e2.subVectors(o3.a, s2), t2.subVectors(o3.b, s2), n2.subVectors(o3.c, s2), r2.subVectors(t2, e2), i3.subVectors(n2, t2), a2.subVectors(e2, n2);
          var h2 = [0, -r2.z, r2.y, 0, -i3.z, i3.y, 0, -a2.z, a2.y, r2.z, 0, -r2.x, i3.z, 0, -i3.x, a2.z, 0, -a2.x, -r2.y, r2.x, 0, -i3.y, i3.x, 0, -a2.y, a2.x, 0];
          return !!l2(h2) && (!!l2(h2 = [1, 0, 0, 0, 1, 0, 0, 0, 1]) && (u2.crossVectors(r2, i3), l2(h2 = [u2.x, u2.y, u2.z])));
        };
      }(), clampPoint: function(e2, t2) {
        return void 0 === t2 && (console.warn("THREE.Box3: .clampPoint() target is now required"), t2 = new Ht()), t2.copy(e2).clamp(this.min, this.max);
      }, distanceToPoint: function() {
        var e2 = new Ht();
        return function(t2) {
          return e2.copy(t2).clamp(this.min, this.max).sub(t2).length();
        };
      }(), getBoundingSphere: function() {
        var e2 = new Ht();
        return function(t2) {
          return void 0 === t2 && (console.warn("THREE.Box3: .getBoundingSphere() target is now required"), t2 = new Kt()), this.getCenter(t2.center), t2.radius = 0.5 * this.getSize(e2).length(), t2;
        };
      }(), intersect: function(e2) {
        return this.min.max(e2.min), this.max.min(e2.max), this.isEmpty() && this.makeEmpty(), this;
      }, union: function(e2) {
        return this.min.min(e2.min), this.max.max(e2.max), this;
      }, applyMatrix4: function(e2) {
        if (this.isEmpty())
          return this;
        var t2 = e2.elements, n2 = t2[0] * this.min.x, r2 = t2[1] * this.min.x, i3 = t2[2] * this.min.x, a2 = t2[0] * this.max.x, o2 = t2[1] * this.max.x, s2 = t2[2] * this.max.x, c3 = t2[4] * this.min.y, u2 = t2[5] * this.min.y, l2 = t2[6] * this.min.y, h2 = t2[4] * this.max.y, d2 = t2[5] * this.max.y, p2 = t2[6] * this.max.y, f2 = t2[8] * this.min.z, m3 = t2[9] * this.min.z, g2 = t2[10] * this.min.z, v2 = t2[8] * this.max.z, y2 = t2[9] * this.max.z, x2 = t2[10] * this.max.z;
        return this.min.x = Math.min(n2, a2) + Math.min(c3, h2) + Math.min(f2, v2) + t2[12], this.min.y = Math.min(r2, o2) + Math.min(u2, d2) + Math.min(m3, y2) + t2[13], this.min.z = Math.min(i3, s2) + Math.min(l2, p2) + Math.min(g2, x2) + t2[14], this.max.x = Math.max(n2, a2) + Math.max(c3, h2) + Math.max(f2, v2) + t2[12], this.max.y = Math.max(r2, o2) + Math.max(u2, d2) + Math.max(m3, y2) + t2[13], this.max.z = Math.max(i3, s2) + Math.max(l2, p2) + Math.max(g2, x2) + t2[14], this;
      }, translate: function(e2) {
        return this.min.add(e2), this.max.add(e2), this;
      }, equals: function(e2) {
        return e2.min.equals(this.min) && e2.max.equals(this.max);
      } }), Object.assign(Kt.prototype, { set: function(e2, t2) {
        return this.center.copy(e2), this.radius = t2, this;
      }, setFromPoints: function() {
        var e2 = new Jt();
        return function(t2, n2) {
          var r2 = this.center;
          void 0 !== n2 ? r2.copy(n2) : e2.setFromPoints(t2).getCenter(r2);
          for (var i3 = 0, a2 = 0, o2 = t2.length; a2 < o2; a2++)
            i3 = Math.max(i3, r2.distanceToSquared(t2[a2]));
          return this.radius = Math.sqrt(i3), this;
        };
      }(), clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.center.copy(e2.center), this.radius = e2.radius, this;
      }, empty: function() {
        return this.radius <= 0;
      }, containsPoint: function(e2) {
        return e2.distanceToSquared(this.center) <= this.radius * this.radius;
      }, distanceToPoint: function(e2) {
        return e2.distanceTo(this.center) - this.radius;
      }, intersectsSphere: function(e2) {
        var t2 = this.radius + e2.radius;
        return e2.center.distanceToSquared(this.center) <= t2 * t2;
      }, intersectsBox: function(e2) {
        return e2.intersectsSphere(this);
      }, intersectsPlane: function(e2) {
        return Math.abs(e2.distanceToPoint(this.center)) <= this.radius;
      }, clampPoint: function(e2, t2) {
        var n2 = this.center.distanceToSquared(e2);
        return void 0 === t2 && (console.warn("THREE.Sphere: .clampPoint() target is now required"), t2 = new Ht()), t2.copy(e2), n2 > this.radius * this.radius && (t2.sub(this.center).normalize(), t2.multiplyScalar(this.radius).add(this.center)), t2;
      }, getBoundingBox: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), e2 = new Jt()), e2.set(this.center, this.center), e2.expandByScalar(this.radius), e2;
      }, applyMatrix4: function(e2) {
        return this.center.applyMatrix4(e2), this.radius = this.radius * e2.getMaxScaleOnAxis(), this;
      }, translate: function(e2) {
        return this.center.add(e2), this;
      }, equals: function(e2) {
        return e2.center.equals(this.center) && e2.radius === this.radius;
      } }), Object.assign(Qt.prototype, { set: function(e2, t2) {
        return this.normal.copy(e2), this.constant = t2, this;
      }, setComponents: function(e2, t2, n2, r2) {
        return this.normal.set(e2, t2, n2), this.constant = r2, this;
      }, setFromNormalAndCoplanarPoint: function(e2, t2) {
        return this.normal.copy(e2), this.constant = -t2.dot(this.normal), this;
      }, setFromCoplanarPoints: function() {
        var e2 = new Ht(), t2 = new Ht();
        return function(n2, r2, i3) {
          var a2 = e2.subVectors(i3, r2).cross(t2.subVectors(n2, r2)).normalize();
          return this.setFromNormalAndCoplanarPoint(a2, n2), this;
        };
      }(), clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.normal.copy(e2.normal), this.constant = e2.constant, this;
      }, normalize: function() {
        var e2 = 1 / this.normal.length();
        return this.normal.multiplyScalar(e2), this.constant *= e2, this;
      }, negate: function() {
        return this.constant *= -1, this.normal.negate(), this;
      }, distanceToPoint: function(e2) {
        return this.normal.dot(e2) + this.constant;
      }, distanceToSphere: function(e2) {
        return this.distanceToPoint(e2.center) - e2.radius;
      }, projectPoint: function(e2, t2) {
        return void 0 === t2 && (console.warn("THREE.Plane: .projectPoint() target is now required"), t2 = new Ht()), t2.copy(this.normal).multiplyScalar(-this.distanceToPoint(e2)).add(e2);
      }, intersectLine: function() {
        var e2 = new Ht();
        return function(t2, n2) {
          void 0 === n2 && (console.warn("THREE.Plane: .intersectLine() target is now required"), n2 = new Ht());
          var r2 = t2.delta(e2), i3 = this.normal.dot(r2);
          if (0 === i3)
            return 0 === this.distanceToPoint(t2.start) ? n2.copy(t2.start) : void 0;
          var a2 = -(t2.start.dot(this.normal) + this.constant) / i3;
          return a2 < 0 || a2 > 1 ? void 0 : n2.copy(r2).multiplyScalar(a2).add(t2.start);
        };
      }(), intersectsLine: function(e2) {
        var t2 = this.distanceToPoint(e2.start), n2 = this.distanceToPoint(e2.end);
        return t2 < 0 && n2 > 0 || n2 < 0 && t2 > 0;
      }, intersectsBox: function(e2) {
        return e2.intersectsPlane(this);
      }, intersectsSphere: function(e2) {
        return e2.intersectsPlane(this);
      }, coplanarPoint: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), e2 = new Ht()), e2.copy(this.normal).multiplyScalar(-this.constant);
      }, applyMatrix4: function() {
        var e2 = new Ht(), t2 = new kt();
        return function(n2, r2) {
          var i3 = r2 || t2.getNormalMatrix(n2), a2 = this.coplanarPoint(e2).applyMatrix4(n2), o2 = this.normal.applyMatrix3(i3).normalize();
          return this.constant = -a2.dot(o2), this;
        };
      }(), translate: function(e2) {
        return this.constant -= e2.dot(this.normal), this;
      }, equals: function(e2) {
        return e2.normal.equals(this.normal) && e2.constant === this.constant;
      } }), Object.assign($t.prototype, { set: function(e2, t2, n2, r2, i3, a2) {
        var o2 = this.planes;
        return o2[0].copy(e2), o2[1].copy(t2), o2[2].copy(n2), o2[3].copy(r2), o2[4].copy(i3), o2[5].copy(a2), this;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        for (var t2 = this.planes, n2 = 0; n2 < 6; n2++)
          t2[n2].copy(e2.planes[n2]);
        return this;
      }, setFromMatrix: function(e2) {
        var t2 = this.planes, n2 = e2.elements, r2 = n2[0], i3 = n2[1], a2 = n2[2], o2 = n2[3], s2 = n2[4], c3 = n2[5], u2 = n2[6], l2 = n2[7], h2 = n2[8], d2 = n2[9], p2 = n2[10], f2 = n2[11], m3 = n2[12], g2 = n2[13], v2 = n2[14], y2 = n2[15];
        return t2[0].setComponents(o2 - r2, l2 - s2, f2 - h2, y2 - m3).normalize(), t2[1].setComponents(o2 + r2, l2 + s2, f2 + h2, y2 + m3).normalize(), t2[2].setComponents(o2 + i3, l2 + c3, f2 + d2, y2 + g2).normalize(), t2[3].setComponents(o2 - i3, l2 - c3, f2 - d2, y2 - g2).normalize(), t2[4].setComponents(o2 - a2, l2 - u2, f2 - p2, y2 - v2).normalize(), t2[5].setComponents(o2 + a2, l2 + u2, f2 + p2, y2 + v2).normalize(), this;
      }, intersectsObject: function() {
        var e2 = new Kt();
        return function(t2) {
          var n2 = t2.geometry;
          return null === n2.boundingSphere && n2.computeBoundingSphere(), e2.copy(n2.boundingSphere).applyMatrix4(t2.matrixWorld), this.intersectsSphere(e2);
        };
      }(), intersectsSprite: function() {
        var e2 = new Kt();
        return function(t2) {
          return e2.center.set(0, 0, 0), e2.radius = 0.7071067811865476, e2.applyMatrix4(t2.matrixWorld), this.intersectsSphere(e2);
        };
      }(), intersectsSphere: function(e2) {
        for (var t2 = this.planes, n2 = e2.center, r2 = -e2.radius, i3 = 0; i3 < 6; i3++) {
          if (t2[i3].distanceToPoint(n2) < r2)
            return false;
        }
        return true;
      }, intersectsBox: function() {
        var e2 = new Ht();
        return function(t2) {
          for (var n2 = this.planes, r2 = 0; r2 < 6; r2++) {
            var i3 = n2[r2];
            if (e2.x = i3.normal.x > 0 ? t2.max.x : t2.min.x, e2.y = i3.normal.y > 0 ? t2.max.y : t2.min.y, e2.z = i3.normal.z > 0 ? t2.max.z : t2.min.z, i3.distanceToPoint(e2) < 0)
              return false;
          }
          return true;
        };
      }(), containsPoint: function(e2) {
        for (var t2 = this.planes, n2 = 0; n2 < 6; n2++)
          if (t2[n2].distanceToPoint(e2) < 0)
            return false;
        return true;
      } });
      var en = { alphamap_fragment: "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n", alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n", alphatest_fragment: "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n", aomap_fragment: "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif\n", aomap_pars_fragment: "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif", begin_vertex: "\nvec3 transformed = vec3( position );\n", beginnormal_vertex: "\nvec3 objectNormal = vec3( normal );\n", bsdfs: "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	if( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		return distanceFalloff * maxDistanceCutoffFactor;\n#else\n		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n	}\n	return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE  = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS  = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n", bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n", clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		if ( clipped ) discard;\n	#endif\n#endif\n", clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\n		varying vec3 vViewPosition;\n	#endif\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n", clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	varying vec3 vViewPosition;\n#endif\n", clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	vViewPosition = - mvPosition.xyz;\n#endif\n", color_fragment: "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif", color_pars_fragment: "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n", color_pars_vertex: "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif", color_vertex: "#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif", common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\n", cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n	vec3 absDirection = abs(direction);\n	int face = -1;\n	if( absDirection.x > absDirection.z ) {\n		if(absDirection.x > absDirection.y )\n			face = direction.x > 0.0 ? 0 : 3;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	else {\n		if(absDirection.z > absDirection.y )\n			face = direction.z > 0.0 ? 2 : 5;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	return face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n	float dxRoughness = dFdx(roughness);\n	float dyRoughness = dFdy(roughness);\n	vec3 dx = dFdx( vec * scale * dxRoughness );\n	vec3 dy = dFdy( vec * scale * dyRoughness );\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\n	float mipLevel = 0.5 * log2(d);\n	return vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n	float a = 16.0 * cubeUV_rcpTextureSize;\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n	float powScale = exp2_packed.x * exp2_packed.y;\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n	bool bRes = mipLevel == 0.0;\n	scale =  bRes && (scale < a) ? a : scale;\n	vec3 r;\n	vec2 offset;\n	int face = getFaceFromDirection(direction);\n	float rcpPowScale = 1.0 / powScale;\n	if( face == 0) {\n		r = vec3(direction.x, -direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 1) {\n		r = vec3(direction.y, direction.x, direction.z);\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 2) {\n		r = vec3(direction.z, direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 3) {\n		r = vec3(direction.x, direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	else if( face == 4) {\n		r = vec3(direction.y, direction.x, -direction.z);\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	else {\n		r = vec3(direction.z, -direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	r = normalize(r);\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n	vec2 base = offset + vec2( texelOffset );\n	return base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n	float roughnessVal = roughness* cubeUV_maxLods3;\n	float r1 = floor(roughnessVal);\n	float r2 = r1 + 1.0;\n	float t = fract(roughnessVal);\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n	float s = mipInfo.y;\n	float level0 = mipInfo.x;\n	float level1 = level0 + 1.0;\n	level1 = level1 > 5.0 ? 5.0 : level1;\n	level0 += min( floor( s + 0.5 ), 5.0 );\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n	vec4 result = mix(color10, color20, t);\n	return vec4(result.rgb, 1.0);\n}\n#endif\n", defaultnormal_vertex: "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n", displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n", displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n", emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n", emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n", encodings_fragment: "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n", encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.x, max( value.g, value.b ) );\n	float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M            = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.x, max( value.g, value.b ) );\n	float D      = max( maxRange / maxRGB, 1.0 );\n	D            = min( floor( D ) / 255.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n	vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n	Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract(Le);\n	vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n	return vec4( max(vRGB, 0.0), 1.0 );\n}\n", envmap_fragment: "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		reflectVec = normalize( reflectVec );\n		sampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n		sampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		reflectVec = normalize( reflectVec );\n		vec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	envColor = envMapTexelToLinear( envColor );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n", envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n	uniform float reflectivity;\n	uniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n		varying vec3 vWorldPosition;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n", envmap_pars_vertex: "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif\n", envmap_physical_pars_fragment: "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			vec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			vec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n			sampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n", envmap_vertex: "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif\n", fog_vertex: "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif", fog_pars_vertex: "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n", fog_fragment: "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n", fog_pars_fragment: "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float fogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif\n", gradientmap_pars_fragment: "#ifdef TOON\n	uniform sampler2D gradientMap;\n	vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n		float dotNL = dot( normal, lightDirection );\n		vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n		#ifdef USE_GRADIENTMAP\n			return texture2D( gradientMap, coord ).rgb;\n		#else\n			return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n		#endif\n	}\n#endif\n", lightmap_fragment: "#ifdef USE_LIGHTMAP\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n", lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif", lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif\n", lights_pars_begin: "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n		float shadowCameraNear;\n		float shadowCameraFar;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n		directLight.visible = ( directLight.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( angleCos > spotLight.coneCos ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif\n", lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n", lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	#ifdef TOON\n		vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	#else\n		float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n		vec3 irradiance = dotNL * directLight.color;\n	#endif\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n", lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n	material.clearCoat = saturate( clearCoat );	material.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n", lights_physical_pars_fragment: "struct PhysicalMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n	#ifndef STANDARD\n		float clearCoat;\n		float clearCoatRoughness;\n	#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.specularRoughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos - halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifndef STANDARD\n		float clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n	#else\n		float clearCoatDHR = 0.0;\n	#endif\n	reflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n	reflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	#ifndef STANDARD\n		reflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	#ifndef STANDARD\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		float dotNL = dotNV;\n		float clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n	#else\n		float clearCoatDHR = 0.0;\n	#endif\n	reflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n	#ifndef STANDARD\n		reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n", lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n", lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n		irradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n	#ifndef STANDARD\n		clearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n	#endif\n#endif\n", lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n", logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment: "#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n", logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif", logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n		gl_Position.z *= gl_Position.w;\n	#endif\n#endif\n", map_fragment: "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif\n", map_pars_fragment: "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n", map_particle_fragment: "#ifdef USE_MAP\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n", map_particle_pars_fragment: "#ifdef USE_MAP\n	uniform mat3 uvTransform;\n	uniform sampler2D map;\n#endif\n", metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif\n", metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif", morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n", morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif", morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n", normal_fragment_begin: "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n#endif\n", normal_fragment_maps: "#ifdef USE_NORMALMAP\n	#ifdef OBJECTSPACE_NORMALMAP\n		normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		#ifdef FLIP_SIDED\n			normal = - normal;\n		#endif\n		#ifdef DOUBLE_SIDED\n			normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#endif\n		normal = normalize( normalMatrix * normal );\n	#else\n		normal = perturbNormal2Arb( -vViewPosition, normal );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n", normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	#ifdef OBJECTSPACE_NORMALMAP\n		uniform mat3 normalMatrix;\n	#else\n		vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n			vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n			vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n			vec2 st0 = dFdx( vUv.st );\n			vec2 st1 = dFdy( vUv.st );\n			float scale = sign( st1.t * st0.s - st0.t * st1.s );\n			vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n			vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n			vec3 N = normalize( surf_norm );\n			mat3 tsn = mat3( S, T, N );\n			vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n			mapN.xy *= normalScale;\n			mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n			return normalize( tsn * mapN );\n		}\n	#endif\n#endif\n", packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n", premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n", project_vertex: "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n", dithering_fragment: "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n", dithering_pars_fragment: "#if defined( DITHERING )\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif\n", roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif\n", roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n		const vec2 offset = vec2( 0.0, 1.0 );\n		vec2 texelSize = vec2( 1.0 ) / size;\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n		vec2 f = fract( uv * size + 0.5 );\n		float a = mix( lb, lt, f.y );\n		float b = mix( rb, rt, f.y );\n		float c = mix( a, b, f.x );\n		return c;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			shadow = (\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif\n", shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n#endif\n", shadowmap_vertex: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif\n", shadowmask_pars_fragment: "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	DirectionalLight directionalLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	SpotLight spotLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	PointLight pointLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}\n", skinbase_vertex: "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex: "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n", skinning_vertex: "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n", skinnormal_vertex: "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n", specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif", specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif", tonemapping_fragment: "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n", tonemapping_pars_fragment: "#ifndef saturate\n	#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n", uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif", uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\n", uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif", uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif", uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif", uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif", worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n	vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n", cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n	gl_FragColor.a *= opacity;\n}\n", cube_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}\n", depth_frag: "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n	#endif\n}\n", depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n", distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}\n", distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}\n", equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldPosition );\n	vec2 sampleUV;\n	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n}\n", equirect_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}\n", linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n", linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	vLineDistance = scale * lineDistance;\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}\n", meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		reflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n", meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}\n", meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n", meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n", meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n", meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n", meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n	uniform float clearCoat;\n	uniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n", meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n", normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n", normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}\n", points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n", points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#ifdef USE_SIZEATTENUATION\n		gl_PointSize = size * ( scale / - mvPosition.z );\n	#else\n		gl_PointSize = size;\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}\n", shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <fog_fragment>\n}\n", shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n", sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n", sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	vec4 mvPosition;\n	mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}\n" }, tn = { merge: function(e2) {
        for (var t2 = {}, n2 = 0; n2 < e2.length; n2++) {
          var r2 = this.clone(e2[n2]);
          for (var i3 in r2)
            t2[i3] = r2[i3];
        }
        return t2;
      }, clone: function(e2) {
        var t2 = {};
        for (var n2 in e2)
          for (var r2 in t2[n2] = {}, e2[n2]) {
            var i3 = e2[n2][r2];
            i3 && (i3.isColor || i3.isMatrix3 || i3.isMatrix4 || i3.isVector2 || i3.isVector3 || i3.isVector4 || i3.isTexture) ? t2[n2][r2] = i3.clone() : Array.isArray(i3) ? t2[n2][r2] = i3.slice() : t2[n2][r2] = i3;
          }
        return t2;
      } }, nn = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };
      function rn(e2, t2, n2) {
        return void 0 === t2 && void 0 === n2 ? this.set(e2) : this.setRGB(e2, t2, n2);
      }
      Object.assign(rn.prototype, { isColor: true, r: 1, g: 1, b: 1, set: function(e2) {
        return e2 && e2.isColor ? this.copy(e2) : "number" == typeof e2 ? this.setHex(e2) : "string" == typeof e2 && this.setStyle(e2), this;
      }, setScalar: function(e2) {
        return this.r = e2, this.g = e2, this.b = e2, this;
      }, setHex: function(e2) {
        return e2 = Math.floor(e2), this.r = (e2 >> 16 & 255) / 255, this.g = (e2 >> 8 & 255) / 255, this.b = (255 & e2) / 255, this;
      }, setRGB: function(e2, t2, n2) {
        return this.r = e2, this.g = t2, this.b = n2, this;
      }, setHSL: function() {
        function e2(e3, t2, n2) {
          return n2 < 0 && (n2 += 1), n2 > 1 && (n2 -= 1), n2 < 1 / 6 ? e3 + 6 * (t2 - e3) * n2 : n2 < 0.5 ? t2 : n2 < 2 / 3 ? e3 + 6 * (t2 - e3) * (2 / 3 - n2) : e3;
        }
        return function(t2, n2, r2) {
          if (t2 = Bt.euclideanModulo(t2, 1), n2 = Bt.clamp(n2, 0, 1), r2 = Bt.clamp(r2, 0, 1), 0 === n2)
            this.r = this.g = this.b = r2;
          else {
            var i3 = r2 <= 0.5 ? r2 * (1 + n2) : r2 + n2 - r2 * n2, a2 = 2 * r2 - i3;
            this.r = e2(a2, i3, t2 + 1 / 3), this.g = e2(a2, i3, t2), this.b = e2(a2, i3, t2 - 1 / 3);
          }
          return this;
        };
      }(), setStyle: function(e2) {
        function t2(t3) {
          void 0 !== t3 && parseFloat(t3) < 1 && console.warn("THREE.Color: Alpha component of " + e2 + " will be ignored.");
        }
        var n2;
        if (n2 = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e2)) {
          var r2, i3 = n2[1], a2 = n2[2];
          switch (i3) {
            case "rgb":
            case "rgba":
              if (r2 = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a2))
                return this.r = Math.min(255, parseInt(r2[1], 10)) / 255, this.g = Math.min(255, parseInt(r2[2], 10)) / 255, this.b = Math.min(255, parseInt(r2[3], 10)) / 255, t2(r2[5]), this;
              if (r2 = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a2))
                return this.r = Math.min(100, parseInt(r2[1], 10)) / 100, this.g = Math.min(100, parseInt(r2[2], 10)) / 100, this.b = Math.min(100, parseInt(r2[3], 10)) / 100, t2(r2[5]), this;
              break;
            case "hsl":
            case "hsla":
              if (r2 = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a2)) {
                var o2 = parseFloat(r2[1]) / 360, s2 = parseInt(r2[2], 10) / 100, c3 = parseInt(r2[3], 10) / 100;
                return t2(r2[5]), this.setHSL(o2, s2, c3);
              }
          }
        } else if (n2 = /^\#([A-Fa-f0-9]+)$/.exec(e2)) {
          var u2, l2 = (u2 = n2[1]).length;
          if (3 === l2)
            return this.r = parseInt(u2.charAt(0) + u2.charAt(0), 16) / 255, this.g = parseInt(u2.charAt(1) + u2.charAt(1), 16) / 255, this.b = parseInt(u2.charAt(2) + u2.charAt(2), 16) / 255, this;
          if (6 === l2)
            return this.r = parseInt(u2.charAt(0) + u2.charAt(1), 16) / 255, this.g = parseInt(u2.charAt(2) + u2.charAt(3), 16) / 255, this.b = parseInt(u2.charAt(4) + u2.charAt(5), 16) / 255, this;
        }
        e2 && e2.length > 0 && (void 0 !== (u2 = nn[e2]) ? this.setHex(u2) : console.warn("THREE.Color: Unknown color " + e2));
        return this;
      }, clone: function() {
        return new this.constructor(this.r, this.g, this.b);
      }, copy: function(e2) {
        return this.r = e2.r, this.g = e2.g, this.b = e2.b, this;
      }, copyGammaToLinear: function(e2, t2) {
        return void 0 === t2 && (t2 = 2), this.r = Math.pow(e2.r, t2), this.g = Math.pow(e2.g, t2), this.b = Math.pow(e2.b, t2), this;
      }, copyLinearToGamma: function(e2, t2) {
        void 0 === t2 && (t2 = 2);
        var n2 = t2 > 0 ? 1 / t2 : 1;
        return this.r = Math.pow(e2.r, n2), this.g = Math.pow(e2.g, n2), this.b = Math.pow(e2.b, n2), this;
      }, convertGammaToLinear: function(e2) {
        return this.copyGammaToLinear(this, e2), this;
      }, convertLinearToGamma: function(e2) {
        return this.copyLinearToGamma(this, e2), this;
      }, copySRGBToLinear: function() {
        function e2(e3) {
          return e3 < 0.04045 ? 0.0773993808 * e3 : Math.pow(0.9478672986 * e3 + 0.0521327014, 2.4);
        }
        return function(t2) {
          return this.r = e2(t2.r), this.g = e2(t2.g), this.b = e2(t2.b), this;
        };
      }(), copyLinearToSRGB: function() {
        function e2(e3) {
          return e3 < 31308e-7 ? 12.92 * e3 : 1.055 * Math.pow(e3, 0.41666) - 0.055;
        }
        return function(t2) {
          return this.r = e2(t2.r), this.g = e2(t2.g), this.b = e2(t2.b), this;
        };
      }(), convertSRGBToLinear: function() {
        return this.copySRGBToLinear(this), this;
      }, convertLinearToSRGB: function() {
        return this.copyLinearToSRGB(this), this;
      }, getHex: function() {
        return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
      }, getHexString: function() {
        return ("000000" + this.getHex().toString(16)).slice(-6);
      }, getHSL: function(e2) {
        void 0 === e2 && (console.warn("THREE.Color: .getHSL() target is now required"), e2 = { h: 0, s: 0, l: 0 });
        var t2, n2, r2 = this.r, i3 = this.g, a2 = this.b, o2 = Math.max(r2, i3, a2), s2 = Math.min(r2, i3, a2), c3 = (s2 + o2) / 2;
        if (s2 === o2)
          t2 = 0, n2 = 0;
        else {
          var u2 = o2 - s2;
          switch (n2 = c3 <= 0.5 ? u2 / (o2 + s2) : u2 / (2 - o2 - s2), o2) {
            case r2:
              t2 = (i3 - a2) / u2 + (i3 < a2 ? 6 : 0);
              break;
            case i3:
              t2 = (a2 - r2) / u2 + 2;
              break;
            case a2:
              t2 = (r2 - i3) / u2 + 4;
          }
          t2 /= 6;
        }
        return e2.h = t2, e2.s = n2, e2.l = c3, e2;
      }, getStyle: function() {
        return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
      }, offsetHSL: function() {
        var e2 = {};
        return function(t2, n2, r2) {
          return this.getHSL(e2), e2.h += t2, e2.s += n2, e2.l += r2, this.setHSL(e2.h, e2.s, e2.l), this;
        };
      }(), add: function(e2) {
        return this.r += e2.r, this.g += e2.g, this.b += e2.b, this;
      }, addColors: function(e2, t2) {
        return this.r = e2.r + t2.r, this.g = e2.g + t2.g, this.b = e2.b + t2.b, this;
      }, addScalar: function(e2) {
        return this.r += e2, this.g += e2, this.b += e2, this;
      }, sub: function(e2) {
        return this.r = Math.max(0, this.r - e2.r), this.g = Math.max(0, this.g - e2.g), this.b = Math.max(0, this.b - e2.b), this;
      }, multiply: function(e2) {
        return this.r *= e2.r, this.g *= e2.g, this.b *= e2.b, this;
      }, multiplyScalar: function(e2) {
        return this.r *= e2, this.g *= e2, this.b *= e2, this;
      }, lerp: function(e2, t2) {
        return this.r += (e2.r - this.r) * t2, this.g += (e2.g - this.g) * t2, this.b += (e2.b - this.b) * t2, this;
      }, equals: function(e2) {
        return e2.r === this.r && e2.g === this.g && e2.b === this.b;
      }, fromArray: function(e2, t2) {
        return void 0 === t2 && (t2 = 0), this.r = e2[t2], this.g = e2[t2 + 1], this.b = e2[t2 + 2], this;
      }, toArray: function(e2, t2) {
        return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this.r, e2[t2 + 1] = this.g, e2[t2 + 2] = this.b, e2;
      }, toJSON: function() {
        return this.getHex();
      } });
      var an = { common: { diffuse: { value: new rn(15658734) }, opacity: { value: 1 }, map: { value: null }, uvTransform: { value: new kt() }, alphaMap: { value: null } }, specularmap: { specularMap: { value: null } }, envmap: { envMap: { value: null }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, refractionRatio: { value: 0.98 }, maxMipLevel: { value: 0 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } }, lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } }, emissivemap: { emissiveMap: { value: null } }, bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalScale: { value: new Ft(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, roughnessmap: { roughnessMap: { value: null } }, metalnessmap: { metalnessMap: { value: null } }, gradientmap: { gradientMap: { value: null } }, fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new rn(16777215) } }, lights: { ambientLightColor: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotShadowMap: { value: [] }, spotShadowMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } }, rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } } }, points: { diffuse: { value: new rn(15658734) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, uvTransform: { value: new kt() } }, sprite: { diffuse: { value: new rn(15658734) }, opacity: { value: 1 }, center: { value: new Ft(0.5, 0.5) }, rotation: { value: 0 }, map: { value: null }, uvTransform: { value: new kt() } } }, on = { basic: { uniforms: tn.merge([an.common, an.specularmap, an.envmap, an.aomap, an.lightmap, an.fog]), vertexShader: en.meshbasic_vert, fragmentShader: en.meshbasic_frag }, lambert: { uniforms: tn.merge([an.common, an.specularmap, an.envmap, an.aomap, an.lightmap, an.emissivemap, an.fog, an.lights, { emissive: { value: new rn(0) } }]), vertexShader: en.meshlambert_vert, fragmentShader: en.meshlambert_frag }, phong: { uniforms: tn.merge([an.common, an.specularmap, an.envmap, an.aomap, an.lightmap, an.emissivemap, an.bumpmap, an.normalmap, an.displacementmap, an.gradientmap, an.fog, an.lights, { emissive: { value: new rn(0) }, specular: { value: new rn(1118481) }, shininess: { value: 30 } }]), vertexShader: en.meshphong_vert, fragmentShader: en.meshphong_frag }, standard: { uniforms: tn.merge([an.common, an.envmap, an.aomap, an.lightmap, an.emissivemap, an.bumpmap, an.normalmap, an.displacementmap, an.roughnessmap, an.metalnessmap, an.fog, an.lights, { emissive: { value: new rn(0) }, roughness: { value: 0.5 }, metalness: { value: 0.5 }, envMapIntensity: { value: 1 } }]), vertexShader: en.meshphysical_vert, fragmentShader: en.meshphysical_frag }, points: { uniforms: tn.merge([an.points, an.fog]), vertexShader: en.points_vert, fragmentShader: en.points_frag }, dashed: { uniforms: tn.merge([an.common, an.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: en.linedashed_vert, fragmentShader: en.linedashed_frag }, depth: { uniforms: tn.merge([an.common, an.displacementmap]), vertexShader: en.depth_vert, fragmentShader: en.depth_frag }, normal: { uniforms: tn.merge([an.common, an.bumpmap, an.normalmap, an.displacementmap, { opacity: { value: 1 } }]), vertexShader: en.normal_vert, fragmentShader: en.normal_frag }, sprite: { uniforms: tn.merge([an.sprite, an.fog]), vertexShader: en.sprite_vert, fragmentShader: en.sprite_frag }, cube: { uniforms: { tCube: { value: null }, tFlip: { value: -1 }, opacity: { value: 1 } }, vertexShader: en.cube_vert, fragmentShader: en.cube_frag }, equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: en.equirect_vert, fragmentShader: en.equirect_frag }, distanceRGBA: { uniforms: tn.merge([an.common, an.displacementmap, { referencePosition: { value: new Ht() }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]), vertexShader: en.distanceRGBA_vert, fragmentShader: en.distanceRGBA_frag }, shadow: { uniforms: tn.merge([an.lights, an.fog, { color: { value: new rn(0) }, opacity: { value: 1 } }]), vertexShader: en.shadow_vert, fragmentShader: en.shadow_frag } };
      function sn() {
        var e2 = null, t2 = false, n2 = null;
        function r2(i3, a2) {
          false !== t2 && (n2(i3, a2), e2.requestAnimationFrame(r2));
        }
        return { start: function() {
          true !== t2 && null !== n2 && (e2.requestAnimationFrame(r2), t2 = true);
        }, stop: function() {
          t2 = false;
        }, setAnimationLoop: function(e3) {
          n2 = e3;
        }, setContext: function(t3) {
          e2 = t3;
        } };
      }
      function cn(e2) {
        var t2 = /* @__PURE__ */ new WeakMap();
        return { get: function(e3) {
          return e3.isInterleavedBufferAttribute && (e3 = e3.data), t2.get(e3);
        }, remove: function(n2) {
          n2.isInterleavedBufferAttribute && (n2 = n2.data);
          var r2 = t2.get(n2);
          r2 && (e2.deleteBuffer(r2.buffer), t2.delete(n2));
        }, update: function(n2, r2) {
          n2.isInterleavedBufferAttribute && (n2 = n2.data);
          var i3 = t2.get(n2);
          void 0 === i3 ? t2.set(n2, function(t3, n3) {
            var r3 = t3.array, i4 = t3.dynamic ? e2.DYNAMIC_DRAW : e2.STATIC_DRAW, a2 = e2.createBuffer();
            e2.bindBuffer(n3, a2), e2.bufferData(n3, r3, i4), t3.onUploadCallback();
            var o2 = e2.FLOAT;
            return r3 instanceof Float32Array ? o2 = e2.FLOAT : r3 instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : r3 instanceof Uint16Array ? o2 = e2.UNSIGNED_SHORT : r3 instanceof Int16Array ? o2 = e2.SHORT : r3 instanceof Uint32Array ? o2 = e2.UNSIGNED_INT : r3 instanceof Int32Array ? o2 = e2.INT : r3 instanceof Int8Array ? o2 = e2.BYTE : r3 instanceof Uint8Array && (o2 = e2.UNSIGNED_BYTE), { buffer: a2, type: o2, bytesPerElement: r3.BYTES_PER_ELEMENT, version: t3.version };
          }(n2, r2)) : i3.version < n2.version && (function(t3, n3, r3) {
            var i4 = n3.array, a2 = n3.updateRange;
            e2.bindBuffer(r3, t3), false === n3.dynamic ? e2.bufferData(r3, i4, e2.STATIC_DRAW) : -1 === a2.count ? e2.bufferSubData(r3, 0, i4) : 0 === a2.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (e2.bufferSubData(r3, a2.offset * i4.BYTES_PER_ELEMENT, i4.subarray(a2.offset, a2.offset + a2.count)), a2.count = -1);
          }(i3.buffer, n2, r2), i3.version = n2.version);
        } };
      }
      function un(e2, t2, n2, r2) {
        this._x = e2 || 0, this._y = t2 || 0, this._z = n2 || 0, this._order = r2 || un.DefaultOrder;
      }
      function ln() {
        this.mask = 1;
      }
      on.physical = { uniforms: tn.merge([on.standard.uniforms, { clearCoat: { value: 0 }, clearCoatRoughness: { value: 0 } }]), vertexShader: en.meshphysical_vert, fragmentShader: en.meshphysical_frag }, un.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"], un.DefaultOrder = "XYZ", Object.defineProperties(un.prototype, { x: { get: function() {
        return this._x;
      }, set: function(e2) {
        this._x = e2, this.onChangeCallback();
      } }, y: { get: function() {
        return this._y;
      }, set: function(e2) {
        this._y = e2, this.onChangeCallback();
      } }, z: { get: function() {
        return this._z;
      }, set: function(e2) {
        this._z = e2, this.onChangeCallback();
      } }, order: { get: function() {
        return this._order;
      }, set: function(e2) {
        this._order = e2, this.onChangeCallback();
      } } }), Object.assign(un.prototype, { isEuler: true, set: function(e2, t2, n2, r2) {
        return this._x = e2, this._y = t2, this._z = n2, this._order = r2 || this._order, this.onChangeCallback(), this;
      }, clone: function() {
        return new this.constructor(this._x, this._y, this._z, this._order);
      }, copy: function(e2) {
        return this._x = e2._x, this._y = e2._y, this._z = e2._z, this._order = e2._order, this.onChangeCallback(), this;
      }, setFromRotationMatrix: function(e2, t2, n2) {
        var r2 = Bt.clamp, i3 = e2.elements, a2 = i3[0], o2 = i3[4], s2 = i3[8], c3 = i3[1], u2 = i3[5], l2 = i3[9], h2 = i3[2], d2 = i3[6], p2 = i3[10];
        return "XYZ" === (t2 = t2 || this._order) ? (this._y = Math.asin(r2(s2, -1, 1)), Math.abs(s2) < 0.99999 ? (this._x = Math.atan2(-l2, p2), this._z = Math.atan2(-o2, a2)) : (this._x = Math.atan2(d2, u2), this._z = 0)) : "YXZ" === t2 ? (this._x = Math.asin(-r2(l2, -1, 1)), Math.abs(l2) < 0.99999 ? (this._y = Math.atan2(s2, p2), this._z = Math.atan2(c3, u2)) : (this._y = Math.atan2(-h2, a2), this._z = 0)) : "ZXY" === t2 ? (this._x = Math.asin(r2(d2, -1, 1)), Math.abs(d2) < 0.99999 ? (this._y = Math.atan2(-h2, p2), this._z = Math.atan2(-o2, u2)) : (this._y = 0, this._z = Math.atan2(c3, a2))) : "ZYX" === t2 ? (this._y = Math.asin(-r2(h2, -1, 1)), Math.abs(h2) < 0.99999 ? (this._x = Math.atan2(d2, p2), this._z = Math.atan2(c3, a2)) : (this._x = 0, this._z = Math.atan2(-o2, u2))) : "YZX" === t2 ? (this._z = Math.asin(r2(c3, -1, 1)), Math.abs(c3) < 0.99999 ? (this._x = Math.atan2(-l2, u2), this._y = Math.atan2(-h2, a2)) : (this._x = 0, this._y = Math.atan2(s2, p2))) : "XZY" === t2 ? (this._z = Math.asin(-r2(o2, -1, 1)), Math.abs(o2) < 0.99999 ? (this._x = Math.atan2(d2, u2), this._y = Math.atan2(s2, a2)) : (this._x = Math.atan2(-l2, p2), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + t2), this._order = t2, false !== n2 && this.onChangeCallback(), this;
      }, setFromQuaternion: function() {
        var e2 = new Gt();
        return function(t2, n2, r2) {
          return e2.makeRotationFromQuaternion(t2), this.setFromRotationMatrix(e2, n2, r2);
        };
      }(), setFromVector3: function(e2, t2) {
        return this.set(e2.x, e2.y, e2.z, t2 || this._order);
      }, reorder: function() {
        var e2 = new zt();
        return function(t2) {
          return e2.setFromEuler(this), this.setFromQuaternion(e2, t2);
        };
      }(), equals: function(e2) {
        return e2._x === this._x && e2._y === this._y && e2._z === this._z && e2._order === this._order;
      }, fromArray: function(e2) {
        return this._x = e2[0], this._y = e2[1], this._z = e2[2], void 0 !== e2[3] && (this._order = e2[3]), this.onChangeCallback(), this;
      }, toArray: function(e2, t2) {
        return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this._x, e2[t2 + 1] = this._y, e2[t2 + 2] = this._z, e2[t2 + 3] = this._order, e2;
      }, toVector3: function(e2) {
        return e2 ? e2.set(this._x, this._y, this._z) : new Ht(this._x, this._y, this._z);
      }, onChange: function(e2) {
        return this.onChangeCallback = e2, this;
      }, onChangeCallback: function() {
      } }), Object.assign(ln.prototype, { set: function(e2) {
        this.mask = 1 << e2 | 0;
      }, enable: function(e2) {
        this.mask |= 1 << e2 | 0;
      }, toggle: function(e2) {
        this.mask ^= 1 << e2 | 0;
      }, disable: function(e2) {
        this.mask &= ~(1 << e2 | 0);
      }, test: function(e2) {
        return 0 != (this.mask & e2.mask);
      } });
      var hn = 0;
      function dn() {
        Object.defineProperty(this, "id", { value: hn++ }), this.uuid = Bt.generateUUID(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = dn.DefaultUp.clone();
        var e2 = new Ht(), t2 = new un(), n2 = new zt(), r2 = new Ht(1, 1, 1);
        t2.onChange(function() {
          n2.setFromEuler(t2, false);
        }), n2.onChange(function() {
          t2.setFromQuaternion(n2, void 0, false);
        }), Object.defineProperties(this, { position: { enumerable: true, value: e2 }, rotation: { enumerable: true, value: t2 }, quaternion: { enumerable: true, value: n2 }, scale: { enumerable: true, value: r2 }, modelViewMatrix: { value: new Gt() }, normalMatrix: { value: new kt() } }), this.matrix = new Gt(), this.matrixWorld = new Gt(), this.matrixAutoUpdate = dn.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = false, this.layers = new ln(), this.visible = true, this.castShadow = false, this.receiveShadow = false, this.frustumCulled = true, this.renderOrder = 0, this.userData = {};
      }
      function pn() {
        dn.call(this), this.type = "Camera", this.matrixWorldInverse = new Gt(), this.projectionMatrix = new Gt();
      }
      function fn(e2, t2, n2, r2, i3, a2) {
        pn.call(this), this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e2, this.right = t2, this.top = n2, this.bottom = r2, this.near = void 0 !== i3 ? i3 : 0.1, this.far = void 0 !== a2 ? a2 : 2e3, this.updateProjectionMatrix();
      }
      function mn(e2, t2, n2, r2, i3, a2) {
        this.a = e2, this.b = t2, this.c = n2, this.normal = r2 && r2.isVector3 ? r2 : new Ht(), this.vertexNormals = Array.isArray(r2) ? r2 : [], this.color = i3 && i3.isColor ? i3 : new rn(), this.vertexColors = Array.isArray(i3) ? i3 : [], this.materialIndex = void 0 !== a2 ? a2 : 0;
      }
      dn.DefaultUp = new Ht(0, 1, 0), dn.DefaultMatrixAutoUpdate = true, dn.prototype = Object.assign(Object.create(r.prototype), { constructor: dn, isObject3D: true, onBeforeRender: function() {
      }, onAfterRender: function() {
      }, applyMatrix: function(e2) {
        this.matrix.multiplyMatrices(e2, this.matrix), this.matrix.decompose(this.position, this.quaternion, this.scale);
      }, applyQuaternion: function(e2) {
        return this.quaternion.premultiply(e2), this;
      }, setRotationFromAxisAngle: function(e2, t2) {
        this.quaternion.setFromAxisAngle(e2, t2);
      }, setRotationFromEuler: function(e2) {
        this.quaternion.setFromEuler(e2, true);
      }, setRotationFromMatrix: function(e2) {
        this.quaternion.setFromRotationMatrix(e2);
      }, setRotationFromQuaternion: function(e2) {
        this.quaternion.copy(e2);
      }, rotateOnAxis: function() {
        var e2 = new zt();
        return function(t2, n2) {
          return e2.setFromAxisAngle(t2, n2), this.quaternion.multiply(e2), this;
        };
      }(), rotateOnWorldAxis: function() {
        var e2 = new zt();
        return function(t2, n2) {
          return e2.setFromAxisAngle(t2, n2), this.quaternion.premultiply(e2), this;
        };
      }(), rotateX: function() {
        var e2 = new Ht(1, 0, 0);
        return function(t2) {
          return this.rotateOnAxis(e2, t2);
        };
      }(), rotateY: function() {
        var e2 = new Ht(0, 1, 0);
        return function(t2) {
          return this.rotateOnAxis(e2, t2);
        };
      }(), rotateZ: function() {
        var e2 = new Ht(0, 0, 1);
        return function(t2) {
          return this.rotateOnAxis(e2, t2);
        };
      }(), translateOnAxis: function() {
        var e2 = new Ht();
        return function(t2, n2) {
          return e2.copy(t2).applyQuaternion(this.quaternion), this.position.add(e2.multiplyScalar(n2)), this;
        };
      }(), translateX: function() {
        var e2 = new Ht(1, 0, 0);
        return function(t2) {
          return this.translateOnAxis(e2, t2);
        };
      }(), translateY: function() {
        var e2 = new Ht(0, 1, 0);
        return function(t2) {
          return this.translateOnAxis(e2, t2);
        };
      }(), translateZ: function() {
        var e2 = new Ht(0, 0, 1);
        return function(t2) {
          return this.translateOnAxis(e2, t2);
        };
      }(), localToWorld: function(e2) {
        return e2.applyMatrix4(this.matrixWorld);
      }, worldToLocal: function() {
        var e2 = new Gt();
        return function(t2) {
          return t2.applyMatrix4(e2.getInverse(this.matrixWorld));
        };
      }(), lookAt: function() {
        var e2 = new Gt(), t2 = new Ht();
        return function(n2, r2, i3) {
          n2.isVector3 ? t2.copy(n2) : t2.set(n2, r2, i3), this.isCamera ? e2.lookAt(this.position, t2, this.up) : e2.lookAt(t2, this.position, this.up), this.quaternion.setFromRotationMatrix(e2);
        };
      }(), add: function(e2) {
        if (arguments.length > 1) {
          for (var t2 = 0; t2 < arguments.length; t2++)
            this.add(arguments[t2]);
          return this;
        }
        return e2 === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e2), this) : (e2 && e2.isObject3D ? (null !== e2.parent && e2.parent.remove(e2), e2.parent = this, e2.dispatchEvent({ type: "added" }), this.children.push(e2)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e2), this);
      }, remove: function(e2) {
        if (arguments.length > 1) {
          for (var t2 = 0; t2 < arguments.length; t2++)
            this.remove(arguments[t2]);
          return this;
        }
        var n2 = this.children.indexOf(e2);
        return -1 !== n2 && (e2.parent = null, e2.dispatchEvent({ type: "removed" }), this.children.splice(n2, 1)), this;
      }, getObjectById: function(e2) {
        return this.getObjectByProperty("id", e2);
      }, getObjectByName: function(e2) {
        return this.getObjectByProperty("name", e2);
      }, getObjectByProperty: function(e2, t2) {
        if (this[e2] === t2)
          return this;
        for (var n2 = 0, r2 = this.children.length; n2 < r2; n2++) {
          var i3 = this.children[n2].getObjectByProperty(e2, t2);
          if (void 0 !== i3)
            return i3;
        }
      }, getWorldPosition: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), e2 = new Ht()), this.updateMatrixWorld(true), e2.setFromMatrixPosition(this.matrixWorld);
      }, getWorldQuaternion: function() {
        var e2 = new Ht(), t2 = new Ht();
        return function(n2) {
          return void 0 === n2 && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), n2 = new zt()), this.updateMatrixWorld(true), this.matrixWorld.decompose(e2, n2, t2), n2;
        };
      }(), getWorldScale: function() {
        var e2 = new Ht(), t2 = new zt();
        return function(n2) {
          return void 0 === n2 && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), n2 = new Ht()), this.updateMatrixWorld(true), this.matrixWorld.decompose(e2, t2, n2), n2;
        };
      }(), getWorldDirection: function() {
        var e2 = new zt();
        return function(t2) {
          return void 0 === t2 && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), t2 = new Ht()), this.getWorldQuaternion(e2), t2.set(0, 0, 1).applyQuaternion(e2);
        };
      }(), raycast: function() {
      }, traverse: function(e2) {
        e2(this);
        for (var t2 = this.children, n2 = 0, r2 = t2.length; n2 < r2; n2++)
          t2[n2].traverse(e2);
      }, traverseVisible: function(e2) {
        if (false !== this.visible) {
          e2(this);
          for (var t2 = this.children, n2 = 0, r2 = t2.length; n2 < r2; n2++)
            t2[n2].traverseVisible(e2);
        }
      }, traverseAncestors: function(e2) {
        var t2 = this.parent;
        null !== t2 && (e2(t2), t2.traverseAncestors(e2));
      }, updateMatrix: function() {
        this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = true;
      }, updateMatrixWorld: function(e2) {
        this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e2) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = false, e2 = true);
        for (var t2 = this.children, n2 = 0, r2 = t2.length; n2 < r2; n2++)
          t2[n2].updateMatrixWorld(e2);
      }, toJSON: function(e2) {
        var t2 = void 0 === e2 || "string" == typeof e2, n2 = {};
        t2 && (e2 = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {} }, n2.metadata = { version: 4.5, type: "Object", generator: "Object3D.toJSON" });
        var r2 = {};
        function i3(t3, n3) {
          return void 0 === t3[n3.uuid] && (t3[n3.uuid] = n3.toJSON(e2)), n3.uuid;
        }
        if (r2.uuid = this.uuid, r2.type = this.type, "" !== this.name && (r2.name = this.name), true === this.castShadow && (r2.castShadow = true), true === this.receiveShadow && (r2.receiveShadow = true), false === this.visible && (r2.visible = false), false === this.frustumCulled && (r2.frustumCulled = false), 0 !== this.renderOrder && (r2.renderOrder = this.renderOrder), "{}" !== JSON.stringify(this.userData) && (r2.userData = this.userData), r2.layers = this.layers.mask, r2.matrix = this.matrix.toArray(), false === this.matrixAutoUpdate && (r2.matrixAutoUpdate = false), this.isMesh || this.isLine || this.isPoints) {
          r2.geometry = i3(e2.geometries, this.geometry);
          var a2 = this.geometry.parameters;
          if (void 0 !== a2 && void 0 !== a2.shapes) {
            var o2 = a2.shapes;
            if (Array.isArray(o2))
              for (var s2 = 0, c3 = o2.length; s2 < c3; s2++) {
                var u2 = o2[s2];
                i3(e2.shapes, u2);
              }
            else
              i3(e2.shapes, o2);
          }
        }
        if (void 0 !== this.material)
          if (Array.isArray(this.material)) {
            var l2 = [];
            for (s2 = 0, c3 = this.material.length; s2 < c3; s2++)
              l2.push(i3(e2.materials, this.material[s2]));
            r2.material = l2;
          } else
            r2.material = i3(e2.materials, this.material);
        if (this.children.length > 0) {
          r2.children = [];
          for (s2 = 0; s2 < this.children.length; s2++)
            r2.children.push(this.children[s2].toJSON(e2).object);
        }
        if (t2) {
          var h2 = m3(e2.geometries), d2 = m3(e2.materials), p2 = m3(e2.textures), f2 = m3(e2.images);
          o2 = m3(e2.shapes);
          h2.length > 0 && (n2.geometries = h2), d2.length > 0 && (n2.materials = d2), p2.length > 0 && (n2.textures = p2), f2.length > 0 && (n2.images = f2), o2.length > 0 && (n2.shapes = o2);
        }
        return n2.object = r2, n2;
        function m3(e3) {
          var t3 = [];
          for (var n3 in e3) {
            var r3 = e3[n3];
            delete r3.metadata, t3.push(r3);
          }
          return t3;
        }
      }, clone: function(e2) {
        return new this.constructor().copy(this, e2);
      }, copy: function(e2, t2) {
        if (void 0 === t2 && (t2 = true), this.name = e2.name, this.up.copy(e2.up), this.position.copy(e2.position), this.quaternion.copy(e2.quaternion), this.scale.copy(e2.scale), this.matrix.copy(e2.matrix), this.matrixWorld.copy(e2.matrixWorld), this.matrixAutoUpdate = e2.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e2.matrixWorldNeedsUpdate, this.layers.mask = e2.layers.mask, this.visible = e2.visible, this.castShadow = e2.castShadow, this.receiveShadow = e2.receiveShadow, this.frustumCulled = e2.frustumCulled, this.renderOrder = e2.renderOrder, this.userData = JSON.parse(JSON.stringify(e2.userData)), true === t2)
          for (var n2 = 0; n2 < e2.children.length; n2++) {
            var r2 = e2.children[n2];
            this.add(r2.clone());
          }
        return this;
      } }), pn.prototype = Object.assign(Object.create(dn.prototype), { constructor: pn, isCamera: true, copy: function(e2, t2) {
        return dn.prototype.copy.call(this, e2, t2), this.matrixWorldInverse.copy(e2.matrixWorldInverse), this.projectionMatrix.copy(e2.projectionMatrix), this;
      }, getWorldDirection: function() {
        var e2 = new zt();
        return function(t2) {
          return void 0 === t2 && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), t2 = new Ht()), this.getWorldQuaternion(e2), t2.set(0, 0, -1).applyQuaternion(e2);
        };
      }(), updateMatrixWorld: function(e2) {
        dn.prototype.updateMatrixWorld.call(this, e2), this.matrixWorldInverse.getInverse(this.matrixWorld);
      }, clone: function() {
        return new this.constructor().copy(this);
      } }), fn.prototype = Object.assign(Object.create(pn.prototype), { constructor: fn, isOrthographicCamera: true, copy: function(e2, t2) {
        return pn.prototype.copy.call(this, e2, t2), this.left = e2.left, this.right = e2.right, this.top = e2.top, this.bottom = e2.bottom, this.near = e2.near, this.far = e2.far, this.zoom = e2.zoom, this.view = null === e2.view ? null : Object.assign({}, e2.view), this;
      }, setViewOffset: function(e2, t2, n2, r2, i3, a2) {
        null === this.view && (this.view = { enabled: true, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = true, this.view.fullWidth = e2, this.view.fullHeight = t2, this.view.offsetX = n2, this.view.offsetY = r2, this.view.width = i3, this.view.height = a2, this.updateProjectionMatrix();
      }, clearViewOffset: function() {
        null !== this.view && (this.view.enabled = false), this.updateProjectionMatrix();
      }, updateProjectionMatrix: function() {
        var e2 = (this.right - this.left) / (2 * this.zoom), t2 = (this.top - this.bottom) / (2 * this.zoom), n2 = (this.right + this.left) / 2, r2 = (this.top + this.bottom) / 2, i3 = n2 - e2, a2 = n2 + e2, o2 = r2 + t2, s2 = r2 - t2;
        if (null !== this.view && this.view.enabled) {
          var c3 = this.zoom / (this.view.width / this.view.fullWidth), u2 = this.zoom / (this.view.height / this.view.fullHeight), l2 = (this.right - this.left) / this.view.width, h2 = (this.top - this.bottom) / this.view.height;
          a2 = (i3 += l2 * (this.view.offsetX / c3)) + l2 * (this.view.width / c3), s2 = (o2 -= h2 * (this.view.offsetY / u2)) - h2 * (this.view.height / u2);
        }
        this.projectionMatrix.makeOrthographic(i3, a2, o2, s2, this.near, this.far);
      }, toJSON: function(e2) {
        var t2 = dn.prototype.toJSON.call(this, e2);
        return t2.object.zoom = this.zoom, t2.object.left = this.left, t2.object.right = this.right, t2.object.top = this.top, t2.object.bottom = this.bottom, t2.object.near = this.near, t2.object.far = this.far, null !== this.view && (t2.object.view = Object.assign({}, this.view)), t2;
      } }), Object.assign(mn.prototype, { clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        this.a = e2.a, this.b = e2.b, this.c = e2.c, this.normal.copy(e2.normal), this.color.copy(e2.color), this.materialIndex = e2.materialIndex;
        for (var t2 = 0, n2 = e2.vertexNormals.length; t2 < n2; t2++)
          this.vertexNormals[t2] = e2.vertexNormals[t2].clone();
        for (t2 = 0, n2 = e2.vertexColors.length; t2 < n2; t2++)
          this.vertexColors[t2] = e2.vertexColors[t2].clone();
        return this;
      } });
      var gn = 0;
      function vn() {
        Object.defineProperty(this, "id", { value: gn += 2 }), this.uuid = Bt.generateUUID(), this.name = "", this.type = "Geometry", this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [[]], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.elementsNeedUpdate = false, this.verticesNeedUpdate = false, this.uvsNeedUpdate = false, this.normalsNeedUpdate = false, this.colorsNeedUpdate = false, this.lineDistancesNeedUpdate = false, this.groupsNeedUpdate = false;
      }
      function yn(e2, t2, n2) {
        if (Array.isArray(e2))
          throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.name = "", this.array = e2, this.itemSize = t2, this.count = void 0 !== e2 ? e2.length / t2 : 0, this.normalized = true === n2, this.dynamic = false, this.updateRange = { offset: 0, count: -1 }, this.version = 0;
      }
      function xn(e2, t2, n2) {
        yn.call(this, new Int8Array(e2), t2, n2);
      }
      function bn(e2, t2, n2) {
        yn.call(this, new Uint8Array(e2), t2, n2);
      }
      function wn(e2, t2, n2) {
        yn.call(this, new Uint8ClampedArray(e2), t2, n2);
      }
      function _n(e2, t2, n2) {
        yn.call(this, new Int16Array(e2), t2, n2);
      }
      function Mn(e2, t2, n2) {
        yn.call(this, new Uint16Array(e2), t2, n2);
      }
      function En(e2, t2, n2) {
        yn.call(this, new Int32Array(e2), t2, n2);
      }
      function Tn(e2, t2, n2) {
        yn.call(this, new Uint32Array(e2), t2, n2);
      }
      function Sn(e2, t2, n2) {
        yn.call(this, new Float32Array(e2), t2, n2);
      }
      function An(e2, t2, n2) {
        yn.call(this, new Float64Array(e2), t2, n2);
      }
      function Ln() {
        this.vertices = [], this.normals = [], this.colors = [], this.uvs = [], this.uvs2 = [], this.groups = [], this.morphTargets = {}, this.skinWeights = [], this.skinIndices = [], this.boundingBox = null, this.boundingSphere = null, this.verticesNeedUpdate = false, this.normalsNeedUpdate = false, this.colorsNeedUpdate = false, this.uvsNeedUpdate = false, this.groupsNeedUpdate = false;
      }
      function Rn(e2) {
        if (0 === e2.length)
          return -1 / 0;
        for (var t2 = e2[0], n2 = 1, r2 = e2.length; n2 < r2; ++n2)
          e2[n2] > t2 && (t2 = e2[n2]);
        return t2;
      }
      vn.prototype = Object.assign(Object.create(r.prototype), { constructor: vn, isGeometry: true, applyMatrix: function(e2) {
        for (var t2 = new kt().getNormalMatrix(e2), n2 = 0, r2 = this.vertices.length; n2 < r2; n2++) {
          this.vertices[n2].applyMatrix4(e2);
        }
        for (n2 = 0, r2 = this.faces.length; n2 < r2; n2++) {
          var i3 = this.faces[n2];
          i3.normal.applyMatrix3(t2).normalize();
          for (var a2 = 0, o2 = i3.vertexNormals.length; a2 < o2; a2++)
            i3.vertexNormals[a2].applyMatrix3(t2).normalize();
        }
        return null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this.verticesNeedUpdate = true, this.normalsNeedUpdate = true, this;
      }, rotateX: function() {
        var e2 = new Gt();
        return function(t2) {
          return e2.makeRotationX(t2), this.applyMatrix(e2), this;
        };
      }(), rotateY: function() {
        var e2 = new Gt();
        return function(t2) {
          return e2.makeRotationY(t2), this.applyMatrix(e2), this;
        };
      }(), rotateZ: function() {
        var e2 = new Gt();
        return function(t2) {
          return e2.makeRotationZ(t2), this.applyMatrix(e2), this;
        };
      }(), translate: function() {
        var e2 = new Gt();
        return function(t2, n2, r2) {
          return e2.makeTranslation(t2, n2, r2), this.applyMatrix(e2), this;
        };
      }(), scale: function() {
        var e2 = new Gt();
        return function(t2, n2, r2) {
          return e2.makeScale(t2, n2, r2), this.applyMatrix(e2), this;
        };
      }(), lookAt: function() {
        var e2 = new dn();
        return function(t2) {
          e2.lookAt(t2), e2.updateMatrix(), this.applyMatrix(e2.matrix);
        };
      }(), fromBufferGeometry: function(e2) {
        var t2 = this, n2 = null !== e2.index ? e2.index.array : void 0, r2 = e2.attributes, i3 = r2.position.array, a2 = void 0 !== r2.normal ? r2.normal.array : void 0, o2 = void 0 !== r2.color ? r2.color.array : void 0, s2 = void 0 !== r2.uv ? r2.uv.array : void 0, c3 = void 0 !== r2.uv2 ? r2.uv2.array : void 0;
        void 0 !== c3 && (this.faceVertexUvs[1] = []);
        for (var u2 = [], l2 = [], h2 = [], d2 = 0, p2 = 0; d2 < i3.length; d2 += 3, p2 += 2)
          t2.vertices.push(new Ht(i3[d2], i3[d2 + 1], i3[d2 + 2])), void 0 !== a2 && u2.push(new Ht(a2[d2], a2[d2 + 1], a2[d2 + 2])), void 0 !== o2 && t2.colors.push(new rn(o2[d2], o2[d2 + 1], o2[d2 + 2])), void 0 !== s2 && l2.push(new Ft(s2[p2], s2[p2 + 1])), void 0 !== c3 && h2.push(new Ft(c3[p2], c3[p2 + 1]));
        function f2(e3, n3, r3, i4) {
          var d3 = new mn(e3, n3, r3, void 0 !== a2 ? [u2[e3].clone(), u2[n3].clone(), u2[r3].clone()] : [], void 0 !== o2 ? [t2.colors[e3].clone(), t2.colors[n3].clone(), t2.colors[r3].clone()] : [], i4);
          t2.faces.push(d3), void 0 !== s2 && t2.faceVertexUvs[0].push([l2[e3].clone(), l2[n3].clone(), l2[r3].clone()]), void 0 !== c3 && t2.faceVertexUvs[1].push([h2[e3].clone(), h2[n3].clone(), h2[r3].clone()]);
        }
        var m3 = e2.groups;
        if (m3.length > 0)
          for (d2 = 0; d2 < m3.length; d2++)
            for (var g2 = m3[d2], v2 = g2.start, y2 = (p2 = v2, v2 + g2.count); p2 < y2; p2 += 3)
              void 0 !== n2 ? f2(n2[p2], n2[p2 + 1], n2[p2 + 2], g2.materialIndex) : f2(p2, p2 + 1, p2 + 2, g2.materialIndex);
        else if (void 0 !== n2)
          for (d2 = 0; d2 < n2.length; d2 += 3)
            f2(n2[d2], n2[d2 + 1], n2[d2 + 2]);
        else
          for (d2 = 0; d2 < i3.length / 3; d2 += 3)
            f2(d2, d2 + 1, d2 + 2);
        return this.computeFaceNormals(), null !== e2.boundingBox && (this.boundingBox = e2.boundingBox.clone()), null !== e2.boundingSphere && (this.boundingSphere = e2.boundingSphere.clone()), this;
      }, center: function() {
        var e2 = new Ht();
        return function() {
          return this.computeBoundingBox(), this.boundingBox.getCenter(e2).negate(), this.translate(e2.x, e2.y, e2.z), this;
        };
      }(), normalize: function() {
        this.computeBoundingSphere();
        var e2 = this.boundingSphere.center, t2 = this.boundingSphere.radius, n2 = 0 === t2 ? 1 : 1 / t2, r2 = new Gt();
        return r2.set(n2, 0, 0, -n2 * e2.x, 0, n2, 0, -n2 * e2.y, 0, 0, n2, -n2 * e2.z, 0, 0, 0, 1), this.applyMatrix(r2), this;
      }, computeFaceNormals: function() {
        for (var e2 = new Ht(), t2 = new Ht(), n2 = 0, r2 = this.faces.length; n2 < r2; n2++) {
          var i3 = this.faces[n2], a2 = this.vertices[i3.a], o2 = this.vertices[i3.b], s2 = this.vertices[i3.c];
          e2.subVectors(s2, o2), t2.subVectors(a2, o2), e2.cross(t2), e2.normalize(), i3.normal.copy(e2);
        }
      }, computeVertexNormals: function(e2) {
        var t2, n2, r2, i3, a2, o2;
        for (void 0 === e2 && (e2 = true), o2 = new Array(this.vertices.length), t2 = 0, n2 = this.vertices.length; t2 < n2; t2++)
          o2[t2] = new Ht();
        if (e2) {
          var s2, c3, u2, l2 = new Ht(), h2 = new Ht();
          for (r2 = 0, i3 = this.faces.length; r2 < i3; r2++)
            a2 = this.faces[r2], s2 = this.vertices[a2.a], c3 = this.vertices[a2.b], u2 = this.vertices[a2.c], l2.subVectors(u2, c3), h2.subVectors(s2, c3), l2.cross(h2), o2[a2.a].add(l2), o2[a2.b].add(l2), o2[a2.c].add(l2);
        } else
          for (this.computeFaceNormals(), r2 = 0, i3 = this.faces.length; r2 < i3; r2++)
            o2[(a2 = this.faces[r2]).a].add(a2.normal), o2[a2.b].add(a2.normal), o2[a2.c].add(a2.normal);
        for (t2 = 0, n2 = this.vertices.length; t2 < n2; t2++)
          o2[t2].normalize();
        for (r2 = 0, i3 = this.faces.length; r2 < i3; r2++) {
          var d2 = (a2 = this.faces[r2]).vertexNormals;
          3 === d2.length ? (d2[0].copy(o2[a2.a]), d2[1].copy(o2[a2.b]), d2[2].copy(o2[a2.c])) : (d2[0] = o2[a2.a].clone(), d2[1] = o2[a2.b].clone(), d2[2] = o2[a2.c].clone());
        }
        this.faces.length > 0 && (this.normalsNeedUpdate = true);
      }, computeFlatVertexNormals: function() {
        var e2, t2, n2;
        for (this.computeFaceNormals(), e2 = 0, t2 = this.faces.length; e2 < t2; e2++) {
          var r2 = (n2 = this.faces[e2]).vertexNormals;
          3 === r2.length ? (r2[0].copy(n2.normal), r2[1].copy(n2.normal), r2[2].copy(n2.normal)) : (r2[0] = n2.normal.clone(), r2[1] = n2.normal.clone(), r2[2] = n2.normal.clone());
        }
        this.faces.length > 0 && (this.normalsNeedUpdate = true);
      }, computeMorphNormals: function() {
        var e2, t2, n2, r2, i3;
        for (n2 = 0, r2 = this.faces.length; n2 < r2; n2++)
          for ((i3 = this.faces[n2]).__originalFaceNormal ? i3.__originalFaceNormal.copy(i3.normal) : i3.__originalFaceNormal = i3.normal.clone(), i3.__originalVertexNormals || (i3.__originalVertexNormals = []), e2 = 0, t2 = i3.vertexNormals.length; e2 < t2; e2++)
            i3.__originalVertexNormals[e2] ? i3.__originalVertexNormals[e2].copy(i3.vertexNormals[e2]) : i3.__originalVertexNormals[e2] = i3.vertexNormals[e2].clone();
        var a2 = new vn();
        for (a2.faces = this.faces, e2 = 0, t2 = this.morphTargets.length; e2 < t2; e2++) {
          if (!this.morphNormals[e2]) {
            this.morphNormals[e2] = {}, this.morphNormals[e2].faceNormals = [], this.morphNormals[e2].vertexNormals = [];
            var o2 = this.morphNormals[e2].faceNormals, s2 = this.morphNormals[e2].vertexNormals;
            for (n2 = 0, r2 = this.faces.length; n2 < r2; n2++)
              c3 = new Ht(), u2 = { a: new Ht(), b: new Ht(), c: new Ht() }, o2.push(c3), s2.push(u2);
          }
          var c3, u2, l2 = this.morphNormals[e2];
          for (a2.vertices = this.morphTargets[e2].vertices, a2.computeFaceNormals(), a2.computeVertexNormals(), n2 = 0, r2 = this.faces.length; n2 < r2; n2++)
            i3 = this.faces[n2], c3 = l2.faceNormals[n2], u2 = l2.vertexNormals[n2], c3.copy(i3.normal), u2.a.copy(i3.vertexNormals[0]), u2.b.copy(i3.vertexNormals[1]), u2.c.copy(i3.vertexNormals[2]);
        }
        for (n2 = 0, r2 = this.faces.length; n2 < r2; n2++)
          (i3 = this.faces[n2]).normal = i3.__originalFaceNormal, i3.vertexNormals = i3.__originalVertexNormals;
      }, computeBoundingBox: function() {
        null === this.boundingBox && (this.boundingBox = new Jt()), this.boundingBox.setFromPoints(this.vertices);
      }, computeBoundingSphere: function() {
        null === this.boundingSphere && (this.boundingSphere = new Kt()), this.boundingSphere.setFromPoints(this.vertices);
      }, merge: function(e2, t2, n2) {
        if (e2 && e2.isGeometry) {
          var r2, i3 = this.vertices.length, a2 = this.vertices, o2 = e2.vertices, s2 = this.faces, c3 = e2.faces, u2 = this.faceVertexUvs[0], l2 = e2.faceVertexUvs[0], h2 = this.colors, d2 = e2.colors;
          void 0 === n2 && (n2 = 0), void 0 !== t2 && (r2 = new kt().getNormalMatrix(t2));
          for (var p2 = 0, f2 = o2.length; p2 < f2; p2++) {
            var m3 = o2[p2].clone();
            void 0 !== t2 && m3.applyMatrix4(t2), a2.push(m3);
          }
          for (p2 = 0, f2 = d2.length; p2 < f2; p2++)
            h2.push(d2[p2].clone());
          for (p2 = 0, f2 = c3.length; p2 < f2; p2++) {
            var g2, v2, y2, x2 = c3[p2], b2 = x2.vertexNormals, w2 = x2.vertexColors;
            (g2 = new mn(x2.a + i3, x2.b + i3, x2.c + i3)).normal.copy(x2.normal), void 0 !== r2 && g2.normal.applyMatrix3(r2).normalize();
            for (var _2 = 0, M2 = b2.length; _2 < M2; _2++)
              v2 = b2[_2].clone(), void 0 !== r2 && v2.applyMatrix3(r2).normalize(), g2.vertexNormals.push(v2);
            g2.color.copy(x2.color);
            for (_2 = 0, M2 = w2.length; _2 < M2; _2++)
              y2 = w2[_2], g2.vertexColors.push(y2.clone());
            g2.materialIndex = x2.materialIndex + n2, s2.push(g2);
          }
          for (p2 = 0, f2 = l2.length; p2 < f2; p2++) {
            var E2 = l2[p2], T2 = [];
            if (void 0 !== E2) {
              for (_2 = 0, M2 = E2.length; _2 < M2; _2++)
                T2.push(E2[_2].clone());
              u2.push(T2);
            }
          }
        } else
          console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", e2);
      }, mergeMesh: function(e2) {
        e2 && e2.isMesh ? (e2.matrixAutoUpdate && e2.updateMatrix(), this.merge(e2.geometry, e2.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", e2);
      }, mergeVertices: function() {
        var e2, t2, n2, r2, i3, a2, o2, s2, c3 = {}, u2 = [], l2 = [], h2 = Math.pow(10, 4);
        for (n2 = 0, r2 = this.vertices.length; n2 < r2; n2++)
          e2 = this.vertices[n2], void 0 === c3[t2 = Math.round(e2.x * h2) + "_" + Math.round(e2.y * h2) + "_" + Math.round(e2.z * h2)] ? (c3[t2] = n2, u2.push(this.vertices[n2]), l2[n2] = u2.length - 1) : l2[n2] = l2[c3[t2]];
        var d2 = [];
        for (n2 = 0, r2 = this.faces.length; n2 < r2; n2++) {
          (i3 = this.faces[n2]).a = l2[i3.a], i3.b = l2[i3.b], i3.c = l2[i3.c], a2 = [i3.a, i3.b, i3.c];
          for (var p2 = 0; p2 < 3; p2++)
            if (a2[p2] === a2[(p2 + 1) % 3]) {
              d2.push(n2);
              break;
            }
        }
        for (n2 = d2.length - 1; n2 >= 0; n2--) {
          var f2 = d2[n2];
          for (this.faces.splice(f2, 1), o2 = 0, s2 = this.faceVertexUvs.length; o2 < s2; o2++)
            this.faceVertexUvs[o2].splice(f2, 1);
        }
        var m3 = this.vertices.length - u2.length;
        return this.vertices = u2, m3;
      }, setFromPoints: function(e2) {
        this.vertices = [];
        for (var t2 = 0, n2 = e2.length; t2 < n2; t2++) {
          var r2 = e2[t2];
          this.vertices.push(new Ht(r2.x, r2.y, r2.z || 0));
        }
        return this;
      }, sortFacesByMaterialIndex: function() {
        for (var e2 = this.faces, t2 = e2.length, n2 = 0; n2 < t2; n2++)
          e2[n2]._id = n2;
        e2.sort(function(e3, t3) {
          return e3.materialIndex - t3.materialIndex;
        });
        var r2, i3, a2 = this.faceVertexUvs[0], o2 = this.faceVertexUvs[1];
        a2 && a2.length === t2 && (r2 = []), o2 && o2.length === t2 && (i3 = []);
        for (n2 = 0; n2 < t2; n2++) {
          var s2 = e2[n2]._id;
          r2 && r2.push(a2[s2]), i3 && i3.push(o2[s2]);
        }
        r2 && (this.faceVertexUvs[0] = r2), i3 && (this.faceVertexUvs[1] = i3);
      }, toJSON: function() {
        var e2 = { metadata: { version: 4.5, type: "Geometry", generator: "Geometry.toJSON" } };
        if (e2.uuid = this.uuid, e2.type = this.type, "" !== this.name && (e2.name = this.name), void 0 !== this.parameters) {
          var t2 = this.parameters;
          for (var n2 in t2)
            void 0 !== t2[n2] && (e2[n2] = t2[n2]);
          return e2;
        }
        for (var r2 = [], i3 = 0; i3 < this.vertices.length; i3++) {
          var a2 = this.vertices[i3];
          r2.push(a2.x, a2.y, a2.z);
        }
        var o2 = [], s2 = [], c3 = {}, u2 = [], l2 = {}, h2 = [], d2 = {};
        for (i3 = 0; i3 < this.faces.length; i3++) {
          var p2 = this.faces[i3], f2 = void 0 !== this.faceVertexUvs[0][i3], m3 = p2.normal.length() > 0, g2 = p2.vertexNormals.length > 0, v2 = 1 !== p2.color.r || 1 !== p2.color.g || 1 !== p2.color.b, y2 = p2.vertexColors.length > 0, x2 = 0;
          if (x2 = M2(x2 = M2(x2 = M2(x2 = M2(x2 = M2(x2 = M2(x2 = M2(x2 = M2(x2, 0, 0), 1, true), 2, false), 3, f2), 4, m3), 5, g2), 6, v2), 7, y2), o2.push(x2), o2.push(p2.a, p2.b, p2.c), o2.push(p2.materialIndex), f2) {
            var b2 = this.faceVertexUvs[0][i3];
            o2.push(S2(b2[0]), S2(b2[1]), S2(b2[2]));
          }
          if (m3 && o2.push(E2(p2.normal)), g2) {
            var w2 = p2.vertexNormals;
            o2.push(E2(w2[0]), E2(w2[1]), E2(w2[2]));
          }
          if (v2 && o2.push(T2(p2.color)), y2) {
            var _2 = p2.vertexColors;
            o2.push(T2(_2[0]), T2(_2[1]), T2(_2[2]));
          }
        }
        function M2(e3, t3, n3) {
          return n3 ? e3 | 1 << t3 : e3 & ~(1 << t3);
        }
        function E2(e3) {
          var t3 = e3.x.toString() + e3.y.toString() + e3.z.toString();
          return void 0 !== c3[t3] ? c3[t3] : (c3[t3] = s2.length / 3, s2.push(e3.x, e3.y, e3.z), c3[t3]);
        }
        function T2(e3) {
          var t3 = e3.r.toString() + e3.g.toString() + e3.b.toString();
          return void 0 !== l2[t3] ? l2[t3] : (l2[t3] = u2.length, u2.push(e3.getHex()), l2[t3]);
        }
        function S2(e3) {
          var t3 = e3.x.toString() + e3.y.toString();
          return void 0 !== d2[t3] ? d2[t3] : (d2[t3] = h2.length / 2, h2.push(e3.x, e3.y), d2[t3]);
        }
        return e2.data = {}, e2.data.vertices = r2, e2.data.normals = s2, u2.length > 0 && (e2.data.colors = u2), h2.length > 0 && (e2.data.uvs = [h2]), e2.data.faces = o2, e2;
      }, clone: function() {
        return new vn().copy(this);
      }, copy: function(e2) {
        var t2, n2, r2, i3, a2, o2;
        this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [[]], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.name = e2.name;
        var s2 = e2.vertices;
        for (t2 = 0, n2 = s2.length; t2 < n2; t2++)
          this.vertices.push(s2[t2].clone());
        var c3 = e2.colors;
        for (t2 = 0, n2 = c3.length; t2 < n2; t2++)
          this.colors.push(c3[t2].clone());
        var u2 = e2.faces;
        for (t2 = 0, n2 = u2.length; t2 < n2; t2++)
          this.faces.push(u2[t2].clone());
        for (t2 = 0, n2 = e2.faceVertexUvs.length; t2 < n2; t2++) {
          var l2 = e2.faceVertexUvs[t2];
          for (void 0 === this.faceVertexUvs[t2] && (this.faceVertexUvs[t2] = []), r2 = 0, i3 = l2.length; r2 < i3; r2++) {
            var h2 = l2[r2], d2 = [];
            for (a2 = 0, o2 = h2.length; a2 < o2; a2++) {
              var p2 = h2[a2];
              d2.push(p2.clone());
            }
            this.faceVertexUvs[t2].push(d2);
          }
        }
        var f2 = e2.morphTargets;
        for (t2 = 0, n2 = f2.length; t2 < n2; t2++) {
          var m3 = {};
          if (m3.name = f2[t2].name, void 0 !== f2[t2].vertices)
            for (m3.vertices = [], r2 = 0, i3 = f2[t2].vertices.length; r2 < i3; r2++)
              m3.vertices.push(f2[t2].vertices[r2].clone());
          if (void 0 !== f2[t2].normals)
            for (m3.normals = [], r2 = 0, i3 = f2[t2].normals.length; r2 < i3; r2++)
              m3.normals.push(f2[t2].normals[r2].clone());
          this.morphTargets.push(m3);
        }
        var g2 = e2.morphNormals;
        for (t2 = 0, n2 = g2.length; t2 < n2; t2++) {
          var v2 = {};
          if (void 0 !== g2[t2].vertexNormals)
            for (v2.vertexNormals = [], r2 = 0, i3 = g2[t2].vertexNormals.length; r2 < i3; r2++) {
              var y2 = g2[t2].vertexNormals[r2], x2 = {};
              x2.a = y2.a.clone(), x2.b = y2.b.clone(), x2.c = y2.c.clone(), v2.vertexNormals.push(x2);
            }
          if (void 0 !== g2[t2].faceNormals)
            for (v2.faceNormals = [], r2 = 0, i3 = g2[t2].faceNormals.length; r2 < i3; r2++)
              v2.faceNormals.push(g2[t2].faceNormals[r2].clone());
          this.morphNormals.push(v2);
        }
        var b2 = e2.skinWeights;
        for (t2 = 0, n2 = b2.length; t2 < n2; t2++)
          this.skinWeights.push(b2[t2].clone());
        var w2 = e2.skinIndices;
        for (t2 = 0, n2 = w2.length; t2 < n2; t2++)
          this.skinIndices.push(w2[t2].clone());
        var _2 = e2.lineDistances;
        for (t2 = 0, n2 = _2.length; t2 < n2; t2++)
          this.lineDistances.push(_2[t2]);
        var M2 = e2.boundingBox;
        null !== M2 && (this.boundingBox = M2.clone());
        var E2 = e2.boundingSphere;
        return null !== E2 && (this.boundingSphere = E2.clone()), this.elementsNeedUpdate = e2.elementsNeedUpdate, this.verticesNeedUpdate = e2.verticesNeedUpdate, this.uvsNeedUpdate = e2.uvsNeedUpdate, this.normalsNeedUpdate = e2.normalsNeedUpdate, this.colorsNeedUpdate = e2.colorsNeedUpdate, this.lineDistancesNeedUpdate = e2.lineDistancesNeedUpdate, this.groupsNeedUpdate = e2.groupsNeedUpdate, this;
      }, dispose: function() {
        this.dispatchEvent({ type: "dispose" });
      } }), Object.defineProperty(yn.prototype, "needsUpdate", { set: function(e2) {
        true === e2 && this.version++;
      } }), Object.assign(yn.prototype, { isBufferAttribute: true, onUploadCallback: function() {
      }, setArray: function(e2) {
        if (Array.isArray(e2))
          throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        return this.count = void 0 !== e2 ? e2.length / this.itemSize : 0, this.array = e2, this;
      }, setDynamic: function(e2) {
        return this.dynamic = e2, this;
      }, copy: function(e2) {
        return this.name = e2.name, this.array = new e2.array.constructor(e2.array), this.itemSize = e2.itemSize, this.count = e2.count, this.normalized = e2.normalized, this.dynamic = e2.dynamic, this;
      }, copyAt: function(e2, t2, n2) {
        e2 *= this.itemSize, n2 *= t2.itemSize;
        for (var r2 = 0, i3 = this.itemSize; r2 < i3; r2++)
          this.array[e2 + r2] = t2.array[n2 + r2];
        return this;
      }, copyArray: function(e2) {
        return this.array.set(e2), this;
      }, copyColorsArray: function(e2) {
        for (var t2 = this.array, n2 = 0, r2 = 0, i3 = e2.length; r2 < i3; r2++) {
          var a2 = e2[r2];
          void 0 === a2 && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", r2), a2 = new rn()), t2[n2++] = a2.r, t2[n2++] = a2.g, t2[n2++] = a2.b;
        }
        return this;
      }, copyVector2sArray: function(e2) {
        for (var t2 = this.array, n2 = 0, r2 = 0, i3 = e2.length; r2 < i3; r2++) {
          var a2 = e2[r2];
          void 0 === a2 && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", r2), a2 = new Ft()), t2[n2++] = a2.x, t2[n2++] = a2.y;
        }
        return this;
      }, copyVector3sArray: function(e2) {
        for (var t2 = this.array, n2 = 0, r2 = 0, i3 = e2.length; r2 < i3; r2++) {
          var a2 = e2[r2];
          void 0 === a2 && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", r2), a2 = new Ht()), t2[n2++] = a2.x, t2[n2++] = a2.y, t2[n2++] = a2.z;
        }
        return this;
      }, copyVector4sArray: function(e2) {
        for (var t2 = this.array, n2 = 0, r2 = 0, i3 = e2.length; r2 < i3; r2++) {
          var a2 = e2[r2];
          void 0 === a2 && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", r2), a2 = new Xt()), t2[n2++] = a2.x, t2[n2++] = a2.y, t2[n2++] = a2.z, t2[n2++] = a2.w;
        }
        return this;
      }, set: function(e2, t2) {
        return void 0 === t2 && (t2 = 0), this.array.set(e2, t2), this;
      }, getX: function(e2) {
        return this.array[e2 * this.itemSize];
      }, setX: function(e2, t2) {
        return this.array[e2 * this.itemSize] = t2, this;
      }, getY: function(e2) {
        return this.array[e2 * this.itemSize + 1];
      }, setY: function(e2, t2) {
        return this.array[e2 * this.itemSize + 1] = t2, this;
      }, getZ: function(e2) {
        return this.array[e2 * this.itemSize + 2];
      }, setZ: function(e2, t2) {
        return this.array[e2 * this.itemSize + 2] = t2, this;
      }, getW: function(e2) {
        return this.array[e2 * this.itemSize + 3];
      }, setW: function(e2, t2) {
        return this.array[e2 * this.itemSize + 3] = t2, this;
      }, setXY: function(e2, t2, n2) {
        return e2 *= this.itemSize, this.array[e2 + 0] = t2, this.array[e2 + 1] = n2, this;
      }, setXYZ: function(e2, t2, n2, r2) {
        return e2 *= this.itemSize, this.array[e2 + 0] = t2, this.array[e2 + 1] = n2, this.array[e2 + 2] = r2, this;
      }, setXYZW: function(e2, t2, n2, r2, i3) {
        return e2 *= this.itemSize, this.array[e2 + 0] = t2, this.array[e2 + 1] = n2, this.array[e2 + 2] = r2, this.array[e2 + 3] = i3, this;
      }, onUpload: function(e2) {
        return this.onUploadCallback = e2, this;
      }, clone: function() {
        return new this.constructor(this.array, this.itemSize).copy(this);
      } }), xn.prototype = Object.create(yn.prototype), xn.prototype.constructor = xn, bn.prototype = Object.create(yn.prototype), bn.prototype.constructor = bn, wn.prototype = Object.create(yn.prototype), wn.prototype.constructor = wn, _n.prototype = Object.create(yn.prototype), _n.prototype.constructor = _n, Mn.prototype = Object.create(yn.prototype), Mn.prototype.constructor = Mn, En.prototype = Object.create(yn.prototype), En.prototype.constructor = En, Tn.prototype = Object.create(yn.prototype), Tn.prototype.constructor = Tn, Sn.prototype = Object.create(yn.prototype), Sn.prototype.constructor = Sn, An.prototype = Object.create(yn.prototype), An.prototype.constructor = An, Object.assign(Ln.prototype, { computeGroups: function(e2) {
        for (var t2, n2 = [], r2 = void 0, i3 = e2.faces, a2 = 0; a2 < i3.length; a2++) {
          var o2 = i3[a2];
          o2.materialIndex !== r2 && (r2 = o2.materialIndex, void 0 !== t2 && (t2.count = 3 * a2 - t2.start, n2.push(t2)), t2 = { start: 3 * a2, materialIndex: r2 });
        }
        void 0 !== t2 && (t2.count = 3 * a2 - t2.start, n2.push(t2)), this.groups = n2;
      }, fromGeometry: function(e2) {
        var t2, n2 = e2.faces, r2 = e2.vertices, i3 = e2.faceVertexUvs, a2 = i3[0] && i3[0].length > 0, o2 = i3[1] && i3[1].length > 0, s2 = e2.morphTargets, c3 = s2.length;
        if (c3 > 0) {
          t2 = [];
          for (var u2 = 0; u2 < c3; u2++)
            t2[u2] = [];
          this.morphTargets.position = t2;
        }
        var l2, h2 = e2.morphNormals, d2 = h2.length;
        if (d2 > 0) {
          l2 = [];
          for (u2 = 0; u2 < d2; u2++)
            l2[u2] = [];
          this.morphTargets.normal = l2;
        }
        var p2 = e2.skinIndices, f2 = e2.skinWeights, m3 = p2.length === r2.length, g2 = f2.length === r2.length;
        r2.length > 0 && 0 === n2.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
        for (u2 = 0; u2 < n2.length; u2++) {
          var v2 = n2[u2];
          this.vertices.push(r2[v2.a], r2[v2.b], r2[v2.c]);
          var y2 = v2.vertexNormals;
          if (3 === y2.length)
            this.normals.push(y2[0], y2[1], y2[2]);
          else {
            var x2 = v2.normal;
            this.normals.push(x2, x2, x2);
          }
          var b2, w2 = v2.vertexColors;
          if (3 === w2.length)
            this.colors.push(w2[0], w2[1], w2[2]);
          else {
            var _2 = v2.color;
            this.colors.push(_2, _2, _2);
          }
          if (true === a2)
            void 0 !== (b2 = i3[0][u2]) ? this.uvs.push(b2[0], b2[1], b2[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", u2), this.uvs.push(new Ft(), new Ft(), new Ft()));
          if (true === o2)
            void 0 !== (b2 = i3[1][u2]) ? this.uvs2.push(b2[0], b2[1], b2[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", u2), this.uvs2.push(new Ft(), new Ft(), new Ft()));
          for (var M2 = 0; M2 < c3; M2++) {
            var E2 = s2[M2].vertices;
            t2[M2].push(E2[v2.a], E2[v2.b], E2[v2.c]);
          }
          for (M2 = 0; M2 < d2; M2++) {
            var T2 = h2[M2].vertexNormals[u2];
            l2[M2].push(T2.a, T2.b, T2.c);
          }
          m3 && this.skinIndices.push(p2[v2.a], p2[v2.b], p2[v2.c]), g2 && this.skinWeights.push(f2[v2.a], f2[v2.b], f2[v2.c]);
        }
        return this.computeGroups(e2), this.verticesNeedUpdate = e2.verticesNeedUpdate, this.normalsNeedUpdate = e2.normalsNeedUpdate, this.colorsNeedUpdate = e2.colorsNeedUpdate, this.uvsNeedUpdate = e2.uvsNeedUpdate, this.groupsNeedUpdate = e2.groupsNeedUpdate, this;
      } });
      var Cn = 1;
      function Pn() {
        Object.defineProperty(this, "id", { value: Cn += 2 }), this.uuid = Bt.generateUUID(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
      }
      function On(e2, t2, n2, r2, i3, a2) {
        vn.call(this), this.type = "BoxGeometry", this.parameters = { width: e2, height: t2, depth: n2, widthSegments: r2, heightSegments: i3, depthSegments: a2 }, this.fromBufferGeometry(new Nn(e2, t2, n2, r2, i3, a2)), this.mergeVertices();
      }
      function Nn(e2, t2, n2, r2, i3, a2) {
        Pn.call(this), this.type = "BoxBufferGeometry", this.parameters = { width: e2, height: t2, depth: n2, widthSegments: r2, heightSegments: i3, depthSegments: a2 };
        var o2 = this;
        e2 = e2 || 1, t2 = t2 || 1, n2 = n2 || 1, r2 = Math.floor(r2) || 1, i3 = Math.floor(i3) || 1;
        var s2 = [], c3 = [], u2 = [], l2 = [], h2 = 0, d2 = 0;
        function p2(e3, t3, n3, r3, i4, a3, p3, f2, m3, g2, v2) {
          var y2, x2, b2 = a3 / m3, w2 = p3 / g2, _2 = a3 / 2, M2 = p3 / 2, E2 = f2 / 2, T2 = m3 + 1, S2 = g2 + 1, A2 = 0, L2 = 0, R2 = new Ht();
          for (x2 = 0; x2 < S2; x2++) {
            var C2 = x2 * w2 - M2;
            for (y2 = 0; y2 < T2; y2++) {
              var P2 = y2 * b2 - _2;
              R2[e3] = P2 * r3, R2[t3] = C2 * i4, R2[n3] = E2, c3.push(R2.x, R2.y, R2.z), R2[e3] = 0, R2[t3] = 0, R2[n3] = f2 > 0 ? 1 : -1, u2.push(R2.x, R2.y, R2.z), l2.push(y2 / m3), l2.push(1 - x2 / g2), A2 += 1;
            }
          }
          for (x2 = 0; x2 < g2; x2++)
            for (y2 = 0; y2 < m3; y2++) {
              var O2 = h2 + y2 + T2 * x2, N2 = h2 + y2 + T2 * (x2 + 1), I2 = h2 + (y2 + 1) + T2 * (x2 + 1), D2 = h2 + (y2 + 1) + T2 * x2;
              s2.push(O2, N2, D2), s2.push(N2, I2, D2), L2 += 6;
            }
          o2.addGroup(d2, L2, v2), d2 += L2, h2 += A2;
        }
        p2("z", "y", "x", -1, -1, n2, t2, e2, a2 = Math.floor(a2) || 1, i3, 0), p2("z", "y", "x", 1, -1, n2, t2, -e2, a2, i3, 1), p2("x", "z", "y", 1, 1, e2, n2, t2, r2, a2, 2), p2("x", "z", "y", 1, -1, e2, n2, -t2, r2, a2, 3), p2("x", "y", "z", 1, -1, e2, t2, n2, r2, i3, 4), p2("x", "y", "z", -1, -1, e2, t2, -n2, r2, i3, 5), this.setIndex(s2), this.addAttribute("position", new Sn(c3, 3)), this.addAttribute("normal", new Sn(u2, 3)), this.addAttribute("uv", new Sn(l2, 2));
      }
      function In(e2, t2, n2, r2) {
        vn.call(this), this.type = "PlaneGeometry", this.parameters = { width: e2, height: t2, widthSegments: n2, heightSegments: r2 }, this.fromBufferGeometry(new Dn(e2, t2, n2, r2)), this.mergeVertices();
      }
      function Dn(e2, t2, n2, r2) {
        Pn.call(this), this.type = "PlaneBufferGeometry", this.parameters = { width: e2, height: t2, widthSegments: n2, heightSegments: r2 };
        var i3, a2, o2 = (e2 = e2 || 1) / 2, s2 = (t2 = t2 || 1) / 2, c3 = Math.floor(n2) || 1, u2 = Math.floor(r2) || 1, l2 = c3 + 1, h2 = u2 + 1, d2 = e2 / c3, p2 = t2 / u2, f2 = [], m3 = [], g2 = [], v2 = [];
        for (a2 = 0; a2 < h2; a2++) {
          var y2 = a2 * p2 - s2;
          for (i3 = 0; i3 < l2; i3++) {
            var x2 = i3 * d2 - o2;
            m3.push(x2, -y2, 0), g2.push(0, 0, 1), v2.push(i3 / c3), v2.push(1 - a2 / u2);
          }
        }
        for (a2 = 0; a2 < u2; a2++)
          for (i3 = 0; i3 < c3; i3++) {
            var b2 = i3 + l2 * a2, w2 = i3 + l2 * (a2 + 1), _2 = i3 + 1 + l2 * (a2 + 1), M2 = i3 + 1 + l2 * a2;
            f2.push(b2, w2, M2), f2.push(w2, _2, M2);
          }
        this.setIndex(f2), this.addAttribute("position", new Sn(m3, 3)), this.addAttribute("normal", new Sn(g2, 3)), this.addAttribute("uv", new Sn(v2, 2));
      }
      Pn.prototype = Object.assign(Object.create(r.prototype), { constructor: Pn, isBufferGeometry: true, getIndex: function() {
        return this.index;
      }, setIndex: function(e2) {
        Array.isArray(e2) ? this.index = new (Rn(e2) > 65535 ? Tn : Mn)(e2, 1) : this.index = e2;
      }, addAttribute: function(e2, t2) {
        return t2 && t2.isBufferAttribute || t2 && t2.isInterleavedBufferAttribute ? "index" === e2 ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(t2), this) : (this.attributes[e2] = t2, this) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(e2, new yn(arguments[1], arguments[2])));
      }, getAttribute: function(e2) {
        return this.attributes[e2];
      }, removeAttribute: function(e2) {
        return delete this.attributes[e2], this;
      }, addGroup: function(e2, t2, n2) {
        this.groups.push({ start: e2, count: t2, materialIndex: void 0 !== n2 ? n2 : 0 });
      }, clearGroups: function() {
        this.groups = [];
      }, setDrawRange: function(e2, t2) {
        this.drawRange.start = e2, this.drawRange.count = t2;
      }, applyMatrix: function(e2) {
        var t2 = this.attributes.position;
        void 0 !== t2 && (e2.applyToBufferAttribute(t2), t2.needsUpdate = true);
        var n2 = this.attributes.normal;
        void 0 !== n2 && (new kt().getNormalMatrix(e2).applyToBufferAttribute(n2), n2.needsUpdate = true);
        return null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this;
      }, rotateX: function() {
        var e2 = new Gt();
        return function(t2) {
          return e2.makeRotationX(t2), this.applyMatrix(e2), this;
        };
      }(), rotateY: function() {
        var e2 = new Gt();
        return function(t2) {
          return e2.makeRotationY(t2), this.applyMatrix(e2), this;
        };
      }(), rotateZ: function() {
        var e2 = new Gt();
        return function(t2) {
          return e2.makeRotationZ(t2), this.applyMatrix(e2), this;
        };
      }(), translate: function() {
        var e2 = new Gt();
        return function(t2, n2, r2) {
          return e2.makeTranslation(t2, n2, r2), this.applyMatrix(e2), this;
        };
      }(), scale: function() {
        var e2 = new Gt();
        return function(t2, n2, r2) {
          return e2.makeScale(t2, n2, r2), this.applyMatrix(e2), this;
        };
      }(), lookAt: function() {
        var e2 = new dn();
        return function(t2) {
          e2.lookAt(t2), e2.updateMatrix(), this.applyMatrix(e2.matrix);
        };
      }(), center: function() {
        var e2 = new Ht();
        return function() {
          return this.computeBoundingBox(), this.boundingBox.getCenter(e2).negate(), this.translate(e2.x, e2.y, e2.z), this;
        };
      }(), setFromObject: function(e2) {
        var t2 = e2.geometry;
        if (e2.isPoints || e2.isLine) {
          var n2 = new Sn(3 * t2.vertices.length, 3), r2 = new Sn(3 * t2.colors.length, 3);
          if (this.addAttribute("position", n2.copyVector3sArray(t2.vertices)), this.addAttribute("color", r2.copyColorsArray(t2.colors)), t2.lineDistances && t2.lineDistances.length === t2.vertices.length) {
            var i3 = new Sn(t2.lineDistances.length, 1);
            this.addAttribute("lineDistance", i3.copyArray(t2.lineDistances));
          }
          null !== t2.boundingSphere && (this.boundingSphere = t2.boundingSphere.clone()), null !== t2.boundingBox && (this.boundingBox = t2.boundingBox.clone());
        } else
          e2.isMesh && t2 && t2.isGeometry && this.fromGeometry(t2);
        return this;
      }, setFromPoints: function(e2) {
        for (var t2 = [], n2 = 0, r2 = e2.length; n2 < r2; n2++) {
          var i3 = e2[n2];
          t2.push(i3.x, i3.y, i3.z || 0);
        }
        return this.addAttribute("position", new Sn(t2, 3)), this;
      }, updateFromObject: function(e2) {
        var t2, n2 = e2.geometry;
        if (e2.isMesh) {
          var r2 = n2.__directGeometry;
          if (true === n2.elementsNeedUpdate && (r2 = void 0, n2.elementsNeedUpdate = false), void 0 === r2)
            return this.fromGeometry(n2);
          r2.verticesNeedUpdate = n2.verticesNeedUpdate, r2.normalsNeedUpdate = n2.normalsNeedUpdate, r2.colorsNeedUpdate = n2.colorsNeedUpdate, r2.uvsNeedUpdate = n2.uvsNeedUpdate, r2.groupsNeedUpdate = n2.groupsNeedUpdate, n2.verticesNeedUpdate = false, n2.normalsNeedUpdate = false, n2.colorsNeedUpdate = false, n2.uvsNeedUpdate = false, n2.groupsNeedUpdate = false, n2 = r2;
        }
        return true === n2.verticesNeedUpdate && (void 0 !== (t2 = this.attributes.position) && (t2.copyVector3sArray(n2.vertices), t2.needsUpdate = true), n2.verticesNeedUpdate = false), true === n2.normalsNeedUpdate && (void 0 !== (t2 = this.attributes.normal) && (t2.copyVector3sArray(n2.normals), t2.needsUpdate = true), n2.normalsNeedUpdate = false), true === n2.colorsNeedUpdate && (void 0 !== (t2 = this.attributes.color) && (t2.copyColorsArray(n2.colors), t2.needsUpdate = true), n2.colorsNeedUpdate = false), n2.uvsNeedUpdate && (void 0 !== (t2 = this.attributes.uv) && (t2.copyVector2sArray(n2.uvs), t2.needsUpdate = true), n2.uvsNeedUpdate = false), n2.lineDistancesNeedUpdate && (void 0 !== (t2 = this.attributes.lineDistance) && (t2.copyArray(n2.lineDistances), t2.needsUpdate = true), n2.lineDistancesNeedUpdate = false), n2.groupsNeedUpdate && (n2.computeGroups(e2.geometry), this.groups = n2.groups, n2.groupsNeedUpdate = false), this;
      }, fromGeometry: function(e2) {
        return e2.__directGeometry = new Ln().fromGeometry(e2), this.fromDirectGeometry(e2.__directGeometry);
      }, fromDirectGeometry: function(e2) {
        var t2 = new Float32Array(3 * e2.vertices.length);
        if (this.addAttribute("position", new yn(t2, 3).copyVector3sArray(e2.vertices)), e2.normals.length > 0) {
          var n2 = new Float32Array(3 * e2.normals.length);
          this.addAttribute("normal", new yn(n2, 3).copyVector3sArray(e2.normals));
        }
        if (e2.colors.length > 0) {
          var r2 = new Float32Array(3 * e2.colors.length);
          this.addAttribute("color", new yn(r2, 3).copyColorsArray(e2.colors));
        }
        if (e2.uvs.length > 0) {
          var i3 = new Float32Array(2 * e2.uvs.length);
          this.addAttribute("uv", new yn(i3, 2).copyVector2sArray(e2.uvs));
        }
        if (e2.uvs2.length > 0) {
          var a2 = new Float32Array(2 * e2.uvs2.length);
          this.addAttribute("uv2", new yn(a2, 2).copyVector2sArray(e2.uvs2));
        }
        for (var o2 in this.groups = e2.groups, e2.morphTargets) {
          for (var s2 = [], c3 = e2.morphTargets[o2], u2 = 0, l2 = c3.length; u2 < l2; u2++) {
            var h2 = c3[u2], d2 = new Sn(3 * h2.length, 3);
            s2.push(d2.copyVector3sArray(h2));
          }
          this.morphAttributes[o2] = s2;
        }
        if (e2.skinIndices.length > 0) {
          var p2 = new Sn(4 * e2.skinIndices.length, 4);
          this.addAttribute("skinIndex", p2.copyVector4sArray(e2.skinIndices));
        }
        if (e2.skinWeights.length > 0) {
          var f2 = new Sn(4 * e2.skinWeights.length, 4);
          this.addAttribute("skinWeight", f2.copyVector4sArray(e2.skinWeights));
        }
        return null !== e2.boundingSphere && (this.boundingSphere = e2.boundingSphere.clone()), null !== e2.boundingBox && (this.boundingBox = e2.boundingBox.clone()), this;
      }, computeBoundingBox: function() {
        null === this.boundingBox && (this.boundingBox = new Jt());
        var e2 = this.attributes.position;
        void 0 !== e2 ? this.boundingBox.setFromBufferAttribute(e2) : this.boundingBox.makeEmpty(), (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }, computeBoundingSphere: function() {
        var e2 = new Jt(), t2 = new Ht();
        return function() {
          null === this.boundingSphere && (this.boundingSphere = new Kt());
          var n2 = this.attributes.position;
          if (n2) {
            var r2 = this.boundingSphere.center;
            e2.setFromBufferAttribute(n2), e2.getCenter(r2);
            for (var i3 = 0, a2 = 0, o2 = n2.count; a2 < o2; a2++)
              t2.x = n2.getX(a2), t2.y = n2.getY(a2), t2.z = n2.getZ(a2), i3 = Math.max(i3, r2.distanceToSquared(t2));
            this.boundingSphere.radius = Math.sqrt(i3), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
          }
        };
      }(), computeFaceNormals: function() {
      }, computeVertexNormals: function() {
        var e2 = this.index, t2 = this.attributes, n2 = this.groups;
        if (t2.position) {
          var r2 = t2.position.array;
          if (void 0 === t2.normal)
            this.addAttribute("normal", new yn(new Float32Array(r2.length), 3));
          else
            for (var i3 = t2.normal.array, a2 = 0, o2 = i3.length; a2 < o2; a2++)
              i3[a2] = 0;
          var s2, c3, u2, l2 = t2.normal.array, h2 = new Ht(), d2 = new Ht(), p2 = new Ht(), f2 = new Ht(), m3 = new Ht();
          if (e2) {
            var g2 = e2.array;
            0 === n2.length && this.addGroup(0, g2.length);
            for (var v2 = 0, y2 = n2.length; v2 < y2; ++v2) {
              var x2 = n2[v2], b2 = x2.start;
              for (a2 = b2, o2 = b2 + x2.count; a2 < o2; a2 += 3)
                s2 = 3 * g2[a2 + 0], c3 = 3 * g2[a2 + 1], u2 = 3 * g2[a2 + 2], h2.fromArray(r2, s2), d2.fromArray(r2, c3), p2.fromArray(r2, u2), f2.subVectors(p2, d2), m3.subVectors(h2, d2), f2.cross(m3), l2[s2] += f2.x, l2[s2 + 1] += f2.y, l2[s2 + 2] += f2.z, l2[c3] += f2.x, l2[c3 + 1] += f2.y, l2[c3 + 2] += f2.z, l2[u2] += f2.x, l2[u2 + 1] += f2.y, l2[u2 + 2] += f2.z;
            }
          } else
            for (a2 = 0, o2 = r2.length; a2 < o2; a2 += 9)
              h2.fromArray(r2, a2), d2.fromArray(r2, a2 + 3), p2.fromArray(r2, a2 + 6), f2.subVectors(p2, d2), m3.subVectors(h2, d2), f2.cross(m3), l2[a2] = f2.x, l2[a2 + 1] = f2.y, l2[a2 + 2] = f2.z, l2[a2 + 3] = f2.x, l2[a2 + 4] = f2.y, l2[a2 + 5] = f2.z, l2[a2 + 6] = f2.x, l2[a2 + 7] = f2.y, l2[a2 + 8] = f2.z;
          this.normalizeNormals(), t2.normal.needsUpdate = true;
        }
      }, merge: function(e2, t2) {
        if (e2 && e2.isBufferGeometry) {
          void 0 === t2 && (t2 = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
          var n2 = this.attributes;
          for (var r2 in n2)
            if (void 0 !== e2.attributes[r2])
              for (var i3 = n2[r2].array, a2 = e2.attributes[r2], o2 = a2.array, s2 = 0, c3 = a2.itemSize * t2; s2 < o2.length; s2++, c3++)
                i3[c3] = o2[s2];
          return this;
        }
        console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", e2);
      }, normalizeNormals: function() {
        var e2 = new Ht();
        return function() {
          for (var t2 = this.attributes.normal, n2 = 0, r2 = t2.count; n2 < r2; n2++)
            e2.x = t2.getX(n2), e2.y = t2.getY(n2), e2.z = t2.getZ(n2), e2.normalize(), t2.setXYZ(n2, e2.x, e2.y, e2.z);
        };
      }(), toNonIndexed: function() {
        if (null === this.index)
          return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
        var e2 = new Pn(), t2 = this.index.array, n2 = this.attributes;
        for (var r2 in n2) {
          for (var i3 = n2[r2], a2 = i3.array, o2 = i3.itemSize, s2 = new a2.constructor(t2.length * o2), c3 = 0, u2 = 0, l2 = 0, h2 = t2.length; l2 < h2; l2++) {
            c3 = t2[l2] * o2;
            for (var d2 = 0; d2 < o2; d2++)
              s2[u2++] = a2[c3++];
          }
          e2.addAttribute(r2, new yn(s2, o2));
        }
        var p2 = this.groups;
        for (l2 = 0, h2 = p2.length; l2 < h2; l2++) {
          var f2 = p2[l2];
          e2.addGroup(f2.start, f2.count, f2.materialIndex);
        }
        return e2;
      }, toJSON: function() {
        var e2 = { metadata: { version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };
        if (e2.uuid = this.uuid, e2.type = this.type, "" !== this.name && (e2.name = this.name), Object.keys(this.userData).length > 0 && (e2.userData = this.userData), void 0 !== this.parameters) {
          var t2 = this.parameters;
          for (var n2 in t2)
            void 0 !== t2[n2] && (e2[n2] = t2[n2]);
          return e2;
        }
        e2.data = { attributes: {} };
        var r2 = this.index;
        if (null !== r2) {
          var i3 = Array.prototype.slice.call(r2.array);
          e2.data.index = { type: r2.array.constructor.name, array: i3 };
        }
        var a2 = this.attributes;
        for (var n2 in a2) {
          var o2 = a2[n2];
          i3 = Array.prototype.slice.call(o2.array);
          e2.data.attributes[n2] = { itemSize: o2.itemSize, type: o2.array.constructor.name, array: i3, normalized: o2.normalized };
        }
        var s2 = this.groups;
        s2.length > 0 && (e2.data.groups = JSON.parse(JSON.stringify(s2)));
        var c3 = this.boundingSphere;
        return null !== c3 && (e2.data.boundingSphere = { center: c3.center.toArray(), radius: c3.radius }), e2;
      }, clone: function() {
        return new Pn().copy(this);
      }, copy: function(e2) {
        var t2, n2, r2;
        this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.name = e2.name;
        var i3 = e2.index;
        null !== i3 && this.setIndex(i3.clone());
        var a2 = e2.attributes;
        for (t2 in a2) {
          var o2 = a2[t2];
          this.addAttribute(t2, o2.clone());
        }
        var s2 = e2.morphAttributes;
        for (t2 in s2) {
          var c3 = [], u2 = s2[t2];
          for (n2 = 0, r2 = u2.length; n2 < r2; n2++)
            c3.push(u2[n2].clone());
          this.morphAttributes[t2] = c3;
        }
        var l2 = e2.groups;
        for (n2 = 0, r2 = l2.length; n2 < r2; n2++) {
          var h2 = l2[n2];
          this.addGroup(h2.start, h2.count, h2.materialIndex);
        }
        var d2 = e2.boundingBox;
        null !== d2 && (this.boundingBox = d2.clone());
        var p2 = e2.boundingSphere;
        return null !== p2 && (this.boundingSphere = p2.clone()), this.drawRange.start = e2.drawRange.start, this.drawRange.count = e2.drawRange.count, this.userData = e2.userData, this;
      }, dispose: function() {
        this.dispatchEvent({ type: "dispose" });
      } }), On.prototype = Object.create(vn.prototype), On.prototype.constructor = On, Nn.prototype = Object.create(Pn.prototype), Nn.prototype.constructor = Nn, In.prototype = Object.create(vn.prototype), In.prototype.constructor = In, Dn.prototype = Object.create(Pn.prototype), Dn.prototype.constructor = Dn;
      var Un = 0;
      function Bn() {
        Object.defineProperty(this, "id", { value: Un++ }), this.uuid = Bt.generateUUID(), this.name = "", this.type = "Material", this.fog = true, this.lights = true, this.blending = E, this.side = m2, this.flatShading = false, this.vertexColors = b, this.opacity = 1, this.transparent = false, this.blendSrc = F, this.blendDst = G, this.blendEquation = R, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = Y, this.depthTest = true, this.depthWrite = true, this.clippingPlanes = null, this.clipIntersection = false, this.clipShadows = false, this.shadowSide = null, this.colorWrite = true, this.precision = null, this.polygonOffset = false, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = false, this.alphaTest = 0, this.premultipliedAlpha = false, this.overdraw = 0, this.visible = true, this.userData = {}, this.needsUpdate = true;
      }
      function Fn(e2) {
        Bn.call(this), this.type = "MeshBasicMaterial", this.color = new rn(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = $, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.lights = false, this.setValues(e2);
      }
      function Gn(e2) {
        Bn.call(this), this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.vertexShader = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", this.fragmentShader = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}", this.linewidth = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.clipping = false, this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.extensions = { derivatives: false, fragDepth: false, drawBuffers: false, shaderTextureLOD: false }, this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = false, void 0 !== e2 && (void 0 !== e2.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(e2));
      }
      function zn(e2, t2) {
        this.origin = void 0 !== e2 ? e2 : new Ht(), this.direction = void 0 !== t2 ? t2 : new Ht();
      }
      function Hn(e2, t2, n2) {
        this.a = void 0 !== e2 ? e2 : new Ht(), this.b = void 0 !== t2 ? t2 : new Ht(), this.c = void 0 !== n2 ? n2 : new Ht();
      }
      function kn(e2, t2) {
        dn.call(this), this.type = "Mesh", this.geometry = void 0 !== e2 ? e2 : new Pn(), this.material = void 0 !== t2 ? t2 : new Fn({ color: 16777215 * Math.random() }), this.drawMode = _t, this.updateMorphTargets();
      }
      function jn(e2, t2) {
        return Math.abs(t2[1]) - Math.abs(e2[1]);
      }
      function Vn(e2, t2, n2, r2, i3, a2, o2, s2, c3, u2) {
        e2 = void 0 !== e2 ? e2 : [], t2 = void 0 !== t2 ? t2 : ce, Wt.call(this, e2, t2, n2, r2, i3, a2, o2, s2, c3, u2), this.flipY = false;
      }
      Bn.prototype = Object.assign(Object.create(r.prototype), { constructor: Bn, isMaterial: true, onBeforeCompile: function() {
      }, setValues: function(e2) {
        if (void 0 !== e2)
          for (var t2 in e2) {
            var n2 = e2[t2];
            if (void 0 !== n2)
              if ("shading" !== t2) {
                var r2 = this[t2];
                void 0 !== r2 ? r2 && r2.isColor ? r2.set(n2) : r2 && r2.isVector3 && n2 && n2.isVector3 ? r2.copy(n2) : this[t2] = "overdraw" === t2 ? Number(n2) : n2 : console.warn("THREE." + this.type + ": '" + t2 + "' is not a property of this material.");
              } else
                console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = n2 === y;
            else
              console.warn("THREE.Material: '" + t2 + "' parameter is undefined.");
          }
      }, toJSON: function(e2) {
        var t2 = void 0 === e2 || "string" == typeof e2;
        t2 && (e2 = { textures: {}, images: {} });
        var n2 = { metadata: { version: 4.5, type: "Material", generator: "Material.toJSON" } };
        function r2(e3) {
          var t3 = [];
          for (var n3 in e3) {
            var r3 = e3[n3];
            delete r3.metadata, t3.push(r3);
          }
          return t3;
        }
        if (n2.uuid = this.uuid, n2.type = this.type, "" !== this.name && (n2.name = this.name), this.color && this.color.isColor && (n2.color = this.color.getHex()), void 0 !== this.roughness && (n2.roughness = this.roughness), void 0 !== this.metalness && (n2.metalness = this.metalness), this.emissive && this.emissive.isColor && (n2.emissive = this.emissive.getHex()), 1 !== this.emissiveIntensity && (n2.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n2.specular = this.specular.getHex()), void 0 !== this.shininess && (n2.shininess = this.shininess), void 0 !== this.clearCoat && (n2.clearCoat = this.clearCoat), void 0 !== this.clearCoatRoughness && (n2.clearCoatRoughness = this.clearCoatRoughness), this.map && this.map.isTexture && (n2.map = this.map.toJSON(e2).uuid), this.alphaMap && this.alphaMap.isTexture && (n2.alphaMap = this.alphaMap.toJSON(e2).uuid), this.lightMap && this.lightMap.isTexture && (n2.lightMap = this.lightMap.toJSON(e2).uuid), this.aoMap && this.aoMap.isTexture && (n2.aoMap = this.aoMap.toJSON(e2).uuid, n2.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n2.bumpMap = this.bumpMap.toJSON(e2).uuid, n2.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n2.normalMap = this.normalMap.toJSON(e2).uuid, n2.normalMapType = this.normalMapType, n2.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n2.displacementMap = this.displacementMap.toJSON(e2).uuid, n2.displacementScale = this.displacementScale, n2.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n2.roughnessMap = this.roughnessMap.toJSON(e2).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n2.metalnessMap = this.metalnessMap.toJSON(e2).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n2.emissiveMap = this.emissiveMap.toJSON(e2).uuid), this.specularMap && this.specularMap.isTexture && (n2.specularMap = this.specularMap.toJSON(e2).uuid), this.envMap && this.envMap.isTexture && (n2.envMap = this.envMap.toJSON(e2).uuid, n2.reflectivity = this.reflectivity), this.gradientMap && this.gradientMap.isTexture && (n2.gradientMap = this.gradientMap.toJSON(e2).uuid), void 0 !== this.size && (n2.size = this.size), void 0 !== this.sizeAttenuation && (n2.sizeAttenuation = this.sizeAttenuation), this.blending !== E && (n2.blending = this.blending), true === this.flatShading && (n2.flatShading = this.flatShading), this.side !== m2 && (n2.side = this.side), this.vertexColors !== b && (n2.vertexColors = this.vertexColors), this.opacity < 1 && (n2.opacity = this.opacity), true === this.transparent && (n2.transparent = this.transparent), n2.depthFunc = this.depthFunc, n2.depthTest = this.depthTest, n2.depthWrite = this.depthWrite, 0 !== this.rotation && (n2.rotation = this.rotation), 1 !== this.linewidth && (n2.linewidth = this.linewidth), void 0 !== this.dashSize && (n2.dashSize = this.dashSize), void 0 !== this.gapSize && (n2.gapSize = this.gapSize), void 0 !== this.scale && (n2.scale = this.scale), true === this.dithering && (n2.dithering = true), this.alphaTest > 0 && (n2.alphaTest = this.alphaTest), true === this.premultipliedAlpha && (n2.premultipliedAlpha = this.premultipliedAlpha), true === this.wireframe && (n2.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n2.wireframeLinewidth = this.wireframeLinewidth), "round" !== this.wireframeLinecap && (n2.wireframeLinecap = this.wireframeLinecap), "round" !== this.wireframeLinejoin && (n2.wireframeLinejoin = this.wireframeLinejoin), true === this.morphTargets && (n2.morphTargets = true), true === this.skinning && (n2.skinning = true), false === this.visible && (n2.visible = false), "{}" !== JSON.stringify(this.userData) && (n2.userData = this.userData), t2) {
          var i3 = r2(e2.textures), a2 = r2(e2.images);
          i3.length > 0 && (n2.textures = i3), a2.length > 0 && (n2.images = a2);
        }
        return n2;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        this.name = e2.name, this.fog = e2.fog, this.lights = e2.lights, this.blending = e2.blending, this.side = e2.side, this.flatShading = e2.flatShading, this.vertexColors = e2.vertexColors, this.opacity = e2.opacity, this.transparent = e2.transparent, this.blendSrc = e2.blendSrc, this.blendDst = e2.blendDst, this.blendEquation = e2.blendEquation, this.blendSrcAlpha = e2.blendSrcAlpha, this.blendDstAlpha = e2.blendDstAlpha, this.blendEquationAlpha = e2.blendEquationAlpha, this.depthFunc = e2.depthFunc, this.depthTest = e2.depthTest, this.depthWrite = e2.depthWrite, this.colorWrite = e2.colorWrite, this.precision = e2.precision, this.polygonOffset = e2.polygonOffset, this.polygonOffsetFactor = e2.polygonOffsetFactor, this.polygonOffsetUnits = e2.polygonOffsetUnits, this.dithering = e2.dithering, this.alphaTest = e2.alphaTest, this.premultipliedAlpha = e2.premultipliedAlpha, this.overdraw = e2.overdraw, this.visible = e2.visible, this.userData = JSON.parse(JSON.stringify(e2.userData)), this.clipShadows = e2.clipShadows, this.clipIntersection = e2.clipIntersection;
        var t2 = e2.clippingPlanes, n2 = null;
        if (null !== t2) {
          var r2 = t2.length;
          n2 = new Array(r2);
          for (var i3 = 0; i3 !== r2; ++i3)
            n2[i3] = t2[i3].clone();
        }
        return this.clippingPlanes = n2, this.shadowSide = e2.shadowSide, this;
      }, dispose: function() {
        this.dispatchEvent({ type: "dispose" });
      } }), Fn.prototype = Object.create(Bn.prototype), Fn.prototype.constructor = Fn, Fn.prototype.isMeshBasicMaterial = true, Fn.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.color.copy(e2.color), this.map = e2.map, this.lightMap = e2.lightMap, this.lightMapIntensity = e2.lightMapIntensity, this.aoMap = e2.aoMap, this.aoMapIntensity = e2.aoMapIntensity, this.specularMap = e2.specularMap, this.alphaMap = e2.alphaMap, this.envMap = e2.envMap, this.combine = e2.combine, this.reflectivity = e2.reflectivity, this.refractionRatio = e2.refractionRatio, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.wireframeLinecap = e2.wireframeLinecap, this.wireframeLinejoin = e2.wireframeLinejoin, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this;
      }, Gn.prototype = Object.create(Bn.prototype), Gn.prototype.constructor = Gn, Gn.prototype.isShaderMaterial = true, Gn.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.fragmentShader = e2.fragmentShader, this.vertexShader = e2.vertexShader, this.uniforms = tn.clone(e2.uniforms), this.defines = Object.assign({}, e2.defines), this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.lights = e2.lights, this.clipping = e2.clipping, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this.extensions = e2.extensions, this;
      }, Gn.prototype.toJSON = function(e2) {
        var t2 = Bn.prototype.toJSON.call(this, e2);
        return t2.uniforms = this.uniforms, t2.vertexShader = this.vertexShader, t2.fragmentShader = this.fragmentShader, t2;
      }, Object.assign(zn.prototype, { set: function(e2, t2) {
        return this.origin.copy(e2), this.direction.copy(t2), this;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.origin.copy(e2.origin), this.direction.copy(e2.direction), this;
      }, at: function(e2, t2) {
        return void 0 === t2 && (console.warn("THREE.Ray: .at() target is now required"), t2 = new Ht()), t2.copy(this.direction).multiplyScalar(e2).add(this.origin);
      }, lookAt: function(e2) {
        return this.direction.copy(e2).sub(this.origin).normalize(), this;
      }, recast: function() {
        var e2 = new Ht();
        return function(t2) {
          return this.origin.copy(this.at(t2, e2)), this;
        };
      }(), closestPointToPoint: function(e2, t2) {
        void 0 === t2 && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), t2 = new Ht()), t2.subVectors(e2, this.origin);
        var n2 = t2.dot(this.direction);
        return n2 < 0 ? t2.copy(this.origin) : t2.copy(this.direction).multiplyScalar(n2).add(this.origin);
      }, distanceToPoint: function(e2) {
        return Math.sqrt(this.distanceSqToPoint(e2));
      }, distanceSqToPoint: function() {
        var e2 = new Ht();
        return function(t2) {
          var n2 = e2.subVectors(t2, this.origin).dot(this.direction);
          return n2 < 0 ? this.origin.distanceToSquared(t2) : (e2.copy(this.direction).multiplyScalar(n2).add(this.origin), e2.distanceToSquared(t2));
        };
      }(), distanceSqToSegment: function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new Ht();
        return function(r2, i3, a2, o2) {
          e2.copy(r2).add(i3).multiplyScalar(0.5), t2.copy(i3).sub(r2).normalize(), n2.copy(this.origin).sub(e2);
          var s2, c3, u2, l2, h2 = 0.5 * r2.distanceTo(i3), d2 = -this.direction.dot(t2), p2 = n2.dot(this.direction), f2 = -n2.dot(t2), m3 = n2.lengthSq(), g2 = Math.abs(1 - d2 * d2);
          if (g2 > 0)
            if (c3 = d2 * p2 - f2, l2 = h2 * g2, (s2 = d2 * f2 - p2) >= 0)
              if (c3 >= -l2)
                if (c3 <= l2) {
                  var v2 = 1 / g2;
                  u2 = (s2 *= v2) * (s2 + d2 * (c3 *= v2) + 2 * p2) + c3 * (d2 * s2 + c3 + 2 * f2) + m3;
                } else
                  c3 = h2, u2 = -(s2 = Math.max(0, -(d2 * c3 + p2))) * s2 + c3 * (c3 + 2 * f2) + m3;
              else
                c3 = -h2, u2 = -(s2 = Math.max(0, -(d2 * c3 + p2))) * s2 + c3 * (c3 + 2 * f2) + m3;
            else
              c3 <= -l2 ? u2 = -(s2 = Math.max(0, -(-d2 * h2 + p2))) * s2 + (c3 = s2 > 0 ? -h2 : Math.min(Math.max(-h2, -f2), h2)) * (c3 + 2 * f2) + m3 : c3 <= l2 ? (s2 = 0, u2 = (c3 = Math.min(Math.max(-h2, -f2), h2)) * (c3 + 2 * f2) + m3) : u2 = -(s2 = Math.max(0, -(d2 * h2 + p2))) * s2 + (c3 = s2 > 0 ? h2 : Math.min(Math.max(-h2, -f2), h2)) * (c3 + 2 * f2) + m3;
          else
            c3 = d2 > 0 ? -h2 : h2, u2 = -(s2 = Math.max(0, -(d2 * c3 + p2))) * s2 + c3 * (c3 + 2 * f2) + m3;
          return a2 && a2.copy(this.direction).multiplyScalar(s2).add(this.origin), o2 && o2.copy(t2).multiplyScalar(c3).add(e2), u2;
        };
      }(), intersectSphere: function() {
        var e2 = new Ht();
        return function(t2, n2) {
          e2.subVectors(t2.center, this.origin);
          var r2 = e2.dot(this.direction), i3 = e2.dot(e2) - r2 * r2, a2 = t2.radius * t2.radius;
          if (i3 > a2)
            return null;
          var o2 = Math.sqrt(a2 - i3), s2 = r2 - o2, c3 = r2 + o2;
          return s2 < 0 && c3 < 0 ? null : s2 < 0 ? this.at(c3, n2) : this.at(s2, n2);
        };
      }(), intersectsSphere: function(e2) {
        return this.distanceToPoint(e2.center) <= e2.radius;
      }, distanceToPlane: function(e2) {
        var t2 = e2.normal.dot(this.direction);
        if (0 === t2)
          return 0 === e2.distanceToPoint(this.origin) ? 0 : null;
        var n2 = -(this.origin.dot(e2.normal) + e2.constant) / t2;
        return n2 >= 0 ? n2 : null;
      }, intersectPlane: function(e2, t2) {
        var n2 = this.distanceToPlane(e2);
        return null === n2 ? null : this.at(n2, t2);
      }, intersectsPlane: function(e2) {
        var t2 = e2.distanceToPoint(this.origin);
        return 0 === t2 || e2.normal.dot(this.direction) * t2 < 0;
      }, intersectBox: function(e2, t2) {
        var n2, r2, i3, a2, o2, s2, c3 = 1 / this.direction.x, u2 = 1 / this.direction.y, l2 = 1 / this.direction.z, h2 = this.origin;
        return c3 >= 0 ? (n2 = (e2.min.x - h2.x) * c3, r2 = (e2.max.x - h2.x) * c3) : (n2 = (e2.max.x - h2.x) * c3, r2 = (e2.min.x - h2.x) * c3), u2 >= 0 ? (i3 = (e2.min.y - h2.y) * u2, a2 = (e2.max.y - h2.y) * u2) : (i3 = (e2.max.y - h2.y) * u2, a2 = (e2.min.y - h2.y) * u2), n2 > a2 || i3 > r2 ? null : ((i3 > n2 || n2 != n2) && (n2 = i3), (a2 < r2 || r2 != r2) && (r2 = a2), l2 >= 0 ? (o2 = (e2.min.z - h2.z) * l2, s2 = (e2.max.z - h2.z) * l2) : (o2 = (e2.max.z - h2.z) * l2, s2 = (e2.min.z - h2.z) * l2), n2 > s2 || o2 > r2 ? null : ((o2 > n2 || n2 != n2) && (n2 = o2), (s2 < r2 || r2 != r2) && (r2 = s2), r2 < 0 ? null : this.at(n2 >= 0 ? n2 : r2, t2)));
      }, intersectsBox: function() {
        var e2 = new Ht();
        return function(t2) {
          return null !== this.intersectBox(t2, e2);
        };
      }(), intersectTriangle: function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new Ht(), r2 = new Ht();
        return function(i3, a2, o2, s2, c3) {
          t2.subVectors(a2, i3), n2.subVectors(o2, i3), r2.crossVectors(t2, n2);
          var u2, l2 = this.direction.dot(r2);
          if (l2 > 0) {
            if (s2)
              return null;
            u2 = 1;
          } else {
            if (!(l2 < 0))
              return null;
            u2 = -1, l2 = -l2;
          }
          e2.subVectors(this.origin, i3);
          var h2 = u2 * this.direction.dot(n2.crossVectors(e2, n2));
          if (h2 < 0)
            return null;
          var d2 = u2 * this.direction.dot(t2.cross(e2));
          if (d2 < 0)
            return null;
          if (h2 + d2 > l2)
            return null;
          var p2 = -u2 * e2.dot(r2);
          return p2 < 0 ? null : this.at(p2 / l2, c3);
        };
      }(), applyMatrix4: function(e2) {
        return this.origin.applyMatrix4(e2), this.direction.transformDirection(e2), this;
      }, equals: function(e2) {
        return e2.origin.equals(this.origin) && e2.direction.equals(this.direction);
      } }), Object.assign(Hn, { getNormal: function() {
        var e2 = new Ht();
        return function(t2, n2, r2, i3) {
          void 0 === i3 && (console.warn("THREE.Triangle: .getNormal() target is now required"), i3 = new Ht()), i3.subVectors(r2, n2), e2.subVectors(t2, n2), i3.cross(e2);
          var a2 = i3.lengthSq();
          return a2 > 0 ? i3.multiplyScalar(1 / Math.sqrt(a2)) : i3.set(0, 0, 0);
        };
      }(), getBarycoord: function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new Ht();
        return function(r2, i3, a2, o2, s2) {
          e2.subVectors(o2, i3), t2.subVectors(a2, i3), n2.subVectors(r2, i3);
          var c3 = e2.dot(e2), u2 = e2.dot(t2), l2 = e2.dot(n2), h2 = t2.dot(t2), d2 = t2.dot(n2), p2 = c3 * h2 - u2 * u2;
          if (void 0 === s2 && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), s2 = new Ht()), 0 === p2)
            return s2.set(-2, -1, -1);
          var f2 = 1 / p2, m3 = (h2 * l2 - u2 * d2) * f2, g2 = (c3 * d2 - u2 * l2) * f2;
          return s2.set(1 - m3 - g2, g2, m3);
        };
      }(), containsPoint: function() {
        var e2 = new Ht();
        return function(t2, n2, r2, i3) {
          return Hn.getBarycoord(t2, n2, r2, i3, e2), e2.x >= 0 && e2.y >= 0 && e2.x + e2.y <= 1;
        };
      }() }), Object.assign(Hn.prototype, { set: function(e2, t2, n2) {
        return this.a.copy(e2), this.b.copy(t2), this.c.copy(n2), this;
      }, setFromPointsAndIndices: function(e2, t2, n2, r2) {
        return this.a.copy(e2[t2]), this.b.copy(e2[n2]), this.c.copy(e2[r2]), this;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.a.copy(e2.a), this.b.copy(e2.b), this.c.copy(e2.c), this;
      }, getArea: function() {
        var e2 = new Ht(), t2 = new Ht();
        return function() {
          return e2.subVectors(this.c, this.b), t2.subVectors(this.a, this.b), 0.5 * e2.cross(t2).length();
        };
      }(), getMidpoint: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), e2 = new Ht()), e2.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
      }, getNormal: function(e2) {
        return Hn.getNormal(this.a, this.b, this.c, e2);
      }, getPlane: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Triangle: .getPlane() target is now required"), e2 = new Ht()), e2.setFromCoplanarPoints(this.a, this.b, this.c);
      }, getBarycoord: function(e2, t2) {
        return Hn.getBarycoord(e2, this.a, this.b, this.c, t2);
      }, containsPoint: function(e2) {
        return Hn.containsPoint(e2, this.a, this.b, this.c);
      }, intersectsBox: function(e2) {
        return e2.intersectsTriangle(this);
      }, closestPointToPoint: function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new Ht(), r2 = new Ht(), i3 = new Ht(), a2 = new Ht();
        return function(o2, s2) {
          void 0 === s2 && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), s2 = new Ht());
          var c3, u2, l2 = this.a, h2 = this.b, d2 = this.c;
          e2.subVectors(h2, l2), t2.subVectors(d2, l2), r2.subVectors(o2, l2);
          var p2 = e2.dot(r2), f2 = t2.dot(r2);
          if (p2 <= 0 && f2 <= 0)
            return s2.copy(l2);
          i3.subVectors(o2, h2);
          var m3 = e2.dot(i3), g2 = t2.dot(i3);
          if (m3 >= 0 && g2 <= m3)
            return s2.copy(h2);
          var v2 = p2 * g2 - m3 * f2;
          if (v2 <= 0 && p2 >= 0 && m3 <= 0)
            return c3 = p2 / (p2 - m3), s2.copy(l2).addScaledVector(e2, c3);
          a2.subVectors(o2, d2);
          var y2 = e2.dot(a2), x2 = t2.dot(a2);
          if (x2 >= 0 && y2 <= x2)
            return s2.copy(d2);
          var b2 = y2 * f2 - p2 * x2;
          if (b2 <= 0 && f2 >= 0 && x2 <= 0)
            return u2 = f2 / (f2 - x2), s2.copy(l2).addScaledVector(t2, u2);
          var w2 = m3 * x2 - y2 * g2;
          if (w2 <= 0 && g2 - m3 >= 0 && y2 - x2 >= 0)
            return n2.subVectors(d2, h2), u2 = (g2 - m3) / (g2 - m3 + (y2 - x2)), s2.copy(h2).addScaledVector(n2, u2);
          var _2 = 1 / (w2 + b2 + v2);
          return c3 = b2 * _2, u2 = v2 * _2, s2.copy(l2).addScaledVector(e2, c3).addScaledVector(t2, u2);
        };
      }(), equals: function(e2) {
        return e2.a.equals(this.a) && e2.b.equals(this.b) && e2.c.equals(this.c);
      } }), kn.prototype = Object.assign(Object.create(dn.prototype), { constructor: kn, isMesh: true, setDrawMode: function(e2) {
        this.drawMode = e2;
      }, copy: function(e2) {
        return dn.prototype.copy.call(this, e2), this.drawMode = e2.drawMode, void 0 !== e2.morphTargetInfluences && (this.morphTargetInfluences = e2.morphTargetInfluences.slice()), void 0 !== e2.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, e2.morphTargetDictionary)), this;
      }, updateMorphTargets: function() {
        var e2, t2, n2, r2 = this.geometry;
        if (r2.isBufferGeometry) {
          var i3 = r2.morphAttributes, a2 = Object.keys(i3);
          if (a2.length > 0) {
            var o2 = i3[a2[0]];
            if (void 0 !== o2)
              for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, e2 = 0, t2 = o2.length; e2 < t2; e2++)
                n2 = o2[e2].name || String(e2), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n2] = e2;
          }
        } else {
          var s2 = r2.morphTargets;
          if (void 0 !== s2 && s2.length > 0)
            for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, e2 = 0, t2 = s2.length; e2 < t2; e2++)
              n2 = s2[e2].name || String(e2), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n2] = e2;
        }
      }, raycast: function() {
        var e2 = new Gt(), t2 = new zn(), n2 = new Kt(), r2 = new Ht(), i3 = new Ht(), a2 = new Ht(), o2 = new Ht(), s2 = new Ht(), c3 = new Ht(), u2 = new Ft(), l2 = new Ft(), h2 = new Ft(), d2 = new Ht(), p2 = new Ht(), f2 = new Ht();
        function m3(e3, t3, n3, r3, i4, a3, o3) {
          return Hn.getBarycoord(e3, t3, n3, r3, d2), i4.multiplyScalar(d2.x), a3.multiplyScalar(d2.y), o3.multiplyScalar(d2.z), i4.add(a3).add(o3), i4.clone();
        }
        function y2(e3, t3, n3, r3, i4, a3, o3, s3) {
          if (null === (t3.side === g ? r3.intersectTriangle(o3, a3, i4, true, s3) : r3.intersectTriangle(i4, a3, o3, t3.side !== v, s3)))
            return null;
          f2.copy(s3), f2.applyMatrix4(e3.matrixWorld);
          var c4 = n3.ray.origin.distanceTo(f2);
          return c4 < n3.near || c4 > n3.far ? null : { distance: c4, point: f2.clone(), object: e3 };
        }
        function x2(e3, t3, n3, o3, s3, c4, d3, f3, g2) {
          r2.fromBufferAttribute(s3, d3), i3.fromBufferAttribute(s3, f3), a2.fromBufferAttribute(s3, g2);
          var v2 = y2(e3, t3, n3, o3, r2, i3, a2, p2);
          if (v2) {
            c4 && (u2.fromBufferAttribute(c4, d3), l2.fromBufferAttribute(c4, f3), h2.fromBufferAttribute(c4, g2), v2.uv = m3(p2, r2, i3, a2, u2, l2, h2));
            var x3 = new mn(d3, f3, g2);
            Hn.getNormal(r2, i3, a2, x3.normal), v2.face = x3;
          }
          return v2;
        }
        return function(d3, f3) {
          var g2, v2 = this.geometry, b2 = this.material, w2 = this.matrixWorld;
          if (void 0 !== b2 && (null === v2.boundingSphere && v2.computeBoundingSphere(), n2.copy(v2.boundingSphere), n2.applyMatrix4(w2), false !== d3.ray.intersectsSphere(n2) && (e2.getInverse(w2), t2.copy(d3.ray).applyMatrix4(e2), null === v2.boundingBox || false !== t2.intersectsBox(v2.boundingBox)))) {
            if (v2.isBufferGeometry) {
              var _2, M2, E2, T2, S2, A2, L2, R2, C2, P2 = v2.index, O2 = v2.attributes.position, N2 = v2.attributes.uv, I2 = v2.groups, D2 = v2.drawRange;
              if (null !== P2)
                if (Array.isArray(b2))
                  for (T2 = 0, A2 = I2.length; T2 < A2; T2++)
                    for (C2 = b2[(R2 = I2[T2]).materialIndex], S2 = Math.max(R2.start, D2.start), L2 = Math.min(R2.start + R2.count, D2.start + D2.count); S2 < L2; S2 += 3)
                      _2 = P2.getX(S2), M2 = P2.getX(S2 + 1), E2 = P2.getX(S2 + 2), (g2 = x2(this, C2, d3, t2, O2, N2, _2, M2, E2)) && (g2.faceIndex = Math.floor(S2 / 3), f3.push(g2));
                else
                  for (T2 = Math.max(0, D2.start), A2 = Math.min(P2.count, D2.start + D2.count); T2 < A2; T2 += 3)
                    _2 = P2.getX(T2), M2 = P2.getX(T2 + 1), E2 = P2.getX(T2 + 2), (g2 = x2(this, b2, d3, t2, O2, N2, _2, M2, E2)) && (g2.faceIndex = Math.floor(T2 / 3), f3.push(g2));
              else if (void 0 !== O2)
                if (Array.isArray(b2))
                  for (T2 = 0, A2 = I2.length; T2 < A2; T2++)
                    for (C2 = b2[(R2 = I2[T2]).materialIndex], S2 = Math.max(R2.start, D2.start), L2 = Math.min(R2.start + R2.count, D2.start + D2.count); S2 < L2; S2 += 3)
                      (g2 = x2(this, C2, d3, t2, O2, N2, _2 = S2, M2 = S2 + 1, E2 = S2 + 2)) && (g2.faceIndex = Math.floor(S2 / 3), f3.push(g2));
                else
                  for (T2 = Math.max(0, D2.start), A2 = Math.min(O2.count, D2.start + D2.count); T2 < A2; T2 += 3)
                    (g2 = x2(this, b2, d3, t2, O2, N2, _2 = T2, M2 = T2 + 1, E2 = T2 + 2)) && (g2.faceIndex = Math.floor(T2 / 3), f3.push(g2));
            } else if (v2.isGeometry) {
              var U2, B2, F2, G2, z2 = Array.isArray(b2), H2 = v2.vertices, k2 = v2.faces, j2 = v2.faceVertexUvs[0];
              j2.length > 0 && (G2 = j2);
              for (var V2 = 0, W2 = k2.length; V2 < W2; V2++) {
                var X2 = k2[V2], q2 = z2 ? b2[X2.materialIndex] : b2;
                if (void 0 !== q2) {
                  if (U2 = H2[X2.a], B2 = H2[X2.b], F2 = H2[X2.c], true === q2.morphTargets) {
                    var Y2 = v2.morphTargets, Z2 = this.morphTargetInfluences;
                    r2.set(0, 0, 0), i3.set(0, 0, 0), a2.set(0, 0, 0);
                    for (var J2 = 0, K3 = Y2.length; J2 < K3; J2++) {
                      var Q2 = Z2[J2];
                      if (0 !== Q2) {
                        var $2 = Y2[J2].vertices;
                        r2.addScaledVector(o2.subVectors($2[X2.a], U2), Q2), i3.addScaledVector(s2.subVectors($2[X2.b], B2), Q2), a2.addScaledVector(c3.subVectors($2[X2.c], F2), Q2);
                      }
                    }
                    r2.add(U2), i3.add(B2), a2.add(F2), U2 = r2, B2 = i3, F2 = a2;
                  }
                  if (g2 = y2(this, q2, d3, t2, U2, B2, F2, p2)) {
                    if (G2 && G2[V2]) {
                      var ee2 = G2[V2];
                      u2.copy(ee2[0]), l2.copy(ee2[1]), h2.copy(ee2[2]), g2.uv = m3(p2, U2, B2, F2, u2, l2, h2);
                    }
                    g2.face = X2, g2.faceIndex = V2, f3.push(g2);
                  }
                }
              }
            }
          }
        };
      }(), clone: function() {
        return new this.constructor(this.geometry, this.material).copy(this);
      } }), Vn.prototype = Object.create(Wt.prototype), Vn.prototype.constructor = Vn, Vn.prototype.isCubeTexture = true, Object.defineProperty(Vn.prototype, "images", { get: function() {
        return this.image;
      }, set: function(e2) {
        this.image = e2;
      } });
      var Wn = new Wt(), Xn = new Vn();
      function qn() {
        this.seq = [], this.map = {};
      }
      var Yn = [], Zn = [], Jn = new Float32Array(16), Kn = new Float32Array(9), Qn = new Float32Array(4);
      function $n(e2, t2, n2) {
        var r2 = e2[0];
        if (r2 <= 0 || r2 > 0)
          return e2;
        var i3 = t2 * n2, a2 = Yn[i3];
        if (void 0 === a2 && (a2 = new Float32Array(i3), Yn[i3] = a2), 0 !== t2) {
          r2.toArray(a2, 0);
          for (var o2 = 1, s2 = 0; o2 !== t2; ++o2)
            s2 += n2, e2[o2].toArray(a2, s2);
        }
        return a2;
      }
      function er(e2, t2) {
        if (e2.length !== t2.length)
          return false;
        for (var n2 = 0, r2 = e2.length; n2 < r2; n2++)
          if (e2[n2] !== t2[n2])
            return false;
        return true;
      }
      function tr(e2, t2) {
        for (var n2 = 0, r2 = t2.length; n2 < r2; n2++)
          e2[n2] = t2[n2];
      }
      function nr(e2, t2) {
        var n2 = Zn[t2];
        void 0 === n2 && (n2 = new Int32Array(t2), Zn[t2] = n2);
        for (var r2 = 0; r2 !== t2; ++r2)
          n2[r2] = e2.allocTextureUnit();
        return n2;
      }
      function rr(e2, t2) {
        var n2 = this.cache;
        n2[0] !== t2 && (e2.uniform1f(this.addr, t2), n2[0] = t2);
      }
      function ir(e2, t2) {
        var n2 = this.cache;
        n2[0] !== t2 && (e2.uniform1i(this.addr, t2), n2[0] = t2);
      }
      function ar(e2, t2) {
        var n2 = this.cache;
        if (void 0 !== t2.x)
          n2[0] === t2.x && n2[1] === t2.y || (e2.uniform2f(this.addr, t2.x, t2.y), n2[0] = t2.x, n2[1] = t2.y);
        else {
          if (er(n2, t2))
            return;
          e2.uniform2fv(this.addr, t2), tr(n2, t2);
        }
      }
      function or(e2, t2) {
        var n2 = this.cache;
        if (void 0 !== t2.x)
          n2[0] === t2.x && n2[1] === t2.y && n2[2] === t2.z || (e2.uniform3f(this.addr, t2.x, t2.y, t2.z), n2[0] = t2.x, n2[1] = t2.y, n2[2] = t2.z);
        else if (void 0 !== t2.r)
          n2[0] === t2.r && n2[1] === t2.g && n2[2] === t2.b || (e2.uniform3f(this.addr, t2.r, t2.g, t2.b), n2[0] = t2.r, n2[1] = t2.g, n2[2] = t2.b);
        else {
          if (er(n2, t2))
            return;
          e2.uniform3fv(this.addr, t2), tr(n2, t2);
        }
      }
      function sr(e2, t2) {
        var n2 = this.cache;
        if (void 0 !== t2.x)
          n2[0] === t2.x && n2[1] === t2.y && n2[2] === t2.z && n2[3] === t2.w || (e2.uniform4f(this.addr, t2.x, t2.y, t2.z, t2.w), n2[0] = t2.x, n2[1] = t2.y, n2[2] = t2.z, n2[3] = t2.w);
        else {
          if (er(n2, t2))
            return;
          e2.uniform4fv(this.addr, t2), tr(n2, t2);
        }
      }
      function cr(e2, t2) {
        var n2 = this.cache, r2 = t2.elements;
        if (void 0 === r2) {
          if (er(n2, t2))
            return;
          e2.uniformMatrix2fv(this.addr, false, t2), tr(n2, t2);
        } else {
          if (er(n2, r2))
            return;
          Qn.set(r2), e2.uniformMatrix2fv(this.addr, false, Qn), tr(n2, r2);
        }
      }
      function ur(e2, t2) {
        var n2 = this.cache, r2 = t2.elements;
        if (void 0 === r2) {
          if (er(n2, t2))
            return;
          e2.uniformMatrix3fv(this.addr, false, t2), tr(n2, t2);
        } else {
          if (er(n2, r2))
            return;
          Kn.set(r2), e2.uniformMatrix3fv(this.addr, false, Kn), tr(n2, r2);
        }
      }
      function lr(e2, t2) {
        var n2 = this.cache, r2 = t2.elements;
        if (void 0 === r2) {
          if (er(n2, t2))
            return;
          e2.uniformMatrix4fv(this.addr, false, t2), tr(n2, t2);
        } else {
          if (er(n2, r2))
            return;
          Jn.set(r2), e2.uniformMatrix4fv(this.addr, false, Jn), tr(n2, r2);
        }
      }
      function hr(e2, t2, n2) {
        var r2 = this.cache, i3 = n2.allocTextureUnit();
        r2[0] !== i3 && (e2.uniform1i(this.addr, i3), r2[0] = i3), n2.setTexture2D(t2 || Wn, i3);
      }
      function dr(e2, t2, n2) {
        var r2 = this.cache, i3 = n2.allocTextureUnit();
        r2[0] !== i3 && (e2.uniform1i(this.addr, i3), r2[0] = i3), n2.setTextureCube(t2 || Xn, i3);
      }
      function pr(e2, t2) {
        var n2 = this.cache;
        er(n2, t2) || (e2.uniform2iv(this.addr, t2), tr(n2, t2));
      }
      function fr(e2, t2) {
        var n2 = this.cache;
        er(n2, t2) || (e2.uniform3iv(this.addr, t2), tr(n2, t2));
      }
      function mr(e2, t2) {
        var n2 = this.cache;
        er(n2, t2) || (e2.uniform4iv(this.addr, t2), tr(n2, t2));
      }
      function gr(e2, t2) {
        var n2 = this.cache;
        er(n2, t2) || (e2.uniform1fv(this.addr, t2), tr(n2, t2));
      }
      function vr(e2, t2) {
        var n2 = this.cache;
        er(n2, t2) || (e2.uniform1iv(this.addr, t2), tr(n2, t2));
      }
      function yr(e2, t2) {
        var n2 = this.cache, r2 = $n(t2, this.size, 2);
        er(n2, r2) || (e2.uniform2fv(this.addr, r2), this.updateCache(r2));
      }
      function xr(e2, t2) {
        var n2 = this.cache, r2 = $n(t2, this.size, 3);
        er(n2, r2) || (e2.uniform3fv(this.addr, r2), this.updateCache(r2));
      }
      function br(e2, t2) {
        var n2 = this.cache, r2 = $n(t2, this.size, 4);
        er(n2, r2) || (e2.uniform4fv(this.addr, r2), this.updateCache(r2));
      }
      function wr(e2, t2) {
        var n2 = this.cache, r2 = $n(t2, this.size, 4);
        er(n2, r2) || (e2.uniformMatrix2fv(this.addr, false, r2), this.updateCache(r2));
      }
      function _r(e2, t2) {
        var n2 = this.cache, r2 = $n(t2, this.size, 9);
        er(n2, r2) || (e2.uniformMatrix3fv(this.addr, false, r2), this.updateCache(r2));
      }
      function Mr(e2, t2) {
        var n2 = this.cache, r2 = $n(t2, this.size, 16);
        er(n2, r2) || (e2.uniformMatrix4fv(this.addr, false, r2), this.updateCache(r2));
      }
      function Er(e2, t2, n2) {
        var r2 = this.cache, i3 = t2.length, a2 = nr(n2, i3);
        false === er(r2, a2) && (e2.uniform1iv(this.addr, a2), tr(r2, a2));
        for (var o2 = 0; o2 !== i3; ++o2)
          n2.setTexture2D(t2[o2] || Wn, a2[o2]);
      }
      function Tr(e2, t2, n2) {
        var r2 = this.cache, i3 = t2.length, a2 = nr(n2, i3);
        false === er(r2, a2) && (e2.uniform1iv(this.addr, a2), tr(r2, a2));
        for (var o2 = 0; o2 !== i3; ++o2)
          n2.setTextureCube(t2[o2] || Xn, a2[o2]);
      }
      function Sr(e2, t2, n2) {
        this.id = e2, this.addr = n2, this.cache = [], this.setValue = function(e3) {
          switch (e3) {
            case 5126:
              return rr;
            case 35664:
              return ar;
            case 35665:
              return or;
            case 35666:
              return sr;
            case 35674:
              return cr;
            case 35675:
              return ur;
            case 35676:
              return lr;
            case 35678:
            case 36198:
              return hr;
            case 35680:
              return dr;
            case 5124:
            case 35670:
              return ir;
            case 35667:
            case 35671:
              return pr;
            case 35668:
            case 35672:
              return fr;
            case 35669:
            case 35673:
              return mr;
          }
        }(t2.type);
      }
      function Ar(e2, t2, n2) {
        this.id = e2, this.addr = n2, this.cache = [], this.size = t2.size, this.setValue = function(e3) {
          switch (e3) {
            case 5126:
              return gr;
            case 35664:
              return yr;
            case 35665:
              return xr;
            case 35666:
              return br;
            case 35674:
              return wr;
            case 35675:
              return _r;
            case 35676:
              return Mr;
            case 35678:
              return Er;
            case 35680:
              return Tr;
            case 5124:
            case 35670:
              return vr;
            case 35667:
            case 35671:
              return pr;
            case 35668:
            case 35672:
              return fr;
            case 35669:
            case 35673:
              return mr;
          }
        }(t2.type);
      }
      function Lr(e2) {
        this.id = e2, qn.call(this);
      }
      Ar.prototype.updateCache = function(e2) {
        var t2 = this.cache;
        e2 instanceof Float32Array && t2.length !== e2.length && (this.cache = new Float32Array(e2.length)), tr(t2, e2);
      }, Lr.prototype.setValue = function(e2, t2, n2) {
        for (var r2 = this.seq, i3 = 0, a2 = r2.length; i3 !== a2; ++i3) {
          var o2 = r2[i3];
          o2.setValue(e2, t2[o2.id], n2);
        }
      };
      var Rr = /([\w\d_]+)(\])?(\[|\.)?/g;
      function Cr(e2, t2) {
        e2.seq.push(t2), e2.map[t2.id] = t2;
      }
      function Pr(e2, t2, n2) {
        var r2 = e2.name, i3 = r2.length;
        for (Rr.lastIndex = 0; ; ) {
          var a2 = Rr.exec(r2), o2 = Rr.lastIndex, s2 = a2[1], c3 = "]" === a2[2], u2 = a2[3];
          if (c3 && (s2 |= 0), void 0 === u2 || "[" === u2 && o2 + 2 === i3) {
            Cr(n2, void 0 === u2 ? new Sr(s2, e2, t2) : new Ar(s2, e2, t2));
            break;
          }
          var l2 = n2.map[s2];
          void 0 === l2 && Cr(n2, l2 = new Lr(s2)), n2 = l2;
        }
      }
      function Or(e2, t2, n2) {
        qn.call(this), this.renderer = n2;
        for (var r2 = e2.getProgramParameter(t2, e2.ACTIVE_UNIFORMS), i3 = 0; i3 < r2; ++i3) {
          var a2 = e2.getActiveUniform(t2, i3);
          Pr(a2, e2.getUniformLocation(t2, a2.name), this);
        }
      }
      function Nr(e2, t2, n2) {
        var r2 = e2.createShader(t2);
        return e2.shaderSource(r2, n2), e2.compileShader(r2), false === e2.getShaderParameter(r2, e2.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile."), "" !== e2.getShaderInfoLog(r2) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", t2 === e2.VERTEX_SHADER ? "vertex" : "fragment", e2.getShaderInfoLog(r2), function(e3) {
          for (var t3 = e3.split("\n"), n3 = 0; n3 < t3.length; n3++)
            t3[n3] = n3 + 1 + ": " + t3[n3];
          return t3.join("\n");
        }(n2)), r2;
      }
      Or.prototype.setValue = function(e2, t2, n2) {
        var r2 = this.map[t2];
        void 0 !== r2 && r2.setValue(e2, n2, this.renderer);
      }, Or.prototype.setOptional = function(e2, t2, n2) {
        var r2 = t2[n2];
        void 0 !== r2 && this.setValue(e2, n2, r2);
      }, Or.upload = function(e2, t2, n2, r2) {
        for (var i3 = 0, a2 = t2.length; i3 !== a2; ++i3) {
          var o2 = t2[i3], s2 = n2[o2.id];
          false !== s2.needsUpdate && o2.setValue(e2, s2.value, r2);
        }
      }, Or.seqWithValue = function(e2, t2) {
        for (var n2 = [], r2 = 0, i3 = e2.length; r2 !== i3; ++r2) {
          var a2 = e2[r2];
          a2.id in t2 && n2.push(a2);
        }
        return n2;
      };
      var Ir = 0;
      function Dr(e2) {
        switch (e2) {
          case Tt:
            return ["Linear", "( value )"];
          case St:
            return ["sRGB", "( value )"];
          case Lt:
            return ["RGBE", "( value )"];
          case Ct:
            return ["RGBM", "( value, 7.0 )"];
          case Pt:
            return ["RGBM", "( value, 16.0 )"];
          case Ot:
            return ["RGBD", "( value, 256.0 )"];
          case At:
            return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
          default:
            throw new Error("unsupported encoding: " + e2);
        }
      }
      function Ur(e2, t2) {
        var n2 = Dr(t2);
        return "vec4 " + e2 + "( vec4 value ) { return " + n2[0] + "ToLinear" + n2[1] + "; }";
      }
      function Br(e2) {
        return "" !== e2;
      }
      function Fr(e2, t2) {
        return e2.replace(/NUM_DIR_LIGHTS/g, t2.numDirLights).replace(/NUM_SPOT_LIGHTS/g, t2.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, t2.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, t2.numPointLights).replace(/NUM_HEMI_LIGHTS/g, t2.numHemiLights);
      }
      function Gr(e2, t2) {
        return e2.replace(/NUM_CLIPPING_PLANES/g, t2.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, t2.numClippingPlanes - t2.numClipIntersection);
      }
      function zr(e2) {
        return e2.replace(/^[ \t]*#include +<([\w\d./]+)>/gm, function(e3, t2) {
          var n2 = en[t2];
          if (void 0 === n2)
            throw new Error("Can not resolve #include <" + t2 + ">");
          return zr(n2);
        });
      }
      function Hr(e2) {
        return e2.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function(e3, t2, n2, r2) {
          for (var i3 = "", a2 = parseInt(t2); a2 < parseInt(n2); a2++)
            i3 += r2.replace(/\[ i \]/g, "[ " + a2 + " ]");
          return i3;
        });
      }
      function kr(e2, t2, n2, r2, i3, a2, o2) {
        var s2 = e2.context, c3 = r2.defines, u2 = i3.vertexShader, l2 = i3.fragmentShader, h2 = "SHADOWMAP_TYPE_BASIC";
        a2.shadowMapType === p ? h2 = "SHADOWMAP_TYPE_PCF" : a2.shadowMapType === f && (h2 = "SHADOWMAP_TYPE_PCF_SOFT");
        var d2 = "ENVMAP_TYPE_CUBE", m3 = "ENVMAP_MODE_REFLECTION", g2 = "ENVMAP_BLENDING_MULTIPLY";
        if (a2.envMap) {
          switch (r2.envMap.mapping) {
            case ce:
            case ue:
              d2 = "ENVMAP_TYPE_CUBE";
              break;
            case pe:
            case fe:
              d2 = "ENVMAP_TYPE_CUBE_UV";
              break;
            case le:
            case he:
              d2 = "ENVMAP_TYPE_EQUIREC";
              break;
            case de:
              d2 = "ENVMAP_TYPE_SPHERE";
          }
          switch (r2.envMap.mapping) {
            case ue:
            case he:
              m3 = "ENVMAP_MODE_REFRACTION";
          }
          switch (r2.combine) {
            case $:
              g2 = "ENVMAP_BLENDING_MULTIPLY";
              break;
            case ee:
              g2 = "ENVMAP_BLENDING_MIX";
              break;
            case te:
              g2 = "ENVMAP_BLENDING_ADD";
          }
        }
        var v2, y2, x2 = e2.gammaFactor > 0 ? e2.gammaFactor : 1, b2 = o2.isWebGL2 ? "" : function(e3, t3, n3) {
          return [(e3 = e3 || {}).derivatives || t3.envMapCubeUV || t3.bumpMap || t3.normalMap && !t3.objectSpaceNormalMap || t3.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (e3.fragDepth || t3.logarithmicDepthBuffer) && n3.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", e3.drawBuffers && n3.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (e3.shaderTextureLOD || t3.envMap) && n3.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(Br).join("\n");
        }(r2.extensions, a2, t2), w2 = function(e3) {
          var t3 = [];
          for (var n3 in e3) {
            var r3 = e3[n3];
            false !== r3 && t3.push("#define " + n3 + " " + r3);
          }
          return t3.join("\n");
        }(c3), _2 = s2.createProgram();
        if (r2.isRawShaderMaterial ? ((v2 = [w2].filter(Br).join("\n")).length > 0 && (v2 += "\n"), (y2 = [b2, w2].filter(Br).join("\n")).length > 0 && (y2 += "\n")) : (v2 = ["precision " + a2.precision + " float;", "precision " + a2.precision + " int;", "#define SHADER_NAME " + i3.name, w2, a2.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + x2, "#define MAX_BONES " + a2.maxBones, a2.useFog && a2.fog ? "#define USE_FOG" : "", a2.useFog && a2.fogExp ? "#define FOG_EXP2" : "", a2.map ? "#define USE_MAP" : "", a2.envMap ? "#define USE_ENVMAP" : "", a2.envMap ? "#define " + m3 : "", a2.lightMap ? "#define USE_LIGHTMAP" : "", a2.aoMap ? "#define USE_AOMAP" : "", a2.emissiveMap ? "#define USE_EMISSIVEMAP" : "", a2.bumpMap ? "#define USE_BUMPMAP" : "", a2.normalMap ? "#define USE_NORMALMAP" : "", a2.normalMap && a2.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", a2.displacementMap && a2.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", a2.specularMap ? "#define USE_SPECULARMAP" : "", a2.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", a2.metalnessMap ? "#define USE_METALNESSMAP" : "", a2.alphaMap ? "#define USE_ALPHAMAP" : "", a2.vertexColors ? "#define USE_COLOR" : "", a2.flatShading ? "#define FLAT_SHADED" : "", a2.skinning ? "#define USE_SKINNING" : "", a2.useVertexTexture ? "#define BONE_TEXTURE" : "", a2.morphTargets ? "#define USE_MORPHTARGETS" : "", a2.morphNormals && false === a2.flatShading ? "#define USE_MORPHNORMALS" : "", a2.doubleSided ? "#define DOUBLE_SIDED" : "", a2.flipSided ? "#define FLIP_SIDED" : "", a2.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", a2.shadowMapEnabled ? "#define " + h2 : "", a2.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", a2.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", a2.logarithmicDepthBuffer && (o2.isWebGL2 || t2.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "	attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "	attribute vec3 morphTarget0;", "	attribute vec3 morphTarget1;", "	attribute vec3 morphTarget2;", "	attribute vec3 morphTarget3;", "	#ifdef USE_MORPHNORMALS", "		attribute vec3 morphNormal0;", "		attribute vec3 morphNormal1;", "		attribute vec3 morphNormal2;", "		attribute vec3 morphNormal3;", "	#else", "		attribute vec3 morphTarget4;", "		attribute vec3 morphTarget5;", "		attribute vec3 morphTarget6;", "		attribute vec3 morphTarget7;", "	#endif", "#endif", "#ifdef USE_SKINNING", "	attribute vec4 skinIndex;", "	attribute vec4 skinWeight;", "#endif", "\n"].filter(Br).join("\n"), y2 = [b2, "precision " + a2.precision + " float;", "precision " + a2.precision + " int;", "#define SHADER_NAME " + i3.name, w2, a2.alphaTest ? "#define ALPHATEST " + a2.alphaTest + (a2.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + x2, a2.useFog && a2.fog ? "#define USE_FOG" : "", a2.useFog && a2.fogExp ? "#define FOG_EXP2" : "", a2.map ? "#define USE_MAP" : "", a2.envMap ? "#define USE_ENVMAP" : "", a2.envMap ? "#define " + d2 : "", a2.envMap ? "#define " + m3 : "", a2.envMap ? "#define " + g2 : "", a2.lightMap ? "#define USE_LIGHTMAP" : "", a2.aoMap ? "#define USE_AOMAP" : "", a2.emissiveMap ? "#define USE_EMISSIVEMAP" : "", a2.bumpMap ? "#define USE_BUMPMAP" : "", a2.normalMap ? "#define USE_NORMALMAP" : "", a2.normalMap && a2.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", a2.specularMap ? "#define USE_SPECULARMAP" : "", a2.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", a2.metalnessMap ? "#define USE_METALNESSMAP" : "", a2.alphaMap ? "#define USE_ALPHAMAP" : "", a2.vertexColors ? "#define USE_COLOR" : "", a2.gradientMap ? "#define USE_GRADIENTMAP" : "", a2.flatShading ? "#define FLAT_SHADED" : "", a2.doubleSided ? "#define DOUBLE_SIDED" : "", a2.flipSided ? "#define FLIP_SIDED" : "", a2.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", a2.shadowMapEnabled ? "#define " + h2 : "", a2.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", a2.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", a2.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", a2.logarithmicDepthBuffer && (o2.isWebGL2 || t2.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", a2.envMap && (o2.isWebGL2 || t2.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", a2.toneMapping !== ne ? "#define TONE_MAPPING" : "", a2.toneMapping !== ne ? en.tonemapping_pars_fragment : "", a2.toneMapping !== ne ? function(e3, t3) {
          var n3;
          switch (t3) {
            case re:
              n3 = "Linear";
              break;
            case ie:
              n3 = "Reinhard";
              break;
            case ae:
              n3 = "Uncharted2";
              break;
            case oe:
              n3 = "OptimizedCineon";
              break;
            default:
              throw new Error("unsupported toneMapping: " + t3);
          }
          return "vec3 " + e3 + "( vec3 color ) { return " + n3 + "ToneMapping( color ); }";
        }("toneMapping", a2.toneMapping) : "", a2.dithering ? "#define DITHERING" : "", a2.outputEncoding || a2.mapEncoding || a2.envMapEncoding || a2.emissiveMapEncoding ? en.encodings_pars_fragment : "", a2.mapEncoding ? Ur("mapTexelToLinear", a2.mapEncoding) : "", a2.envMapEncoding ? Ur("envMapTexelToLinear", a2.envMapEncoding) : "", a2.emissiveMapEncoding ? Ur("emissiveMapTexelToLinear", a2.emissiveMapEncoding) : "", a2.outputEncoding ? function(e3, t3) {
          var n3 = Dr(t3);
          return "vec4 " + e3 + "( vec4 value ) { return LinearTo" + n3[0] + n3[1] + "; }";
        }("linearToOutputTexel", a2.outputEncoding) : "", a2.depthPacking ? "#define DEPTH_PACKING " + r2.depthPacking : "", "\n"].filter(Br).join("\n")), u2 = Gr(u2 = Fr(u2 = zr(u2), a2), a2), l2 = Gr(l2 = Fr(l2 = zr(l2), a2), a2), u2 = Hr(u2), l2 = Hr(l2), o2.isWebGL2 && !r2.isRawShaderMaterial) {
          var M2 = false, E2 = /^\s*#version\s+300\s+es\s*\n/;
          r2.isShaderMaterial && null !== u2.match(E2) && null !== l2.match(E2) && (M2 = true, u2 = u2.replace(E2, ""), l2 = l2.replace(E2, "")), v2 = ["#version 300 es\n", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + v2, y2 = ["#version 300 es\n", "#define varying in", M2 ? "" : "out highp vec4 pc_fragColor;", M2 ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + y2;
        }
        var T2 = v2 + u2, S2 = y2 + l2, A2 = Nr(s2, s2.VERTEX_SHADER, T2), L2 = Nr(s2, s2.FRAGMENT_SHADER, S2);
        s2.attachShader(_2, A2), s2.attachShader(_2, L2), void 0 !== r2.index0AttributeName ? s2.bindAttribLocation(_2, 0, r2.index0AttributeName) : true === a2.morphTargets && s2.bindAttribLocation(_2, 0, "position"), s2.linkProgram(_2);
        var R2, C2, P2 = s2.getProgramInfoLog(_2).trim(), O2 = s2.getShaderInfoLog(A2).trim(), N2 = s2.getShaderInfoLog(L2).trim(), I2 = true, D2 = true;
        return false === s2.getProgramParameter(_2, s2.LINK_STATUS) ? (I2 = false, console.error("THREE.WebGLProgram: shader error: ", s2.getError(), "gl.VALIDATE_STATUS", s2.getProgramParameter(_2, s2.VALIDATE_STATUS), "gl.getProgramInfoLog", P2, O2, N2)) : "" !== P2 ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", P2) : "" !== O2 && "" !== N2 || (D2 = false), D2 && (this.diagnostics = { runnable: I2, material: r2, programLog: P2, vertexShader: { log: O2, prefix: v2 }, fragmentShader: { log: N2, prefix: y2 } }), s2.deleteShader(A2), s2.deleteShader(L2), this.getUniforms = function() {
          return void 0 === R2 && (R2 = new Or(s2, _2, e2)), R2;
        }, this.getAttributes = function() {
          return void 0 === C2 && (C2 = function(e3, t3) {
            for (var n3 = {}, r3 = e3.getProgramParameter(t3, e3.ACTIVE_ATTRIBUTES), i4 = 0; i4 < r3; i4++) {
              var a3 = e3.getActiveAttrib(t3, i4).name;
              n3[a3] = e3.getAttribLocation(t3, a3);
            }
            return n3;
          }(s2, _2)), C2;
        }, this.destroy = function() {
          s2.deleteProgram(_2), this.program = void 0;
        }, Object.defineProperties(this, { uniforms: { get: function() {
          return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."), this.getUniforms();
        } }, attributes: { get: function() {
          return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."), this.getAttributes();
        } } }), this.name = i3.name, this.id = Ir++, this.code = n2, this.usedTimes = 1, this.program = _2, this.vertexShader = A2, this.fragmentShader = L2, this;
      }
      function jr(e2, t2, n2) {
        var r2 = [], i3 = { MeshDepthMaterial: "depth", MeshDistanceMaterial: "distanceRGBA", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshToonMaterial: "phong", MeshStandardMaterial: "physical", MeshPhysicalMaterial: "physical", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points", ShadowMaterial: "shadow", SpriteMaterial: "sprite" }, a2 = ["precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding", "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"];
        function o2(e3, t3) {
          var n3;
          return e3 ? e3.isTexture ? n3 = e3.encoding : e3.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), n3 = e3.texture.encoding) : n3 = Tt, n3 === Tt && t3 && (n3 = At), n3;
        }
        this.getParameters = function(t3, r3, a3, s2, c3, u2, l2) {
          var h2 = i3[t3.type], d2 = l2.isSkinnedMesh ? function(e3) {
            var t4 = e3.skeleton.bones;
            if (n2.floatVertexTextures)
              return 1024;
            var r4 = n2.maxVertexUniforms, i4 = Math.floor((r4 - 20) / 4), a4 = Math.min(i4, t4.length);
            return a4 < t4.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + t4.length + " bones. This GPU supports " + a4 + "."), 0) : a4;
          }(l2) : 0, p2 = n2.precision;
          null !== t3.precision && (p2 = n2.getMaxPrecision(t3.precision)) !== t3.precision && console.warn("THREE.WebGLProgram.getParameters:", t3.precision, "not supported, using", p2, "instead.");
          var f2 = e2.getRenderTarget();
          return { shaderID: h2, precision: p2, supportsVertexTextures: n2.vertexTextures, outputEncoding: o2(f2 ? f2.texture : null, e2.gammaOutput), map: !!t3.map, mapEncoding: o2(t3.map, e2.gammaInput), envMap: !!t3.envMap, envMapMode: t3.envMap && t3.envMap.mapping, envMapEncoding: o2(t3.envMap, e2.gammaInput), envMapCubeUV: !!t3.envMap && (t3.envMap.mapping === pe || t3.envMap.mapping === fe), lightMap: !!t3.lightMap, aoMap: !!t3.aoMap, emissiveMap: !!t3.emissiveMap, emissiveMapEncoding: o2(t3.emissiveMap, e2.gammaInput), bumpMap: !!t3.bumpMap, normalMap: !!t3.normalMap, objectSpaceNormalMap: t3.normalMapType === Ut, displacementMap: !!t3.displacementMap, roughnessMap: !!t3.roughnessMap, metalnessMap: !!t3.metalnessMap, specularMap: !!t3.specularMap, alphaMap: !!t3.alphaMap, gradientMap: !!t3.gradientMap, combine: t3.combine, vertexColors: t3.vertexColors, fog: !!s2, useFog: t3.fog, fogExp: s2 && s2.isFogExp2, flatShading: t3.flatShading, sizeAttenuation: t3.sizeAttenuation, logarithmicDepthBuffer: n2.logarithmicDepthBuffer, skinning: t3.skinning && d2 > 0, maxBones: d2, useVertexTexture: n2.floatVertexTextures, morphTargets: t3.morphTargets, morphNormals: t3.morphNormals, maxMorphTargets: e2.maxMorphTargets, maxMorphNormals: e2.maxMorphNormals, numDirLights: r3.directional.length, numPointLights: r3.point.length, numSpotLights: r3.spot.length, numRectAreaLights: r3.rectArea.length, numHemiLights: r3.hemi.length, numClippingPlanes: c3, numClipIntersection: u2, dithering: t3.dithering, shadowMapEnabled: e2.shadowMap.enabled && l2.receiveShadow && a3.length > 0, shadowMapType: e2.shadowMap.type, toneMapping: e2.toneMapping, physicallyCorrectLights: e2.physicallyCorrectLights, premultipliedAlpha: t3.premultipliedAlpha, alphaTest: t3.alphaTest, doubleSided: t3.side === v, flipSided: t3.side === g, depthPacking: void 0 !== t3.depthPacking && t3.depthPacking };
        }, this.getProgramCode = function(t3, n3) {
          var r3 = [];
          if (n3.shaderID ? r3.push(n3.shaderID) : (r3.push(t3.fragmentShader), r3.push(t3.vertexShader)), void 0 !== t3.defines)
            for (var i4 in t3.defines)
              r3.push(i4), r3.push(t3.defines[i4]);
          for (var o3 = 0; o3 < a2.length; o3++)
            r3.push(n3[a2[o3]]);
          return r3.push(t3.onBeforeCompile.toString()), r3.push(e2.gammaOutput), r3.join();
        }, this.acquireProgram = function(i4, a3, o3, s2) {
          for (var c3, u2 = 0, l2 = r2.length; u2 < l2; u2++) {
            var h2 = r2[u2];
            if (h2.code === s2) {
              ++(c3 = h2).usedTimes;
              break;
            }
          }
          return void 0 === c3 && (c3 = new kr(e2, t2, s2, i4, a3, o3, n2), r2.push(c3)), c3;
        }, this.releaseProgram = function(e3) {
          if (0 == --e3.usedTimes) {
            var t3 = r2.indexOf(e3);
            r2[t3] = r2[r2.length - 1], r2.pop(), e3.destroy();
          }
        }, this.programs = r2;
      }
      function Vr(e2, t2) {
        return e2.renderOrder !== t2.renderOrder ? e2.renderOrder - t2.renderOrder : e2.program && t2.program && e2.program !== t2.program ? e2.program.id - t2.program.id : e2.material.id !== t2.material.id ? e2.material.id - t2.material.id : e2.z !== t2.z ? e2.z - t2.z : e2.id - t2.id;
      }
      function Wr(e2, t2) {
        return e2.renderOrder !== t2.renderOrder ? e2.renderOrder - t2.renderOrder : e2.z !== t2.z ? t2.z - e2.z : e2.id - t2.id;
      }
      function Xr() {
        var e2 = {};
        return { get: function(t2, n2) {
          var r2 = t2.id + "," + n2.id, i3 = e2[r2];
          return void 0 === i3 && (i3 = new function() {
            var e3 = [], t3 = 0, n3 = [], r3 = [];
            return { opaque: n3, transparent: r3, init: function() {
              t3 = 0, n3.length = 0, r3.length = 0;
            }, push: function(i4, a2, o2, s2, c3) {
              var u2 = e3[t3];
              void 0 === u2 ? (u2 = { id: i4.id, object: i4, geometry: a2, material: o2, program: o2.program, renderOrder: i4.renderOrder, z: s2, group: c3 }, e3[t3] = u2) : (u2.id = i4.id, u2.object = i4, u2.geometry = a2, u2.material = o2, u2.program = o2.program, u2.renderOrder = i4.renderOrder, u2.z = s2, u2.group = c3), (true === o2.transparent ? r3 : n3).push(u2), t3++;
            }, sort: function() {
              n3.length > 1 && n3.sort(Vr), r3.length > 1 && r3.sort(Wr);
            } };
          }(), e2[r2] = i3), i3;
        }, dispose: function() {
          e2 = {};
        } };
      }
      var qr, Yr = 0;
      function Zr() {
        var e2 = new function() {
          var e3 = {};
          return { get: function(t3) {
            if (void 0 !== e3[t3.id])
              return e3[t3.id];
            var n3;
            switch (t3.type) {
              case "DirectionalLight":
                n3 = { direction: new Ht(), color: new rn(), shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new Ft() };
                break;
              case "SpotLight":
                n3 = { position: new Ht(), direction: new Ht(), color: new rn(), distance: 0, coneCos: 0, penumbraCos: 0, decay: 0, shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new Ft() };
                break;
              case "PointLight":
                n3 = { position: new Ht(), color: new rn(), distance: 0, decay: 0, shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new Ft(), shadowCameraNear: 1, shadowCameraFar: 1e3 };
                break;
              case "HemisphereLight":
                n3 = { direction: new Ht(), skyColor: new rn(), groundColor: new rn() };
                break;
              case "RectAreaLight":
                n3 = { color: new rn(), position: new Ht(), halfWidth: new Ht(), halfHeight: new Ht() };
            }
            return e3[t3.id] = n3, n3;
          } };
        }(), t2 = { id: Yr++, hash: { stateID: -1, directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, shadowsLength: -1 }, ambient: [0, 0, 0], directional: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotShadowMap: [], spotShadowMatrix: [], rectArea: [], point: [], pointShadowMap: [], pointShadowMatrix: [], hemi: [] }, n2 = new Ht(), r2 = new Gt(), i3 = new Gt();
        return { setup: function(a2, o2, s2) {
          for (var c3 = 0, u2 = 0, l2 = 0, h2 = 0, d2 = 0, p2 = 0, f2 = 0, m3 = 0, g2 = s2.matrixWorldInverse, v2 = 0, y2 = a2.length; v2 < y2; v2++) {
            var x2 = a2[v2], b2 = x2.color, w2 = x2.intensity, _2 = x2.distance, M2 = x2.shadow && x2.shadow.map ? x2.shadow.map.texture : null;
            if (x2.isAmbientLight)
              c3 += b2.r * w2, u2 += b2.g * w2, l2 += b2.b * w2;
            else if (x2.isDirectionalLight) {
              if ((T2 = e2.get(x2)).color.copy(x2.color).multiplyScalar(x2.intensity), T2.direction.setFromMatrixPosition(x2.matrixWorld), n2.setFromMatrixPosition(x2.target.matrixWorld), T2.direction.sub(n2), T2.direction.transformDirection(g2), T2.shadow = x2.castShadow, x2.castShadow) {
                var E2 = x2.shadow;
                T2.shadowBias = E2.bias, T2.shadowRadius = E2.radius, T2.shadowMapSize = E2.mapSize;
              }
              t2.directionalShadowMap[h2] = M2, t2.directionalShadowMatrix[h2] = x2.shadow.matrix, t2.directional[h2] = T2, h2++;
            } else if (x2.isSpotLight)
              (T2 = e2.get(x2)).position.setFromMatrixPosition(x2.matrixWorld), T2.position.applyMatrix4(g2), T2.color.copy(b2).multiplyScalar(w2), T2.distance = _2, T2.direction.setFromMatrixPosition(x2.matrixWorld), n2.setFromMatrixPosition(x2.target.matrixWorld), T2.direction.sub(n2), T2.direction.transformDirection(g2), T2.coneCos = Math.cos(x2.angle), T2.penumbraCos = Math.cos(x2.angle * (1 - x2.penumbra)), T2.decay = 0 === x2.distance ? 0 : x2.decay, T2.shadow = x2.castShadow, x2.castShadow && (E2 = x2.shadow, T2.shadowBias = E2.bias, T2.shadowRadius = E2.radius, T2.shadowMapSize = E2.mapSize), t2.spotShadowMap[p2] = M2, t2.spotShadowMatrix[p2] = x2.shadow.matrix, t2.spot[p2] = T2, p2++;
            else if (x2.isRectAreaLight)
              (T2 = e2.get(x2)).color.copy(b2).multiplyScalar(w2), T2.position.setFromMatrixPosition(x2.matrixWorld), T2.position.applyMatrix4(g2), i3.identity(), r2.copy(x2.matrixWorld), r2.premultiply(g2), i3.extractRotation(r2), T2.halfWidth.set(0.5 * x2.width, 0, 0), T2.halfHeight.set(0, 0.5 * x2.height, 0), T2.halfWidth.applyMatrix4(i3), T2.halfHeight.applyMatrix4(i3), t2.rectArea[f2] = T2, f2++;
            else if (x2.isPointLight)
              (T2 = e2.get(x2)).position.setFromMatrixPosition(x2.matrixWorld), T2.position.applyMatrix4(g2), T2.color.copy(x2.color).multiplyScalar(x2.intensity), T2.distance = x2.distance, T2.decay = 0 === x2.distance ? 0 : x2.decay, T2.shadow = x2.castShadow, x2.castShadow && (E2 = x2.shadow, T2.shadowBias = E2.bias, T2.shadowRadius = E2.radius, T2.shadowMapSize = E2.mapSize, T2.shadowCameraNear = E2.camera.near, T2.shadowCameraFar = E2.camera.far), t2.pointShadowMap[d2] = M2, t2.pointShadowMatrix[d2] = x2.shadow.matrix, t2.point[d2] = T2, d2++;
            else if (x2.isHemisphereLight) {
              var T2;
              (T2 = e2.get(x2)).direction.setFromMatrixPosition(x2.matrixWorld), T2.direction.transformDirection(g2), T2.direction.normalize(), T2.skyColor.copy(x2.color).multiplyScalar(w2), T2.groundColor.copy(x2.groundColor).multiplyScalar(w2), t2.hemi[m3] = T2, m3++;
            }
          }
          t2.ambient[0] = c3, t2.ambient[1] = u2, t2.ambient[2] = l2, t2.directional.length = h2, t2.spot.length = p2, t2.rectArea.length = f2, t2.point.length = d2, t2.hemi.length = m3, t2.hash.stateID = t2.id, t2.hash.directionalLength = h2, t2.hash.pointLength = d2, t2.hash.spotLength = p2, t2.hash.rectAreaLength = f2, t2.hash.hemiLength = m3, t2.hash.shadowsLength = o2.length;
        }, state: t2 };
      }
      function Jr() {
        var e2 = new Zr(), t2 = [], n2 = [];
        return { init: function() {
          t2.length = 0, n2.length = 0;
        }, state: { lightsArray: t2, shadowsArray: n2, lights: e2 }, setupLights: function(r2) {
          e2.setup(t2, n2, r2);
        }, pushLight: function(e3) {
          t2.push(e3);
        }, pushShadow: function(e3) {
          n2.push(e3);
        } };
      }
      function Kr(e2) {
        Bn.call(this), this.type = "MeshDepthMaterial", this.depthPacking = Nt, this.skinning = false, this.morphTargets = false, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.setValues(e2);
      }
      function Qr(e2) {
        Bn.call(this), this.type = "MeshDistanceMaterial", this.referencePosition = new Ht(), this.nearDistance = 1, this.farDistance = 1e3, this.skinning = false, this.morphTargets = false, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.fog = false, this.lights = false, this.setValues(e2);
      }
      function $r(e2, t2, n2) {
        for (var r2 = new $t(), i3 = new Gt(), a2 = new Ft(), o2 = new Ft(n2, n2), s2 = new Ht(), c3 = new Ht(), u2 = 1, l2 = 2, h2 = 1 + (u2 | l2), d2 = new Array(h2), f2 = new Array(h2), y2 = {}, x2 = { 0: g, 1: m2, 2: v }, b2 = [new Ht(1, 0, 0), new Ht(-1, 0, 0), new Ht(0, 0, 1), new Ht(0, 0, -1), new Ht(0, 1, 0), new Ht(0, -1, 0)], w2 = [new Ht(0, 1, 0), new Ht(0, 1, 0), new Ht(0, 1, 0), new Ht(0, 1, 0), new Ht(0, 0, 1), new Ht(0, 0, -1)], _2 = [new Xt(), new Xt(), new Xt(), new Xt(), new Xt(), new Xt()], M2 = 0; M2 !== h2; ++M2) {
          var E2 = 0 != (M2 & u2), T2 = 0 != (M2 & l2), S2 = new Kr({ depthPacking: It, morphTargets: E2, skinning: T2 });
          d2[M2] = S2;
          var A2 = new Qr({ morphTargets: E2, skinning: T2 });
          f2[M2] = A2;
        }
        var L2 = this;
        function R2(t3, n3, r3, i4, a3, o3) {
          var s3 = t3.geometry, c4 = null, h3 = d2, p2 = t3.customDepthMaterial;
          if (r3 && (h3 = f2, p2 = t3.customDistanceMaterial), p2)
            c4 = p2;
          else {
            var m3 = false;
            n3.morphTargets && (s3 && s3.isBufferGeometry ? m3 = s3.morphAttributes && s3.morphAttributes.position && s3.morphAttributes.position.length > 0 : s3 && s3.isGeometry && (m3 = s3.morphTargets && s3.morphTargets.length > 0)), t3.isSkinnedMesh && false === n3.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", t3);
            var g2 = t3.isSkinnedMesh && n3.skinning, v2 = 0;
            m3 && (v2 |= u2), g2 && (v2 |= l2), c4 = h3[v2];
          }
          if (e2.localClippingEnabled && true === n3.clipShadows && 0 !== n3.clippingPlanes.length) {
            var b3 = c4.uuid, w3 = n3.uuid, _3 = y2[b3];
            void 0 === _3 && (_3 = {}, y2[b3] = _3);
            var M3 = _3[w3];
            void 0 === M3 && (M3 = c4.clone(), _3[w3] = M3), c4 = M3;
          }
          return c4.visible = n3.visible, c4.wireframe = n3.wireframe, c4.side = null != n3.shadowSide ? n3.shadowSide : x2[n3.side], c4.clipShadows = n3.clipShadows, c4.clippingPlanes = n3.clippingPlanes, c4.clipIntersection = n3.clipIntersection, c4.wireframeLinewidth = n3.wireframeLinewidth, c4.linewidth = n3.linewidth, r3 && c4.isMeshDistanceMaterial && (c4.referencePosition.copy(i4), c4.nearDistance = a3, c4.farDistance = o3), c4;
        }
        function C2(n3, i4, a3, o3) {
          if (false !== n3.visible) {
            if (n3.layers.test(i4.layers) && (n3.isMesh || n3.isLine || n3.isPoints) && n3.castShadow && (!n3.frustumCulled || r2.intersectsObject(n3))) {
              n3.modelViewMatrix.multiplyMatrices(a3.matrixWorldInverse, n3.matrixWorld);
              var s3 = t2.update(n3), u3 = n3.material;
              if (Array.isArray(u3))
                for (var l3 = s3.groups, h3 = 0, d3 = l3.length; h3 < d3; h3++) {
                  var p2 = l3[h3], f3 = u3[p2.materialIndex];
                  if (f3 && f3.visible) {
                    var m3 = R2(n3, f3, o3, c3, a3.near, a3.far);
                    e2.renderBufferDirect(a3, null, s3, m3, n3, p2);
                  }
                }
              else if (u3.visible) {
                m3 = R2(n3, u3, o3, c3, a3.near, a3.far);
                e2.renderBufferDirect(a3, null, s3, m3, n3, null);
              }
            }
            for (var g2 = n3.children, v2 = 0, y3 = g2.length; v2 < y3; v2++)
              C2(g2[v2], i4, a3, o3);
          }
        }
        this.enabled = false, this.autoUpdate = true, this.needsUpdate = false, this.type = p, this.render = function(t3, n3, u3) {
          if (false !== L2.enabled && (false !== L2.autoUpdate || false !== L2.needsUpdate) && 0 !== t3.length) {
            var l3, h3 = e2.context, d3 = e2.state;
            d3.disable(h3.BLEND), d3.buffers.color.setClear(1, 1, 1, 1), d3.buffers.depth.setTest(true), d3.setScissorTest(false);
            for (var p2 = 0, f3 = t3.length; p2 < f3; p2++) {
              var m3 = t3[p2], g2 = m3.shadow, v2 = m3 && m3.isPointLight;
              if (void 0 !== g2) {
                var y3 = g2.camera;
                if (a2.copy(g2.mapSize), a2.min(o2), v2) {
                  var x3 = a2.x, M3 = a2.y;
                  _2[0].set(2 * x3, M3, x3, M3), _2[1].set(0, M3, x3, M3), _2[2].set(3 * x3, M3, x3, M3), _2[3].set(x3, M3, x3, M3), _2[4].set(3 * x3, 0, x3, M3), _2[5].set(x3, 0, x3, M3), a2.x *= 4, a2.y *= 2;
                }
                if (null === g2.map) {
                  var E3 = { minFilter: ye, magFilter: ye, format: Fe };
                  g2.map = new qt(a2.x, a2.y, E3), g2.map.texture.name = m3.name + ".shadowMap", y3.updateProjectionMatrix();
                }
                g2.isSpotLightShadow && g2.update(m3);
                var T3 = g2.map, S3 = g2.matrix;
                c3.setFromMatrixPosition(m3.matrixWorld), y3.position.copy(c3), v2 ? (l3 = 6, S3.makeTranslation(-c3.x, -c3.y, -c3.z)) : (l3 = 1, s2.setFromMatrixPosition(m3.target.matrixWorld), y3.lookAt(s2), y3.updateMatrixWorld(), S3.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1), S3.multiply(y3.projectionMatrix), S3.multiply(y3.matrixWorldInverse)), e2.setRenderTarget(T3), e2.clear();
                for (var A3 = 0; A3 < l3; A3++) {
                  if (v2) {
                    s2.copy(y3.position), s2.add(b2[A3]), y3.up.copy(w2[A3]), y3.lookAt(s2), y3.updateMatrixWorld();
                    var R3 = _2[A3];
                    d3.viewport(R3);
                  }
                  i3.multiplyMatrices(y3.projectionMatrix, y3.matrixWorldInverse), r2.setFromMatrix(i3), C2(n3, u3, y3, v2);
                }
              } else
                console.warn("THREE.WebGLShadowMap:", m3, "has no shadow.");
            }
            L2.needsUpdate = false;
          }
        };
      }
      function ei(e2, t2, n2, r2, i3, a2, o2) {
        var s2, c3 = {};
        function u2(e3, t3) {
          if (e3.width > t3 || e3.height > t3) {
            if ("data" in e3)
              return void console.warn("THREE.WebGLRenderer: image in DataTexture is too big (" + e3.width + "x" + e3.height + ").");
            var n3 = t3 / Math.max(e3.width, e3.height), r3 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
            return r3.width = Math.floor(e3.width * n3), r3.height = Math.floor(e3.height * n3), r3.getContext("2d").drawImage(e3, 0, 0, e3.width, e3.height, 0, 0, r3.width, r3.height), console.warn("THREE.WebGLRenderer: image is too big (" + e3.width + "x" + e3.height + "). Resized to " + r3.width + "x" + r3.height), r3;
          }
          return e3;
        }
        function l2(e3) {
          return Bt.isPowerOfTwo(e3.width) && Bt.isPowerOfTwo(e3.height);
        }
        function h2(e3, t3) {
          return e3.generateMipmaps && t3 && e3.minFilter !== ye && e3.minFilter !== we;
        }
        function d2(t3, n3, i4, a3) {
          e2.generateMipmap(t3), r2.get(n3).__maxMipLevel = Math.log(Math.max(i4, a3)) * Math.LOG2E;
        }
        function p2(t3, n3) {
          if (!i3.isWebGL2)
            return t3;
          if (t3 === e2.RGB) {
            if (n3 === e2.FLOAT)
              return e2.RGB32F;
            if (n3 === e2.HALF_FLOAT)
              return e2.RGB16F;
            if (n3 === e2.UNSIGNED_BYTE)
              return e2.RGB8;
          }
          if (t3 === e2.RGBA) {
            if (n3 === e2.FLOAT)
              return e2.RGBA32F;
            if (n3 === e2.HALF_FLOAT)
              return e2.RGBA16F;
            if (n3 === e2.UNSIGNED_BYTE)
              return e2.RGBA8;
          }
          return t3;
        }
        function f2(t3) {
          return t3 === ye || t3 === xe || t3 === be ? e2.NEAREST : e2.LINEAR;
        }
        function m3(t3) {
          var n3 = t3.target;
          n3.removeEventListener("dispose", m3), function(t4) {
            var n4 = r2.get(t4);
            if (t4.image && n4.__image__webglTextureCube)
              e2.deleteTexture(n4.__image__webglTextureCube);
            else {
              if (void 0 === n4.__webglInit)
                return;
              e2.deleteTexture(n4.__webglTexture);
            }
            r2.remove(t4);
          }(n3), n3.isVideoTexture && delete c3[n3.id], o2.memory.textures--;
        }
        function g2(t3) {
          var n3 = t3.target;
          n3.removeEventListener("dispose", g2), function(t4) {
            var n4 = r2.get(t4), i4 = r2.get(t4.texture);
            if (!t4)
              return;
            void 0 !== i4.__webglTexture && e2.deleteTexture(i4.__webglTexture);
            t4.depthTexture && t4.depthTexture.dispose();
            if (t4.isWebGLRenderTargetCube)
              for (var a3 = 0; a3 < 6; a3++)
                e2.deleteFramebuffer(n4.__webglFramebuffer[a3]), n4.__webglDepthbuffer && e2.deleteRenderbuffer(n4.__webglDepthbuffer[a3]);
            else
              e2.deleteFramebuffer(n4.__webglFramebuffer), n4.__webglDepthbuffer && e2.deleteRenderbuffer(n4.__webglDepthbuffer);
            r2.remove(t4.texture), r2.remove(t4);
          }(n3), o2.memory.textures--;
        }
        function v2(t3, f3) {
          var g3 = r2.get(t3);
          if (t3.isVideoTexture && function(e3) {
            var t4 = e3.id, n3 = o2.render.frame;
            c3[t4] !== n3 && (c3[t4] = n3, e3.update());
          }(t3), t3.version > 0 && g3.__version !== t3.version) {
            var v3 = t3.image;
            if (void 0 === v3)
              console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
            else {
              if (false !== v3.complete)
                return void function(t4, r3, c4) {
                  void 0 === t4.__webglInit && (t4.__webglInit = true, r3.addEventListener("dispose", m3), t4.__webglTexture = e2.createTexture(), o2.memory.textures++);
                  n2.activeTexture(e2.TEXTURE0 + c4), n2.bindTexture(e2.TEXTURE_2D, t4.__webglTexture), e2.pixelStorei(e2.UNPACK_FLIP_Y_WEBGL, r3.flipY), e2.pixelStorei(e2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r3.premultiplyAlpha), e2.pixelStorei(e2.UNPACK_ALIGNMENT, r3.unpackAlignment);
                  var f4 = u2(r3.image, i3.maxTextureSize);
                  (function(e3) {
                    return !i3.isWebGL2 && (e3.wrapS !== ge || e3.wrapT !== ge || e3.minFilter !== ye && e3.minFilter !== we);
                  })(r3) && false === l2(f4) && (f4 = function(e3) {
                    return e3 instanceof HTMLImageElement || e3 instanceof HTMLCanvasElement || e3 instanceof ImageBitmap ? (void 0 === s2 && (s2 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), s2.width = Bt.floorPowerOfTwo(e3.width), s2.height = Bt.floorPowerOfTwo(e3.height), s2.getContext("2d").drawImage(e3, 0, 0, s2.width, s2.height), console.warn("THREE.WebGLRenderer: image is not power of two (" + e3.width + "x" + e3.height + "). Resized to " + s2.width + "x" + s2.height), s2) : e3;
                  }(f4));
                  var g4 = l2(f4), v4 = a2.convert(r3.format), x3 = a2.convert(r3.type), b3 = p2(v4, x3);
                  y2(e2.TEXTURE_2D, r3, g4);
                  var w3, _2 = r3.mipmaps;
                  if (r3.isDepthTexture) {
                    if (b3 = e2.DEPTH_COMPONENT, r3.type === Ce) {
                      if (!i3.isWebGL2)
                        throw new Error("Float Depth Texture only supported in WebGL2.0");
                      b3 = e2.DEPTH_COMPONENT32F;
                    } else
                      i3.isWebGL2 && (b3 = e2.DEPTH_COMPONENT16);
                    r3.format === ke && b3 === e2.DEPTH_COMPONENT && r3.type !== Ae && r3.type !== Re && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), r3.type = Ae, x3 = a2.convert(r3.type)), r3.format === je && (b3 = e2.DEPTH_STENCIL, r3.type !== De && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), r3.type = De, x3 = a2.convert(r3.type))), n2.texImage2D(e2.TEXTURE_2D, 0, b3, f4.width, f4.height, 0, v4, x3, null);
                  } else if (r3.isDataTexture)
                    if (_2.length > 0 && g4) {
                      for (var M2 = 0, E2 = _2.length; M2 < E2; M2++)
                        w3 = _2[M2], n2.texImage2D(e2.TEXTURE_2D, M2, b3, w3.width, w3.height, 0, v4, x3, w3.data);
                      r3.generateMipmaps = false, t4.__maxMipLevel = _2.length - 1;
                    } else
                      n2.texImage2D(e2.TEXTURE_2D, 0, b3, f4.width, f4.height, 0, v4, x3, f4.data), t4.__maxMipLevel = 0;
                  else if (r3.isCompressedTexture) {
                    for (var M2 = 0, E2 = _2.length; M2 < E2; M2++)
                      w3 = _2[M2], r3.format !== Fe && r3.format !== Be ? n2.getCompressedTextureFormats().indexOf(v4) > -1 ? n2.compressedTexImage2D(e2.TEXTURE_2D, M2, b3, w3.width, w3.height, 0, w3.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : n2.texImage2D(e2.TEXTURE_2D, M2, b3, w3.width, w3.height, 0, v4, x3, w3.data);
                    t4.__maxMipLevel = _2.length - 1;
                  } else if (_2.length > 0 && g4) {
                    for (var M2 = 0, E2 = _2.length; M2 < E2; M2++)
                      w3 = _2[M2], n2.texImage2D(e2.TEXTURE_2D, M2, b3, v4, x3, w3);
                    r3.generateMipmaps = false, t4.__maxMipLevel = _2.length - 1;
                  } else
                    n2.texImage2D(e2.TEXTURE_2D, 0, b3, v4, x3, f4), t4.__maxMipLevel = 0;
                  h2(r3, g4) && d2(e2.TEXTURE_2D, r3, f4.width, f4.height);
                  t4.__version = r3.version, r3.onUpdate && r3.onUpdate(r3);
                }(g3, t3, f3);
              console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            }
          }
          n2.activeTexture(e2.TEXTURE0 + f3), n2.bindTexture(e2.TEXTURE_2D, g3.__webglTexture);
        }
        function y2(n3, o3, s3) {
          var c4;
          if (s3 ? (e2.texParameteri(n3, e2.TEXTURE_WRAP_S, a2.convert(o3.wrapS)), e2.texParameteri(n3, e2.TEXTURE_WRAP_T, a2.convert(o3.wrapT)), e2.texParameteri(n3, e2.TEXTURE_MAG_FILTER, a2.convert(o3.magFilter)), e2.texParameteri(n3, e2.TEXTURE_MIN_FILTER, a2.convert(o3.minFilter))) : (e2.texParameteri(n3, e2.TEXTURE_WRAP_S, e2.CLAMP_TO_EDGE), e2.texParameteri(n3, e2.TEXTURE_WRAP_T, e2.CLAMP_TO_EDGE), o3.wrapS === ge && o3.wrapT === ge || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), e2.texParameteri(n3, e2.TEXTURE_MAG_FILTER, f2(o3.magFilter)), e2.texParameteri(n3, e2.TEXTURE_MIN_FILTER, f2(o3.minFilter)), o3.minFilter !== ye && o3.minFilter !== we && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), c4 = t2.get("EXT_texture_filter_anisotropic")) {
            if (o3.type === Ce && null === t2.get("OES_texture_float_linear"))
              return;
            if (o3.type === Pe && null === (i3.isWebGL2 || t2.get("OES_texture_half_float_linear")))
              return;
            (o3.anisotropy > 1 || r2.get(o3).__currentAnisotropy) && (e2.texParameterf(n3, c4.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(o3.anisotropy, i3.getMaxAnisotropy())), r2.get(o3).__currentAnisotropy = o3.anisotropy);
          }
        }
        function x2(t3, i4, o3, s3) {
          var c4 = a2.convert(i4.texture.format), u3 = a2.convert(i4.texture.type), l3 = p2(c4, u3);
          n2.texImage2D(s3, 0, l3, i4.width, i4.height, 0, c4, u3, null), e2.bindFramebuffer(e2.FRAMEBUFFER, t3), e2.framebufferTexture2D(e2.FRAMEBUFFER, o3, s3, r2.get(i4.texture).__webglTexture, 0), e2.bindFramebuffer(e2.FRAMEBUFFER, null);
        }
        function b2(t3, n3) {
          e2.bindRenderbuffer(e2.RENDERBUFFER, t3), n3.depthBuffer && !n3.stencilBuffer ? (e2.renderbufferStorage(e2.RENDERBUFFER, e2.DEPTH_COMPONENT16, n3.width, n3.height), e2.framebufferRenderbuffer(e2.FRAMEBUFFER, e2.DEPTH_ATTACHMENT, e2.RENDERBUFFER, t3)) : n3.depthBuffer && n3.stencilBuffer ? (e2.renderbufferStorage(e2.RENDERBUFFER, e2.DEPTH_STENCIL, n3.width, n3.height), e2.framebufferRenderbuffer(e2.FRAMEBUFFER, e2.DEPTH_STENCIL_ATTACHMENT, e2.RENDERBUFFER, t3)) : e2.renderbufferStorage(e2.RENDERBUFFER, e2.RGBA4, n3.width, n3.height), e2.bindRenderbuffer(e2.RENDERBUFFER, null);
        }
        function w2(t3) {
          var n3 = r2.get(t3), i4 = true === t3.isWebGLRenderTargetCube;
          if (t3.depthTexture) {
            if (i4)
              throw new Error("target.depthTexture not supported in Cube render targets");
            !function(t4, n4) {
              if (n4 && n4.isWebGLRenderTargetCube)
                throw new Error("Depth Texture with cube render targets is not supported");
              if (e2.bindFramebuffer(e2.FRAMEBUFFER, t4), !n4.depthTexture || !n4.depthTexture.isDepthTexture)
                throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
              r2.get(n4.depthTexture).__webglTexture && n4.depthTexture.image.width === n4.width && n4.depthTexture.image.height === n4.height || (n4.depthTexture.image.width = n4.width, n4.depthTexture.image.height = n4.height, n4.depthTexture.needsUpdate = true), v2(n4.depthTexture, 0);
              var i5 = r2.get(n4.depthTexture).__webglTexture;
              if (n4.depthTexture.format === ke)
                e2.framebufferTexture2D(e2.FRAMEBUFFER, e2.DEPTH_ATTACHMENT, e2.TEXTURE_2D, i5, 0);
              else {
                if (n4.depthTexture.format !== je)
                  throw new Error("Unknown depthTexture format");
                e2.framebufferTexture2D(e2.FRAMEBUFFER, e2.DEPTH_STENCIL_ATTACHMENT, e2.TEXTURE_2D, i5, 0);
              }
            }(n3.__webglFramebuffer, t3);
          } else if (i4) {
            n3.__webglDepthbuffer = [];
            for (var a3 = 0; a3 < 6; a3++)
              e2.bindFramebuffer(e2.FRAMEBUFFER, n3.__webglFramebuffer[a3]), n3.__webglDepthbuffer[a3] = e2.createRenderbuffer(), b2(n3.__webglDepthbuffer[a3], t3);
          } else
            e2.bindFramebuffer(e2.FRAMEBUFFER, n3.__webglFramebuffer), n3.__webglDepthbuffer = e2.createRenderbuffer(), b2(n3.__webglDepthbuffer, t3);
          e2.bindFramebuffer(e2.FRAMEBUFFER, null);
        }
        this.setTexture2D = v2, this.setTextureCube = function(t3, s3) {
          var c4 = r2.get(t3);
          if (6 === t3.image.length)
            if (t3.version > 0 && c4.__version !== t3.version) {
              c4.__image__webglTextureCube || (t3.addEventListener("dispose", m3), c4.__image__webglTextureCube = e2.createTexture(), o2.memory.textures++), n2.activeTexture(e2.TEXTURE0 + s3), n2.bindTexture(e2.TEXTURE_CUBE_MAP, c4.__image__webglTextureCube), e2.pixelStorei(e2.UNPACK_FLIP_Y_WEBGL, t3.flipY);
              for (var f3 = t3 && t3.isCompressedTexture, g3 = t3.image[0] && t3.image[0].isDataTexture, v3 = [], x3 = 0; x3 < 6; x3++)
                v3[x3] = f3 || g3 ? g3 ? t3.image[x3].image : t3.image[x3] : u2(t3.image[x3], i3.maxCubemapSize);
              var b3 = v3[0], w3 = l2(b3), _2 = a2.convert(t3.format), M2 = a2.convert(t3.type), E2 = p2(_2, M2);
              for (y2(e2.TEXTURE_CUBE_MAP, t3, w3), x3 = 0; x3 < 6; x3++)
                if (f3)
                  for (var T2, S2 = v3[x3].mipmaps, A2 = 0, L2 = S2.length; A2 < L2; A2++)
                    T2 = S2[A2], t3.format !== Fe && t3.format !== Be ? n2.getCompressedTextureFormats().indexOf(_2) > -1 ? n2.compressedTexImage2D(e2.TEXTURE_CUBE_MAP_POSITIVE_X + x3, A2, E2, T2.width, T2.height, 0, T2.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : n2.texImage2D(e2.TEXTURE_CUBE_MAP_POSITIVE_X + x3, A2, E2, T2.width, T2.height, 0, _2, M2, T2.data);
                else
                  g3 ? n2.texImage2D(e2.TEXTURE_CUBE_MAP_POSITIVE_X + x3, 0, E2, v3[x3].width, v3[x3].height, 0, _2, M2, v3[x3].data) : n2.texImage2D(e2.TEXTURE_CUBE_MAP_POSITIVE_X + x3, 0, E2, _2, M2, v3[x3]);
              c4.__maxMipLevel = f3 ? S2.length - 1 : 0, h2(t3, w3) && d2(e2.TEXTURE_CUBE_MAP, t3, b3.width, b3.height), c4.__version = t3.version, t3.onUpdate && t3.onUpdate(t3);
            } else
              n2.activeTexture(e2.TEXTURE0 + s3), n2.bindTexture(e2.TEXTURE_CUBE_MAP, c4.__image__webglTextureCube);
        }, this.setTextureCubeDynamic = function(t3, i4) {
          n2.activeTexture(e2.TEXTURE0 + i4), n2.bindTexture(e2.TEXTURE_CUBE_MAP, r2.get(t3).__webglTexture);
        }, this.setupRenderTarget = function(t3) {
          var i4 = r2.get(t3), a3 = r2.get(t3.texture);
          t3.addEventListener("dispose", g2), a3.__webglTexture = e2.createTexture(), o2.memory.textures++;
          var s3 = true === t3.isWebGLRenderTargetCube, c4 = l2(t3);
          if (s3) {
            i4.__webglFramebuffer = [];
            for (var u3 = 0; u3 < 6; u3++)
              i4.__webglFramebuffer[u3] = e2.createFramebuffer();
          } else
            i4.__webglFramebuffer = e2.createFramebuffer();
          if (s3) {
            for (n2.bindTexture(e2.TEXTURE_CUBE_MAP, a3.__webglTexture), y2(e2.TEXTURE_CUBE_MAP, t3.texture, c4), u3 = 0; u3 < 6; u3++)
              x2(i4.__webglFramebuffer[u3], t3, e2.COLOR_ATTACHMENT0, e2.TEXTURE_CUBE_MAP_POSITIVE_X + u3);
            h2(t3.texture, c4) && d2(e2.TEXTURE_CUBE_MAP, t3.texture, t3.width, t3.height), n2.bindTexture(e2.TEXTURE_CUBE_MAP, null);
          } else
            n2.bindTexture(e2.TEXTURE_2D, a3.__webglTexture), y2(e2.TEXTURE_2D, t3.texture, c4), x2(i4.__webglFramebuffer, t3, e2.COLOR_ATTACHMENT0, e2.TEXTURE_2D), h2(t3.texture, c4) && d2(e2.TEXTURE_2D, t3.texture, t3.width, t3.height), n2.bindTexture(e2.TEXTURE_2D, null);
          t3.depthBuffer && w2(t3);
        }, this.updateRenderTargetMipmap = function(t3) {
          var i4 = t3.texture;
          if (h2(i4, l2(t3))) {
            var a3 = t3.isWebGLRenderTargetCube ? e2.TEXTURE_CUBE_MAP : e2.TEXTURE_2D, o3 = r2.get(i4).__webglTexture;
            n2.bindTexture(a3, o3), d2(a3, i4, t3.width, t3.height), n2.bindTexture(a3, null);
          }
        };
      }
      function ti(e2, t2, n2) {
        return { convert: function(r2) {
          var i3;
          if (r2 === me)
            return e2.REPEAT;
          if (r2 === ge)
            return e2.CLAMP_TO_EDGE;
          if (r2 === ve)
            return e2.MIRRORED_REPEAT;
          if (r2 === ye)
            return e2.NEAREST;
          if (r2 === xe)
            return e2.NEAREST_MIPMAP_NEAREST;
          if (r2 === be)
            return e2.NEAREST_MIPMAP_LINEAR;
          if (r2 === we)
            return e2.LINEAR;
          if (r2 === _e)
            return e2.LINEAR_MIPMAP_NEAREST;
          if (r2 === Me)
            return e2.LINEAR_MIPMAP_LINEAR;
          if (r2 === Ee)
            return e2.UNSIGNED_BYTE;
          if (r2 === Oe)
            return e2.UNSIGNED_SHORT_4_4_4_4;
          if (r2 === Ne)
            return e2.UNSIGNED_SHORT_5_5_5_1;
          if (r2 === Ie)
            return e2.UNSIGNED_SHORT_5_6_5;
          if (r2 === Te)
            return e2.BYTE;
          if (r2 === Se)
            return e2.SHORT;
          if (r2 === Ae)
            return e2.UNSIGNED_SHORT;
          if (r2 === Le)
            return e2.INT;
          if (r2 === Re)
            return e2.UNSIGNED_INT;
          if (r2 === Ce)
            return e2.FLOAT;
          if (r2 === Pe) {
            if (n2.isWebGL2)
              return e2.HALF_FLOAT;
            if (null !== (i3 = t2.get("OES_texture_half_float")))
              return i3.HALF_FLOAT_OES;
          }
          if (r2 === Ue)
            return e2.ALPHA;
          if (r2 === Be)
            return e2.RGB;
          if (r2 === Fe)
            return e2.RGBA;
          if (r2 === Ge)
            return e2.LUMINANCE;
          if (r2 === ze)
            return e2.LUMINANCE_ALPHA;
          if (r2 === ke)
            return e2.DEPTH_COMPONENT;
          if (r2 === je)
            return e2.DEPTH_STENCIL;
          if (r2 === R)
            return e2.FUNC_ADD;
          if (r2 === C)
            return e2.FUNC_SUBTRACT;
          if (r2 === P)
            return e2.FUNC_REVERSE_SUBTRACT;
          if (r2 === I)
            return e2.ZERO;
          if (r2 === D)
            return e2.ONE;
          if (r2 === U)
            return e2.SRC_COLOR;
          if (r2 === B)
            return e2.ONE_MINUS_SRC_COLOR;
          if (r2 === F)
            return e2.SRC_ALPHA;
          if (r2 === G)
            return e2.ONE_MINUS_SRC_ALPHA;
          if (r2 === z)
            return e2.DST_ALPHA;
          if (r2 === H)
            return e2.ONE_MINUS_DST_ALPHA;
          if (r2 === k)
            return e2.DST_COLOR;
          if (r2 === j)
            return e2.ONE_MINUS_DST_COLOR;
          if (r2 === V)
            return e2.SRC_ALPHA_SATURATE;
          if ((r2 === Ve || r2 === We || r2 === Xe || r2 === qe) && null !== (i3 = t2.get("WEBGL_compressed_texture_s3tc"))) {
            if (r2 === Ve)
              return i3.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (r2 === We)
              return i3.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (r2 === Xe)
              return i3.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (r2 === qe)
              return i3.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          }
          if ((r2 === Ye || r2 === Ze || r2 === Je || r2 === Ke) && null !== (i3 = t2.get("WEBGL_compressed_texture_pvrtc"))) {
            if (r2 === Ye)
              return i3.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
            if (r2 === Ze)
              return i3.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
            if (r2 === Je)
              return i3.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
            if (r2 === Ke)
              return i3.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
          }
          if (r2 === Qe && null !== (i3 = t2.get("WEBGL_compressed_texture_etc1")))
            return i3.COMPRESSED_RGB_ETC1_WEBGL;
          if ((r2 === $e || r2 === et || r2 === tt || r2 === nt || r2 === rt || r2 === it || r2 === at || r2 === ot || r2 === st || r2 === ct || r2 === ut || r2 === lt || r2 === ht || r2 === dt) && null !== (i3 = t2.get("WEBGL_compressed_texture_astc")))
            return r2;
          if (r2 === O || r2 === N) {
            if (n2.isWebGL2) {
              if (r2 === O)
                return e2.MIN;
              if (r2 === N)
                return e2.MAX;
            }
            if (null !== (i3 = t2.get("EXT_blend_minmax"))) {
              if (r2 === O)
                return i3.MIN_EXT;
              if (r2 === N)
                return i3.MAX_EXT;
            }
          }
          if (r2 === De) {
            if (n2.isWebGL2)
              return e2.UNSIGNED_INT_24_8;
            if (null !== (i3 = t2.get("WEBGL_depth_texture")))
              return i3.UNSIGNED_INT_24_8_WEBGL;
          }
          return 0;
        } };
      }
      function ni() {
        dn.call(this), this.type = "Group";
      }
      function ri(e2, t2, n2, r2) {
        pn.call(this), this.type = "PerspectiveCamera", this.fov = void 0 !== e2 ? e2 : 50, this.zoom = 1, this.near = void 0 !== n2 ? n2 : 0.1, this.far = void 0 !== r2 ? r2 : 2e3, this.focus = 10, this.aspect = void 0 !== t2 ? t2 : 1, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
      }
      function ii(e2) {
        ri.call(this), this.cameras = e2 || [];
      }
      function ai(e2) {
        var t2 = this, n2 = null, r2 = null, i3 = null, a2 = [], o2 = new Gt(), s2 = new Gt();
        "undefined" != typeof window && "VRFrameData" in window && (r2 = new window.VRFrameData(), window.addEventListener("vrdisplaypresentchange", v2, false));
        var c3 = new Gt(), u2 = new zt(), l2 = new Ht(), h2 = new ri();
        h2.bounds = new Xt(0, 0, 0.5, 1), h2.layers.enable(1);
        var d2 = new ri();
        d2.bounds = new Xt(0.5, 0, 0.5, 1), d2.layers.enable(2);
        var p2, f2, m3 = new ii([h2, d2]);
        function g2() {
          return null !== n2 && true === n2.isPresenting;
        }
        function v2() {
          if (g2()) {
            var r3 = n2.getEyeParameters("left"), i4 = r3.renderWidth, a3 = r3.renderHeight;
            f2 = e2.getPixelRatio(), p2 = e2.getSize(), e2.setDrawingBufferSize(2 * i4, a3, 1), b2.start();
          } else
            t2.enabled && (e2.setDrawingBufferSize(p2.width, p2.height, f2), b2.stop());
        }
        m3.layers.enable(1), m3.layers.enable(2);
        var y2 = [];
        function x2(e3) {
          for (var t3 = navigator.getGamepads && navigator.getGamepads(), n3 = 0, r3 = 0, i4 = t3.length; n3 < i4; n3++) {
            var a3 = t3[n3];
            if (a3 && ("Daydream Controller" === a3.id || "Gear VR Controller" === a3.id || "Oculus Go Controller" === a3.id || "OpenVR Gamepad" === a3.id || a3.id.startsWith("Oculus Touch") || a3.id.startsWith("Spatial Controller"))) {
              if (r3 === e3)
                return a3;
              r3++;
            }
          }
        }
        this.enabled = false, this.userHeight = 1.6, this.getController = function(e3) {
          var t3 = a2[e3];
          return void 0 === t3 && ((t3 = new ni()).matrixAutoUpdate = false, t3.visible = false, a2[e3] = t3), t3;
        }, this.getDevice = function() {
          return n2;
        }, this.setDevice = function(e3) {
          void 0 !== e3 && (n2 = e3), b2.setContext(e3);
        }, this.setPoseTarget = function(e3) {
          void 0 !== e3 && (i3 = e3);
        }, this.getCamera = function(e3) {
          if (null === n2)
            return e3.position.set(0, t2.userHeight, 0), e3;
          n2.depthNear = e3.near, n2.depthFar = e3.far, n2.getFrameData(r2);
          var p3 = n2.stageParameters;
          p3 ? o2.fromArray(p3.sittingToStandingTransform) : o2.makeTranslation(0, t2.userHeight, 0);
          var f3 = r2.pose, g3 = null !== i3 ? i3 : e3;
          if (g3.matrix.copy(o2), g3.matrix.decompose(g3.position, g3.quaternion, g3.scale), null !== f3.orientation && (u2.fromArray(f3.orientation), g3.quaternion.multiply(u2)), null !== f3.position && (u2.setFromRotationMatrix(o2), l2.fromArray(f3.position), l2.applyQuaternion(u2), g3.position.add(l2)), g3.updateMatrixWorld(), false === n2.isPresenting)
            return e3;
          h2.near = e3.near, d2.near = e3.near, h2.far = e3.far, d2.far = e3.far, m3.matrixWorld.copy(e3.matrixWorld), m3.matrixWorldInverse.copy(e3.matrixWorldInverse), h2.matrixWorldInverse.fromArray(r2.leftViewMatrix), d2.matrixWorldInverse.fromArray(r2.rightViewMatrix), s2.getInverse(o2), h2.matrixWorldInverse.multiply(s2), d2.matrixWorldInverse.multiply(s2);
          var v3 = g3.parent;
          null !== v3 && (c3.getInverse(v3.matrixWorld), h2.matrixWorldInverse.multiply(c3), d2.matrixWorldInverse.multiply(c3)), h2.matrixWorld.getInverse(h2.matrixWorldInverse), d2.matrixWorld.getInverse(d2.matrixWorldInverse), h2.projectionMatrix.fromArray(r2.leftProjectionMatrix), d2.projectionMatrix.fromArray(r2.rightProjectionMatrix), m3.projectionMatrix.copy(h2.projectionMatrix);
          var b3 = n2.getLayers();
          if (b3.length) {
            var w2 = b3[0];
            null !== w2.leftBounds && 4 === w2.leftBounds.length && h2.bounds.fromArray(w2.leftBounds), null !== w2.rightBounds && 4 === w2.rightBounds.length && d2.bounds.fromArray(w2.rightBounds);
          }
          return function() {
            for (var e4 = 0; e4 < a2.length; e4++) {
              var t3 = a2[e4], n3 = x2(e4);
              if (void 0 !== n3 && void 0 !== n3.pose) {
                if (null === n3.pose)
                  return;
                var r3 = n3.pose;
                false === r3.hasPosition && t3.position.set(0.2, -0.6, -0.05), null !== r3.position && t3.position.fromArray(r3.position), null !== r3.orientation && t3.quaternion.fromArray(r3.orientation), t3.matrix.compose(t3.position, t3.quaternion, t3.scale), t3.matrix.premultiply(o2), t3.matrix.decompose(t3.position, t3.quaternion, t3.scale), t3.matrixWorldNeedsUpdate = true, t3.visible = true;
                var i4 = "Daydream Controller" === n3.id ? 0 : 1;
                y2[e4] !== n3.buttons[i4].pressed && (y2[e4] = n3.buttons[i4].pressed, true === y2[e4] ? t3.dispatchEvent({ type: "selectstart" }) : (t3.dispatchEvent({ type: "selectend" }), t3.dispatchEvent({ type: "select" })));
              } else
                t3.visible = false;
            }
          }(), m3;
        }, this.getStandingMatrix = function() {
          return o2;
        }, this.isPresenting = g2;
        var b2 = new sn();
        this.setAnimationLoop = function(e3) {
          b2.setAnimationLoop(e3);
        }, this.submitFrame = function() {
          g2() && n2.submitFrame();
        }, this.dispose = function() {
          "undefined" != typeof window && window.removeEventListener("vrdisplaypresentchange", v2);
        };
      }
      function oi(e2) {
        console.log("THREE.WebGLRenderer", i2);
        var t2 = void 0 !== (e2 = e2 || {}).canvas ? e2.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), n2 = void 0 !== e2.context ? e2.context : null, r2 = void 0 !== e2.alpha && e2.alpha, a2 = void 0 === e2.depth || e2.depth, u2 = void 0 === e2.stencil || e2.stencil, l2 = void 0 !== e2.antialias && e2.antialias, h2 = void 0 === e2.premultipliedAlpha || e2.premultipliedAlpha, d2 = void 0 !== e2.preserveDrawingBuffer && e2.preserveDrawingBuffer, p2 = void 0 !== e2.powerPreference ? e2.powerPreference : "default", f2 = null, m3 = null;
        this.domElement = t2, this.context = null, this.autoClear = true, this.autoClearColor = true, this.autoClearDepth = true, this.autoClearStencil = true, this.sortObjects = true, this.clippingPlanes = [], this.localClippingEnabled = false, this.gammaFactor = 2, this.gammaInput = false, this.gammaOutput = false, this.physicallyCorrectLights = false, this.toneMapping = re, this.toneMappingExposure = 1, this.toneMappingWhitePoint = 1, this.maxMorphTargets = 8, this.maxMorphNormals = 4;
        var y2, x2, b2, w2, _2, R2, C2, P2, O2, N2, I2, D2, U2, B2, F2, G2, z2, H2, k2 = this, j2 = false, V2 = null, $2 = null, ee2 = null, te2 = -1, ne2 = { geometry: null, program: null, wireframe: false }, ie2 = null, ae2 = null, oe2 = new Xt(), se2 = new Xt(), ce2 = null, ue2 = 0, le2 = t2.width, he2 = t2.height, de2 = 1, pe2 = new Xt(0, 0, le2, he2), fe2 = new Xt(0, 0, le2, he2), me2 = false, ge2 = new $t(), ve2 = new function() {
          var e3 = this, t3 = null, n3 = 0, r3 = false, i3 = false, a3 = new Qt(), o2 = new kt(), s2 = { value: null, needsUpdate: false };
          function c3() {
            s2.value !== t3 && (s2.value = t3, s2.needsUpdate = n3 > 0), e3.numPlanes = n3, e3.numIntersection = 0;
          }
          function u3(t4, n4, r4, i4) {
            var c4 = null !== t4 ? t4.length : 0, u4 = null;
            if (0 !== c4) {
              if (u4 = s2.value, true !== i4 || null === u4) {
                var l3 = r4 + 4 * c4, h3 = n4.matrixWorldInverse;
                o2.getNormalMatrix(h3), (null === u4 || u4.length < l3) && (u4 = new Float32Array(l3));
                for (var d3 = 0, p3 = r4; d3 !== c4; ++d3, p3 += 4)
                  a3.copy(t4[d3]).applyMatrix4(h3, o2), a3.normal.toArray(u4, p3), u4[p3 + 3] = a3.constant;
              }
              s2.value = u4, s2.needsUpdate = true;
            }
            return e3.numPlanes = c4, u4;
          }
          this.uniform = s2, this.numPlanes = 0, this.numIntersection = 0, this.init = function(e4, i4, a4) {
            var o3 = 0 !== e4.length || i4 || 0 !== n3 || r3;
            return r3 = i4, t3 = u3(e4, a4, 0), n3 = e4.length, o3;
          }, this.beginShadows = function() {
            i3 = true, u3(null);
          }, this.endShadows = function() {
            i3 = false, c3();
          }, this.setState = function(e4, a4, o3, l3, h3, d3) {
            if (!r3 || null === e4 || 0 === e4.length || i3 && !o3)
              i3 ? u3(null) : c3();
            else {
              var p3 = i3 ? 0 : n3, f3 = 4 * p3, m4 = h3.clippingState || null;
              s2.value = m4, m4 = u3(e4, l3, f3, d3);
              for (var g2 = 0; g2 !== f3; ++g2)
                m4[g2] = t3[g2];
              h3.clippingState = m4, this.numIntersection = a4 ? this.numPlanes : 0, this.numPlanes += p3;
            }
          };
        }(), ye2 = false, xe2 = false, be2 = new Gt(), we2 = new Ht();
        function _e2() {
          return null === $2 ? de2 : 1;
        }
        try {
          var Me2 = { alpha: r2, depth: a2, stencil: u2, antialias: l2, premultipliedAlpha: h2, preserveDrawingBuffer: d2, powerPreference: p2 };
          if (t2.addEventListener("webglcontextlost", Le2, false), t2.addEventListener("webglcontextrestored", Re2, false), null === (y2 = n2 || t2.getContext("webgl", Me2) || t2.getContext("experimental-webgl", Me2)))
            throw null !== t2.getContext("webgl") ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
          void 0 === y2.getShaderPrecisionFormat && (y2.getShaderPrecisionFormat = function() {
            return { rangeMin: 1, rangeMax: 1, precision: 1 };
          });
        } catch (e3) {
          console.error("THREE.WebGLRenderer: " + e3.message);
        }
        function Te2() {
          x2 = new function(e3) {
            var t3 = {};
            return { get: function(n3) {
              if (void 0 !== t3[n3])
                return t3[n3];
              var r3;
              switch (n3) {
                case "WEBGL_depth_texture":
                  r3 = e3.getExtension("WEBGL_depth_texture") || e3.getExtension("MOZ_WEBGL_depth_texture") || e3.getExtension("WEBKIT_WEBGL_depth_texture");
                  break;
                case "EXT_texture_filter_anisotropic":
                  r3 = e3.getExtension("EXT_texture_filter_anisotropic") || e3.getExtension("MOZ_EXT_texture_filter_anisotropic") || e3.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                  break;
                case "WEBGL_compressed_texture_s3tc":
                  r3 = e3.getExtension("WEBGL_compressed_texture_s3tc") || e3.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || e3.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                  break;
                case "WEBGL_compressed_texture_pvrtc":
                  r3 = e3.getExtension("WEBGL_compressed_texture_pvrtc") || e3.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                  break;
                default:
                  r3 = e3.getExtension(n3);
              }
              return null === r3 && console.warn("THREE.WebGLRenderer: " + n3 + " extension not supported."), t3[n3] = r3, r3;
            } };
          }(y2), (b2 = new function(e3, t3, n3) {
            var r3;
            function i3(t4) {
              if ("highp" === t4) {
                if (e3.getShaderPrecisionFormat(e3.VERTEX_SHADER, e3.HIGH_FLOAT).precision > 0 && e3.getShaderPrecisionFormat(e3.FRAGMENT_SHADER, e3.HIGH_FLOAT).precision > 0)
                  return "highp";
                t4 = "mediump";
              }
              return "mediump" === t4 && e3.getShaderPrecisionFormat(e3.VERTEX_SHADER, e3.MEDIUM_FLOAT).precision > 0 && e3.getShaderPrecisionFormat(e3.FRAGMENT_SHADER, e3.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
            }
            var a3 = "undefined" != typeof WebGL2RenderingContext && e3 instanceof WebGL2RenderingContext, o2 = void 0 !== n3.precision ? n3.precision : "highp", s2 = i3(o2);
            s2 !== o2 && (console.warn("THREE.WebGLRenderer:", o2, "not supported, using", s2, "instead."), o2 = s2);
            var c3 = true === n3.logarithmicDepthBuffer, u3 = e3.getParameter(e3.MAX_TEXTURE_IMAGE_UNITS), l3 = e3.getParameter(e3.MAX_VERTEX_TEXTURE_IMAGE_UNITS), h3 = e3.getParameter(e3.MAX_TEXTURE_SIZE), d3 = e3.getParameter(e3.MAX_CUBE_MAP_TEXTURE_SIZE), p3 = e3.getParameter(e3.MAX_VERTEX_ATTRIBS), f3 = e3.getParameter(e3.MAX_VERTEX_UNIFORM_VECTORS), m4 = e3.getParameter(e3.MAX_VARYING_VECTORS), g2 = e3.getParameter(e3.MAX_FRAGMENT_UNIFORM_VECTORS), v2 = l3 > 0, y3 = a3 || !!t3.get("OES_texture_float");
            return { isWebGL2: a3, getMaxAnisotropy: function() {
              if (void 0 !== r3)
                return r3;
              var n4 = t3.get("EXT_texture_filter_anisotropic");
              return r3 = null !== n4 ? e3.getParameter(n4.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
            }, getMaxPrecision: i3, precision: o2, logarithmicDepthBuffer: c3, maxTextures: u3, maxVertexTextures: l3, maxTextureSize: h3, maxCubemapSize: d3, maxAttributes: p3, maxVertexUniforms: f3, maxVaryings: m4, maxFragmentUniforms: g2, vertexTextures: v2, floatFragmentTextures: y3, floatVertexTextures: v2 && y3 };
          }(y2, x2, e2)).isWebGL2 || (x2.get("WEBGL_depth_texture"), x2.get("OES_texture_float"), x2.get("OES_texture_half_float"), x2.get("OES_texture_half_float_linear"), x2.get("OES_standard_derivatives"), x2.get("OES_element_index_uint"), x2.get("ANGLE_instanced_arrays")), x2.get("OES_texture_float_linear"), H2 = new ti(y2, x2, b2), (w2 = new function(e3, t3, n3, r3) {
            var i3 = new function() {
              var t4 = false, n4 = new Xt(), r4 = null, i4 = new Xt(0, 0, 0, 0);
              return { setMask: function(n5) {
                r4 === n5 || t4 || (e3.colorMask(n5, n5, n5, n5), r4 = n5);
              }, setLocked: function(e4) {
                t4 = e4;
              }, setClear: function(t5, r5, a4, o2, s2) {
                true === s2 && (t5 *= o2, r5 *= o2, a4 *= o2), n4.set(t5, r5, a4, o2), false === i4.equals(n4) && (e3.clearColor(t5, r5, a4, o2), i4.copy(n4));
              }, reset: function() {
                t4 = false, r4 = null, i4.set(-1, 0, 0, 0);
              } };
            }(), a3 = new function() {
              var t4 = false, n4 = null, r4 = null, i4 = null;
              return { setTest: function(t5) {
                t5 ? re2(e3.DEPTH_TEST) : ie3(e3.DEPTH_TEST);
              }, setMask: function(r5) {
                n4 === r5 || t4 || (e3.depthMask(r5), n4 = r5);
              }, setFunc: function(t5) {
                if (r4 !== t5) {
                  if (t5)
                    switch (t5) {
                      case W:
                        e3.depthFunc(e3.NEVER);
                        break;
                      case X:
                        e3.depthFunc(e3.ALWAYS);
                        break;
                      case q:
                        e3.depthFunc(e3.LESS);
                        break;
                      case Y:
                        e3.depthFunc(e3.LEQUAL);
                        break;
                      case Z:
                        e3.depthFunc(e3.EQUAL);
                        break;
                      case J:
                        e3.depthFunc(e3.GEQUAL);
                        break;
                      case K2:
                        e3.depthFunc(e3.GREATER);
                        break;
                      case Q:
                        e3.depthFunc(e3.NOTEQUAL);
                        break;
                      default:
                        e3.depthFunc(e3.LEQUAL);
                    }
                  else
                    e3.depthFunc(e3.LEQUAL);
                  r4 = t5;
                }
              }, setLocked: function(e4) {
                t4 = e4;
              }, setClear: function(t5) {
                i4 !== t5 && (e3.clearDepth(t5), i4 = t5);
              }, reset: function() {
                t4 = false, n4 = null, r4 = null, i4 = null;
              } };
            }(), u3 = new function() {
              var t4 = false, n4 = null, r4 = null, i4 = null, a4 = null, o2 = null, s2 = null, c3 = null, u4 = null;
              return { setTest: function(t5) {
                t5 ? re2(e3.STENCIL_TEST) : ie3(e3.STENCIL_TEST);
              }, setMask: function(r5) {
                n4 === r5 || t4 || (e3.stencilMask(r5), n4 = r5);
              }, setFunc: function(t5, n5, o3) {
                r4 === t5 && i4 === n5 && a4 === o3 || (e3.stencilFunc(t5, n5, o3), r4 = t5, i4 = n5, a4 = o3);
              }, setOp: function(t5, n5, r5) {
                o2 === t5 && s2 === n5 && c3 === r5 || (e3.stencilOp(t5, n5, r5), o2 = t5, s2 = n5, c3 = r5);
              }, setLocked: function(e4) {
                t4 = e4;
              }, setClear: function(t5) {
                u4 !== t5 && (e3.clearStencil(t5), u4 = t5);
              }, reset: function() {
                t4 = false, n4 = null, r4 = null, i4 = null, a4 = null, o2 = null, s2 = null, c3 = null, u4 = null;
              } };
            }(), l3 = e3.getParameter(e3.MAX_VERTEX_ATTRIBS), h3 = new Uint8Array(l3), d3 = new Uint8Array(l3), p3 = new Uint8Array(l3), f3 = {}, m4 = null, y3 = null, x3 = null, b3 = null, w3 = null, _3 = null, R3 = null, C3 = null, P3 = null, O3 = false, N3 = null, I3 = null, D3 = null, U3 = null, B3 = null, F3 = e3.getParameter(e3.MAX_COMBINED_TEXTURE_IMAGE_UNITS), G3 = false, z3 = 0, H3 = e3.getParameter(e3.VERSION);
            -1 !== H3.indexOf("WebGL") ? (z3 = parseFloat(/^WebGL\ ([0-9])/.exec(H3)[1]), G3 = z3 >= 1) : -1 !== H3.indexOf("OpenGL ES") && (z3 = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(H3)[1]), G3 = z3 >= 2);
            var k3 = null, j3 = {}, V3 = new Xt(), $3 = new Xt();
            function ee3(t4, n4, r4) {
              var i4 = new Uint8Array(4), a4 = e3.createTexture();
              e3.bindTexture(t4, a4), e3.texParameteri(t4, e3.TEXTURE_MIN_FILTER, e3.NEAREST), e3.texParameteri(t4, e3.TEXTURE_MAG_FILTER, e3.NEAREST);
              for (var o2 = 0; o2 < r4; o2++)
                e3.texImage2D(n4 + o2, 0, e3.RGBA, 1, 1, 0, e3.RGBA, e3.UNSIGNED_BYTE, i4);
              return a4;
            }
            var te3 = {};
            function ne3(n4, i4) {
              h3[n4] = 1, 0 === d3[n4] && (e3.enableVertexAttribArray(n4), d3[n4] = 1), p3[n4] !== i4 && ((r3.isWebGL2 ? e3 : t3.get("ANGLE_instanced_arrays"))[r3.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n4, i4), p3[n4] = i4);
            }
            function re2(t4) {
              true !== f3[t4] && (e3.enable(t4), f3[t4] = true);
            }
            function ie3(t4) {
              false !== f3[t4] && (e3.disable(t4), f3[t4] = false);
            }
            function ae3(t4, r4, i4, a4, o2, s2, c3, u4) {
              if (t4 !== M ? re2(e3.BLEND) : ie3(e3.BLEND), t4 !== L) {
                if (t4 !== x3 || u4 !== O3)
                  switch (t4) {
                    case T:
                      u4 ? (e3.blendEquationSeparate(e3.FUNC_ADD, e3.FUNC_ADD), e3.blendFuncSeparate(e3.ONE, e3.ONE, e3.ONE, e3.ONE)) : (e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.SRC_ALPHA, e3.ONE));
                      break;
                    case S:
                      u4 ? (e3.blendEquationSeparate(e3.FUNC_ADD, e3.FUNC_ADD), e3.blendFuncSeparate(e3.ZERO, e3.ZERO, e3.ONE_MINUS_SRC_COLOR, e3.ONE_MINUS_SRC_ALPHA)) : (e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.ZERO, e3.ONE_MINUS_SRC_COLOR));
                      break;
                    case A:
                      u4 ? (e3.blendEquationSeparate(e3.FUNC_ADD, e3.FUNC_ADD), e3.blendFuncSeparate(e3.ZERO, e3.SRC_COLOR, e3.ZERO, e3.SRC_ALPHA)) : (e3.blendEquation(e3.FUNC_ADD), e3.blendFunc(e3.ZERO, e3.SRC_COLOR));
                      break;
                    default:
                      u4 ? (e3.blendEquationSeparate(e3.FUNC_ADD, e3.FUNC_ADD), e3.blendFuncSeparate(e3.ONE, e3.ONE_MINUS_SRC_ALPHA, e3.ONE, e3.ONE_MINUS_SRC_ALPHA)) : (e3.blendEquationSeparate(e3.FUNC_ADD, e3.FUNC_ADD), e3.blendFuncSeparate(e3.SRC_ALPHA, e3.ONE_MINUS_SRC_ALPHA, e3.ONE, e3.ONE_MINUS_SRC_ALPHA));
                  }
                b3 = null, w3 = null, _3 = null, R3 = null, C3 = null, P3 = null;
              } else
                o2 = o2 || r4, s2 = s2 || i4, c3 = c3 || a4, r4 === b3 && o2 === R3 || (e3.blendEquationSeparate(n3.convert(r4), n3.convert(o2)), b3 = r4, R3 = o2), i4 === w3 && a4 === _3 && s2 === C3 && c3 === P3 || (e3.blendFuncSeparate(n3.convert(i4), n3.convert(a4), n3.convert(s2), n3.convert(c3)), w3 = i4, _3 = a4, C3 = s2, P3 = c3);
              x3 = t4, O3 = u4;
            }
            function oe3(t4) {
              N3 !== t4 && (t4 ? e3.frontFace(e3.CW) : e3.frontFace(e3.CCW), N3 = t4);
            }
            function se3(t4) {
              t4 !== o ? (re2(e3.CULL_FACE), t4 !== I3 && (t4 === s ? e3.cullFace(e3.BACK) : t4 === c2 ? e3.cullFace(e3.FRONT) : e3.cullFace(e3.FRONT_AND_BACK))) : ie3(e3.CULL_FACE), I3 = t4;
            }
            function ce3(t4, n4, r4) {
              t4 ? (re2(e3.POLYGON_OFFSET_FILL), U3 === n4 && B3 === r4 || (e3.polygonOffset(n4, r4), U3 = n4, B3 = r4)) : ie3(e3.POLYGON_OFFSET_FILL);
            }
            function ue3(t4) {
              void 0 === t4 && (t4 = e3.TEXTURE0 + F3 - 1), k3 !== t4 && (e3.activeTexture(t4), k3 = t4);
            }
            return te3[e3.TEXTURE_2D] = ee3(e3.TEXTURE_2D, e3.TEXTURE_2D, 1), te3[e3.TEXTURE_CUBE_MAP] = ee3(e3.TEXTURE_CUBE_MAP, e3.TEXTURE_CUBE_MAP_POSITIVE_X, 6), i3.setClear(0, 0, 0, 1), a3.setClear(1), u3.setClear(0), re2(e3.DEPTH_TEST), a3.setFunc(Y), oe3(false), se3(s), re2(e3.CULL_FACE), re2(e3.BLEND), ae3(E), { buffers: { color: i3, depth: a3, stencil: u3 }, initAttributes: function() {
              for (var e4 = 0, t4 = h3.length; e4 < t4; e4++)
                h3[e4] = 0;
            }, enableAttribute: function(e4) {
              ne3(e4, 0);
            }, enableAttributeAndDivisor: ne3, disableUnusedAttributes: function() {
              for (var t4 = 0, n4 = d3.length; t4 !== n4; ++t4)
                d3[t4] !== h3[t4] && (e3.disableVertexAttribArray(t4), d3[t4] = 0);
            }, enable: re2, disable: ie3, getCompressedTextureFormats: function() {
              if (null === m4 && (m4 = [], t3.get("WEBGL_compressed_texture_pvrtc") || t3.get("WEBGL_compressed_texture_s3tc") || t3.get("WEBGL_compressed_texture_etc1") || t3.get("WEBGL_compressed_texture_astc")))
                for (var n4 = e3.getParameter(e3.COMPRESSED_TEXTURE_FORMATS), r4 = 0; r4 < n4.length; r4++)
                  m4.push(n4[r4]);
              return m4;
            }, useProgram: function(t4) {
              return y3 !== t4 && (e3.useProgram(t4), y3 = t4, true);
            }, setBlending: ae3, setMaterial: function(t4, n4) {
              t4.side === v ? ie3(e3.CULL_FACE) : re2(e3.CULL_FACE);
              var r4 = t4.side === g;
              n4 && (r4 = !r4), oe3(r4), t4.blending === E && false === t4.transparent ? ae3(M) : ae3(t4.blending, t4.blendEquation, t4.blendSrc, t4.blendDst, t4.blendEquationAlpha, t4.blendSrcAlpha, t4.blendDstAlpha, t4.premultipliedAlpha), a3.setFunc(t4.depthFunc), a3.setTest(t4.depthTest), a3.setMask(t4.depthWrite), i3.setMask(t4.colorWrite), ce3(t4.polygonOffset, t4.polygonOffsetFactor, t4.polygonOffsetUnits);
            }, setFlipSided: oe3, setCullFace: se3, setLineWidth: function(t4) {
              t4 !== D3 && (G3 && e3.lineWidth(t4), D3 = t4);
            }, setPolygonOffset: ce3, setScissorTest: function(t4) {
              t4 ? re2(e3.SCISSOR_TEST) : ie3(e3.SCISSOR_TEST);
            }, activeTexture: ue3, bindTexture: function(t4, n4) {
              null === k3 && ue3();
              var r4 = j3[k3];
              void 0 === r4 && (r4 = { type: void 0, texture: void 0 }, j3[k3] = r4), r4.type === t4 && r4.texture === n4 || (e3.bindTexture(t4, n4 || te3[t4]), r4.type = t4, r4.texture = n4);
            }, compressedTexImage2D: function() {
              try {
                e3.compressedTexImage2D.apply(e3, arguments);
              } catch (e4) {
                console.error("THREE.WebGLState:", e4);
              }
            }, texImage2D: function() {
              try {
                e3.texImage2D.apply(e3, arguments);
              } catch (e4) {
                console.error("THREE.WebGLState:", e4);
              }
            }, scissor: function(t4) {
              false === V3.equals(t4) && (e3.scissor(t4.x, t4.y, t4.z, t4.w), V3.copy(t4));
            }, viewport: function(t4) {
              false === $3.equals(t4) && (e3.viewport(t4.x, t4.y, t4.z, t4.w), $3.copy(t4));
            }, reset: function() {
              for (var t4 = 0; t4 < d3.length; t4++)
                1 === d3[t4] && (e3.disableVertexAttribArray(t4), d3[t4] = 0);
              f3 = {}, m4 = null, k3 = null, j3 = {}, y3 = null, x3 = null, N3 = null, I3 = null, i3.reset(), a3.reset(), u3.reset();
            } };
          }(y2, x2, H2, b2)).scissor(se2.copy(fe2).multiplyScalar(de2)), w2.viewport(oe2.copy(pe2).multiplyScalar(de2)), _2 = new function(e3) {
            var t3 = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
            return { memory: { geometries: 0, textures: 0 }, render: t3, programs: null, autoReset: true, reset: function() {
              t3.frame++, t3.calls = 0, t3.triangles = 0, t3.points = 0, t3.lines = 0;
            }, update: function(n3, r3, i3) {
              switch (i3 = i3 || 1, t3.calls++, r3) {
                case e3.TRIANGLES:
                  t3.triangles += i3 * (n3 / 3);
                  break;
                case e3.TRIANGLE_STRIP:
                case e3.TRIANGLE_FAN:
                  t3.triangles += i3 * (n3 - 2);
                  break;
                case e3.LINES:
                  t3.lines += i3 * (n3 / 2);
                  break;
                case e3.LINE_STRIP:
                  t3.lines += i3 * (n3 - 1);
                  break;
                case e3.LINE_LOOP:
                  t3.lines += i3 * n3;
                  break;
                case e3.POINTS:
                  t3.points += i3 * n3;
                  break;
                default:
                  console.error("THREE.WebGLInfo: Unknown draw mode:", r3);
              }
            } };
          }(y2), R2 = new function() {
            var e3 = /* @__PURE__ */ new WeakMap();
            return { get: function(t3) {
              var n3 = e3.get(t3);
              return void 0 === n3 && (n3 = {}, e3.set(t3, n3)), n3;
            }, remove: function(t3) {
              e3.delete(t3);
            }, update: function(t3, n3, r3) {
              e3.get(t3)[n3] = r3;
            }, dispose: function() {
              e3 = /* @__PURE__ */ new WeakMap();
            } };
          }(), C2 = new ei(y2, x2, w2, R2, b2, H2, _2), P2 = new cn(y2), O2 = new function(e3, t3, n3) {
            var r3 = {}, i3 = {};
            function a3(e4) {
              var o2 = e4.target, s2 = r3[o2.id];
              for (var c3 in null !== s2.index && t3.remove(s2.index), s2.attributes)
                t3.remove(s2.attributes[c3]);
              o2.removeEventListener("dispose", a3), delete r3[o2.id];
              var u3 = i3[s2.id];
              u3 && (t3.remove(u3), delete i3[s2.id]), n3.memory.geometries--;
            }
            return { get: function(e4, t4) {
              var i4 = r3[t4.id];
              return i4 || (t4.addEventListener("dispose", a3), t4.isBufferGeometry ? i4 = t4 : t4.isGeometry && (void 0 === t4._bufferGeometry && (t4._bufferGeometry = new Pn().setFromObject(e4)), i4 = t4._bufferGeometry), r3[t4.id] = i4, n3.memory.geometries++, i4);
            }, update: function(n4) {
              var r4 = n4.index, i4 = n4.attributes;
              for (var a4 in null !== r4 && t3.update(r4, e3.ELEMENT_ARRAY_BUFFER), i4)
                t3.update(i4[a4], e3.ARRAY_BUFFER);
              var o2 = n4.morphAttributes;
              for (var a4 in o2)
                for (var s2 = o2[a4], c3 = 0, u3 = s2.length; c3 < u3; c3++)
                  t3.update(s2[c3], e3.ARRAY_BUFFER);
            }, getWireframeAttribute: function(n4) {
              var r4 = i3[n4.id];
              if (r4)
                return r4;
              var a4, o2 = [], s2 = n4.index, c3 = n4.attributes;
              if (null !== s2)
                for (var u3 = 0, l3 = (a4 = s2.array).length; u3 < l3; u3 += 3) {
                  var h3 = a4[u3 + 0], d3 = a4[u3 + 1], p3 = a4[u3 + 2];
                  o2.push(h3, d3, d3, p3, p3, h3);
                }
              else
                for (u3 = 0, l3 = (a4 = c3.position.array).length / 3 - 1; u3 < l3; u3 += 3)
                  h3 = u3 + 0, d3 = u3 + 1, p3 = u3 + 2, o2.push(h3, d3, d3, p3, p3, h3);
              return r4 = new (Rn(o2) > 65535 ? Tn : Mn)(o2, 1), t3.update(r4, e3.ELEMENT_ARRAY_BUFFER), i3[n4.id] = r4, r4;
            } };
          }(y2, P2, _2), N2 = new function(e3, t3) {
            var n3 = {};
            return { update: function(r3) {
              var i3 = t3.render.frame, a3 = r3.geometry, o2 = e3.get(r3, a3);
              return n3[o2.id] !== i3 && (a3.isGeometry && o2.updateFromObject(r3), e3.update(o2), n3[o2.id] = i3), o2;
            }, dispose: function() {
              n3 = {};
            } };
          }(O2, _2), F2 = new function(e3) {
            var t3 = {}, n3 = new Float32Array(8);
            return { update: function(r3, i3, a3, o2) {
              var s2 = r3.morphTargetInfluences, c3 = s2.length, u3 = t3[i3.id];
              if (void 0 === u3) {
                u3 = [];
                for (var l3 = 0; l3 < c3; l3++)
                  u3[l3] = [l3, 0];
                t3[i3.id] = u3;
              }
              var h3 = a3.morphTargets && i3.morphAttributes.position, d3 = a3.morphNormals && i3.morphAttributes.normal;
              for (l3 = 0; l3 < c3; l3++)
                0 !== (p3 = u3[l3])[1] && (h3 && i3.removeAttribute("morphTarget" + l3), d3 && i3.removeAttribute("morphNormal" + l3));
              for (l3 = 0; l3 < c3; l3++)
                (p3 = u3[l3])[0] = l3, p3[1] = s2[l3];
              for (u3.sort(jn), l3 = 0; l3 < 8; l3++) {
                var p3;
                if (p3 = u3[l3]) {
                  var f3 = p3[0], m4 = p3[1];
                  if (m4) {
                    h3 && i3.addAttribute("morphTarget" + l3, h3[f3]), d3 && i3.addAttribute("morphNormal" + l3, d3[f3]), n3[l3] = m4;
                    continue;
                  }
                }
                n3[l3] = 0;
              }
              o2.getUniforms().setValue(e3, "morphTargetInfluences", n3);
            } };
          }(y2), I2 = new jr(k2, x2, b2), D2 = new Xr(), U2 = new function() {
            var e3 = {};
            return { get: function(t3, n3) {
              var r3;
              return void 0 === e3[t3.id] ? (r3 = new Jr(), e3[t3.id] = {}, e3[t3.id][n3.id] = r3) : void 0 === e3[t3.id][n3.id] ? (r3 = new Jr(), e3[t3.id][n3.id] = r3) : r3 = e3[t3.id][n3.id], r3;
            }, dispose: function() {
              e3 = {};
            } };
          }(), B2 = new function(e3, t3, n3, r3) {
            var i3, a3, o2, s2 = new rn(0), c3 = 0;
            function u3(e4, n4) {
              t3.buffers.color.setClear(e4.r, e4.g, e4.b, n4, r3);
            }
            return { getClearColor: function() {
              return s2;
            }, setClearColor: function(e4, t4) {
              s2.set(e4), u3(s2, c3 = void 0 !== t4 ? t4 : 1);
            }, getClearAlpha: function() {
              return c3;
            }, setClearAlpha: function(e4) {
              u3(s2, c3 = e4);
            }, render: function(t4, r4, l3, h3) {
              var d3 = r4.background;
              null === d3 ? u3(s2, c3) : d3 && d3.isColor && (u3(d3, 1), h3 = true), (e3.autoClear || h3) && e3.clear(e3.autoClearColor, e3.autoClearDepth, e3.autoClearStencil), d3 && d3.isCubeTexture ? (void 0 === o2 && ((o2 = new kn(new Nn(1, 1, 1), new Gn({ uniforms: on.cube.uniforms, vertexShader: on.cube.vertexShader, fragmentShader: on.cube.fragmentShader, side: g, depthTest: true, depthWrite: false, fog: false }))).geometry.removeAttribute("normal"), o2.geometry.removeAttribute("uv"), o2.onBeforeRender = function(e4, t5, n4) {
                this.matrixWorld.copyPosition(n4.matrixWorld);
              }, n3.update(o2)), o2.material.uniforms.tCube.value = d3, t4.push(o2, o2.geometry, o2.material, 0, null)) : d3 && d3.isTexture && (void 0 === i3 && (i3 = new fn(-1, 1, 1, -1, 0, 1), a3 = new kn(new Dn(2, 2), new Fn({ depthTest: false, depthWrite: false, fog: false })), n3.update(a3)), a3.material.map = d3, e3.renderBufferDirect(i3, null, a3.geometry, a3.material, a3, null));
            } };
          }(k2, w2, N2, h2), G2 = new function(e3, t3, n3, r3) {
            var i3;
            this.setMode = function(e4) {
              i3 = e4;
            }, this.render = function(t4, r4) {
              e3.drawArrays(i3, t4, r4), n3.update(r4, i3);
            }, this.renderInstances = function(a3, o2, s2) {
              var c3;
              if (r3.isWebGL2)
                c3 = e3;
              else if (null === (c3 = t3.get("ANGLE_instanced_arrays")))
                return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
              c3[r3.isWebGL2 ? "drawArraysInstanced" : "drawArraysInstancedANGLE"](i3, o2, s2, a3.maxInstancedCount), n3.update(s2, i3, a3.maxInstancedCount);
            };
          }(y2, x2, _2, b2), z2 = new function(e3, t3, n3, r3) {
            var i3, a3, o2;
            this.setMode = function(e4) {
              i3 = e4;
            }, this.setIndex = function(e4) {
              a3 = e4.type, o2 = e4.bytesPerElement;
            }, this.render = function(t4, r4) {
              e3.drawElements(i3, r4, a3, t4 * o2), n3.update(r4, i3);
            }, this.renderInstances = function(s2, c3, u3) {
              var l3;
              if (r3.isWebGL2)
                l3 = e3;
              else if (null === (l3 = t3.get("ANGLE_instanced_arrays")))
                return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
              l3[r3.isWebGL2 ? "drawElementsInstanced" : "drawElementsInstancedANGLE"](i3, u3, a3, c3 * o2, s2.maxInstancedCount), n3.update(u3, i3, s2.maxInstancedCount);
            };
          }(y2, x2, _2, b2), _2.programs = I2.programs, k2.context = y2, k2.capabilities = b2, k2.extensions = x2, k2.properties = R2, k2.renderLists = D2, k2.state = w2, k2.info = _2;
        }
        Te2();
        var Se2 = "xr" in navigator ? new function(e3) {
          var t3 = e3.context, n3 = null, r3 = null, i3 = null, a3 = null, o2 = [], s2 = [];
          function c3() {
            return null !== r3 && null !== i3;
          }
          var u3 = new ri();
          u3.layers.enable(1), u3.viewport = new Xt();
          var l3 = new ri();
          l3.layers.enable(2), l3.viewport = new Xt();
          var h3 = new ii([u3, l3]);
          function d3(e4) {
            var t4 = o2[s2.indexOf(e4.inputSource)];
            t4 && t4.dispatchEvent({ type: e4.type });
          }
          function p3() {
            e3.setFramebuffer(null), g2.stop();
          }
          function f3(e4, t4) {
            null === t4 ? e4.matrixWorld.copy(e4.matrix) : e4.matrixWorld.multiplyMatrices(t4.matrixWorld, e4.matrix), e4.matrixWorldInverse.getInverse(e4.matrixWorld);
          }
          h3.layers.enable(1), h3.layers.enable(2), this.enabled = false, this.getController = function(e4) {
            var t4 = o2[e4];
            return void 0 === t4 && ((t4 = new ni()).matrixAutoUpdate = false, t4.visible = false, o2[e4] = t4), t4;
          }, this.getDevice = function() {
            return n3;
          }, this.setDevice = function(e4) {
            void 0 !== e4 && (n3 = e4), e4 instanceof XRDevice && t3.setCompatibleXRDevice(e4);
          }, this.setSession = function(n4, a4) {
            null !== (r3 = n4) && (r3.addEventListener("select", d3), r3.addEventListener("selectstart", d3), r3.addEventListener("selectend", d3), r3.addEventListener("end", p3), r3.baseLayer = new XRWebGLLayer(r3, t3), r3.requestFrameOfReference(a4.frameOfReferenceType).then(function(t4) {
              i3 = t4, e3.setFramebuffer(r3.baseLayer.framebuffer), g2.setContext(r3), g2.start();
            }), s2 = r3.getInputSources(), r3.addEventListener("inputsourceschange", function() {
              s2 = r3.getInputSources(), console.log(s2);
            }));
          }, this.getCamera = function(e4) {
            if (c3()) {
              var t4 = e4.parent, n4 = h3.cameras;
              f3(h3, t4);
              for (var r4 = 0; r4 < n4.length; r4++)
                f3(n4[r4], t4);
              e4.matrixWorld.copy(h3.matrixWorld);
              for (var i4 = e4.children, a4 = (r4 = 0, i4.length); r4 < a4; r4++)
                i4[r4].updateMatrixWorld(true);
              return h3;
            }
            return e4;
          }, this.isPresenting = c3;
          var m4 = null, g2 = new sn();
          g2.setAnimationLoop(function(e4, t4) {
            if (null !== (a3 = t4.getDevicePose(i3)))
              for (var n4 = r3.baseLayer, c4 = t4.views, u4 = 0; u4 < c4.length; u4++) {
                var l4 = c4[u4], d4 = n4.getViewport(l4), p4 = a3.getViewMatrix(l4), f4 = h3.cameras[u4];
                f4.matrix.fromArray(p4).getInverse(f4.matrix), f4.projectionMatrix.fromArray(l4.projectionMatrix), f4.viewport.set(d4.x, d4.y, d4.width, d4.height), 0 === u4 && (h3.matrix.copy(f4.matrix), h3.projectionMatrix.copy(f4.projectionMatrix));
              }
            for (u4 = 0; u4 < o2.length; u4++) {
              var g3 = o2[u4], v2 = s2[u4];
              if (v2) {
                var y3 = t4.getInputPose(v2, i3);
                if (null !== y3) {
                  g3.matrix.elements = y3.pointerMatrix, g3.matrix.decompose(g3.position, g3.rotation, g3.scale), g3.visible = true;
                  continue;
                }
              }
              g3.visible = false;
            }
            m4 && m4(e4);
          }), this.setAnimationLoop = function(e4) {
            m4 = e4;
          }, this.dispose = function() {
          }, this.getStandingMatrix = function() {
            return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."), new THREE.Matrix4();
          }, this.submitFrame = function() {
          };
        }(k2) : new ai(k2);
        this.vr = Se2;
        var Ae2 = new $r(k2, N2, b2.maxTextureSize);
        function Le2(e3) {
          e3.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), j2 = true;
        }
        function Re2() {
          console.log("THREE.WebGLRenderer: Context Restored."), j2 = false, Te2();
        }
        function Oe2(e3) {
          var t3 = e3.target;
          t3.removeEventListener("dispose", Oe2), function(e4) {
            Ne2(e4), R2.remove(e4);
          }(t3);
        }
        function Ne2(e3) {
          var t3 = R2.get(e3).program;
          e3.program = void 0, void 0 !== t3 && I2.releaseProgram(t3);
        }
        this.shadowMap = Ae2, this.getContext = function() {
          return y2;
        }, this.getContextAttributes = function() {
          return y2.getContextAttributes();
        }, this.forceContextLoss = function() {
          var e3 = x2.get("WEBGL_lose_context");
          e3 && e3.loseContext();
        }, this.forceContextRestore = function() {
          var e3 = x2.get("WEBGL_lose_context");
          e3 && e3.restoreContext();
        }, this.getPixelRatio = function() {
          return de2;
        }, this.setPixelRatio = function(e3) {
          void 0 !== e3 && (de2 = e3, this.setSize(le2, he2, false));
        }, this.getSize = function() {
          return { width: le2, height: he2 };
        }, this.setSize = function(e3, n3, r3) {
          Se2.isPresenting() ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (le2 = e3, he2 = n3, t2.width = e3 * de2, t2.height = n3 * de2, false !== r3 && (t2.style.width = e3 + "px", t2.style.height = n3 + "px"), this.setViewport(0, 0, e3, n3));
        }, this.getDrawingBufferSize = function() {
          return { width: le2 * de2, height: he2 * de2 };
        }, this.setDrawingBufferSize = function(e3, n3, r3) {
          le2 = e3, he2 = n3, de2 = r3, t2.width = e3 * r3, t2.height = n3 * r3, this.setViewport(0, 0, e3, n3);
        }, this.getCurrentViewport = function() {
          return oe2;
        }, this.setViewport = function(e3, t3, n3, r3) {
          pe2.set(e3, he2 - t3 - r3, n3, r3), w2.viewport(oe2.copy(pe2).multiplyScalar(de2));
        }, this.setScissor = function(e3, t3, n3, r3) {
          fe2.set(e3, he2 - t3 - r3, n3, r3), w2.scissor(se2.copy(fe2).multiplyScalar(de2));
        }, this.setScissorTest = function(e3) {
          w2.setScissorTest(me2 = e3);
        }, this.getClearColor = function() {
          return B2.getClearColor();
        }, this.setClearColor = function() {
          B2.setClearColor.apply(B2, arguments);
        }, this.getClearAlpha = function() {
          return B2.getClearAlpha();
        }, this.setClearAlpha = function() {
          B2.setClearAlpha.apply(B2, arguments);
        }, this.clear = function(e3, t3, n3) {
          var r3 = 0;
          (void 0 === e3 || e3) && (r3 |= y2.COLOR_BUFFER_BIT), (void 0 === t3 || t3) && (r3 |= y2.DEPTH_BUFFER_BIT), (void 0 === n3 || n3) && (r3 |= y2.STENCIL_BUFFER_BIT), y2.clear(r3);
        }, this.clearColor = function() {
          this.clear(true, false, false);
        }, this.clearDepth = function() {
          this.clear(false, true, false);
        }, this.clearStencil = function() {
          this.clear(false, false, true);
        }, this.clearTarget = function(e3, t3, n3, r3) {
          this.setRenderTarget(e3), this.clear(t3, n3, r3);
        }, this.dispose = function() {
          t2.removeEventListener("webglcontextlost", Le2, false), t2.removeEventListener("webglcontextrestored", Re2, false), D2.dispose(), U2.dispose(), R2.dispose(), N2.dispose(), Se2.dispose(), De2.stop();
        }, this.renderBufferImmediate = function(e3, t3) {
          w2.initAttributes();
          var n3 = R2.get(e3);
          e3.hasPositions && !n3.position && (n3.position = y2.createBuffer()), e3.hasNormals && !n3.normal && (n3.normal = y2.createBuffer()), e3.hasUvs && !n3.uv && (n3.uv = y2.createBuffer()), e3.hasColors && !n3.color && (n3.color = y2.createBuffer());
          var r3 = t3.getAttributes();
          e3.hasPositions && (y2.bindBuffer(y2.ARRAY_BUFFER, n3.position), y2.bufferData(y2.ARRAY_BUFFER, e3.positionArray, y2.DYNAMIC_DRAW), w2.enableAttribute(r3.position), y2.vertexAttribPointer(r3.position, 3, y2.FLOAT, false, 0, 0)), e3.hasNormals && (y2.bindBuffer(y2.ARRAY_BUFFER, n3.normal), y2.bufferData(y2.ARRAY_BUFFER, e3.normalArray, y2.DYNAMIC_DRAW), w2.enableAttribute(r3.normal), y2.vertexAttribPointer(r3.normal, 3, y2.FLOAT, false, 0, 0)), e3.hasUvs && (y2.bindBuffer(y2.ARRAY_BUFFER, n3.uv), y2.bufferData(y2.ARRAY_BUFFER, e3.uvArray, y2.DYNAMIC_DRAW), w2.enableAttribute(r3.uv), y2.vertexAttribPointer(r3.uv, 2, y2.FLOAT, false, 0, 0)), e3.hasColors && (y2.bindBuffer(y2.ARRAY_BUFFER, n3.color), y2.bufferData(y2.ARRAY_BUFFER, e3.colorArray, y2.DYNAMIC_DRAW), w2.enableAttribute(r3.color), y2.vertexAttribPointer(r3.color, 3, y2.FLOAT, false, 0, 0)), w2.disableUnusedAttributes(), y2.drawArrays(y2.TRIANGLES, 0, e3.count), e3.count = 0;
        }, this.renderBufferDirect = function(e3, t3, n3, r3, i3, a3) {
          var o2 = i3.isMesh && i3.normalMatrix.determinant() < 0;
          w2.setMaterial(r3, o2);
          var s2 = ze2(e3, t3, r3, i3), c3 = false;
          ne2.geometry === n3.id && ne2.program === s2.id && ne2.wireframe === (true === r3.wireframe) || (ne2.geometry = n3.id, ne2.program = s2.id, ne2.wireframe = true === r3.wireframe, c3 = true), i3.morphTargetInfluences && (F2.update(i3, n3, r3, s2), c3 = true);
          var u3, l3 = n3.index, h3 = n3.attributes.position, d3 = 1;
          true === r3.wireframe && (l3 = O2.getWireframeAttribute(n3), d3 = 2);
          var p3 = G2;
          null !== l3 && (u3 = P2.get(l3), (p3 = z2).setIndex(u3)), c3 && (!function(e4, t4, n4) {
            if (n4 && n4.isInstancedBufferGeometry & !b2.isWebGL2 && null === x2.get("ANGLE_instanced_arrays"))
              return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            w2.initAttributes();
            var r4 = n4.attributes, i4 = t4.getAttributes(), a4 = e4.defaultAttributeValues;
            for (var o3 in i4) {
              var s3 = i4[o3];
              if (s3 >= 0) {
                var c4 = r4[o3];
                if (void 0 !== c4) {
                  var u4 = c4.normalized, l4 = c4.itemSize, h4 = P2.get(c4);
                  if (void 0 === h4)
                    continue;
                  var d4 = h4.buffer, p4 = h4.type, f4 = h4.bytesPerElement;
                  if (c4.isInterleavedBufferAttribute) {
                    var m5 = c4.data, g3 = m5.stride, v3 = c4.offset;
                    m5 && m5.isInstancedInterleavedBuffer ? (w2.enableAttributeAndDivisor(s3, m5.meshPerAttribute), void 0 === n4.maxInstancedCount && (n4.maxInstancedCount = m5.meshPerAttribute * m5.count)) : w2.enableAttribute(s3), y2.bindBuffer(y2.ARRAY_BUFFER, d4), y2.vertexAttribPointer(s3, l4, p4, u4, g3 * f4, v3 * f4);
                  } else
                    c4.isInstancedBufferAttribute ? (w2.enableAttributeAndDivisor(s3, c4.meshPerAttribute), void 0 === n4.maxInstancedCount && (n4.maxInstancedCount = c4.meshPerAttribute * c4.count)) : w2.enableAttribute(s3), y2.bindBuffer(y2.ARRAY_BUFFER, d4), y2.vertexAttribPointer(s3, l4, p4, u4, 0, 0);
                } else if (void 0 !== a4) {
                  var _4 = a4[o3];
                  if (void 0 !== _4)
                    switch (_4.length) {
                      case 2:
                        y2.vertexAttrib2fv(s3, _4);
                        break;
                      case 3:
                        y2.vertexAttrib3fv(s3, _4);
                        break;
                      case 4:
                        y2.vertexAttrib4fv(s3, _4);
                        break;
                      default:
                        y2.vertexAttrib1fv(s3, _4);
                    }
                }
              }
            }
            w2.disableUnusedAttributes();
          }(r3, s2, n3), null !== l3 && y2.bindBuffer(y2.ELEMENT_ARRAY_BUFFER, u3.buffer));
          var f3 = 1 / 0;
          null !== l3 ? f3 = l3.count : void 0 !== h3 && (f3 = h3.count);
          var m4 = n3.drawRange.start * d3, g2 = n3.drawRange.count * d3, v2 = null !== a3 ? a3.start * d3 : 0, _3 = null !== a3 ? a3.count * d3 : 1 / 0, M2 = Math.max(m4, v2), E2 = Math.min(f3, m4 + g2, v2 + _3) - 1, T2 = Math.max(0, E2 - M2 + 1);
          if (0 !== T2) {
            if (i3.isMesh)
              if (true === r3.wireframe)
                w2.setLineWidth(r3.wireframeLinewidth * _e2()), p3.setMode(y2.LINES);
              else
                switch (i3.drawMode) {
                  case _t:
                    p3.setMode(y2.TRIANGLES);
                    break;
                  case Mt:
                    p3.setMode(y2.TRIANGLE_STRIP);
                    break;
                  case Et:
                    p3.setMode(y2.TRIANGLE_FAN);
                }
            else if (i3.isLine) {
              var S2 = r3.linewidth;
              void 0 === S2 && (S2 = 1), w2.setLineWidth(S2 * _e2()), i3.isLineSegments ? p3.setMode(y2.LINES) : i3.isLineLoop ? p3.setMode(y2.LINE_LOOP) : p3.setMode(y2.LINE_STRIP);
            } else
              i3.isPoints ? p3.setMode(y2.POINTS) : i3.isSprite && p3.setMode(y2.TRIANGLES);
            n3 && n3.isInstancedBufferGeometry ? n3.maxInstancedCount > 0 && p3.renderInstances(n3, M2, T2) : p3.render(M2, T2);
          }
        }, this.compile = function(e3, t3) {
          (m3 = U2.get(e3, t3)).init(), e3.traverse(function(e4) {
            e4.isLight && (m3.pushLight(e4), e4.castShadow && m3.pushShadow(e4));
          }), m3.setupLights(t3), e3.traverse(function(t4) {
            if (t4.material)
              if (Array.isArray(t4.material))
                for (var n3 = 0; n3 < t4.material.length; n3++)
                  Ge2(t4.material[n3], e3.fog, t4);
              else
                Ge2(t4.material, e3.fog, t4);
          });
        };
        var Ie2 = null;
        var De2 = new sn();
        function Ue2(e3, t3, n3, r3) {
          for (var i3 = 0, a3 = e3.length; i3 < a3; i3++) {
            var o2 = e3[i3], s2 = o2.object, c3 = o2.geometry, u3 = void 0 === r3 ? o2.material : r3, l3 = o2.group;
            if (n3.isArrayCamera) {
              ae2 = n3;
              for (var h3 = n3.cameras, d3 = 0, p3 = h3.length; d3 < p3; d3++) {
                var f3 = h3[d3];
                if (s2.layers.test(f3.layers)) {
                  if ("viewport" in f3)
                    w2.viewport(oe2.copy(f3.viewport));
                  else {
                    var m4 = f3.bounds, g2 = m4.x * le2, v2 = m4.y * he2, y3 = m4.z * le2, x3 = m4.w * he2;
                    w2.viewport(oe2.set(g2, v2, y3, x3).multiplyScalar(de2));
                  }
                  Be2(s2, t3, f3, c3, u3, l3);
                }
              }
            } else
              ae2 = null, Be2(s2, t3, n3, c3, u3, l3);
          }
        }
        function Be2(e3, t3, n3, r3, i3, a3) {
          if (e3.onBeforeRender(k2, t3, n3, r3, i3, a3), m3 = U2.get(t3, ae2 || n3), e3.modelViewMatrix.multiplyMatrices(n3.matrixWorldInverse, e3.matrixWorld), e3.normalMatrix.getNormalMatrix(e3.modelViewMatrix), e3.isImmediateRenderObject) {
            w2.setMaterial(i3);
            var o2 = ze2(n3, t3.fog, i3, e3);
            ne2.geometry = null, ne2.program = null, ne2.wireframe = false, function(e4, t4) {
              e4.render(function(e5) {
                k2.renderBufferImmediate(e5, t4);
              });
            }(e3, o2);
          } else
            k2.renderBufferDirect(n3, t3.fog, r3, i3, e3, a3);
          e3.onAfterRender(k2, t3, n3, r3, i3, a3), m3 = U2.get(t3, ae2 || n3);
        }
        function Ge2(e3, t3, n3) {
          var r3 = R2.get(e3), i3 = m3.state.lights, a3 = m3.state.shadowsArray, o2 = r3.lightsHash, s2 = i3.state.hash, c3 = I2.getParameters(e3, i3.state, a3, t3, ve2.numPlanes, ve2.numIntersection, n3), u3 = I2.getProgramCode(e3, c3), l3 = r3.program, h3 = true;
          if (void 0 === l3)
            e3.addEventListener("dispose", Oe2);
          else if (l3.code !== u3)
            Ne2(e3);
          else if (o2.stateID !== s2.stateID || o2.directionalLength !== s2.directionalLength || o2.pointLength !== s2.pointLength || o2.spotLength !== s2.spotLength || o2.rectAreaLength !== s2.rectAreaLength || o2.hemiLength !== s2.hemiLength || o2.shadowsLength !== s2.shadowsLength)
            o2.stateID = s2.stateID, o2.directionalLength = s2.directionalLength, o2.pointLength = s2.pointLength, o2.spotLength = s2.spotLength, o2.rectAreaLength = s2.rectAreaLength, o2.hemiLength = s2.hemiLength, o2.shadowsLength = s2.shadowsLength, h3 = false;
          else {
            if (void 0 !== c3.shaderID)
              return;
            h3 = false;
          }
          if (h3) {
            if (c3.shaderID) {
              var d3 = on[c3.shaderID];
              r3.shader = { name: e3.type, uniforms: tn.clone(d3.uniforms), vertexShader: d3.vertexShader, fragmentShader: d3.fragmentShader };
            } else
              r3.shader = { name: e3.type, uniforms: e3.uniforms, vertexShader: e3.vertexShader, fragmentShader: e3.fragmentShader };
            e3.onBeforeCompile(r3.shader, k2), u3 = I2.getProgramCode(e3, c3), l3 = I2.acquireProgram(e3, r3.shader, c3, u3), r3.program = l3, e3.program = l3;
          }
          var p3 = l3.getAttributes();
          if (e3.morphTargets) {
            e3.numSupportedMorphTargets = 0;
            for (var f3 = 0; f3 < k2.maxMorphTargets; f3++)
              p3["morphTarget" + f3] >= 0 && e3.numSupportedMorphTargets++;
          }
          if (e3.morphNormals) {
            e3.numSupportedMorphNormals = 0;
            for (f3 = 0; f3 < k2.maxMorphNormals; f3++)
              p3["morphNormal" + f3] >= 0 && e3.numSupportedMorphNormals++;
          }
          var g2 = r3.shader.uniforms;
          (e3.isShaderMaterial || e3.isRawShaderMaterial) && true !== e3.clipping || (r3.numClippingPlanes = ve2.numPlanes, r3.numIntersection = ve2.numIntersection, g2.clippingPlanes = ve2.uniform), r3.fog = t3, void 0 === o2 && (r3.lightsHash = o2 = {}), o2.stateID = s2.stateID, o2.directionalLength = s2.directionalLength, o2.pointLength = s2.pointLength, o2.spotLength = s2.spotLength, o2.rectAreaLength = s2.rectAreaLength, o2.hemiLength = s2.hemiLength, o2.shadowsLength = s2.shadowsLength, e3.lights && (g2.ambientLightColor.value = i3.state.ambient, g2.directionalLights.value = i3.state.directional, g2.spotLights.value = i3.state.spot, g2.rectAreaLights.value = i3.state.rectArea, g2.pointLights.value = i3.state.point, g2.hemisphereLights.value = i3.state.hemi, g2.directionalShadowMap.value = i3.state.directionalShadowMap, g2.directionalShadowMatrix.value = i3.state.directionalShadowMatrix, g2.spotShadowMap.value = i3.state.spotShadowMap, g2.spotShadowMatrix.value = i3.state.spotShadowMatrix, g2.pointShadowMap.value = i3.state.pointShadowMap, g2.pointShadowMatrix.value = i3.state.pointShadowMatrix);
          var v2 = r3.program.getUniforms(), y3 = Or.seqWithValue(v2.seq, g2);
          r3.uniformsList = y3;
        }
        function ze2(e3, t3, n3, r3) {
          ue2 = 0;
          var i3 = R2.get(n3), a3 = m3.state.lights, o2 = i3.lightsHash, s2 = a3.state.hash;
          if (ye2 && (xe2 || e3 !== ie2)) {
            var c3 = e3 === ie2 && n3.id === te2;
            ve2.setState(n3.clippingPlanes, n3.clipIntersection, n3.clipShadows, e3, i3, c3);
          }
          false === n3.needsUpdate && (void 0 === i3.program ? n3.needsUpdate = true : n3.fog && i3.fog !== t3 ? n3.needsUpdate = true : (!n3.lights || o2.stateID === s2.stateID && o2.directionalLength === s2.directionalLength && o2.pointLength === s2.pointLength && o2.spotLength === s2.spotLength && o2.rectAreaLength === s2.rectAreaLength && o2.hemiLength === s2.hemiLength && o2.shadowsLength === s2.shadowsLength) && (void 0 === i3.numClippingPlanes || i3.numClippingPlanes === ve2.numPlanes && i3.numIntersection === ve2.numIntersection) || (n3.needsUpdate = true)), n3.needsUpdate && (Ge2(n3, t3, r3), n3.needsUpdate = false);
          var u3 = false, l3 = false, h3 = false, d3 = i3.program, p3 = d3.getUniforms(), f3 = i3.shader.uniforms;
          if (w2.useProgram(d3.program) && (u3 = true, l3 = true, h3 = true), n3.id !== te2 && (te2 = n3.id, l3 = true), u3 || e3 !== ie2) {
            if (p3.setValue(y2, "projectionMatrix", e3.projectionMatrix), b2.logarithmicDepthBuffer && p3.setValue(y2, "logDepthBufFC", 2 / (Math.log(e3.far + 1) / Math.LN2)), ie2 !== (ae2 || e3) && (ie2 = ae2 || e3, l3 = true, h3 = true), n3.isShaderMaterial || n3.isMeshPhongMaterial || n3.isMeshStandardMaterial || n3.envMap) {
              var v2 = p3.map.cameraPosition;
              void 0 !== v2 && v2.setValue(y2, we2.setFromMatrixPosition(e3.matrixWorld));
            }
            (n3.isMeshPhongMaterial || n3.isMeshLambertMaterial || n3.isMeshBasicMaterial || n3.isMeshStandardMaterial || n3.isShaderMaterial || n3.skinning) && p3.setValue(y2, "viewMatrix", e3.matrixWorldInverse);
          }
          if (n3.skinning) {
            p3.setOptional(y2, r3, "bindMatrix"), p3.setOptional(y2, r3, "bindMatrixInverse");
            var x3 = r3.skeleton;
            if (x3) {
              var _3 = x3.bones;
              if (b2.floatVertexTextures) {
                if (void 0 === x3.boneTexture) {
                  var M2 = Math.sqrt(4 * _3.length);
                  M2 = Bt.ceilPowerOfTwo(M2), M2 = Math.max(M2, 4);
                  var E2 = new Float32Array(M2 * M2 * 4);
                  E2.set(x3.boneMatrices);
                  var T2 = new Zt(E2, M2, M2, Fe, Ce);
                  T2.needsUpdate = true, x3.boneMatrices = E2, x3.boneTexture = T2, x3.boneTextureSize = M2;
                }
                p3.setValue(y2, "boneTexture", x3.boneTexture), p3.setValue(y2, "boneTextureSize", x3.boneTextureSize);
              } else
                p3.setOptional(y2, x3, "boneMatrices");
            }
          }
          return l3 && (p3.setValue(y2, "toneMappingExposure", k2.toneMappingExposure), p3.setValue(y2, "toneMappingWhitePoint", k2.toneMappingWhitePoint), n3.lights && function(e4, t4) {
            e4.ambientLightColor.needsUpdate = t4, e4.directionalLights.needsUpdate = t4, e4.pointLights.needsUpdate = t4, e4.spotLights.needsUpdate = t4, e4.rectAreaLights.needsUpdate = t4, e4.hemisphereLights.needsUpdate = t4;
          }(f3, h3), t3 && n3.fog && function(e4, t4) {
            e4.fogColor.value = t4.color, t4.isFog ? (e4.fogNear.value = t4.near, e4.fogFar.value = t4.far) : t4.isFogExp2 && (e4.fogDensity.value = t4.density);
          }(f3, t3), n3.isMeshBasicMaterial ? He2(f3, n3) : n3.isMeshLambertMaterial ? (He2(f3, n3), function(e4, t4) {
            t4.emissiveMap && (e4.emissiveMap.value = t4.emissiveMap);
          }(f3, n3)) : n3.isMeshPhongMaterial ? (He2(f3, n3), n3.isMeshToonMaterial ? function(e4, t4) {
            ke2(e4, t4), t4.gradientMap && (e4.gradientMap.value = t4.gradientMap);
          }(f3, n3) : ke2(f3, n3)) : n3.isMeshStandardMaterial ? (He2(f3, n3), n3.isMeshPhysicalMaterial ? function(e4, t4) {
            je2(e4, t4), e4.reflectivity.value = t4.reflectivity, e4.clearCoat.value = t4.clearCoat, e4.clearCoatRoughness.value = t4.clearCoatRoughness;
          }(f3, n3) : je2(f3, n3)) : n3.isMeshDepthMaterial ? (He2(f3, n3), function(e4, t4) {
            t4.displacementMap && (e4.displacementMap.value = t4.displacementMap, e4.displacementScale.value = t4.displacementScale, e4.displacementBias.value = t4.displacementBias);
          }(f3, n3)) : n3.isMeshDistanceMaterial ? (He2(f3, n3), function(e4, t4) {
            t4.displacementMap && (e4.displacementMap.value = t4.displacementMap, e4.displacementScale.value = t4.displacementScale, e4.displacementBias.value = t4.displacementBias);
            e4.referencePosition.value.copy(t4.referencePosition), e4.nearDistance.value = t4.nearDistance, e4.farDistance.value = t4.farDistance;
          }(f3, n3)) : n3.isMeshNormalMaterial ? (He2(f3, n3), function(e4, t4) {
            t4.bumpMap && (e4.bumpMap.value = t4.bumpMap, e4.bumpScale.value = t4.bumpScale, t4.side === g && (e4.bumpScale.value *= -1));
            t4.normalMap && (e4.normalMap.value = t4.normalMap, e4.normalScale.value.copy(t4.normalScale), t4.side === g && e4.normalScale.value.negate());
            t4.displacementMap && (e4.displacementMap.value = t4.displacementMap, e4.displacementScale.value = t4.displacementScale, e4.displacementBias.value = t4.displacementBias);
          }(f3, n3)) : n3.isLineBasicMaterial ? (function(e4, t4) {
            e4.diffuse.value = t4.color, e4.opacity.value = t4.opacity;
          }(f3, n3), n3.isLineDashedMaterial && function(e4, t4) {
            e4.dashSize.value = t4.dashSize, e4.totalSize.value = t4.dashSize + t4.gapSize, e4.scale.value = t4.scale;
          }(f3, n3)) : n3.isPointsMaterial ? function(e4, t4) {
            e4.diffuse.value = t4.color, e4.opacity.value = t4.opacity, e4.size.value = t4.size * de2, e4.scale.value = 0.5 * he2, e4.map.value = t4.map, null !== t4.map && (true === t4.map.matrixAutoUpdate && t4.map.updateMatrix(), e4.uvTransform.value.copy(t4.map.matrix));
          }(f3, n3) : n3.isSpriteMaterial ? function(e4, t4) {
            e4.diffuse.value = t4.color, e4.opacity.value = t4.opacity, e4.rotation.value = t4.rotation, e4.map.value = t4.map, null !== t4.map && (true === t4.map.matrixAutoUpdate && t4.map.updateMatrix(), e4.uvTransform.value.copy(t4.map.matrix));
          }(f3, n3) : n3.isShadowMaterial && (f3.color.value = n3.color, f3.opacity.value = n3.opacity), void 0 !== f3.ltc_1 && (f3.ltc_1.value = an.LTC_1), void 0 !== f3.ltc_2 && (f3.ltc_2.value = an.LTC_2), Or.upload(y2, i3.uniformsList, f3, k2)), n3.isShaderMaterial && true === n3.uniformsNeedUpdate && (Or.upload(y2, i3.uniformsList, f3, k2), n3.uniformsNeedUpdate = false), n3.isSpriteMaterial && p3.setValue(y2, "center", r3.center), p3.setValue(y2, "modelViewMatrix", r3.modelViewMatrix), p3.setValue(y2, "normalMatrix", r3.normalMatrix), p3.setValue(y2, "modelMatrix", r3.matrixWorld), d3;
        }
        function He2(e3, t3) {
          var n3;
          e3.opacity.value = t3.opacity, t3.color && (e3.diffuse.value = t3.color), t3.emissive && e3.emissive.value.copy(t3.emissive).multiplyScalar(t3.emissiveIntensity), t3.map && (e3.map.value = t3.map), t3.alphaMap && (e3.alphaMap.value = t3.alphaMap), t3.specularMap && (e3.specularMap.value = t3.specularMap), t3.envMap && (e3.envMap.value = t3.envMap, e3.flipEnvMap.value = t3.envMap && t3.envMap.isCubeTexture ? -1 : 1, e3.reflectivity.value = t3.reflectivity, e3.refractionRatio.value = t3.refractionRatio, e3.maxMipLevel.value = R2.get(t3.envMap).__maxMipLevel), t3.lightMap && (e3.lightMap.value = t3.lightMap, e3.lightMapIntensity.value = t3.lightMapIntensity), t3.aoMap && (e3.aoMap.value = t3.aoMap, e3.aoMapIntensity.value = t3.aoMapIntensity), t3.map ? n3 = t3.map : t3.specularMap ? n3 = t3.specularMap : t3.displacementMap ? n3 = t3.displacementMap : t3.normalMap ? n3 = t3.normalMap : t3.bumpMap ? n3 = t3.bumpMap : t3.roughnessMap ? n3 = t3.roughnessMap : t3.metalnessMap ? n3 = t3.metalnessMap : t3.alphaMap ? n3 = t3.alphaMap : t3.emissiveMap && (n3 = t3.emissiveMap), void 0 !== n3 && (n3.isWebGLRenderTarget && (n3 = n3.texture), true === n3.matrixAutoUpdate && n3.updateMatrix(), e3.uvTransform.value.copy(n3.matrix));
        }
        function ke2(e3, t3) {
          e3.specular.value = t3.specular, e3.shininess.value = Math.max(t3.shininess, 1e-4), t3.emissiveMap && (e3.emissiveMap.value = t3.emissiveMap), t3.bumpMap && (e3.bumpMap.value = t3.bumpMap, e3.bumpScale.value = t3.bumpScale, t3.side === g && (e3.bumpScale.value *= -1)), t3.normalMap && (e3.normalMap.value = t3.normalMap, e3.normalScale.value.copy(t3.normalScale), t3.side === g && e3.normalScale.value.negate()), t3.displacementMap && (e3.displacementMap.value = t3.displacementMap, e3.displacementScale.value = t3.displacementScale, e3.displacementBias.value = t3.displacementBias);
        }
        function je2(e3, t3) {
          e3.roughness.value = t3.roughness, e3.metalness.value = t3.metalness, t3.roughnessMap && (e3.roughnessMap.value = t3.roughnessMap), t3.metalnessMap && (e3.metalnessMap.value = t3.metalnessMap), t3.emissiveMap && (e3.emissiveMap.value = t3.emissiveMap), t3.bumpMap && (e3.bumpMap.value = t3.bumpMap, e3.bumpScale.value = t3.bumpScale, t3.side === g && (e3.bumpScale.value *= -1)), t3.normalMap && (e3.normalMap.value = t3.normalMap, e3.normalScale.value.copy(t3.normalScale), t3.side === g && e3.normalScale.value.negate()), t3.displacementMap && (e3.displacementMap.value = t3.displacementMap, e3.displacementScale.value = t3.displacementScale, e3.displacementBias.value = t3.displacementBias), t3.envMap && (e3.envMapIntensity.value = t3.envMapIntensity);
        }
        De2.setAnimationLoop(function(e3) {
          Se2.isPresenting() || Ie2 && Ie2(e3);
        }), "undefined" != typeof window && De2.setContext(window), this.setAnimationLoop = function(e3) {
          Ie2 = e3, Se2.setAnimationLoop(e3), De2.start();
        }, this.render = function(e3, t3, n3, r3) {
          if (t3 && t3.isCamera) {
            if (!j2) {
              ne2.geometry = null, ne2.program = null, ne2.wireframe = false, te2 = -1, ie2 = null, true === e3.autoUpdate && e3.updateMatrixWorld(), null === t3.parent && t3.updateMatrixWorld(), Se2.enabled && (t3 = Se2.getCamera(t3)), (m3 = U2.get(e3, t3)).init(), e3.onBeforeRender(k2, e3, t3, n3), be2.multiplyMatrices(t3.projectionMatrix, t3.matrixWorldInverse), ge2.setFromMatrix(be2), xe2 = this.localClippingEnabled, ye2 = ve2.init(this.clippingPlanes, xe2, t3), (f2 = D2.get(e3, t3)).init(), function e4(t4, n4, r4) {
                if (false === t4.visible)
                  return;
                var i4 = t4.layers.test(n4.layers);
                if (i4) {
                  if (t4.isLight)
                    m3.pushLight(t4), t4.castShadow && m3.pushShadow(t4);
                  else if (t4.isSprite) {
                    if (!t4.frustumCulled || ge2.intersectsSprite(t4)) {
                      r4 && we2.setFromMatrixPosition(t4.matrixWorld).applyMatrix4(be2);
                      var a4 = N2.update(t4), o3 = t4.material;
                      f2.push(t4, a4, o3, we2.z, null);
                    }
                  } else if (t4.isImmediateRenderObject)
                    r4 && we2.setFromMatrixPosition(t4.matrixWorld).applyMatrix4(be2), f2.push(t4, null, t4.material, we2.z, null);
                  else if ((t4.isMesh || t4.isLine || t4.isPoints) && (t4.isSkinnedMesh && t4.skeleton.update(), !t4.frustumCulled || ge2.intersectsObject(t4))) {
                    r4 && we2.setFromMatrixPosition(t4.matrixWorld).applyMatrix4(be2);
                    var a4 = N2.update(t4), o3 = t4.material;
                    if (Array.isArray(o3))
                      for (var s3 = a4.groups, c3 = 0, u3 = s3.length; c3 < u3; c3++) {
                        var l3 = s3[c3], h3 = o3[l3.materialIndex];
                        h3 && h3.visible && f2.push(t4, a4, h3, we2.z, l3);
                      }
                    else
                      o3.visible && f2.push(t4, a4, o3, we2.z, null);
                  }
                }
                var d3 = t4.children;
                for (var c3 = 0, u3 = d3.length; c3 < u3; c3++)
                  e4(d3[c3], n4, r4);
              }(e3, t3, k2.sortObjects), true === k2.sortObjects && f2.sort(), ye2 && ve2.beginShadows();
              var i3 = m3.state.shadowsArray;
              Ae2.render(i3, e3, t3), m3.setupLights(t3), ye2 && ve2.endShadows(), this.info.autoReset && this.info.reset(), void 0 === n3 && (n3 = null), this.setRenderTarget(n3), B2.render(f2, e3, t3, r3);
              var a3 = f2.opaque, o2 = f2.transparent;
              if (e3.overrideMaterial) {
                var s2 = e3.overrideMaterial;
                a3.length && Ue2(a3, e3, t3, s2), o2.length && Ue2(o2, e3, t3, s2);
              } else
                a3.length && Ue2(a3, e3, t3), o2.length && Ue2(o2, e3, t3);
              n3 && C2.updateRenderTargetMipmap(n3), w2.buffers.depth.setTest(true), w2.buffers.depth.setMask(true), w2.buffers.color.setMask(true), w2.setPolygonOffset(false), e3.onAfterRender(k2, e3, t3), Se2.enabled && Se2.submitFrame(), f2 = null, m3 = null;
            }
          } else
            console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        }, this.allocTextureUnit = function() {
          var e3 = ue2;
          return e3 >= b2.maxTextures && console.warn("THREE.WebGLRenderer: Trying to use " + e3 + " texture units while this GPU supports only " + b2.maxTextures), ue2 += 1, e3;
        }, this.setTexture2D = function() {
          var e3 = false;
          return function(t3, n3) {
            t3 && t3.isWebGLRenderTarget && (e3 || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."), e3 = true), t3 = t3.texture), C2.setTexture2D(t3, n3);
          };
        }(), this.setTexture = function() {
          var e3 = false;
          return function(t3, n3) {
            e3 || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."), e3 = true), C2.setTexture2D(t3, n3);
          };
        }(), this.setTextureCube = function() {
          var e3 = false;
          return function(t3, n3) {
            t3 && t3.isWebGLRenderTargetCube && (e3 || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."), e3 = true), t3 = t3.texture), t3 && t3.isCubeTexture || Array.isArray(t3.image) && 6 === t3.image.length ? C2.setTextureCube(t3, n3) : C2.setTextureCubeDynamic(t3, n3);
          };
        }(), this.setFramebuffer = function(e3) {
          V2 = e3;
        }, this.getRenderTarget = function() {
          return $2;
        }, this.setRenderTarget = function(e3) {
          $2 = e3, e3 && void 0 === R2.get(e3).__webglFramebuffer && C2.setupRenderTarget(e3);
          var t3 = V2, n3 = false;
          if (e3) {
            var r3 = R2.get(e3).__webglFramebuffer;
            e3.isWebGLRenderTargetCube ? (t3 = r3[e3.activeCubeFace], n3 = true) : t3 = r3, oe2.copy(e3.viewport), se2.copy(e3.scissor), ce2 = e3.scissorTest;
          } else
            oe2.copy(pe2).multiplyScalar(de2), se2.copy(fe2).multiplyScalar(de2), ce2 = me2;
          if (ee2 !== t3 && (y2.bindFramebuffer(y2.FRAMEBUFFER, t3), ee2 = t3), w2.viewport(oe2), w2.scissor(se2), w2.setScissorTest(ce2), n3) {
            var i3 = R2.get(e3.texture);
            y2.framebufferTexture2D(y2.FRAMEBUFFER, y2.COLOR_ATTACHMENT0, y2.TEXTURE_CUBE_MAP_POSITIVE_X + e3.activeCubeFace, i3.__webglTexture, e3.activeMipMapLevel);
          }
        }, this.readRenderTargetPixels = function(e3, t3, n3, r3, i3, a3) {
          if (e3 && e3.isWebGLRenderTarget) {
            var o2 = R2.get(e3).__webglFramebuffer;
            if (o2) {
              var s2 = false;
              o2 !== ee2 && (y2.bindFramebuffer(y2.FRAMEBUFFER, o2), s2 = true);
              try {
                var c3 = e3.texture, u3 = c3.format, l3 = c3.type;
                if (u3 !== Fe && H2.convert(u3) !== y2.getParameter(y2.IMPLEMENTATION_COLOR_READ_FORMAT))
                  return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                if (!(l3 === Ee || H2.convert(l3) === y2.getParameter(y2.IMPLEMENTATION_COLOR_READ_TYPE) || l3 === Ce && (b2.isWebGL2 || x2.get("OES_texture_float") || x2.get("WEBGL_color_buffer_float")) || l3 === Pe && (b2.isWebGL2 ? x2.get("EXT_color_buffer_float") : x2.get("EXT_color_buffer_half_float"))))
                  return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                y2.checkFramebufferStatus(y2.FRAMEBUFFER) === y2.FRAMEBUFFER_COMPLETE ? t3 >= 0 && t3 <= e3.width - r3 && n3 >= 0 && n3 <= e3.height - i3 && y2.readPixels(t3, n3, r3, i3, H2.convert(u3), H2.convert(l3), a3) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
              } finally {
                s2 && y2.bindFramebuffer(y2.FRAMEBUFFER, ee2);
              }
            }
          } else
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        }, this.copyFramebufferToTexture = function(e3, t3, n3) {
          var r3 = t3.image.width, i3 = t3.image.height, a3 = H2.convert(t3.format);
          this.setTexture2D(t3, 0), y2.copyTexImage2D(y2.TEXTURE_2D, n3 || 0, a3, e3.x, e3.y, r3, i3, 0);
        }, this.copyTextureToTexture = function(e3, t3, n3, r3) {
          var i3 = t3.image.width, a3 = t3.image.height, o2 = H2.convert(n3.format), s2 = H2.convert(n3.type);
          this.setTexture2D(n3, 0), t3.isDataTexture ? y2.texSubImage2D(y2.TEXTURE_2D, r3 || 0, e3.x, e3.y, i3, a3, o2, s2, t3.image.data) : y2.texSubImage2D(y2.TEXTURE_2D, r3 || 0, e3.x, e3.y, o2, s2, t3.image);
        };
      }
      function si(e2, t2) {
        this.name = "", this.color = new rn(e2), this.density = void 0 !== t2 ? t2 : 25e-5;
      }
      function ci(e2, t2, n2) {
        this.name = "", this.color = new rn(e2), this.near = void 0 !== t2 ? t2 : 1, this.far = void 0 !== n2 ? n2 : 1e3;
      }
      function ui() {
        dn.call(this), this.type = "Scene", this.background = null, this.fog = null, this.overrideMaterial = null, this.autoUpdate = true;
      }
      function li(e2, t2) {
        this.array = e2, this.stride = t2, this.count = void 0 !== e2 ? e2.length / t2 : 0, this.dynamic = false, this.updateRange = { offset: 0, count: -1 }, this.version = 0;
      }
      function hi(e2, t2, n2, r2) {
        this.data = e2, this.itemSize = t2, this.offset = n2, this.normalized = true === r2;
      }
      function di(e2) {
        Bn.call(this), this.type = "SpriteMaterial", this.color = new rn(16777215), this.map = null, this.rotation = 0, this.lights = false, this.transparent = true, this.setValues(e2);
      }
      function pi(e2) {
        if (dn.call(this), this.type = "Sprite", void 0 === qr) {
          qr = new Pn();
          var t2 = new li(new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]), 5);
          qr.setIndex([0, 1, 2, 0, 2, 3]), qr.addAttribute("position", new hi(t2, 3, 0, false)), qr.addAttribute("uv", new hi(t2, 2, 3, false));
        }
        this.geometry = qr, this.material = void 0 !== e2 ? e2 : new di(), this.center = new Ft(0.5, 0.5);
      }
      function fi() {
        dn.call(this), this.type = "LOD", Object.defineProperties(this, { levels: { enumerable: true, value: [] } });
      }
      function mi(e2, t2) {
        if (e2 = e2 || [], this.bones = e2.slice(0), this.boneMatrices = new Float32Array(16 * this.bones.length), void 0 === t2)
          this.calculateInverses();
        else if (this.bones.length === t2.length)
          this.boneInverses = t2.slice(0);
        else {
          console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [];
          for (var n2 = 0, r2 = this.bones.length; n2 < r2; n2++)
            this.boneInverses.push(new Gt());
        }
      }
      function gi() {
        dn.call(this), this.type = "Bone";
      }
      function vi(e2, t2) {
        kn.call(this, e2, t2), this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new Gt(), this.bindMatrixInverse = new Gt();
        var n2 = new mi(this.initBones());
        this.bind(n2, this.matrixWorld), this.normalizeSkinWeights();
      }
      function yi(e2) {
        Bn.call(this), this.type = "LineBasicMaterial", this.color = new rn(16777215), this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.lights = false, this.setValues(e2);
      }
      function xi(e2, t2, n2) {
        1 === n2 && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."), dn.call(this), this.type = "Line", this.geometry = void 0 !== e2 ? e2 : new Pn(), this.material = void 0 !== t2 ? t2 : new yi({ color: 16777215 * Math.random() });
      }
      function bi(e2, t2) {
        xi.call(this, e2, t2), this.type = "LineSegments";
      }
      function wi(e2, t2) {
        xi.call(this, e2, t2), this.type = "LineLoop";
      }
      function _i(e2) {
        Bn.call(this), this.type = "PointsMaterial", this.color = new rn(16777215), this.map = null, this.size = 1, this.sizeAttenuation = true, this.morphTargets = false, this.lights = false, this.setValues(e2);
      }
      function Mi(e2, t2) {
        dn.call(this), this.type = "Points", this.geometry = void 0 !== e2 ? e2 : new Pn(), this.material = void 0 !== t2 ? t2 : new _i({ color: 16777215 * Math.random() });
      }
      function Ei(e2, t2, n2, r2, i3, a2, o2, s2, c3) {
        Wt.call(this, e2, t2, n2, r2, i3, a2, o2, s2, c3), this.generateMipmaps = false;
      }
      function Ti(e2, t2, n2, r2, i3, a2, o2, s2, c3, u2, l2, h2) {
        Wt.call(this, null, a2, o2, s2, c3, u2, r2, i3, l2, h2), this.image = { width: t2, height: n2 }, this.mipmaps = e2, this.flipY = false, this.generateMipmaps = false;
      }
      function Si(e2, t2, n2, r2, i3, a2, o2, s2, c3) {
        Wt.call(this, e2, t2, n2, r2, i3, a2, o2, s2, c3), this.needsUpdate = true;
      }
      function Ai(e2, t2, n2, r2, i3, a2, o2, s2, c3, u2) {
        if ((u2 = void 0 !== u2 ? u2 : ke) !== ke && u2 !== je)
          throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        void 0 === n2 && u2 === ke && (n2 = Ae), void 0 === n2 && u2 === je && (n2 = De), Wt.call(this, null, r2, i3, a2, o2, s2, u2, n2, c3), this.image = { width: e2, height: t2 }, this.magFilter = void 0 !== o2 ? o2 : ye, this.minFilter = void 0 !== s2 ? s2 : ye, this.flipY = false, this.generateMipmaps = false;
      }
      function Li(e2) {
        Pn.call(this), this.type = "WireframeGeometry";
        var t2, n2, r2, i3, a2, o2, s2, c3, u2, l2, h2 = [], d2 = [0, 0], p2 = {}, f2 = ["a", "b", "c"];
        if (e2 && e2.isGeometry) {
          var m3 = e2.faces;
          for (t2 = 0, r2 = m3.length; t2 < r2; t2++) {
            var g2 = m3[t2];
            for (n2 = 0; n2 < 3; n2++)
              s2 = g2[f2[n2]], c3 = g2[f2[(n2 + 1) % 3]], d2[0] = Math.min(s2, c3), d2[1] = Math.max(s2, c3), void 0 === p2[u2 = d2[0] + "," + d2[1]] && (p2[u2] = { index1: d2[0], index2: d2[1] });
          }
          for (u2 in p2)
            o2 = p2[u2], l2 = e2.vertices[o2.index1], h2.push(l2.x, l2.y, l2.z), l2 = e2.vertices[o2.index2], h2.push(l2.x, l2.y, l2.z);
        } else if (e2 && e2.isBufferGeometry) {
          var v2, y2, x2, b2, w2, _2, M2;
          if (l2 = new Ht(), null !== e2.index) {
            for (v2 = e2.attributes.position, y2 = e2.index, 0 === (x2 = e2.groups).length && (x2 = [{ start: 0, count: y2.count, materialIndex: 0 }]), i3 = 0, a2 = x2.length; i3 < a2; ++i3)
              for (t2 = w2 = (b2 = x2[i3]).start, r2 = w2 + b2.count; t2 < r2; t2 += 3)
                for (n2 = 0; n2 < 3; n2++)
                  s2 = y2.getX(t2 + n2), c3 = y2.getX(t2 + (n2 + 1) % 3), d2[0] = Math.min(s2, c3), d2[1] = Math.max(s2, c3), void 0 === p2[u2 = d2[0] + "," + d2[1]] && (p2[u2] = { index1: d2[0], index2: d2[1] });
            for (u2 in p2)
              o2 = p2[u2], l2.fromBufferAttribute(v2, o2.index1), h2.push(l2.x, l2.y, l2.z), l2.fromBufferAttribute(v2, o2.index2), h2.push(l2.x, l2.y, l2.z);
          } else
            for (t2 = 0, r2 = (v2 = e2.attributes.position).count / 3; t2 < r2; t2++)
              for (n2 = 0; n2 < 3; n2++)
                _2 = 3 * t2 + n2, l2.fromBufferAttribute(v2, _2), h2.push(l2.x, l2.y, l2.z), M2 = 3 * t2 + (n2 + 1) % 3, l2.fromBufferAttribute(v2, M2), h2.push(l2.x, l2.y, l2.z);
        }
        this.addAttribute("position", new Sn(h2, 3));
      }
      function Ri(e2, t2, n2) {
        vn.call(this), this.type = "ParametricGeometry", this.parameters = { func: e2, slices: t2, stacks: n2 }, this.fromBufferGeometry(new Ci(e2, t2, n2)), this.mergeVertices();
      }
      function Ci(e2, t2, n2) {
        Pn.call(this), this.type = "ParametricBufferGeometry", this.parameters = { func: e2, slices: t2, stacks: n2 };
        var r2, i3, a2 = [], o2 = [], s2 = [], c3 = [], u2 = new Ht(), l2 = new Ht(), h2 = new Ht(), d2 = new Ht(), p2 = new Ht();
        e2.length < 3 && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
        var f2 = t2 + 1;
        for (r2 = 0; r2 <= n2; r2++) {
          var m3 = r2 / n2;
          for (i3 = 0; i3 <= t2; i3++) {
            var g2 = i3 / t2;
            e2(g2, m3, l2), o2.push(l2.x, l2.y, l2.z), g2 - 1e-5 >= 0 ? (e2(g2 - 1e-5, m3, h2), d2.subVectors(l2, h2)) : (e2(g2 + 1e-5, m3, h2), d2.subVectors(h2, l2)), m3 - 1e-5 >= 0 ? (e2(g2, m3 - 1e-5, h2), p2.subVectors(l2, h2)) : (e2(g2, m3 + 1e-5, h2), p2.subVectors(h2, l2)), u2.crossVectors(d2, p2).normalize(), s2.push(u2.x, u2.y, u2.z), c3.push(g2, m3);
          }
        }
        for (r2 = 0; r2 < n2; r2++)
          for (i3 = 0; i3 < t2; i3++) {
            var v2 = r2 * f2 + i3, y2 = r2 * f2 + i3 + 1, x2 = (r2 + 1) * f2 + i3 + 1, b2 = (r2 + 1) * f2 + i3;
            a2.push(v2, y2, b2), a2.push(y2, x2, b2);
          }
        this.setIndex(a2), this.addAttribute("position", new Sn(o2, 3)), this.addAttribute("normal", new Sn(s2, 3)), this.addAttribute("uv", new Sn(c3, 2));
      }
      function Pi(e2, t2, n2, r2) {
        vn.call(this), this.type = "PolyhedronGeometry", this.parameters = { vertices: e2, indices: t2, radius: n2, detail: r2 }, this.fromBufferGeometry(new Oi(e2, t2, n2, r2)), this.mergeVertices();
      }
      function Oi(e2, t2, n2, r2) {
        Pn.call(this), this.type = "PolyhedronBufferGeometry", this.parameters = { vertices: e2, indices: t2, radius: n2, detail: r2 }, n2 = n2 || 1;
        var i3 = [], a2 = [];
        function o2(e3, t3, n3, r3) {
          var i4, a3, o3 = Math.pow(2, r3), c4 = [];
          for (i4 = 0; i4 <= o3; i4++) {
            c4[i4] = [];
            var u3 = e3.clone().lerp(n3, i4 / o3), l3 = t3.clone().lerp(n3, i4 / o3), h3 = o3 - i4;
            for (a3 = 0; a3 <= h3; a3++)
              c4[i4][a3] = 0 === a3 && i4 === o3 ? u3 : u3.clone().lerp(l3, a3 / h3);
          }
          for (i4 = 0; i4 < o3; i4++)
            for (a3 = 0; a3 < 2 * (o3 - i4) - 1; a3++) {
              var d2 = Math.floor(a3 / 2);
              a3 % 2 == 0 ? (s2(c4[i4][d2 + 1]), s2(c4[i4 + 1][d2]), s2(c4[i4][d2])) : (s2(c4[i4][d2 + 1]), s2(c4[i4 + 1][d2 + 1]), s2(c4[i4 + 1][d2]));
            }
        }
        function s2(e3) {
          i3.push(e3.x, e3.y, e3.z);
        }
        function c3(t3, n3) {
          var r3 = 3 * t3;
          n3.x = e2[r3 + 0], n3.y = e2[r3 + 1], n3.z = e2[r3 + 2];
        }
        function u2(e3, t3, n3, r3) {
          r3 < 0 && 1 === e3.x && (a2[t3] = e3.x - 1), 0 === n3.x && 0 === n3.z && (a2[t3] = r3 / 2 / Math.PI + 0.5);
        }
        function l2(e3) {
          return Math.atan2(e3.z, -e3.x);
        }
        function h2(e3) {
          return Math.atan2(-e3.y, Math.sqrt(e3.x * e3.x + e3.z * e3.z));
        }
        !function(e3) {
          for (var n3 = new Ht(), r3 = new Ht(), i4 = new Ht(), a3 = 0; a3 < t2.length; a3 += 3)
            c3(t2[a3 + 0], n3), c3(t2[a3 + 1], r3), c3(t2[a3 + 2], i4), o2(n3, r3, i4, e3);
        }(r2 = r2 || 0), function(e3) {
          for (var t3 = new Ht(), n3 = 0; n3 < i3.length; n3 += 3)
            t3.x = i3[n3 + 0], t3.y = i3[n3 + 1], t3.z = i3[n3 + 2], t3.normalize().multiplyScalar(e3), i3[n3 + 0] = t3.x, i3[n3 + 1] = t3.y, i3[n3 + 2] = t3.z;
        }(n2), function() {
          for (var e3 = new Ht(), t3 = 0; t3 < i3.length; t3 += 3) {
            e3.x = i3[t3 + 0], e3.y = i3[t3 + 1], e3.z = i3[t3 + 2];
            var n3 = l2(e3) / 2 / Math.PI + 0.5, r3 = h2(e3) / Math.PI + 0.5;
            a2.push(n3, 1 - r3);
          }
          (function() {
            for (var e4 = new Ht(), t4 = new Ht(), n4 = new Ht(), r4 = new Ht(), o3 = new Ft(), s3 = new Ft(), c4 = new Ft(), h3 = 0, d2 = 0; h3 < i3.length; h3 += 9, d2 += 6) {
              e4.set(i3[h3 + 0], i3[h3 + 1], i3[h3 + 2]), t4.set(i3[h3 + 3], i3[h3 + 4], i3[h3 + 5]), n4.set(i3[h3 + 6], i3[h3 + 7], i3[h3 + 8]), o3.set(a2[d2 + 0], a2[d2 + 1]), s3.set(a2[d2 + 2], a2[d2 + 3]), c4.set(a2[d2 + 4], a2[d2 + 5]), r4.copy(e4).add(t4).add(n4).divideScalar(3);
              var p2 = l2(r4);
              u2(o3, d2 + 0, e4, p2), u2(s3, d2 + 2, t4, p2), u2(c4, d2 + 4, n4, p2);
            }
          })(), function() {
            for (var e4 = 0; e4 < a2.length; e4 += 6) {
              var t4 = a2[e4 + 0], n4 = a2[e4 + 2], r4 = a2[e4 + 4], i4 = Math.max(t4, n4, r4), o3 = Math.min(t4, n4, r4);
              i4 > 0.9 && o3 < 0.1 && (t4 < 0.2 && (a2[e4 + 0] += 1), n4 < 0.2 && (a2[e4 + 2] += 1), r4 < 0.2 && (a2[e4 + 4] += 1));
            }
          }();
        }(), this.addAttribute("position", new Sn(i3, 3)), this.addAttribute("normal", new Sn(i3.slice(), 3)), this.addAttribute("uv", new Sn(a2, 2)), 0 === r2 ? this.computeVertexNormals() : this.normalizeNormals();
      }
      function Ni(e2, t2) {
        vn.call(this), this.type = "TetrahedronGeometry", this.parameters = { radius: e2, detail: t2 }, this.fromBufferGeometry(new Ii(e2, t2)), this.mergeVertices();
      }
      function Ii(e2, t2) {
        Oi.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], e2, t2), this.type = "TetrahedronBufferGeometry", this.parameters = { radius: e2, detail: t2 };
      }
      function Di(e2, t2) {
        vn.call(this), this.type = "OctahedronGeometry", this.parameters = { radius: e2, detail: t2 }, this.fromBufferGeometry(new Ui(e2, t2)), this.mergeVertices();
      }
      function Ui(e2, t2) {
        Oi.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], e2, t2), this.type = "OctahedronBufferGeometry", this.parameters = { radius: e2, detail: t2 };
      }
      function Bi(e2, t2) {
        vn.call(this), this.type = "IcosahedronGeometry", this.parameters = { radius: e2, detail: t2 }, this.fromBufferGeometry(new Fi(e2, t2)), this.mergeVertices();
      }
      function Fi(e2, t2) {
        var n2 = (1 + Math.sqrt(5)) / 2, r2 = [-1, n2, 0, 1, n2, 0, -1, -n2, 0, 1, -n2, 0, 0, -1, n2, 0, 1, n2, 0, -1, -n2, 0, 1, -n2, n2, 0, -1, n2, 0, 1, -n2, 0, -1, -n2, 0, 1];
        Oi.call(this, r2, [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], e2, t2), this.type = "IcosahedronBufferGeometry", this.parameters = { radius: e2, detail: t2 };
      }
      function Gi(e2, t2) {
        vn.call(this), this.type = "DodecahedronGeometry", this.parameters = { radius: e2, detail: t2 }, this.fromBufferGeometry(new zi(e2, t2)), this.mergeVertices();
      }
      function zi(e2, t2) {
        var n2 = (1 + Math.sqrt(5)) / 2, r2 = 1 / n2, i3 = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -r2, -n2, 0, -r2, n2, 0, r2, -n2, 0, r2, n2, -r2, -n2, 0, -r2, n2, 0, r2, -n2, 0, r2, n2, 0, -n2, 0, -r2, n2, 0, -r2, -n2, 0, r2, n2, 0, r2];
        Oi.call(this, i3, [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], e2, t2), this.type = "DodecahedronBufferGeometry", this.parameters = { radius: e2, detail: t2 };
      }
      function Hi(e2, t2, n2, r2, i3, a2) {
        vn.call(this), this.type = "TubeGeometry", this.parameters = { path: e2, tubularSegments: t2, radius: n2, radialSegments: r2, closed: i3 }, void 0 !== a2 && console.warn("THREE.TubeGeometry: taper has been removed.");
        var o2 = new ki(e2, t2, n2, r2, i3);
        this.tangents = o2.tangents, this.normals = o2.normals, this.binormals = o2.binormals, this.fromBufferGeometry(o2), this.mergeVertices();
      }
      function ki(e2, t2, n2, r2, i3) {
        Pn.call(this), this.type = "TubeBufferGeometry", this.parameters = { path: e2, tubularSegments: t2, radius: n2, radialSegments: r2, closed: i3 }, t2 = t2 || 64, n2 = n2 || 1, r2 = r2 || 8, i3 = i3 || false;
        var a2 = e2.computeFrenetFrames(t2, i3);
        this.tangents = a2.tangents, this.normals = a2.normals, this.binormals = a2.binormals;
        var o2, s2, c3 = new Ht(), u2 = new Ht(), l2 = new Ft(), h2 = new Ht(), d2 = [], p2 = [], f2 = [], m3 = [];
        function g2(i4) {
          h2 = e2.getPointAt(i4 / t2, h2);
          var o3 = a2.normals[i4], l3 = a2.binormals[i4];
          for (s2 = 0; s2 <= r2; s2++) {
            var f3 = s2 / r2 * Math.PI * 2, m4 = Math.sin(f3), g3 = -Math.cos(f3);
            u2.x = g3 * o3.x + m4 * l3.x, u2.y = g3 * o3.y + m4 * l3.y, u2.z = g3 * o3.z + m4 * l3.z, u2.normalize(), p2.push(u2.x, u2.y, u2.z), c3.x = h2.x + n2 * u2.x, c3.y = h2.y + n2 * u2.y, c3.z = h2.z + n2 * u2.z, d2.push(c3.x, c3.y, c3.z);
          }
        }
        !function() {
          for (o2 = 0; o2 < t2; o2++)
            g2(o2);
          g2(false === i3 ? t2 : 0), function() {
            for (o2 = 0; o2 <= t2; o2++)
              for (s2 = 0; s2 <= r2; s2++)
                l2.x = o2 / t2, l2.y = s2 / r2, f2.push(l2.x, l2.y);
          }(), function() {
            for (s2 = 1; s2 <= t2; s2++)
              for (o2 = 1; o2 <= r2; o2++) {
                var e3 = (r2 + 1) * (s2 - 1) + (o2 - 1), n3 = (r2 + 1) * s2 + (o2 - 1), i4 = (r2 + 1) * s2 + o2, a3 = (r2 + 1) * (s2 - 1) + o2;
                m3.push(e3, n3, a3), m3.push(n3, i4, a3);
              }
          }();
        }(), this.setIndex(m3), this.addAttribute("position", new Sn(d2, 3)), this.addAttribute("normal", new Sn(p2, 3)), this.addAttribute("uv", new Sn(f2, 2));
      }
      function ji(e2, t2, n2, r2, i3, a2, o2) {
        vn.call(this), this.type = "TorusKnotGeometry", this.parameters = { radius: e2, tube: t2, tubularSegments: n2, radialSegments: r2, p: i3, q: a2 }, void 0 !== o2 && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."), this.fromBufferGeometry(new Vi(e2, t2, n2, r2, i3, a2)), this.mergeVertices();
      }
      function Vi(e2, t2, n2, r2, i3, a2) {
        Pn.call(this), this.type = "TorusKnotBufferGeometry", this.parameters = { radius: e2, tube: t2, tubularSegments: n2, radialSegments: r2, p: i3, q: a2 }, e2 = e2 || 1, t2 = t2 || 0.4, n2 = Math.floor(n2) || 64, r2 = Math.floor(r2) || 8, i3 = i3 || 2, a2 = a2 || 3;
        var o2, s2, c3 = [], u2 = [], l2 = [], h2 = [], d2 = new Ht(), p2 = new Ht(), f2 = new Ht(), m3 = new Ht(), g2 = new Ht(), v2 = new Ht(), y2 = new Ht();
        for (o2 = 0; o2 <= n2; ++o2) {
          var x2 = o2 / n2 * i3 * Math.PI * 2;
          for (A2(x2, i3, a2, e2, f2), A2(x2 + 0.01, i3, a2, e2, m3), v2.subVectors(m3, f2), y2.addVectors(m3, f2), g2.crossVectors(v2, y2), y2.crossVectors(g2, v2), g2.normalize(), y2.normalize(), s2 = 0; s2 <= r2; ++s2) {
            var b2 = s2 / r2 * Math.PI * 2, w2 = -t2 * Math.cos(b2), _2 = t2 * Math.sin(b2);
            d2.x = f2.x + (w2 * y2.x + _2 * g2.x), d2.y = f2.y + (w2 * y2.y + _2 * g2.y), d2.z = f2.z + (w2 * y2.z + _2 * g2.z), u2.push(d2.x, d2.y, d2.z), p2.subVectors(d2, f2).normalize(), l2.push(p2.x, p2.y, p2.z), h2.push(o2 / n2), h2.push(s2 / r2);
          }
        }
        for (s2 = 1; s2 <= n2; s2++)
          for (o2 = 1; o2 <= r2; o2++) {
            var M2 = (r2 + 1) * (s2 - 1) + (o2 - 1), E2 = (r2 + 1) * s2 + (o2 - 1), T2 = (r2 + 1) * s2 + o2, S2 = (r2 + 1) * (s2 - 1) + o2;
            c3.push(M2, E2, S2), c3.push(E2, T2, S2);
          }
        function A2(e3, t3, n3, r3, i4) {
          var a3 = Math.cos(e3), o3 = Math.sin(e3), s3 = n3 / t3 * e3, c4 = Math.cos(s3);
          i4.x = r3 * (2 + c4) * 0.5 * a3, i4.y = r3 * (2 + c4) * o3 * 0.5, i4.z = r3 * Math.sin(s3) * 0.5;
        }
        this.setIndex(c3), this.addAttribute("position", new Sn(u2, 3)), this.addAttribute("normal", new Sn(l2, 3)), this.addAttribute("uv", new Sn(h2, 2));
      }
      function Wi(e2, t2, n2, r2, i3) {
        vn.call(this), this.type = "TorusGeometry", this.parameters = { radius: e2, tube: t2, radialSegments: n2, tubularSegments: r2, arc: i3 }, this.fromBufferGeometry(new Xi(e2, t2, n2, r2, i3)), this.mergeVertices();
      }
      function Xi(e2, t2, n2, r2, i3) {
        Pn.call(this), this.type = "TorusBufferGeometry", this.parameters = { radius: e2, tube: t2, radialSegments: n2, tubularSegments: r2, arc: i3 }, e2 = e2 || 1, t2 = t2 || 0.4, n2 = Math.floor(n2) || 8, r2 = Math.floor(r2) || 6, i3 = i3 || 2 * Math.PI;
        var a2, o2, s2 = [], c3 = [], u2 = [], l2 = [], h2 = new Ht(), d2 = new Ht(), p2 = new Ht();
        for (a2 = 0; a2 <= n2; a2++)
          for (o2 = 0; o2 <= r2; o2++) {
            var f2 = o2 / r2 * i3, m3 = a2 / n2 * Math.PI * 2;
            d2.x = (e2 + t2 * Math.cos(m3)) * Math.cos(f2), d2.y = (e2 + t2 * Math.cos(m3)) * Math.sin(f2), d2.z = t2 * Math.sin(m3), c3.push(d2.x, d2.y, d2.z), h2.x = e2 * Math.cos(f2), h2.y = e2 * Math.sin(f2), p2.subVectors(d2, h2).normalize(), u2.push(p2.x, p2.y, p2.z), l2.push(o2 / r2), l2.push(a2 / n2);
          }
        for (a2 = 1; a2 <= n2; a2++)
          for (o2 = 1; o2 <= r2; o2++) {
            var g2 = (r2 + 1) * a2 + o2 - 1, v2 = (r2 + 1) * (a2 - 1) + o2 - 1, y2 = (r2 + 1) * (a2 - 1) + o2, x2 = (r2 + 1) * a2 + o2;
            s2.push(g2, v2, x2), s2.push(v2, y2, x2);
          }
        this.setIndex(s2), this.addAttribute("position", new Sn(c3, 3)), this.addAttribute("normal", new Sn(u2, 3)), this.addAttribute("uv", new Sn(l2, 2));
      }
      Kr.prototype = Object.create(Bn.prototype), Kr.prototype.constructor = Kr, Kr.prototype.isMeshDepthMaterial = true, Kr.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.depthPacking = e2.depthPacking, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.map = e2.map, this.alphaMap = e2.alphaMap, this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this;
      }, Qr.prototype = Object.create(Bn.prototype), Qr.prototype.constructor = Qr, Qr.prototype.isMeshDistanceMaterial = true, Qr.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.referencePosition.copy(e2.referencePosition), this.nearDistance = e2.nearDistance, this.farDistance = e2.farDistance, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.map = e2.map, this.alphaMap = e2.alphaMap, this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this;
      }, ni.prototype = Object.assign(Object.create(dn.prototype), { constructor: ni, isGroup: true }), ri.prototype = Object.assign(Object.create(pn.prototype), { constructor: ri, isPerspectiveCamera: true, copy: function(e2, t2) {
        return pn.prototype.copy.call(this, e2, t2), this.fov = e2.fov, this.zoom = e2.zoom, this.near = e2.near, this.far = e2.far, this.focus = e2.focus, this.aspect = e2.aspect, this.view = null === e2.view ? null : Object.assign({}, e2.view), this.filmGauge = e2.filmGauge, this.filmOffset = e2.filmOffset, this;
      }, setFocalLength: function(e2) {
        var t2 = 0.5 * this.getFilmHeight() / e2;
        this.fov = 2 * Bt.RAD2DEG * Math.atan(t2), this.updateProjectionMatrix();
      }, getFocalLength: function() {
        var e2 = Math.tan(0.5 * Bt.DEG2RAD * this.fov);
        return 0.5 * this.getFilmHeight() / e2;
      }, getEffectiveFOV: function() {
        return 2 * Bt.RAD2DEG * Math.atan(Math.tan(0.5 * Bt.DEG2RAD * this.fov) / this.zoom);
      }, getFilmWidth: function() {
        return this.filmGauge * Math.min(this.aspect, 1);
      }, getFilmHeight: function() {
        return this.filmGauge / Math.max(this.aspect, 1);
      }, setViewOffset: function(e2, t2, n2, r2, i3, a2) {
        this.aspect = e2 / t2, null === this.view && (this.view = { enabled: true, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = true, this.view.fullWidth = e2, this.view.fullHeight = t2, this.view.offsetX = n2, this.view.offsetY = r2, this.view.width = i3, this.view.height = a2, this.updateProjectionMatrix();
      }, clearViewOffset: function() {
        null !== this.view && (this.view.enabled = false), this.updateProjectionMatrix();
      }, updateProjectionMatrix: function() {
        var e2 = this.near, t2 = e2 * Math.tan(0.5 * Bt.DEG2RAD * this.fov) / this.zoom, n2 = 2 * t2, r2 = this.aspect * n2, i3 = -0.5 * r2, a2 = this.view;
        if (null !== this.view && this.view.enabled) {
          var o2 = a2.fullWidth, s2 = a2.fullHeight;
          i3 += a2.offsetX * r2 / o2, t2 -= a2.offsetY * n2 / s2, r2 *= a2.width / o2, n2 *= a2.height / s2;
        }
        var c3 = this.filmOffset;
        0 !== c3 && (i3 += e2 * c3 / this.getFilmWidth()), this.projectionMatrix.makePerspective(i3, i3 + r2, t2, t2 - n2, e2, this.far);
      }, toJSON: function(e2) {
        var t2 = dn.prototype.toJSON.call(this, e2);
        return t2.object.fov = this.fov, t2.object.zoom = this.zoom, t2.object.near = this.near, t2.object.far = this.far, t2.object.focus = this.focus, t2.object.aspect = this.aspect, null !== this.view && (t2.object.view = Object.assign({}, this.view)), t2.object.filmGauge = this.filmGauge, t2.object.filmOffset = this.filmOffset, t2;
      } }), ii.prototype = Object.assign(Object.create(ri.prototype), { constructor: ii, isArrayCamera: true }), si.prototype.isFogExp2 = true, si.prototype.clone = function() {
        return new si(this.color, this.density);
      }, si.prototype.toJSON = function() {
        return { type: "FogExp2", color: this.color.getHex(), density: this.density };
      }, ci.prototype.isFog = true, ci.prototype.clone = function() {
        return new ci(this.color, this.near, this.far);
      }, ci.prototype.toJSON = function() {
        return { type: "Fog", color: this.color.getHex(), near: this.near, far: this.far };
      }, ui.prototype = Object.assign(Object.create(dn.prototype), { constructor: ui, copy: function(e2, t2) {
        return dn.prototype.copy.call(this, e2, t2), null !== e2.background && (this.background = e2.background.clone()), null !== e2.fog && (this.fog = e2.fog.clone()), null !== e2.overrideMaterial && (this.overrideMaterial = e2.overrideMaterial.clone()), this.autoUpdate = e2.autoUpdate, this.matrixAutoUpdate = e2.matrixAutoUpdate, this;
      }, toJSON: function(e2) {
        var t2 = dn.prototype.toJSON.call(this, e2);
        return null !== this.background && (t2.object.background = this.background.toJSON(e2)), null !== this.fog && (t2.object.fog = this.fog.toJSON()), t2;
      } }), Object.defineProperty(li.prototype, "needsUpdate", { set: function(e2) {
        true === e2 && this.version++;
      } }), Object.assign(li.prototype, { isInterleavedBuffer: true, onUploadCallback: function() {
      }, setArray: function(e2) {
        if (Array.isArray(e2))
          throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        return this.count = void 0 !== e2 ? e2.length / this.stride : 0, this.array = e2, this;
      }, setDynamic: function(e2) {
        return this.dynamic = e2, this;
      }, copy: function(e2) {
        return this.array = new e2.array.constructor(e2.array), this.count = e2.count, this.stride = e2.stride, this.dynamic = e2.dynamic, this;
      }, copyAt: function(e2, t2, n2) {
        e2 *= this.stride, n2 *= t2.stride;
        for (var r2 = 0, i3 = this.stride; r2 < i3; r2++)
          this.array[e2 + r2] = t2.array[n2 + r2];
        return this;
      }, set: function(e2, t2) {
        return void 0 === t2 && (t2 = 0), this.array.set(e2, t2), this;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, onUpload: function(e2) {
        return this.onUploadCallback = e2, this;
      } }), Object.defineProperties(hi.prototype, { count: { get: function() {
        return this.data.count;
      } }, array: { get: function() {
        return this.data.array;
      } } }), Object.assign(hi.prototype, { isInterleavedBufferAttribute: true, setX: function(e2, t2) {
        return this.data.array[e2 * this.data.stride + this.offset] = t2, this;
      }, setY: function(e2, t2) {
        return this.data.array[e2 * this.data.stride + this.offset + 1] = t2, this;
      }, setZ: function(e2, t2) {
        return this.data.array[e2 * this.data.stride + this.offset + 2] = t2, this;
      }, setW: function(e2, t2) {
        return this.data.array[e2 * this.data.stride + this.offset + 3] = t2, this;
      }, getX: function(e2) {
        return this.data.array[e2 * this.data.stride + this.offset];
      }, getY: function(e2) {
        return this.data.array[e2 * this.data.stride + this.offset + 1];
      }, getZ: function(e2) {
        return this.data.array[e2 * this.data.stride + this.offset + 2];
      }, getW: function(e2) {
        return this.data.array[e2 * this.data.stride + this.offset + 3];
      }, setXY: function(e2, t2, n2) {
        return e2 = e2 * this.data.stride + this.offset, this.data.array[e2 + 0] = t2, this.data.array[e2 + 1] = n2, this;
      }, setXYZ: function(e2, t2, n2, r2) {
        return e2 = e2 * this.data.stride + this.offset, this.data.array[e2 + 0] = t2, this.data.array[e2 + 1] = n2, this.data.array[e2 + 2] = r2, this;
      }, setXYZW: function(e2, t2, n2, r2, i3) {
        return e2 = e2 * this.data.stride + this.offset, this.data.array[e2 + 0] = t2, this.data.array[e2 + 1] = n2, this.data.array[e2 + 2] = r2, this.data.array[e2 + 3] = i3, this;
      } }), di.prototype = Object.create(Bn.prototype), di.prototype.constructor = di, di.prototype.isSpriteMaterial = true, di.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.color.copy(e2.color), this.map = e2.map, this.rotation = e2.rotation, this;
      }, pi.prototype = Object.assign(Object.create(dn.prototype), { constructor: pi, isSprite: true, raycast: function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new Ht(), r2 = new Ft(), i3 = new Ft(), a2 = new Gt(), o2 = new Ht(), s2 = new Ht(), c3 = new Ht();
        function u2(e3, t3, n3, o3, s3, c4) {
          r2.subVectors(e3, n3).addScalar(0.5).multiply(o3), void 0 !== s3 ? (i3.x = c4 * r2.x - s3 * r2.y, i3.y = s3 * r2.x + c4 * r2.y) : i3.copy(r2), e3.copy(t3), e3.x += i3.x, e3.y += i3.y, e3.applyMatrix4(a2);
        }
        return function(r3, i4) {
          t2.setFromMatrixScale(this.matrixWorld), a2.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld), n2.setFromMatrixPosition(this.modelViewMatrix);
          var l2, h2, d2 = this.material.rotation;
          0 !== d2 && (h2 = Math.cos(d2), l2 = Math.sin(d2));
          var p2 = this.center;
          u2(o2.set(-0.5, -0.5, 0), n2, p2, t2, l2, h2), u2(s2.set(0.5, -0.5, 0), n2, p2, t2, l2, h2), u2(c3.set(0.5, 0.5, 0), n2, p2, t2, l2, h2);
          var f2 = r3.ray.intersectTriangle(o2, s2, c3, false, e2);
          if (null !== f2 || (u2(s2.set(-0.5, 0.5, 0), n2, p2, t2, l2, h2), null !== (f2 = r3.ray.intersectTriangle(o2, c3, s2, false, e2)))) {
            var m3 = r3.ray.origin.distanceTo(e2);
            m3 < r3.near || m3 > r3.far || i4.push({ distance: m3, point: e2.clone(), face: null, object: this });
          }
        };
      }(), clone: function() {
        return new this.constructor(this.material).copy(this);
      }, copy: function(e2) {
        return dn.prototype.copy.call(this, e2), void 0 !== e2.center && this.center.copy(e2.center), this;
      } }), fi.prototype = Object.assign(Object.create(dn.prototype), { constructor: fi, copy: function(e2) {
        dn.prototype.copy.call(this, e2, false);
        for (var t2 = e2.levels, n2 = 0, r2 = t2.length; n2 < r2; n2++) {
          var i3 = t2[n2];
          this.addLevel(i3.object.clone(), i3.distance);
        }
        return this;
      }, addLevel: function(e2, t2) {
        void 0 === t2 && (t2 = 0), t2 = Math.abs(t2);
        for (var n2 = this.levels, r2 = 0; r2 < n2.length && !(t2 < n2[r2].distance); r2++)
          ;
        n2.splice(r2, 0, { distance: t2, object: e2 }), this.add(e2);
      }, getObjectForDistance: function(e2) {
        for (var t2 = this.levels, n2 = 1, r2 = t2.length; n2 < r2 && !(e2 < t2[n2].distance); n2++)
          ;
        return t2[n2 - 1].object;
      }, raycast: function() {
        var e2 = new Ht();
        return function(t2, n2) {
          e2.setFromMatrixPosition(this.matrixWorld);
          var r2 = t2.ray.origin.distanceTo(e2);
          this.getObjectForDistance(r2).raycast(t2, n2);
        };
      }(), update: function() {
        var e2 = new Ht(), t2 = new Ht();
        return function(n2) {
          var r2 = this.levels;
          if (r2.length > 1) {
            e2.setFromMatrixPosition(n2.matrixWorld), t2.setFromMatrixPosition(this.matrixWorld);
            var i3 = e2.distanceTo(t2);
            r2[0].object.visible = true;
            for (var a2 = 1, o2 = r2.length; a2 < o2 && i3 >= r2[a2].distance; a2++)
              r2[a2 - 1].object.visible = false, r2[a2].object.visible = true;
            for (; a2 < o2; a2++)
              r2[a2].object.visible = false;
          }
        };
      }(), toJSON: function(e2) {
        var t2 = dn.prototype.toJSON.call(this, e2);
        t2.object.levels = [];
        for (var n2 = this.levels, r2 = 0, i3 = n2.length; r2 < i3; r2++) {
          var a2 = n2[r2];
          t2.object.levels.push({ object: a2.object.uuid, distance: a2.distance });
        }
        return t2;
      } }), Object.assign(mi.prototype, { calculateInverses: function() {
        this.boneInverses = [];
        for (var e2 = 0, t2 = this.bones.length; e2 < t2; e2++) {
          var n2 = new Gt();
          this.bones[e2] && n2.getInverse(this.bones[e2].matrixWorld), this.boneInverses.push(n2);
        }
      }, pose: function() {
        var e2, t2, n2;
        for (t2 = 0, n2 = this.bones.length; t2 < n2; t2++)
          (e2 = this.bones[t2]) && e2.matrixWorld.getInverse(this.boneInverses[t2]);
        for (t2 = 0, n2 = this.bones.length; t2 < n2; t2++)
          (e2 = this.bones[t2]) && (e2.parent && e2.parent.isBone ? (e2.matrix.getInverse(e2.parent.matrixWorld), e2.matrix.multiply(e2.matrixWorld)) : e2.matrix.copy(e2.matrixWorld), e2.matrix.decompose(e2.position, e2.quaternion, e2.scale));
      }, update: function() {
        var e2 = new Gt(), t2 = new Gt();
        return function() {
          for (var n2 = this.bones, r2 = this.boneInverses, i3 = this.boneMatrices, a2 = this.boneTexture, o2 = 0, s2 = n2.length; o2 < s2; o2++) {
            var c3 = n2[o2] ? n2[o2].matrixWorld : t2;
            e2.multiplyMatrices(c3, r2[o2]), e2.toArray(i3, 16 * o2);
          }
          void 0 !== a2 && (a2.needsUpdate = true);
        };
      }(), clone: function() {
        return new mi(this.bones, this.boneInverses);
      }, getBoneByName: function(e2) {
        for (var t2 = 0, n2 = this.bones.length; t2 < n2; t2++) {
          var r2 = this.bones[t2];
          if (r2.name === e2)
            return r2;
        }
      } }), gi.prototype = Object.assign(Object.create(dn.prototype), { constructor: gi, isBone: true }), vi.prototype = Object.assign(Object.create(kn.prototype), { constructor: vi, isSkinnedMesh: true, initBones: function() {
        var e2, t2, n2, r2, i3 = [];
        if (this.geometry && void 0 !== this.geometry.bones) {
          for (n2 = 0, r2 = this.geometry.bones.length; n2 < r2; n2++)
            t2 = this.geometry.bones[n2], e2 = new gi(), i3.push(e2), e2.name = t2.name, e2.position.fromArray(t2.pos), e2.quaternion.fromArray(t2.rotq), void 0 !== t2.scl && e2.scale.fromArray(t2.scl);
          for (n2 = 0, r2 = this.geometry.bones.length; n2 < r2; n2++)
            -1 !== (t2 = this.geometry.bones[n2]).parent && null !== t2.parent && void 0 !== i3[t2.parent] ? i3[t2.parent].add(i3[n2]) : this.add(i3[n2]);
        }
        return this.updateMatrixWorld(true), i3;
      }, bind: function(e2, t2) {
        this.skeleton = e2, void 0 === t2 && (this.updateMatrixWorld(true), this.skeleton.calculateInverses(), t2 = this.matrixWorld), this.bindMatrix.copy(t2), this.bindMatrixInverse.getInverse(t2);
      }, pose: function() {
        this.skeleton.pose();
      }, normalizeSkinWeights: function() {
        var e2, t2;
        if (this.geometry && this.geometry.isGeometry)
          for (t2 = 0; t2 < this.geometry.skinWeights.length; t2++) {
            var n2 = this.geometry.skinWeights[t2];
            (e2 = 1 / n2.manhattanLength()) !== 1 / 0 ? n2.multiplyScalar(e2) : n2.set(1, 0, 0, 0);
          }
        else if (this.geometry && this.geometry.isBufferGeometry) {
          var r2 = new Xt(), i3 = this.geometry.attributes.skinWeight;
          for (t2 = 0; t2 < i3.count; t2++)
            r2.x = i3.getX(t2), r2.y = i3.getY(t2), r2.z = i3.getZ(t2), r2.w = i3.getW(t2), (e2 = 1 / r2.manhattanLength()) !== 1 / 0 ? r2.multiplyScalar(e2) : r2.set(1, 0, 0, 0), i3.setXYZW(t2, r2.x, r2.y, r2.z, r2.w);
        }
      }, updateMatrixWorld: function(e2) {
        kn.prototype.updateMatrixWorld.call(this, e2), "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
      }, clone: function() {
        return new this.constructor(this.geometry, this.material).copy(this);
      } }), yi.prototype = Object.create(Bn.prototype), yi.prototype.constructor = yi, yi.prototype.isLineBasicMaterial = true, yi.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.color.copy(e2.color), this.linewidth = e2.linewidth, this.linecap = e2.linecap, this.linejoin = e2.linejoin, this;
      }, xi.prototype = Object.assign(Object.create(dn.prototype), { constructor: xi, isLine: true, computeLineDistances: function() {
        var e2 = new Ht(), t2 = new Ht();
        return function() {
          var n2 = this.geometry;
          if (n2.isBufferGeometry)
            if (null === n2.index) {
              for (var r2 = n2.attributes.position, i3 = [0], a2 = 1, o2 = r2.count; a2 < o2; a2++)
                e2.fromBufferAttribute(r2, a2 - 1), t2.fromBufferAttribute(r2, a2), i3[a2] = i3[a2 - 1], i3[a2] += e2.distanceTo(t2);
              n2.addAttribute("lineDistance", new Sn(i3, 1));
            } else
              console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
          else if (n2.isGeometry) {
            var s2 = n2.vertices;
            (i3 = n2.lineDistances)[0] = 0;
            for (a2 = 1, o2 = s2.length; a2 < o2; a2++)
              i3[a2] = i3[a2 - 1], i3[a2] += s2[a2 - 1].distanceTo(s2[a2]);
          }
          return this;
        };
      }(), raycast: function() {
        var e2 = new Gt(), t2 = new zn(), n2 = new Kt();
        return function(r2, i3) {
          var a2 = r2.linePrecision, o2 = a2 * a2, s2 = this.geometry, c3 = this.matrixWorld;
          if (null === s2.boundingSphere && s2.computeBoundingSphere(), n2.copy(s2.boundingSphere), n2.applyMatrix4(c3), false !== r2.ray.intersectsSphere(n2)) {
            e2.getInverse(c3), t2.copy(r2.ray).applyMatrix4(e2);
            var u2 = new Ht(), l2 = new Ht(), h2 = new Ht(), d2 = new Ht(), p2 = this && this.isLineSegments ? 2 : 1;
            if (s2.isBufferGeometry) {
              var f2 = s2.index, m3 = s2.attributes.position.array;
              if (null !== f2)
                for (var g2 = f2.array, v2 = 0, y2 = g2.length - 1; v2 < y2; v2 += p2) {
                  var x2 = g2[v2], b2 = g2[v2 + 1];
                  if (u2.fromArray(m3, 3 * x2), l2.fromArray(m3, 3 * b2), !(t2.distanceSqToSegment(u2, l2, d2, h2) > o2))
                    d2.applyMatrix4(this.matrixWorld), (M2 = r2.ray.origin.distanceTo(d2)) < r2.near || M2 > r2.far || i3.push({ distance: M2, point: h2.clone().applyMatrix4(this.matrixWorld), index: v2, face: null, faceIndex: null, object: this });
                }
              else
                for (v2 = 0, y2 = m3.length / 3 - 1; v2 < y2; v2 += p2) {
                  if (u2.fromArray(m3, 3 * v2), l2.fromArray(m3, 3 * v2 + 3), !(t2.distanceSqToSegment(u2, l2, d2, h2) > o2))
                    d2.applyMatrix4(this.matrixWorld), (M2 = r2.ray.origin.distanceTo(d2)) < r2.near || M2 > r2.far || i3.push({ distance: M2, point: h2.clone().applyMatrix4(this.matrixWorld), index: v2, face: null, faceIndex: null, object: this });
                }
            } else if (s2.isGeometry) {
              var w2 = s2.vertices, _2 = w2.length;
              for (v2 = 0; v2 < _2 - 1; v2 += p2) {
                var M2;
                if (!(t2.distanceSqToSegment(w2[v2], w2[v2 + 1], d2, h2) > o2))
                  d2.applyMatrix4(this.matrixWorld), (M2 = r2.ray.origin.distanceTo(d2)) < r2.near || M2 > r2.far || i3.push({ distance: M2, point: h2.clone().applyMatrix4(this.matrixWorld), index: v2, face: null, faceIndex: null, object: this });
              }
            }
          }
        };
      }(), clone: function() {
        return new this.constructor(this.geometry, this.material).copy(this);
      } }), bi.prototype = Object.assign(Object.create(xi.prototype), { constructor: bi, isLineSegments: true, computeLineDistances: function() {
        var e2 = new Ht(), t2 = new Ht();
        return function() {
          var n2 = this.geometry;
          if (n2.isBufferGeometry)
            if (null === n2.index) {
              for (var r2 = n2.attributes.position, i3 = [], a2 = 0, o2 = r2.count; a2 < o2; a2 += 2)
                e2.fromBufferAttribute(r2, a2), t2.fromBufferAttribute(r2, a2 + 1), i3[a2] = 0 === a2 ? 0 : i3[a2 - 1], i3[a2 + 1] = i3[a2] + e2.distanceTo(t2);
              n2.addAttribute("lineDistance", new Sn(i3, 1));
            } else
              console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
          else if (n2.isGeometry) {
            var s2 = n2.vertices;
            for (i3 = n2.lineDistances, a2 = 0, o2 = s2.length; a2 < o2; a2 += 2)
              e2.copy(s2[a2]), t2.copy(s2[a2 + 1]), i3[a2] = 0 === a2 ? 0 : i3[a2 - 1], i3[a2 + 1] = i3[a2] + e2.distanceTo(t2);
          }
          return this;
        };
      }() }), wi.prototype = Object.assign(Object.create(xi.prototype), { constructor: wi, isLineLoop: true }), _i.prototype = Object.create(Bn.prototype), _i.prototype.constructor = _i, _i.prototype.isPointsMaterial = true, _i.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.color.copy(e2.color), this.map = e2.map, this.size = e2.size, this.sizeAttenuation = e2.sizeAttenuation, this.morphTargets = e2.morphTargets, this;
      }, Mi.prototype = Object.assign(Object.create(dn.prototype), { constructor: Mi, isPoints: true, raycast: function() {
        var e2 = new Gt(), t2 = new zn(), n2 = new Kt();
        return function(r2, i3) {
          var a2 = this, o2 = this.geometry, s2 = this.matrixWorld, c3 = r2.params.Points.threshold;
          if (null === o2.boundingSphere && o2.computeBoundingSphere(), n2.copy(o2.boundingSphere), n2.applyMatrix4(s2), n2.radius += c3, false !== r2.ray.intersectsSphere(n2)) {
            e2.getInverse(s2), t2.copy(r2.ray).applyMatrix4(e2);
            var u2 = c3 / ((this.scale.x + this.scale.y + this.scale.z) / 3), l2 = u2 * u2, h2 = new Ht(), d2 = new Ht();
            if (o2.isBufferGeometry) {
              var p2 = o2.index, f2 = o2.attributes.position.array;
              if (null !== p2)
                for (var m3 = p2.array, g2 = 0, v2 = m3.length; g2 < v2; g2++) {
                  var y2 = m3[g2];
                  h2.fromArray(f2, 3 * y2), w2(h2, y2);
                }
              else {
                g2 = 0;
                for (var x2 = f2.length / 3; g2 < x2; g2++)
                  h2.fromArray(f2, 3 * g2), w2(h2, g2);
              }
            } else {
              var b2 = o2.vertices;
              for (g2 = 0, x2 = b2.length; g2 < x2; g2++)
                w2(b2[g2], g2);
            }
          }
          function w2(e3, n3) {
            var o3 = t2.distanceSqToPoint(e3);
            if (o3 < l2) {
              t2.closestPointToPoint(e3, d2), d2.applyMatrix4(s2);
              var c4 = r2.ray.origin.distanceTo(d2);
              if (c4 < r2.near || c4 > r2.far)
                return;
              i3.push({ distance: c4, distanceToRay: Math.sqrt(o3), point: d2.clone(), index: n3, face: null, object: a2 });
            }
          }
        };
      }(), clone: function() {
        return new this.constructor(this.geometry, this.material).copy(this);
      } }), Ei.prototype = Object.assign(Object.create(Wt.prototype), { constructor: Ei, isVideoTexture: true, update: function() {
        var e2 = this.image;
        e2.readyState >= e2.HAVE_CURRENT_DATA && (this.needsUpdate = true);
      } }), Ti.prototype = Object.create(Wt.prototype), Ti.prototype.constructor = Ti, Ti.prototype.isCompressedTexture = true, Si.prototype = Object.create(Wt.prototype), Si.prototype.constructor = Si, Si.prototype.isCanvasTexture = true, Ai.prototype = Object.create(Wt.prototype), Ai.prototype.constructor = Ai, Ai.prototype.isDepthTexture = true, Li.prototype = Object.create(Pn.prototype), Li.prototype.constructor = Li, Ri.prototype = Object.create(vn.prototype), Ri.prototype.constructor = Ri, Ci.prototype = Object.create(Pn.prototype), Ci.prototype.constructor = Ci, Pi.prototype = Object.create(vn.prototype), Pi.prototype.constructor = Pi, Oi.prototype = Object.create(Pn.prototype), Oi.prototype.constructor = Oi, Ni.prototype = Object.create(vn.prototype), Ni.prototype.constructor = Ni, Ii.prototype = Object.create(Oi.prototype), Ii.prototype.constructor = Ii, Di.prototype = Object.create(vn.prototype), Di.prototype.constructor = Di, Ui.prototype = Object.create(Oi.prototype), Ui.prototype.constructor = Ui, Bi.prototype = Object.create(vn.prototype), Bi.prototype.constructor = Bi, Fi.prototype = Object.create(Oi.prototype), Fi.prototype.constructor = Fi, Gi.prototype = Object.create(vn.prototype), Gi.prototype.constructor = Gi, zi.prototype = Object.create(Oi.prototype), zi.prototype.constructor = zi, Hi.prototype = Object.create(vn.prototype), Hi.prototype.constructor = Hi, ki.prototype = Object.create(Pn.prototype), ki.prototype.constructor = ki, ji.prototype = Object.create(vn.prototype), ji.prototype.constructor = ji, Vi.prototype = Object.create(Pn.prototype), Vi.prototype.constructor = Vi, Wi.prototype = Object.create(vn.prototype), Wi.prototype.constructor = Wi, Xi.prototype = Object.create(Pn.prototype), Xi.prototype.constructor = Xi;
      var qi = function(e2, t2, n2) {
        n2 = n2 || 2;
        var r2, i3, a2, o2, s2, c3, u2, l2 = t2 && t2.length, h2 = l2 ? t2[0] * n2 : e2.length, d2 = Yi(e2, 0, h2, n2, true), p2 = [];
        if (!d2)
          return p2;
        if (l2 && (d2 = function(e3, t3, n3, r3) {
          var i4, a3, o3, s3, c4, u3 = [];
          for (i4 = 0, a3 = t3.length; i4 < a3; i4++)
            o3 = t3[i4] * r3, s3 = i4 < a3 - 1 ? t3[i4 + 1] * r3 : e3.length, (c4 = Yi(e3, o3, s3, r3, false)) === c4.next && (c4.steiner = true), u3.push(ia(c4));
          for (u3.sort(ta), i4 = 0; i4 < u3.length; i4++)
            na(u3[i4], n3), n3 = Zi(n3, n3.next);
          return n3;
        }(e2, t2, d2, n2)), e2.length > 80 * n2) {
          r2 = a2 = e2[0], i3 = o2 = e2[1];
          for (var f2 = n2; f2 < h2; f2 += n2)
            s2 = e2[f2], c3 = e2[f2 + 1], s2 < r2 && (r2 = s2), c3 < i3 && (i3 = c3), s2 > a2 && (a2 = s2), c3 > o2 && (o2 = c3);
          u2 = 0 !== (u2 = Math.max(a2 - r2, o2 - i3)) ? 1 / u2 : 0;
        }
        return Ji(d2, p2, n2, r2, i3, u2), p2;
      };
      function Yi(e2, t2, n2, r2, i3) {
        var a2, o2;
        if (i3 === function(e3, t3, n3, r3) {
          for (var i4 = 0, a3 = t3, o3 = n3 - r3; a3 < n3; a3 += r3)
            i4 += (e3[o3] - e3[a3]) * (e3[a3 + 1] + e3[o3 + 1]), o3 = a3;
          return i4;
        }(e2, t2, n2, r2) > 0)
          for (a2 = t2; a2 < n2; a2 += r2)
            o2 = da(a2, e2[a2], e2[a2 + 1], o2);
        else
          for (a2 = n2 - r2; a2 >= t2; a2 -= r2)
            o2 = da(a2, e2[a2], e2[a2 + 1], o2);
        return o2 && ca(o2, o2.next) && (pa(o2), o2 = o2.next), o2;
      }
      function Zi(e2, t2) {
        if (!e2)
          return e2;
        t2 || (t2 = e2);
        var n2, r2 = e2;
        do {
          if (n2 = false, r2.steiner || !ca(r2, r2.next) && 0 !== sa(r2.prev, r2, r2.next))
            r2 = r2.next;
          else {
            if (pa(r2), (r2 = t2 = r2.prev) === r2.next)
              break;
            n2 = true;
          }
        } while (n2 || r2 !== t2);
        return t2;
      }
      function Ji(e2, t2, n2, r2, i3, a2, o2) {
        if (e2) {
          !o2 && a2 && function(e3, t3, n3, r3) {
            var i4 = e3;
            do {
              null === i4.z && (i4.z = ra(i4.x, i4.y, t3, n3, r3)), i4.prevZ = i4.prev, i4.nextZ = i4.next, i4 = i4.next;
            } while (i4 !== e3);
            i4.prevZ.nextZ = null, i4.prevZ = null, function(e4) {
              var t4, n4, r4, i5, a3, o3, s3, c4, u3 = 1;
              do {
                for (n4 = e4, e4 = null, a3 = null, o3 = 0; n4; ) {
                  for (o3++, r4 = n4, s3 = 0, t4 = 0; t4 < u3 && (s3++, r4 = r4.nextZ); t4++)
                    ;
                  for (c4 = u3; s3 > 0 || c4 > 0 && r4; )
                    0 !== s3 && (0 === c4 || !r4 || n4.z <= r4.z) ? (i5 = n4, n4 = n4.nextZ, s3--) : (i5 = r4, r4 = r4.nextZ, c4--), a3 ? a3.nextZ = i5 : e4 = i5, i5.prevZ = a3, a3 = i5;
                  n4 = r4;
                }
                a3.nextZ = null, u3 *= 2;
              } while (o3 > 1);
            }(i4);
          }(e2, r2, i3, a2);
          for (var s2, c3, u2 = e2; e2.prev !== e2.next; )
            if (s2 = e2.prev, c3 = e2.next, a2 ? Qi(e2, r2, i3, a2) : Ki(e2))
              t2.push(s2.i / n2), t2.push(e2.i / n2), t2.push(c3.i / n2), pa(e2), e2 = c3.next, u2 = c3.next;
            else if ((e2 = c3) === u2) {
              o2 ? 1 === o2 ? Ji(e2 = $i(e2, t2, n2), t2, n2, r2, i3, a2, 2) : 2 === o2 && ea(e2, t2, n2, r2, i3, a2) : Ji(Zi(e2), t2, n2, r2, i3, a2, 1);
              break;
            }
        }
      }
      function Ki(e2) {
        var t2 = e2.prev, n2 = e2, r2 = e2.next;
        if (sa(t2, n2, r2) >= 0)
          return false;
        for (var i3 = e2.next.next; i3 !== e2.prev; ) {
          if (aa(t2.x, t2.y, n2.x, n2.y, r2.x, r2.y, i3.x, i3.y) && sa(i3.prev, i3, i3.next) >= 0)
            return false;
          i3 = i3.next;
        }
        return true;
      }
      function Qi(e2, t2, n2, r2) {
        var i3 = e2.prev, a2 = e2, o2 = e2.next;
        if (sa(i3, a2, o2) >= 0)
          return false;
        for (var s2 = i3.x < a2.x ? i3.x < o2.x ? i3.x : o2.x : a2.x < o2.x ? a2.x : o2.x, c3 = i3.y < a2.y ? i3.y < o2.y ? i3.y : o2.y : a2.y < o2.y ? a2.y : o2.y, u2 = i3.x > a2.x ? i3.x > o2.x ? i3.x : o2.x : a2.x > o2.x ? a2.x : o2.x, l2 = i3.y > a2.y ? i3.y > o2.y ? i3.y : o2.y : a2.y > o2.y ? a2.y : o2.y, h2 = ra(s2, c3, t2, n2, r2), d2 = ra(u2, l2, t2, n2, r2), p2 = e2.nextZ; p2 && p2.z <= d2; ) {
          if (p2 !== e2.prev && p2 !== e2.next && aa(i3.x, i3.y, a2.x, a2.y, o2.x, o2.y, p2.x, p2.y) && sa(p2.prev, p2, p2.next) >= 0)
            return false;
          p2 = p2.nextZ;
        }
        for (p2 = e2.prevZ; p2 && p2.z >= h2; ) {
          if (p2 !== e2.prev && p2 !== e2.next && aa(i3.x, i3.y, a2.x, a2.y, o2.x, o2.y, p2.x, p2.y) && sa(p2.prev, p2, p2.next) >= 0)
            return false;
          p2 = p2.prevZ;
        }
        return true;
      }
      function $i(e2, t2, n2) {
        var r2 = e2;
        do {
          var i3 = r2.prev, a2 = r2.next.next;
          !ca(i3, a2) && ua(i3, r2, r2.next, a2) && la(i3, a2) && la(a2, i3) && (t2.push(i3.i / n2), t2.push(r2.i / n2), t2.push(a2.i / n2), pa(r2), pa(r2.next), r2 = e2 = a2), r2 = r2.next;
        } while (r2 !== e2);
        return r2;
      }
      function ea(e2, t2, n2, r2, i3, a2) {
        var o2 = e2;
        do {
          for (var s2 = o2.next.next; s2 !== o2.prev; ) {
            if (o2.i !== s2.i && oa(o2, s2)) {
              var c3 = ha(o2, s2);
              return o2 = Zi(o2, o2.next), c3 = Zi(c3, c3.next), Ji(o2, t2, n2, r2, i3, a2), void Ji(c3, t2, n2, r2, i3, a2);
            }
            s2 = s2.next;
          }
          o2 = o2.next;
        } while (o2 !== e2);
      }
      function ta(e2, t2) {
        return e2.x - t2.x;
      }
      function na(e2, t2) {
        if (t2 = function(e3, t3) {
          var n3, r2 = t3, i3 = e3.x, a2 = e3.y, o2 = -1 / 0;
          do {
            if (a2 <= r2.y && a2 >= r2.next.y && r2.next.y !== r2.y) {
              var s2 = r2.x + (a2 - r2.y) * (r2.next.x - r2.x) / (r2.next.y - r2.y);
              if (s2 <= i3 && s2 > o2) {
                if (o2 = s2, s2 === i3) {
                  if (a2 === r2.y)
                    return r2;
                  if (a2 === r2.next.y)
                    return r2.next;
                }
                n3 = r2.x < r2.next.x ? r2 : r2.next;
              }
            }
            r2 = r2.next;
          } while (r2 !== t3);
          if (!n3)
            return null;
          if (i3 === o2)
            return n3.prev;
          var c3, u2 = n3, l2 = n3.x, h2 = n3.y, d2 = 1 / 0;
          r2 = n3.next;
          for (; r2 !== u2; )
            i3 >= r2.x && r2.x >= l2 && i3 !== r2.x && aa(a2 < h2 ? i3 : o2, a2, l2, h2, a2 < h2 ? o2 : i3, a2, r2.x, r2.y) && ((c3 = Math.abs(a2 - r2.y) / (i3 - r2.x)) < d2 || c3 === d2 && r2.x > n3.x) && la(r2, e3) && (n3 = r2, d2 = c3), r2 = r2.next;
          return n3;
        }(e2, t2)) {
          var n2 = ha(t2, e2);
          Zi(n2, n2.next);
        }
      }
      function ra(e2, t2, n2, r2, i3) {
        return (e2 = 1431655765 & ((e2 = 858993459 & ((e2 = 252645135 & ((e2 = 16711935 & ((e2 = 32767 * (e2 - n2) * i3) | e2 << 8)) | e2 << 4)) | e2 << 2)) | e2 << 1)) | (t2 = 1431655765 & ((t2 = 858993459 & ((t2 = 252645135 & ((t2 = 16711935 & ((t2 = 32767 * (t2 - r2) * i3) | t2 << 8)) | t2 << 4)) | t2 << 2)) | t2 << 1)) << 1;
      }
      function ia(e2) {
        var t2 = e2, n2 = e2;
        do {
          t2.x < n2.x && (n2 = t2), t2 = t2.next;
        } while (t2 !== e2);
        return n2;
      }
      function aa(e2, t2, n2, r2, i3, a2, o2, s2) {
        return (i3 - o2) * (t2 - s2) - (e2 - o2) * (a2 - s2) >= 0 && (e2 - o2) * (r2 - s2) - (n2 - o2) * (t2 - s2) >= 0 && (n2 - o2) * (a2 - s2) - (i3 - o2) * (r2 - s2) >= 0;
      }
      function oa(e2, t2) {
        return e2.next.i !== t2.i && e2.prev.i !== t2.i && !function(e3, t3) {
          var n2 = e3;
          do {
            if (n2.i !== e3.i && n2.next.i !== e3.i && n2.i !== t3.i && n2.next.i !== t3.i && ua(n2, n2.next, e3, t3))
              return true;
            n2 = n2.next;
          } while (n2 !== e3);
          return false;
        }(e2, t2) && la(e2, t2) && la(t2, e2) && function(e3, t3) {
          var n2 = e3, r2 = false, i3 = (e3.x + t3.x) / 2, a2 = (e3.y + t3.y) / 2;
          do {
            n2.y > a2 != n2.next.y > a2 && n2.next.y !== n2.y && i3 < (n2.next.x - n2.x) * (a2 - n2.y) / (n2.next.y - n2.y) + n2.x && (r2 = !r2), n2 = n2.next;
          } while (n2 !== e3);
          return r2;
        }(e2, t2);
      }
      function sa(e2, t2, n2) {
        return (t2.y - e2.y) * (n2.x - t2.x) - (t2.x - e2.x) * (n2.y - t2.y);
      }
      function ca(e2, t2) {
        return e2.x === t2.x && e2.y === t2.y;
      }
      function ua(e2, t2, n2, r2) {
        return !!(ca(e2, t2) && ca(n2, r2) || ca(e2, r2) && ca(n2, t2)) || sa(e2, t2, n2) > 0 != sa(e2, t2, r2) > 0 && sa(n2, r2, e2) > 0 != sa(n2, r2, t2) > 0;
      }
      function la(e2, t2) {
        return sa(e2.prev, e2, e2.next) < 0 ? sa(e2, t2, e2.next) >= 0 && sa(e2, e2.prev, t2) >= 0 : sa(e2, t2, e2.prev) < 0 || sa(e2, e2.next, t2) < 0;
      }
      function ha(e2, t2) {
        var n2 = new fa(e2.i, e2.x, e2.y), r2 = new fa(t2.i, t2.x, t2.y), i3 = e2.next, a2 = t2.prev;
        return e2.next = t2, t2.prev = e2, n2.next = i3, i3.prev = n2, r2.next = n2, n2.prev = r2, a2.next = r2, r2.prev = a2, r2;
      }
      function da(e2, t2, n2, r2) {
        var i3 = new fa(e2, t2, n2);
        return r2 ? (i3.next = r2.next, i3.prev = r2, r2.next.prev = i3, r2.next = i3) : (i3.prev = i3, i3.next = i3), i3;
      }
      function pa(e2) {
        e2.next.prev = e2.prev, e2.prev.next = e2.next, e2.prevZ && (e2.prevZ.nextZ = e2.nextZ), e2.nextZ && (e2.nextZ.prevZ = e2.prevZ);
      }
      function fa(e2, t2, n2) {
        this.i = e2, this.x = t2, this.y = n2, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = false;
      }
      var ma = { area: function(e2) {
        for (var t2 = e2.length, n2 = 0, r2 = t2 - 1, i3 = 0; i3 < t2; r2 = i3++)
          n2 += e2[r2].x * e2[i3].y - e2[i3].x * e2[r2].y;
        return 0.5 * n2;
      }, isClockWise: function(e2) {
        return ma.area(e2) < 0;
      }, triangulateShape: function(e2, t2) {
        var n2 = [], r2 = [], i3 = [];
        ga(e2), va(n2, e2);
        var a2 = e2.length;
        t2.forEach(ga);
        for (var o2 = 0; o2 < t2.length; o2++)
          r2.push(a2), a2 += t2[o2].length, va(n2, t2[o2]);
        var s2 = qi(n2, r2);
        for (o2 = 0; o2 < s2.length; o2 += 3)
          i3.push(s2.slice(o2, o2 + 3));
        return i3;
      } };
      function ga(e2) {
        var t2 = e2.length;
        t2 > 2 && e2[t2 - 1].equals(e2[0]) && e2.pop();
      }
      function va(e2, t2) {
        for (var n2 = 0; n2 < t2.length; n2++)
          e2.push(t2[n2].x), e2.push(t2[n2].y);
      }
      function ya(e2, t2) {
        vn.call(this), this.type = "ExtrudeGeometry", this.parameters = { shapes: e2, options: t2 }, this.fromBufferGeometry(new xa(e2, t2)), this.mergeVertices();
      }
      function xa(e2, t2) {
        Pn.call(this), this.type = "ExtrudeBufferGeometry", this.parameters = { shapes: e2, options: t2 };
        for (var n2 = this, r2 = [], i3 = [], a2 = 0, o2 = (e2 = Array.isArray(e2) ? e2 : [e2]).length; a2 < o2; a2++) {
          s2(e2[a2]);
        }
        function s2(e3) {
          var a3 = [], o3 = void 0 !== t2.curveSegments ? t2.curveSegments : 12, s3 = void 0 !== t2.steps ? t2.steps : 1, c3 = void 0 !== t2.depth ? t2.depth : 100, u2 = void 0 === t2.bevelEnabled || t2.bevelEnabled, l2 = void 0 !== t2.bevelThickness ? t2.bevelThickness : 6, h2 = void 0 !== t2.bevelSize ? t2.bevelSize : l2 - 2, d2 = void 0 !== t2.bevelSegments ? t2.bevelSegments : 3, p2 = t2.extrudePath, f2 = void 0 !== t2.UVGenerator ? t2.UVGenerator : ba;
          void 0 !== t2.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), c3 = t2.amount);
          var m3, g2, v2, y2, x2, b2, w2, _2, M2 = false;
          p2 && (m3 = p2.getSpacedPoints(s3), M2 = true, u2 = false, g2 = p2.computeFrenetFrames(s3, false), v2 = new Ht(), y2 = new Ht(), x2 = new Ht()), u2 || (d2 = 0, l2 = 0, h2 = 0);
          var E2 = e3.extractPoints(o3), T2 = E2.shape, S2 = E2.holes;
          if (!ma.isClockWise(T2))
            for (T2 = T2.reverse(), w2 = 0, _2 = S2.length; w2 < _2; w2++)
              b2 = S2[w2], ma.isClockWise(b2) && (S2[w2] = b2.reverse());
          var A2 = ma.triangulateShape(T2, S2), L2 = T2;
          for (w2 = 0, _2 = S2.length; w2 < _2; w2++)
            b2 = S2[w2], T2 = T2.concat(b2);
          function R2(e4, t3, n3) {
            return t3 || console.error("THREE.ExtrudeGeometry: vec does not exist"), t3.clone().multiplyScalar(n3).add(e4);
          }
          var C2, P2, O2, N2, I2, D2, U2 = T2.length, B2 = A2.length;
          function F2(e4, t3, n3) {
            var r3, i4, a4, o4 = e4.x - t3.x, s4 = e4.y - t3.y, c4 = n3.x - e4.x, u3 = n3.y - e4.y, l3 = o4 * o4 + s4 * s4, h3 = o4 * u3 - s4 * c4;
            if (Math.abs(h3) > Number.EPSILON) {
              var d3 = Math.sqrt(l3), p3 = Math.sqrt(c4 * c4 + u3 * u3), f3 = t3.x - s4 / d3, m4 = t3.y + o4 / d3, g3 = ((n3.x - u3 / p3 - f3) * u3 - (n3.y + c4 / p3 - m4) * c4) / (o4 * u3 - s4 * c4), v3 = (r3 = f3 + o4 * g3 - e4.x) * r3 + (i4 = m4 + s4 * g3 - e4.y) * i4;
              if (v3 <= 2)
                return new Ft(r3, i4);
              a4 = Math.sqrt(v3 / 2);
            } else {
              var y3 = false;
              o4 > Number.EPSILON ? c4 > Number.EPSILON && (y3 = true) : o4 < -Number.EPSILON ? c4 < -Number.EPSILON && (y3 = true) : Math.sign(s4) === Math.sign(u3) && (y3 = true), y3 ? (r3 = -s4, i4 = o4, a4 = Math.sqrt(l3)) : (r3 = o4, i4 = s4, a4 = Math.sqrt(l3 / 2));
            }
            return new Ft(r3 / a4, i4 / a4);
          }
          for (var G2 = [], z2 = 0, H2 = L2.length, k2 = H2 - 1, j2 = z2 + 1; z2 < H2; z2++, k2++, j2++)
            k2 === H2 && (k2 = 0), j2 === H2 && (j2 = 0), G2[z2] = F2(L2[z2], L2[k2], L2[j2]);
          var V2, W2, X2 = [], q2 = G2.concat();
          for (w2 = 0, _2 = S2.length; w2 < _2; w2++) {
            for (b2 = S2[w2], V2 = [], z2 = 0, k2 = (H2 = b2.length) - 1, j2 = z2 + 1; z2 < H2; z2++, k2++, j2++)
              k2 === H2 && (k2 = 0), j2 === H2 && (j2 = 0), V2[z2] = F2(b2[z2], b2[k2], b2[j2]);
            X2.push(V2), q2 = q2.concat(V2);
          }
          for (C2 = 0; C2 < d2; C2++) {
            for (O2 = C2 / d2, N2 = l2 * Math.cos(O2 * Math.PI / 2), P2 = h2 * Math.sin(O2 * Math.PI / 2), z2 = 0, H2 = L2.length; z2 < H2; z2++)
              Z2((I2 = R2(L2[z2], G2[z2], P2)).x, I2.y, -N2);
            for (w2 = 0, _2 = S2.length; w2 < _2; w2++)
              for (b2 = S2[w2], V2 = X2[w2], z2 = 0, H2 = b2.length; z2 < H2; z2++)
                Z2((I2 = R2(b2[z2], V2[z2], P2)).x, I2.y, -N2);
          }
          for (P2 = h2, z2 = 0; z2 < U2; z2++)
            I2 = u2 ? R2(T2[z2], q2[z2], P2) : T2[z2], M2 ? (y2.copy(g2.normals[0]).multiplyScalar(I2.x), v2.copy(g2.binormals[0]).multiplyScalar(I2.y), x2.copy(m3[0]).add(y2).add(v2), Z2(x2.x, x2.y, x2.z)) : Z2(I2.x, I2.y, 0);
          for (W2 = 1; W2 <= s3; W2++)
            for (z2 = 0; z2 < U2; z2++)
              I2 = u2 ? R2(T2[z2], q2[z2], P2) : T2[z2], M2 ? (y2.copy(g2.normals[W2]).multiplyScalar(I2.x), v2.copy(g2.binormals[W2]).multiplyScalar(I2.y), x2.copy(m3[W2]).add(y2).add(v2), Z2(x2.x, x2.y, x2.z)) : Z2(I2.x, I2.y, c3 / s3 * W2);
          for (C2 = d2 - 1; C2 >= 0; C2--) {
            for (O2 = C2 / d2, N2 = l2 * Math.cos(O2 * Math.PI / 2), P2 = h2 * Math.sin(O2 * Math.PI / 2), z2 = 0, H2 = L2.length; z2 < H2; z2++)
              Z2((I2 = R2(L2[z2], G2[z2], P2)).x, I2.y, c3 + N2);
            for (w2 = 0, _2 = S2.length; w2 < _2; w2++)
              for (b2 = S2[w2], V2 = X2[w2], z2 = 0, H2 = b2.length; z2 < H2; z2++)
                I2 = R2(b2[z2], V2[z2], P2), M2 ? Z2(I2.x, I2.y + m3[s3 - 1].y, m3[s3 - 1].x + N2) : Z2(I2.x, I2.y, c3 + N2);
          }
          function Y2(e4, t3) {
            var n3, r3;
            for (z2 = e4.length; --z2 >= 0; ) {
              n3 = z2, (r3 = z2 - 1) < 0 && (r3 = e4.length - 1);
              var i4 = 0, a4 = s3 + 2 * d2;
              for (i4 = 0; i4 < a4; i4++) {
                var o4 = U2 * i4, c4 = U2 * (i4 + 1);
                K3(t3 + n3 + o4, t3 + r3 + o4, t3 + r3 + c4, t3 + n3 + c4);
              }
            }
          }
          function Z2(e4, t3, n3) {
            a3.push(e4), a3.push(t3), a3.push(n3);
          }
          function J2(e4, t3, i4) {
            Q2(e4), Q2(t3), Q2(i4);
            var a4 = r2.length / 3, o4 = f2.generateTopUV(n2, r2, a4 - 3, a4 - 2, a4 - 1);
            $2(o4[0]), $2(o4[1]), $2(o4[2]);
          }
          function K3(e4, t3, i4, a4) {
            Q2(e4), Q2(t3), Q2(a4), Q2(t3), Q2(i4), Q2(a4);
            var o4 = r2.length / 3, s4 = f2.generateSideWallUV(n2, r2, o4 - 6, o4 - 3, o4 - 2, o4 - 1);
            $2(s4[0]), $2(s4[1]), $2(s4[3]), $2(s4[1]), $2(s4[2]), $2(s4[3]);
          }
          function Q2(e4) {
            r2.push(a3[3 * e4 + 0]), r2.push(a3[3 * e4 + 1]), r2.push(a3[3 * e4 + 2]);
          }
          function $2(e4) {
            i3.push(e4.x), i3.push(e4.y);
          }
          !function() {
            var e4 = r2.length / 3;
            if (u2) {
              var t3 = 0, i4 = U2 * t3;
              for (z2 = 0; z2 < B2; z2++)
                J2((D2 = A2[z2])[2] + i4, D2[1] + i4, D2[0] + i4);
              for (i4 = U2 * (t3 = s3 + 2 * d2), z2 = 0; z2 < B2; z2++)
                J2((D2 = A2[z2])[0] + i4, D2[1] + i4, D2[2] + i4);
            } else {
              for (z2 = 0; z2 < B2; z2++)
                J2((D2 = A2[z2])[2], D2[1], D2[0]);
              for (z2 = 0; z2 < B2; z2++)
                J2((D2 = A2[z2])[0] + U2 * s3, D2[1] + U2 * s3, D2[2] + U2 * s3);
            }
            n2.addGroup(e4, r2.length / 3 - e4, 0);
          }(), function() {
            var e4 = r2.length / 3, t3 = 0;
            for (Y2(L2, t3), t3 += L2.length, w2 = 0, _2 = S2.length; w2 < _2; w2++)
              Y2(b2 = S2[w2], t3), t3 += b2.length;
            n2.addGroup(e4, r2.length / 3 - e4, 1);
          }();
        }
        this.addAttribute("position", new Sn(r2, 3)), this.addAttribute("uv", new Sn(i3, 2)), this.computeVertexNormals();
      }
      ya.prototype = Object.create(vn.prototype), ya.prototype.constructor = ya, ya.prototype.toJSON = function() {
        var e2 = vn.prototype.toJSON.call(this);
        return wa(this.parameters.shapes, this.parameters.options, e2);
      }, xa.prototype = Object.create(Pn.prototype), xa.prototype.constructor = xa, xa.prototype.toJSON = function() {
        var e2 = Pn.prototype.toJSON.call(this);
        return wa(this.parameters.shapes, this.parameters.options, e2);
      };
      var ba = { generateTopUV: function(e2, t2, n2, r2, i3) {
        var a2 = t2[3 * n2], o2 = t2[3 * n2 + 1], s2 = t2[3 * r2], c3 = t2[3 * r2 + 1], u2 = t2[3 * i3], l2 = t2[3 * i3 + 1];
        return [new Ft(a2, o2), new Ft(s2, c3), new Ft(u2, l2)];
      }, generateSideWallUV: function(e2, t2, n2, r2, i3, a2) {
        var o2 = t2[3 * n2], s2 = t2[3 * n2 + 1], c3 = t2[3 * n2 + 2], u2 = t2[3 * r2], l2 = t2[3 * r2 + 1], h2 = t2[3 * r2 + 2], d2 = t2[3 * i3], p2 = t2[3 * i3 + 1], f2 = t2[3 * i3 + 2], m3 = t2[3 * a2], g2 = t2[3 * a2 + 1], v2 = t2[3 * a2 + 2];
        return Math.abs(s2 - l2) < 0.01 ? [new Ft(o2, 1 - c3), new Ft(u2, 1 - h2), new Ft(d2, 1 - f2), new Ft(m3, 1 - v2)] : [new Ft(s2, 1 - c3), new Ft(l2, 1 - h2), new Ft(p2, 1 - f2), new Ft(g2, 1 - v2)];
      } };
      function wa(e2, t2, n2) {
        if (n2.shapes = [], Array.isArray(e2))
          for (var r2 = 0, i3 = e2.length; r2 < i3; r2++) {
            var a2 = e2[r2];
            n2.shapes.push(a2.uuid);
          }
        else
          n2.shapes.push(e2.uuid);
        return void 0 !== t2.extrudePath && (n2.options.extrudePath = t2.extrudePath.toJSON()), n2;
      }
      function _a(e2, t2) {
        vn.call(this), this.type = "TextGeometry", this.parameters = { text: e2, parameters: t2 }, this.fromBufferGeometry(new Ma(e2, t2)), this.mergeVertices();
      }
      function Ma(e2, t2) {
        var n2 = (t2 = t2 || {}).font;
        if (!n2 || !n2.isFont)
          return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new vn();
        var r2 = n2.generateShapes(e2, t2.size);
        t2.depth = void 0 !== t2.height ? t2.height : 50, void 0 === t2.bevelThickness && (t2.bevelThickness = 10), void 0 === t2.bevelSize && (t2.bevelSize = 8), void 0 === t2.bevelEnabled && (t2.bevelEnabled = false), xa.call(this, r2, t2), this.type = "TextBufferGeometry";
      }
      function Ea(e2, t2, n2, r2, i3, a2, o2) {
        vn.call(this), this.type = "SphereGeometry", this.parameters = { radius: e2, widthSegments: t2, heightSegments: n2, phiStart: r2, phiLength: i3, thetaStart: a2, thetaLength: o2 }, this.fromBufferGeometry(new Ta(e2, t2, n2, r2, i3, a2, o2)), this.mergeVertices();
      }
      function Ta(e2, t2, n2, r2, i3, a2, o2) {
        Pn.call(this), this.type = "SphereBufferGeometry", this.parameters = { radius: e2, widthSegments: t2, heightSegments: n2, phiStart: r2, phiLength: i3, thetaStart: a2, thetaLength: o2 }, e2 = e2 || 1, t2 = Math.max(3, Math.floor(t2) || 8), n2 = Math.max(2, Math.floor(n2) || 6), r2 = void 0 !== r2 ? r2 : 0, i3 = void 0 !== i3 ? i3 : 2 * Math.PI;
        var s2, c3, u2 = (a2 = void 0 !== a2 ? a2 : 0) + (o2 = void 0 !== o2 ? o2 : Math.PI), l2 = 0, h2 = [], d2 = new Ht(), p2 = new Ht(), f2 = [], m3 = [], g2 = [], v2 = [];
        for (c3 = 0; c3 <= n2; c3++) {
          var y2 = [], x2 = c3 / n2;
          for (s2 = 0; s2 <= t2; s2++) {
            var b2 = s2 / t2;
            d2.x = -e2 * Math.cos(r2 + b2 * i3) * Math.sin(a2 + x2 * o2), d2.y = e2 * Math.cos(a2 + x2 * o2), d2.z = e2 * Math.sin(r2 + b2 * i3) * Math.sin(a2 + x2 * o2), m3.push(d2.x, d2.y, d2.z), p2.set(d2.x, d2.y, d2.z).normalize(), g2.push(p2.x, p2.y, p2.z), v2.push(b2, 1 - x2), y2.push(l2++);
          }
          h2.push(y2);
        }
        for (c3 = 0; c3 < n2; c3++)
          for (s2 = 0; s2 < t2; s2++) {
            var w2 = h2[c3][s2 + 1], _2 = h2[c3][s2], M2 = h2[c3 + 1][s2], E2 = h2[c3 + 1][s2 + 1];
            (0 !== c3 || a2 > 0) && f2.push(w2, _2, E2), (c3 !== n2 - 1 || u2 < Math.PI) && f2.push(_2, M2, E2);
          }
        this.setIndex(f2), this.addAttribute("position", new Sn(m3, 3)), this.addAttribute("normal", new Sn(g2, 3)), this.addAttribute("uv", new Sn(v2, 2));
      }
      function Sa(e2, t2, n2, r2, i3, a2) {
        vn.call(this), this.type = "RingGeometry", this.parameters = { innerRadius: e2, outerRadius: t2, thetaSegments: n2, phiSegments: r2, thetaStart: i3, thetaLength: a2 }, this.fromBufferGeometry(new Aa(e2, t2, n2, r2, i3, a2)), this.mergeVertices();
      }
      function Aa(e2, t2, n2, r2, i3, a2) {
        Pn.call(this), this.type = "RingBufferGeometry", this.parameters = { innerRadius: e2, outerRadius: t2, thetaSegments: n2, phiSegments: r2, thetaStart: i3, thetaLength: a2 }, e2 = e2 || 0.5, t2 = t2 || 1, i3 = void 0 !== i3 ? i3 : 0, a2 = void 0 !== a2 ? a2 : 2 * Math.PI, n2 = void 0 !== n2 ? Math.max(3, n2) : 8;
        var o2, s2, c3, u2 = [], l2 = [], h2 = [], d2 = [], p2 = e2, f2 = (t2 - e2) / (r2 = void 0 !== r2 ? Math.max(1, r2) : 1), m3 = new Ht(), g2 = new Ft();
        for (s2 = 0; s2 <= r2; s2++) {
          for (c3 = 0; c3 <= n2; c3++)
            o2 = i3 + c3 / n2 * a2, m3.x = p2 * Math.cos(o2), m3.y = p2 * Math.sin(o2), l2.push(m3.x, m3.y, m3.z), h2.push(0, 0, 1), g2.x = (m3.x / t2 + 1) / 2, g2.y = (m3.y / t2 + 1) / 2, d2.push(g2.x, g2.y);
          p2 += f2;
        }
        for (s2 = 0; s2 < r2; s2++) {
          var v2 = s2 * (n2 + 1);
          for (c3 = 0; c3 < n2; c3++) {
            var y2 = o2 = c3 + v2, x2 = o2 + n2 + 1, b2 = o2 + n2 + 2, w2 = o2 + 1;
            u2.push(y2, x2, w2), u2.push(x2, b2, w2);
          }
        }
        this.setIndex(u2), this.addAttribute("position", new Sn(l2, 3)), this.addAttribute("normal", new Sn(h2, 3)), this.addAttribute("uv", new Sn(d2, 2));
      }
      function La(e2, t2, n2, r2) {
        vn.call(this), this.type = "LatheGeometry", this.parameters = { points: e2, segments: t2, phiStart: n2, phiLength: r2 }, this.fromBufferGeometry(new Ra(e2, t2, n2, r2)), this.mergeVertices();
      }
      function Ra(e2, t2, n2, r2) {
        Pn.call(this), this.type = "LatheBufferGeometry", this.parameters = { points: e2, segments: t2, phiStart: n2, phiLength: r2 }, t2 = Math.floor(t2) || 12, n2 = n2 || 0, r2 = r2 || 2 * Math.PI, r2 = Bt.clamp(r2, 0, 2 * Math.PI);
        var i3, a2, o2, s2 = [], c3 = [], u2 = [], l2 = 1 / t2, h2 = new Ht(), d2 = new Ft();
        for (a2 = 0; a2 <= t2; a2++) {
          var p2 = n2 + a2 * l2 * r2, f2 = Math.sin(p2), m3 = Math.cos(p2);
          for (o2 = 0; o2 <= e2.length - 1; o2++)
            h2.x = e2[o2].x * f2, h2.y = e2[o2].y, h2.z = e2[o2].x * m3, c3.push(h2.x, h2.y, h2.z), d2.x = a2 / t2, d2.y = o2 / (e2.length - 1), u2.push(d2.x, d2.y);
        }
        for (a2 = 0; a2 < t2; a2++)
          for (o2 = 0; o2 < e2.length - 1; o2++) {
            var g2 = i3 = o2 + a2 * e2.length, v2 = i3 + e2.length, y2 = i3 + e2.length + 1, x2 = i3 + 1;
            s2.push(g2, v2, x2), s2.push(v2, y2, x2);
          }
        if (this.setIndex(s2), this.addAttribute("position", new Sn(c3, 3)), this.addAttribute("uv", new Sn(u2, 2)), this.computeVertexNormals(), r2 === 2 * Math.PI) {
          var b2 = this.attributes.normal.array, w2 = new Ht(), _2 = new Ht(), M2 = new Ht();
          for (i3 = t2 * e2.length * 3, a2 = 0, o2 = 0; a2 < e2.length; a2++, o2 += 3)
            w2.x = b2[o2 + 0], w2.y = b2[o2 + 1], w2.z = b2[o2 + 2], _2.x = b2[i3 + o2 + 0], _2.y = b2[i3 + o2 + 1], _2.z = b2[i3 + o2 + 2], M2.addVectors(w2, _2).normalize(), b2[o2 + 0] = b2[i3 + o2 + 0] = M2.x, b2[o2 + 1] = b2[i3 + o2 + 1] = M2.y, b2[o2 + 2] = b2[i3 + o2 + 2] = M2.z;
        }
      }
      function Ca(e2, t2) {
        vn.call(this), this.type = "ShapeGeometry", "object" == typeof t2 && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), t2 = t2.curveSegments), this.parameters = { shapes: e2, curveSegments: t2 }, this.fromBufferGeometry(new Pa(e2, t2)), this.mergeVertices();
      }
      function Pa(e2, t2) {
        Pn.call(this), this.type = "ShapeBufferGeometry", this.parameters = { shapes: e2, curveSegments: t2 }, t2 = t2 || 12;
        var n2 = [], r2 = [], i3 = [], a2 = [], o2 = 0, s2 = 0;
        if (false === Array.isArray(e2))
          u2(e2);
        else
          for (var c3 = 0; c3 < e2.length; c3++)
            u2(e2[c3]), this.addGroup(o2, s2, c3), o2 += s2, s2 = 0;
        function u2(e3) {
          var o3, c4, u3, l2 = r2.length / 3, h2 = e3.extractPoints(t2), d2 = h2.shape, p2 = h2.holes;
          if (false === ma.isClockWise(d2))
            for (d2 = d2.reverse(), o3 = 0, c4 = p2.length; o3 < c4; o3++)
              u3 = p2[o3], true === ma.isClockWise(u3) && (p2[o3] = u3.reverse());
          var f2 = ma.triangulateShape(d2, p2);
          for (o3 = 0, c4 = p2.length; o3 < c4; o3++)
            u3 = p2[o3], d2 = d2.concat(u3);
          for (o3 = 0, c4 = d2.length; o3 < c4; o3++) {
            var m3 = d2[o3];
            r2.push(m3.x, m3.y, 0), i3.push(0, 0, 1), a2.push(m3.x, m3.y);
          }
          for (o3 = 0, c4 = f2.length; o3 < c4; o3++) {
            var g2 = f2[o3], v2 = g2[0] + l2, y2 = g2[1] + l2, x2 = g2[2] + l2;
            n2.push(v2, y2, x2), s2 += 3;
          }
        }
        this.setIndex(n2), this.addAttribute("position", new Sn(r2, 3)), this.addAttribute("normal", new Sn(i3, 3)), this.addAttribute("uv", new Sn(a2, 2));
      }
      function Oa(e2, t2) {
        if (t2.shapes = [], Array.isArray(e2))
          for (var n2 = 0, r2 = e2.length; n2 < r2; n2++) {
            var i3 = e2[n2];
            t2.shapes.push(i3.uuid);
          }
        else
          t2.shapes.push(e2.uuid);
        return t2;
      }
      function Na(e2, t2) {
        Pn.call(this), this.type = "EdgesGeometry", this.parameters = { thresholdAngle: t2 }, t2 = void 0 !== t2 ? t2 : 1;
        var n2, r2, i3, a2, o2 = [], s2 = Math.cos(Bt.DEG2RAD * t2), c3 = [0, 0], u2 = {}, l2 = ["a", "b", "c"];
        e2.isBufferGeometry ? (a2 = new vn()).fromBufferGeometry(e2) : a2 = e2.clone(), a2.mergeVertices(), a2.computeFaceNormals();
        for (var h2 = a2.vertices, d2 = a2.faces, p2 = 0, f2 = d2.length; p2 < f2; p2++)
          for (var m3 = d2[p2], g2 = 0; g2 < 3; g2++)
            n2 = m3[l2[g2]], r2 = m3[l2[(g2 + 1) % 3]], c3[0] = Math.min(n2, r2), c3[1] = Math.max(n2, r2), void 0 === u2[i3 = c3[0] + "," + c3[1]] ? u2[i3] = { index1: c3[0], index2: c3[1], face1: p2, face2: void 0 } : u2[i3].face2 = p2;
        for (i3 in u2) {
          var v2 = u2[i3];
          if (void 0 === v2.face2 || d2[v2.face1].normal.dot(d2[v2.face2].normal) <= s2) {
            var y2 = h2[v2.index1];
            o2.push(y2.x, y2.y, y2.z), y2 = h2[v2.index2], o2.push(y2.x, y2.y, y2.z);
          }
        }
        this.addAttribute("position", new Sn(o2, 3));
      }
      function Ia(e2, t2, n2, r2, i3, a2, o2, s2) {
        vn.call(this), this.type = "CylinderGeometry", this.parameters = { radiusTop: e2, radiusBottom: t2, height: n2, radialSegments: r2, heightSegments: i3, openEnded: a2, thetaStart: o2, thetaLength: s2 }, this.fromBufferGeometry(new Da(e2, t2, n2, r2, i3, a2, o2, s2)), this.mergeVertices();
      }
      function Da(e2, t2, n2, r2, i3, a2, o2, s2) {
        Pn.call(this), this.type = "CylinderBufferGeometry", this.parameters = { radiusTop: e2, radiusBottom: t2, height: n2, radialSegments: r2, heightSegments: i3, openEnded: a2, thetaStart: o2, thetaLength: s2 };
        var c3 = this;
        e2 = void 0 !== e2 ? e2 : 1, t2 = void 0 !== t2 ? t2 : 1, n2 = n2 || 1, r2 = Math.floor(r2) || 8, i3 = Math.floor(i3) || 1, a2 = void 0 !== a2 && a2, o2 = void 0 !== o2 ? o2 : 0, s2 = void 0 !== s2 ? s2 : 2 * Math.PI;
        var u2 = [], l2 = [], h2 = [], d2 = [], p2 = 0, f2 = [], m3 = n2 / 2, g2 = 0;
        function v2(n3) {
          var i4, a3, f3, v3 = new Ft(), y2 = new Ht(), x2 = 0, b2 = true === n3 ? e2 : t2, w2 = true === n3 ? 1 : -1;
          for (a3 = p2, i4 = 1; i4 <= r2; i4++)
            l2.push(0, m3 * w2, 0), h2.push(0, w2, 0), d2.push(0.5, 0.5), p2++;
          for (f3 = p2, i4 = 0; i4 <= r2; i4++) {
            var _2 = i4 / r2 * s2 + o2, M2 = Math.cos(_2), E2 = Math.sin(_2);
            y2.x = b2 * E2, y2.y = m3 * w2, y2.z = b2 * M2, l2.push(y2.x, y2.y, y2.z), h2.push(0, w2, 0), v3.x = 0.5 * M2 + 0.5, v3.y = 0.5 * E2 * w2 + 0.5, d2.push(v3.x, v3.y), p2++;
          }
          for (i4 = 0; i4 < r2; i4++) {
            var T2 = a3 + i4, S2 = f3 + i4;
            true === n3 ? u2.push(S2, S2 + 1, T2) : u2.push(S2 + 1, S2, T2), x2 += 3;
          }
          c3.addGroup(g2, x2, true === n3 ? 1 : 2), g2 += x2;
        }
        !function() {
          var a3, v3, y2 = new Ht(), x2 = new Ht(), b2 = 0, w2 = (t2 - e2) / n2;
          for (v3 = 0; v3 <= i3; v3++) {
            var _2 = [], M2 = v3 / i3, E2 = M2 * (t2 - e2) + e2;
            for (a3 = 0; a3 <= r2; a3++) {
              var T2 = a3 / r2, S2 = T2 * s2 + o2, A2 = Math.sin(S2), L2 = Math.cos(S2);
              x2.x = E2 * A2, x2.y = -M2 * n2 + m3, x2.z = E2 * L2, l2.push(x2.x, x2.y, x2.z), y2.set(A2, w2, L2).normalize(), h2.push(y2.x, y2.y, y2.z), d2.push(T2, 1 - M2), _2.push(p2++);
            }
            f2.push(_2);
          }
          for (a3 = 0; a3 < r2; a3++)
            for (v3 = 0; v3 < i3; v3++) {
              var R2 = f2[v3][a3], C2 = f2[v3 + 1][a3], P2 = f2[v3 + 1][a3 + 1], O2 = f2[v3][a3 + 1];
              u2.push(R2, C2, O2), u2.push(C2, P2, O2), b2 += 6;
            }
          c3.addGroup(g2, b2, 0), g2 += b2;
        }(), false === a2 && (e2 > 0 && v2(true), t2 > 0 && v2(false)), this.setIndex(u2), this.addAttribute("position", new Sn(l2, 3)), this.addAttribute("normal", new Sn(h2, 3)), this.addAttribute("uv", new Sn(d2, 2));
      }
      function Ua(e2, t2, n2, r2, i3, a2, o2) {
        Ia.call(this, 0, e2, t2, n2, r2, i3, a2, o2), this.type = "ConeGeometry", this.parameters = { radius: e2, height: t2, radialSegments: n2, heightSegments: r2, openEnded: i3, thetaStart: a2, thetaLength: o2 };
      }
      function Ba(e2, t2, n2, r2, i3, a2, o2) {
        Da.call(this, 0, e2, t2, n2, r2, i3, a2, o2), this.type = "ConeBufferGeometry", this.parameters = { radius: e2, height: t2, radialSegments: n2, heightSegments: r2, openEnded: i3, thetaStart: a2, thetaLength: o2 };
      }
      function Fa(e2, t2, n2, r2) {
        vn.call(this), this.type = "CircleGeometry", this.parameters = { radius: e2, segments: t2, thetaStart: n2, thetaLength: r2 }, this.fromBufferGeometry(new Ga(e2, t2, n2, r2)), this.mergeVertices();
      }
      function Ga(e2, t2, n2, r2) {
        Pn.call(this), this.type = "CircleBufferGeometry", this.parameters = { radius: e2, segments: t2, thetaStart: n2, thetaLength: r2 }, e2 = e2 || 1, t2 = void 0 !== t2 ? Math.max(3, t2) : 8, n2 = void 0 !== n2 ? n2 : 0, r2 = void 0 !== r2 ? r2 : 2 * Math.PI;
        var i3, a2, o2 = [], s2 = [], c3 = [], u2 = [], l2 = new Ht(), h2 = new Ft();
        for (s2.push(0, 0, 0), c3.push(0, 0, 1), u2.push(0.5, 0.5), a2 = 0, i3 = 3; a2 <= t2; a2++, i3 += 3) {
          var d2 = n2 + a2 / t2 * r2;
          l2.x = e2 * Math.cos(d2), l2.y = e2 * Math.sin(d2), s2.push(l2.x, l2.y, l2.z), c3.push(0, 0, 1), h2.x = (s2[i3] / e2 + 1) / 2, h2.y = (s2[i3 + 1] / e2 + 1) / 2, u2.push(h2.x, h2.y);
        }
        for (i3 = 1; i3 <= t2; i3++)
          o2.push(i3, i3 + 1, 0);
        this.setIndex(o2), this.addAttribute("position", new Sn(s2, 3)), this.addAttribute("normal", new Sn(c3, 3)), this.addAttribute("uv", new Sn(u2, 2));
      }
      _a.prototype = Object.create(vn.prototype), _a.prototype.constructor = _a, Ma.prototype = Object.create(xa.prototype), Ma.prototype.constructor = Ma, Ea.prototype = Object.create(vn.prototype), Ea.prototype.constructor = Ea, Ta.prototype = Object.create(Pn.prototype), Ta.prototype.constructor = Ta, Sa.prototype = Object.create(vn.prototype), Sa.prototype.constructor = Sa, Aa.prototype = Object.create(Pn.prototype), Aa.prototype.constructor = Aa, La.prototype = Object.create(vn.prototype), La.prototype.constructor = La, Ra.prototype = Object.create(Pn.prototype), Ra.prototype.constructor = Ra, Ca.prototype = Object.create(vn.prototype), Ca.prototype.constructor = Ca, Ca.prototype.toJSON = function() {
        var e2 = vn.prototype.toJSON.call(this);
        return Oa(this.parameters.shapes, e2);
      }, Pa.prototype = Object.create(Pn.prototype), Pa.prototype.constructor = Pa, Pa.prototype.toJSON = function() {
        var e2 = Pn.prototype.toJSON.call(this);
        return Oa(this.parameters.shapes, e2);
      }, Na.prototype = Object.create(Pn.prototype), Na.prototype.constructor = Na, Ia.prototype = Object.create(vn.prototype), Ia.prototype.constructor = Ia, Da.prototype = Object.create(Pn.prototype), Da.prototype.constructor = Da, Ua.prototype = Object.create(Ia.prototype), Ua.prototype.constructor = Ua, Ba.prototype = Object.create(Da.prototype), Ba.prototype.constructor = Ba, Fa.prototype = Object.create(vn.prototype), Fa.prototype.constructor = Fa, Ga.prototype = Object.create(Pn.prototype), Ga.prototype.constructor = Ga;
      var za = Object.freeze({ WireframeGeometry: Li, ParametricGeometry: Ri, ParametricBufferGeometry: Ci, TetrahedronGeometry: Ni, TetrahedronBufferGeometry: Ii, OctahedronGeometry: Di, OctahedronBufferGeometry: Ui, IcosahedronGeometry: Bi, IcosahedronBufferGeometry: Fi, DodecahedronGeometry: Gi, DodecahedronBufferGeometry: zi, PolyhedronGeometry: Pi, PolyhedronBufferGeometry: Oi, TubeGeometry: Hi, TubeBufferGeometry: ki, TorusKnotGeometry: ji, TorusKnotBufferGeometry: Vi, TorusGeometry: Wi, TorusBufferGeometry: Xi, TextGeometry: _a, TextBufferGeometry: Ma, SphereGeometry: Ea, SphereBufferGeometry: Ta, RingGeometry: Sa, RingBufferGeometry: Aa, PlaneGeometry: In, PlaneBufferGeometry: Dn, LatheGeometry: La, LatheBufferGeometry: Ra, ShapeGeometry: Ca, ShapeBufferGeometry: Pa, ExtrudeGeometry: ya, ExtrudeBufferGeometry: xa, EdgesGeometry: Na, ConeGeometry: Ua, ConeBufferGeometry: Ba, CylinderGeometry: Ia, CylinderBufferGeometry: Da, CircleGeometry: Fa, CircleBufferGeometry: Ga, BoxGeometry: On, BoxBufferGeometry: Nn });
      function Ha(e2) {
        Bn.call(this), this.type = "ShadowMaterial", this.color = new rn(0), this.transparent = true, this.setValues(e2);
      }
      function ka(e2) {
        Gn.call(this, e2), this.type = "RawShaderMaterial";
      }
      function ja(e2) {
        Bn.call(this), this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new rn(16777215), this.roughness = 0.5, this.metalness = 0.5, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new rn(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dt, this.normalScale = new Ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(e2);
      }
      function Va(e2) {
        ja.call(this), this.defines = { PHYSICAL: "" }, this.type = "MeshPhysicalMaterial", this.reflectivity = 0.5, this.clearCoat = 0, this.clearCoatRoughness = 0, this.setValues(e2);
      }
      function Wa(e2) {
        Bn.call(this), this.type = "MeshPhongMaterial", this.color = new rn(16777215), this.specular = new rn(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new rn(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dt, this.normalScale = new Ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = $, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(e2);
      }
      function Xa(e2) {
        Wa.call(this), this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.gradientMap = null, this.setValues(e2);
      }
      function qa(e2) {
        Bn.call(this), this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dt, this.normalScale = new Ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(e2);
      }
      function Ya(e2) {
        Bn.call(this), this.type = "MeshLambertMaterial", this.color = new rn(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new rn(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = $, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(e2);
      }
      function Za(e2) {
        yi.call(this), this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e2);
      }
      Ha.prototype = Object.create(Bn.prototype), Ha.prototype.constructor = Ha, Ha.prototype.isShadowMaterial = true, Ha.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.color.copy(e2.color), this;
      }, ka.prototype = Object.create(Gn.prototype), ka.prototype.constructor = ka, ka.prototype.isRawShaderMaterial = true, ja.prototype = Object.create(Bn.prototype), ja.prototype.constructor = ja, ja.prototype.isMeshStandardMaterial = true, ja.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.defines = { STANDARD: "" }, this.color.copy(e2.color), this.roughness = e2.roughness, this.metalness = e2.metalness, this.map = e2.map, this.lightMap = e2.lightMap, this.lightMapIntensity = e2.lightMapIntensity, this.aoMap = e2.aoMap, this.aoMapIntensity = e2.aoMapIntensity, this.emissive.copy(e2.emissive), this.emissiveMap = e2.emissiveMap, this.emissiveIntensity = e2.emissiveIntensity, this.bumpMap = e2.bumpMap, this.bumpScale = e2.bumpScale, this.normalMap = e2.normalMap, this.normalMapType = e2.normalMapType, this.normalScale.copy(e2.normalScale), this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this.roughnessMap = e2.roughnessMap, this.metalnessMap = e2.metalnessMap, this.alphaMap = e2.alphaMap, this.envMap = e2.envMap, this.envMapIntensity = e2.envMapIntensity, this.refractionRatio = e2.refractionRatio, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.wireframeLinecap = e2.wireframeLinecap, this.wireframeLinejoin = e2.wireframeLinejoin, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this;
      }, Va.prototype = Object.create(ja.prototype), Va.prototype.constructor = Va, Va.prototype.isMeshPhysicalMaterial = true, Va.prototype.copy = function(e2) {
        return ja.prototype.copy.call(this, e2), this.defines = { PHYSICAL: "" }, this.reflectivity = e2.reflectivity, this.clearCoat = e2.clearCoat, this.clearCoatRoughness = e2.clearCoatRoughness, this;
      }, Wa.prototype = Object.create(Bn.prototype), Wa.prototype.constructor = Wa, Wa.prototype.isMeshPhongMaterial = true, Wa.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.color.copy(e2.color), this.specular.copy(e2.specular), this.shininess = e2.shininess, this.map = e2.map, this.lightMap = e2.lightMap, this.lightMapIntensity = e2.lightMapIntensity, this.aoMap = e2.aoMap, this.aoMapIntensity = e2.aoMapIntensity, this.emissive.copy(e2.emissive), this.emissiveMap = e2.emissiveMap, this.emissiveIntensity = e2.emissiveIntensity, this.bumpMap = e2.bumpMap, this.bumpScale = e2.bumpScale, this.normalMap = e2.normalMap, this.normalMapType = e2.normalMapType, this.normalScale.copy(e2.normalScale), this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this.specularMap = e2.specularMap, this.alphaMap = e2.alphaMap, this.envMap = e2.envMap, this.combine = e2.combine, this.reflectivity = e2.reflectivity, this.refractionRatio = e2.refractionRatio, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.wireframeLinecap = e2.wireframeLinecap, this.wireframeLinejoin = e2.wireframeLinejoin, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this;
      }, Xa.prototype = Object.create(Wa.prototype), Xa.prototype.constructor = Xa, Xa.prototype.isMeshToonMaterial = true, Xa.prototype.copy = function(e2) {
        return Wa.prototype.copy.call(this, e2), this.gradientMap = e2.gradientMap, this;
      }, qa.prototype = Object.create(Bn.prototype), qa.prototype.constructor = qa, qa.prototype.isMeshNormalMaterial = true, qa.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.bumpMap = e2.bumpMap, this.bumpScale = e2.bumpScale, this.normalMap = e2.normalMap, this.normalMapType = e2.normalMapType, this.normalScale.copy(e2.normalScale), this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this;
      }, Ya.prototype = Object.create(Bn.prototype), Ya.prototype.constructor = Ya, Ya.prototype.isMeshLambertMaterial = true, Ya.prototype.copy = function(e2) {
        return Bn.prototype.copy.call(this, e2), this.color.copy(e2.color), this.map = e2.map, this.lightMap = e2.lightMap, this.lightMapIntensity = e2.lightMapIntensity, this.aoMap = e2.aoMap, this.aoMapIntensity = e2.aoMapIntensity, this.emissive.copy(e2.emissive), this.emissiveMap = e2.emissiveMap, this.emissiveIntensity = e2.emissiveIntensity, this.specularMap = e2.specularMap, this.alphaMap = e2.alphaMap, this.envMap = e2.envMap, this.combine = e2.combine, this.reflectivity = e2.reflectivity, this.refractionRatio = e2.refractionRatio, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.wireframeLinecap = e2.wireframeLinecap, this.wireframeLinejoin = e2.wireframeLinejoin, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this;
      }, Za.prototype = Object.create(yi.prototype), Za.prototype.constructor = Za, Za.prototype.isLineDashedMaterial = true, Za.prototype.copy = function(e2) {
        return yi.prototype.copy.call(this, e2), this.scale = e2.scale, this.dashSize = e2.dashSize, this.gapSize = e2.gapSize, this;
      };
      var Ja = Object.freeze({ ShadowMaterial: Ha, SpriteMaterial: di, RawShaderMaterial: ka, ShaderMaterial: Gn, PointsMaterial: _i, MeshPhysicalMaterial: Va, MeshStandardMaterial: ja, MeshPhongMaterial: Wa, MeshToonMaterial: Xa, MeshNormalMaterial: qa, MeshLambertMaterial: Ya, MeshDepthMaterial: Kr, MeshDistanceMaterial: Qr, MeshBasicMaterial: Fn, LineDashedMaterial: Za, LineBasicMaterial: yi, Material: Bn }), Ka = { enabled: false, files: {}, add: function(e2, t2) {
        false !== this.enabled && (this.files[e2] = t2);
      }, get: function(e2) {
        if (false !== this.enabled)
          return this.files[e2];
      }, remove: function(e2) {
        delete this.files[e2];
      }, clear: function() {
        this.files = {};
      } };
      function Qa(e2, t2, n2) {
        var r2 = this, i3 = false, a2 = 0, o2 = 0, s2 = void 0;
        this.onStart = void 0, this.onLoad = e2, this.onProgress = t2, this.onError = n2, this.itemStart = function(e3) {
          o2++, false === i3 && void 0 !== r2.onStart && r2.onStart(e3, a2, o2), i3 = true;
        }, this.itemEnd = function(e3) {
          a2++, void 0 !== r2.onProgress && r2.onProgress(e3, a2, o2), a2 === o2 && (i3 = false, void 0 !== r2.onLoad && r2.onLoad());
        }, this.itemError = function(e3) {
          void 0 !== r2.onError && r2.onError(e3);
        }, this.resolveURL = function(e3) {
          return s2 ? s2(e3) : e3;
        }, this.setURLModifier = function(e3) {
          return s2 = e3, this;
        };
      }
      var $a = new Qa(), eo = {};
      function to(e2) {
        this.manager = void 0 !== e2 ? e2 : $a;
      }
      function no(e2) {
        this.manager = void 0 !== e2 ? e2 : $a, this._parser = null;
      }
      function ro(e2) {
        this.manager = void 0 !== e2 ? e2 : $a, this._parser = null;
      }
      function io(e2) {
        this.manager = void 0 !== e2 ? e2 : $a;
      }
      function ao(e2) {
        this.manager = void 0 !== e2 ? e2 : $a;
      }
      function oo(e2) {
        this.manager = void 0 !== e2 ? e2 : $a;
      }
      function so() {
        this.type = "Curve", this.arcLengthDivisions = 200;
      }
      function co(e2, t2, n2, r2, i3, a2, o2, s2) {
        so.call(this), this.type = "EllipseCurve", this.aX = e2 || 0, this.aY = t2 || 0, this.xRadius = n2 || 1, this.yRadius = r2 || 1, this.aStartAngle = i3 || 0, this.aEndAngle = a2 || 2 * Math.PI, this.aClockwise = o2 || false, this.aRotation = s2 || 0;
      }
      function uo(e2, t2, n2, r2, i3, a2) {
        co.call(this, e2, t2, n2, n2, r2, i3, a2), this.type = "ArcCurve";
      }
      function lo() {
        var e2 = 0, t2 = 0, n2 = 0, r2 = 0;
        function i3(i4, a2, o2, s2) {
          e2 = i4, t2 = o2, n2 = -3 * i4 + 3 * a2 - 2 * o2 - s2, r2 = 2 * i4 - 2 * a2 + o2 + s2;
        }
        return { initCatmullRom: function(e3, t3, n3, r3, a2) {
          i3(t3, n3, a2 * (n3 - e3), a2 * (r3 - t3));
        }, initNonuniformCatmullRom: function(e3, t3, n3, r3, a2, o2, s2) {
          var c3 = (t3 - e3) / a2 - (n3 - e3) / (a2 + o2) + (n3 - t3) / o2, u2 = (n3 - t3) / o2 - (r3 - t3) / (o2 + s2) + (r3 - n3) / s2;
          i3(t3, n3, c3 *= o2, u2 *= o2);
        }, calc: function(i4) {
          var a2 = i4 * i4;
          return e2 + t2 * i4 + n2 * a2 + r2 * (a2 * i4);
        } };
      }
      Object.assign(to.prototype, { load: function(e2, t2, n2, r2) {
        void 0 === e2 && (e2 = ""), void 0 !== this.path && (e2 = this.path + e2), e2 = this.manager.resolveURL(e2);
        var i3 = this, a2 = Ka.get(e2);
        if (void 0 !== a2)
          return i3.manager.itemStart(e2), setTimeout(function() {
            t2 && t2(a2), i3.manager.itemEnd(e2);
          }, 0), a2;
        if (void 0 === eo[e2]) {
          var o2 = e2.match(/^data:(.*?)(;base64)?,(.*)$/);
          if (o2) {
            var s2 = o2[1], c3 = !!o2[2], u2 = o2[3];
            u2 = window.decodeURIComponent(u2), c3 && (u2 = window.atob(u2));
            try {
              var l2, h2 = (this.responseType || "").toLowerCase();
              switch (h2) {
                case "arraybuffer":
                case "blob":
                  for (var d2 = new Uint8Array(u2.length), p2 = 0; p2 < u2.length; p2++)
                    d2[p2] = u2.charCodeAt(p2);
                  l2 = "blob" === h2 ? new Blob([d2.buffer], { type: s2 }) : d2.buffer;
                  break;
                case "document":
                  var f2 = new DOMParser();
                  l2 = f2.parseFromString(u2, s2);
                  break;
                case "json":
                  l2 = JSON.parse(u2);
                  break;
                default:
                  l2 = u2;
              }
              window.setTimeout(function() {
                t2 && t2(l2), i3.manager.itemEnd(e2);
              }, 0);
            } catch (t3) {
              window.setTimeout(function() {
                r2 && r2(t3), i3.manager.itemEnd(e2), i3.manager.itemError(e2);
              }, 0);
            }
          } else {
            eo[e2] = [], eo[e2].push({ onLoad: t2, onProgress: n2, onError: r2 });
            var m3 = new XMLHttpRequest();
            for (var g2 in m3.open("GET", e2, true), m3.addEventListener("load", function(t3) {
              var n3 = this.response;
              Ka.add(e2, n3);
              var r3 = eo[e2];
              if (delete eo[e2], 200 === this.status || 0 === this.status) {
                0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");
                for (var a3 = 0, o3 = r3.length; a3 < o3; a3++) {
                  (s3 = r3[a3]).onLoad && s3.onLoad(n3);
                }
                i3.manager.itemEnd(e2);
              } else {
                for (a3 = 0, o3 = r3.length; a3 < o3; a3++) {
                  var s3;
                  (s3 = r3[a3]).onError && s3.onError(t3);
                }
                i3.manager.itemEnd(e2), i3.manager.itemError(e2);
              }
            }, false), m3.addEventListener("progress", function(t3) {
              for (var n3 = eo[e2], r3 = 0, i4 = n3.length; r3 < i4; r3++) {
                var a3 = n3[r3];
                a3.onProgress && a3.onProgress(t3);
              }
            }, false), m3.addEventListener("error", function(t3) {
              var n3 = eo[e2];
              delete eo[e2];
              for (var r3 = 0, a3 = n3.length; r3 < a3; r3++) {
                var o3 = n3[r3];
                o3.onError && o3.onError(t3);
              }
              i3.manager.itemEnd(e2), i3.manager.itemError(e2);
            }, false), void 0 !== this.responseType && (m3.responseType = this.responseType), void 0 !== this.withCredentials && (m3.withCredentials = this.withCredentials), m3.overrideMimeType && m3.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain"), this.requestHeader)
              m3.setRequestHeader(g2, this.requestHeader[g2]);
            m3.send(null);
          }
          return i3.manager.itemStart(e2), m3;
        }
        eo[e2].push({ onLoad: t2, onProgress: n2, onError: r2 });
      }, setPath: function(e2) {
        return this.path = e2, this;
      }, setResponseType: function(e2) {
        return this.responseType = e2, this;
      }, setWithCredentials: function(e2) {
        return this.withCredentials = e2, this;
      }, setMimeType: function(e2) {
        return this.mimeType = e2, this;
      }, setRequestHeader: function(e2) {
        return this.requestHeader = e2, this;
      } }), Object.assign(no.prototype, { load: function(e2, t2, n2, r2) {
        var i3 = this, a2 = [], o2 = new Ti();
        o2.image = a2;
        var s2 = new to(this.manager);
        function c3(c4) {
          s2.load(e2[c4], function(e3) {
            var n3 = i3._parser(e3, true);
            a2[c4] = { width: n3.width, height: n3.height, format: n3.format, mipmaps: n3.mipmaps }, 6 === (u2 += 1) && (1 === n3.mipmapCount && (o2.minFilter = we), o2.format = n3.format, o2.needsUpdate = true, t2 && t2(o2));
          }, n2, r2);
        }
        if (s2.setPath(this.path), s2.setResponseType("arraybuffer"), Array.isArray(e2))
          for (var u2 = 0, l2 = 0, h2 = e2.length; l2 < h2; ++l2)
            c3(l2);
        else
          s2.load(e2, function(e3) {
            var n3 = i3._parser(e3, true);
            if (n3.isCubemap)
              for (var r3 = n3.mipmaps.length / n3.mipmapCount, s3 = 0; s3 < r3; s3++) {
                a2[s3] = { mipmaps: [] };
                for (var c4 = 0; c4 < n3.mipmapCount; c4++)
                  a2[s3].mipmaps.push(n3.mipmaps[s3 * n3.mipmapCount + c4]), a2[s3].format = n3.format, a2[s3].width = n3.width, a2[s3].height = n3.height;
              }
            else
              o2.image.width = n3.width, o2.image.height = n3.height, o2.mipmaps = n3.mipmaps;
            1 === n3.mipmapCount && (o2.minFilter = we), o2.format = n3.format, o2.needsUpdate = true, t2 && t2(o2);
          }, n2, r2);
        return o2;
      }, setPath: function(e2) {
        return this.path = e2, this;
      } }), Object.assign(ro.prototype, { load: function(e2, t2, n2, r2) {
        var i3 = this, a2 = new Zt(), o2 = new to(this.manager);
        return o2.setResponseType("arraybuffer"), o2.load(e2, function(e3) {
          var n3 = i3._parser(e3);
          n3 && (void 0 !== n3.image ? a2.image = n3.image : void 0 !== n3.data && (a2.image.width = n3.width, a2.image.height = n3.height, a2.image.data = n3.data), a2.wrapS = void 0 !== n3.wrapS ? n3.wrapS : ge, a2.wrapT = void 0 !== n3.wrapT ? n3.wrapT : ge, a2.magFilter = void 0 !== n3.magFilter ? n3.magFilter : we, a2.minFilter = void 0 !== n3.minFilter ? n3.minFilter : Me, a2.anisotropy = void 0 !== n3.anisotropy ? n3.anisotropy : 1, void 0 !== n3.format && (a2.format = n3.format), void 0 !== n3.type && (a2.type = n3.type), void 0 !== n3.mipmaps && (a2.mipmaps = n3.mipmaps), 1 === n3.mipmapCount && (a2.minFilter = we), a2.needsUpdate = true, t2 && t2(a2, n3));
        }, n2, r2), a2;
      } }), Object.assign(io.prototype, { crossOrigin: "anonymous", load: function(e2, t2, n2, r2) {
        void 0 === e2 && (e2 = ""), void 0 !== this.path && (e2 = this.path + e2), e2 = this.manager.resolveURL(e2);
        var i3 = this, a2 = Ka.get(e2);
        if (void 0 !== a2)
          return i3.manager.itemStart(e2), setTimeout(function() {
            t2 && t2(a2), i3.manager.itemEnd(e2);
          }, 0), a2;
        var o2 = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
        function s2() {
          o2.removeEventListener("load", s2, false), o2.removeEventListener("error", c3, false), Ka.add(e2, this), t2 && t2(this), i3.manager.itemEnd(e2);
        }
        function c3(t3) {
          o2.removeEventListener("load", s2, false), o2.removeEventListener("error", c3, false), r2 && r2(t3), i3.manager.itemEnd(e2), i3.manager.itemError(e2);
        }
        return o2.addEventListener("load", s2, false), o2.addEventListener("error", c3, false), "data:" !== e2.substr(0, 5) && void 0 !== this.crossOrigin && (o2.crossOrigin = this.crossOrigin), i3.manager.itemStart(e2), o2.src = e2, o2;
      }, setCrossOrigin: function(e2) {
        return this.crossOrigin = e2, this;
      }, setPath: function(e2) {
        return this.path = e2, this;
      } }), Object.assign(ao.prototype, { crossOrigin: "anonymous", load: function(e2, t2, n2, r2) {
        var i3 = new Vn(), a2 = new io(this.manager);
        a2.setCrossOrigin(this.crossOrigin), a2.setPath(this.path);
        var o2 = 0;
        function s2(n3) {
          a2.load(e2[n3], function(e3) {
            i3.images[n3] = e3, 6 === ++o2 && (i3.needsUpdate = true, t2 && t2(i3));
          }, void 0, r2);
        }
        for (var c3 = 0; c3 < e2.length; ++c3)
          s2(c3);
        return i3;
      }, setCrossOrigin: function(e2) {
        return this.crossOrigin = e2, this;
      }, setPath: function(e2) {
        return this.path = e2, this;
      } }), Object.assign(oo.prototype, { crossOrigin: "anonymous", load: function(e2, t2, n2, r2) {
        var i3 = new Wt(), a2 = new io(this.manager);
        return a2.setCrossOrigin(this.crossOrigin), a2.setPath(this.path), a2.load(e2, function(n3) {
          i3.image = n3;
          var r3 = e2.search(/\.(jpg|jpeg)$/) > 0 || 0 === e2.search(/^data\:image\/jpeg/);
          i3.format = r3 ? Be : Fe, i3.needsUpdate = true, void 0 !== t2 && t2(i3);
        }, n2, r2), i3;
      }, setCrossOrigin: function(e2) {
        return this.crossOrigin = e2, this;
      }, setPath: function(e2) {
        return this.path = e2, this;
      } }), Object.assign(so.prototype, { getPoint: function() {
        return console.warn("THREE.Curve: .getPoint() not implemented."), null;
      }, getPointAt: function(e2, t2) {
        var n2 = this.getUtoTmapping(e2);
        return this.getPoint(n2, t2);
      }, getPoints: function(e2) {
        void 0 === e2 && (e2 = 5);
        for (var t2 = [], n2 = 0; n2 <= e2; n2++)
          t2.push(this.getPoint(n2 / e2));
        return t2;
      }, getSpacedPoints: function(e2) {
        void 0 === e2 && (e2 = 5);
        for (var t2 = [], n2 = 0; n2 <= e2; n2++)
          t2.push(this.getPointAt(n2 / e2));
        return t2;
      }, getLength: function() {
        var e2 = this.getLengths();
        return e2[e2.length - 1];
      }, getLengths: function(e2) {
        if (void 0 === e2 && (e2 = this.arcLengthDivisions), this.cacheArcLengths && this.cacheArcLengths.length === e2 + 1 && !this.needsUpdate)
          return this.cacheArcLengths;
        this.needsUpdate = false;
        var t2, n2, r2 = [], i3 = this.getPoint(0), a2 = 0;
        for (r2.push(0), n2 = 1; n2 <= e2; n2++)
          a2 += (t2 = this.getPoint(n2 / e2)).distanceTo(i3), r2.push(a2), i3 = t2;
        return this.cacheArcLengths = r2, r2;
      }, updateArcLengths: function() {
        this.needsUpdate = true, this.getLengths();
      }, getUtoTmapping: function(e2, t2) {
        var n2, r2 = this.getLengths(), i3 = 0, a2 = r2.length;
        n2 = t2 || e2 * r2[a2 - 1];
        for (var o2, s2 = 0, c3 = a2 - 1; s2 <= c3; )
          if ((o2 = r2[i3 = Math.floor(s2 + (c3 - s2) / 2)] - n2) < 0)
            s2 = i3 + 1;
          else {
            if (!(o2 > 0)) {
              c3 = i3;
              break;
            }
            c3 = i3 - 1;
          }
        if (r2[i3 = c3] === n2)
          return i3 / (a2 - 1);
        var u2 = r2[i3];
        return (i3 + (n2 - u2) / (r2[i3 + 1] - u2)) / (a2 - 1);
      }, getTangent: function(e2) {
        var t2 = e2 - 1e-4, n2 = e2 + 1e-4;
        t2 < 0 && (t2 = 0), n2 > 1 && (n2 = 1);
        var r2 = this.getPoint(t2);
        return this.getPoint(n2).clone().sub(r2).normalize();
      }, getTangentAt: function(e2) {
        var t2 = this.getUtoTmapping(e2);
        return this.getTangent(t2);
      }, computeFrenetFrames: function(e2, t2) {
        var n2, r2, i3, a2 = new Ht(), o2 = [], s2 = [], c3 = [], u2 = new Ht(), l2 = new Gt();
        for (n2 = 0; n2 <= e2; n2++)
          r2 = n2 / e2, o2[n2] = this.getTangentAt(r2), o2[n2].normalize();
        s2[0] = new Ht(), c3[0] = new Ht();
        var h2 = Number.MAX_VALUE, d2 = Math.abs(o2[0].x), p2 = Math.abs(o2[0].y), f2 = Math.abs(o2[0].z);
        for (d2 <= h2 && (h2 = d2, a2.set(1, 0, 0)), p2 <= h2 && (h2 = p2, a2.set(0, 1, 0)), f2 <= h2 && a2.set(0, 0, 1), u2.crossVectors(o2[0], a2).normalize(), s2[0].crossVectors(o2[0], u2), c3[0].crossVectors(o2[0], s2[0]), n2 = 1; n2 <= e2; n2++)
          s2[n2] = s2[n2 - 1].clone(), c3[n2] = c3[n2 - 1].clone(), u2.crossVectors(o2[n2 - 1], o2[n2]), u2.length() > Number.EPSILON && (u2.normalize(), i3 = Math.acos(Bt.clamp(o2[n2 - 1].dot(o2[n2]), -1, 1)), s2[n2].applyMatrix4(l2.makeRotationAxis(u2, i3))), c3[n2].crossVectors(o2[n2], s2[n2]);
        if (true === t2)
          for (i3 = Math.acos(Bt.clamp(s2[0].dot(s2[e2]), -1, 1)), i3 /= e2, o2[0].dot(u2.crossVectors(s2[0], s2[e2])) > 0 && (i3 = -i3), n2 = 1; n2 <= e2; n2++)
            s2[n2].applyMatrix4(l2.makeRotationAxis(o2[n2], i3 * n2)), c3[n2].crossVectors(o2[n2], s2[n2]);
        return { tangents: o2, normals: s2, binormals: c3 };
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.arcLengthDivisions = e2.arcLengthDivisions, this;
      }, toJSON: function() {
        var e2 = { metadata: { version: 4.5, type: "Curve", generator: "Curve.toJSON" } };
        return e2.arcLengthDivisions = this.arcLengthDivisions, e2.type = this.type, e2;
      }, fromJSON: function(e2) {
        return this.arcLengthDivisions = e2.arcLengthDivisions, this;
      } }), co.prototype = Object.create(so.prototype), co.prototype.constructor = co, co.prototype.isEllipseCurve = true, co.prototype.getPoint = function(e2, t2) {
        for (var n2 = t2 || new Ft(), r2 = 2 * Math.PI, i3 = this.aEndAngle - this.aStartAngle, a2 = Math.abs(i3) < Number.EPSILON; i3 < 0; )
          i3 += r2;
        for (; i3 > r2; )
          i3 -= r2;
        i3 < Number.EPSILON && (i3 = a2 ? 0 : r2), true !== this.aClockwise || a2 || (i3 === r2 ? i3 = -r2 : i3 -= r2);
        var o2 = this.aStartAngle + e2 * i3, s2 = this.aX + this.xRadius * Math.cos(o2), c3 = this.aY + this.yRadius * Math.sin(o2);
        if (0 !== this.aRotation) {
          var u2 = Math.cos(this.aRotation), l2 = Math.sin(this.aRotation), h2 = s2 - this.aX, d2 = c3 - this.aY;
          s2 = h2 * u2 - d2 * l2 + this.aX, c3 = h2 * l2 + d2 * u2 + this.aY;
        }
        return n2.set(s2, c3);
      }, co.prototype.copy = function(e2) {
        return so.prototype.copy.call(this, e2), this.aX = e2.aX, this.aY = e2.aY, this.xRadius = e2.xRadius, this.yRadius = e2.yRadius, this.aStartAngle = e2.aStartAngle, this.aEndAngle = e2.aEndAngle, this.aClockwise = e2.aClockwise, this.aRotation = e2.aRotation, this;
      }, co.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        return e2.aX = this.aX, e2.aY = this.aY, e2.xRadius = this.xRadius, e2.yRadius = this.yRadius, e2.aStartAngle = this.aStartAngle, e2.aEndAngle = this.aEndAngle, e2.aClockwise = this.aClockwise, e2.aRotation = this.aRotation, e2;
      }, co.prototype.fromJSON = function(e2) {
        return so.prototype.fromJSON.call(this, e2), this.aX = e2.aX, this.aY = e2.aY, this.xRadius = e2.xRadius, this.yRadius = e2.yRadius, this.aStartAngle = e2.aStartAngle, this.aEndAngle = e2.aEndAngle, this.aClockwise = e2.aClockwise, this.aRotation = e2.aRotation, this;
      }, uo.prototype = Object.create(co.prototype), uo.prototype.constructor = uo, uo.prototype.isArcCurve = true;
      var ho = new Ht(), po = new lo(), fo = new lo(), mo = new lo();
      function go(e2, t2, n2, r2) {
        so.call(this), this.type = "CatmullRomCurve3", this.points = e2 || [], this.closed = t2 || false, this.curveType = n2 || "centripetal", this.tension = r2 || 0.5;
      }
      function vo(e2, t2, n2, r2, i3) {
        var a2 = 0.5 * (r2 - t2), o2 = 0.5 * (i3 - n2), s2 = e2 * e2;
        return (2 * n2 - 2 * r2 + a2 + o2) * (e2 * s2) + (-3 * n2 + 3 * r2 - 2 * a2 - o2) * s2 + a2 * e2 + n2;
      }
      function yo(e2, t2, n2, r2) {
        return function(e3, t3) {
          var n3 = 1 - e3;
          return n3 * n3 * t3;
        }(e2, t2) + function(e3, t3) {
          return 2 * (1 - e3) * e3 * t3;
        }(e2, n2) + function(e3, t3) {
          return e3 * e3 * t3;
        }(e2, r2);
      }
      function xo(e2, t2, n2, r2, i3) {
        return function(e3, t3) {
          var n3 = 1 - e3;
          return n3 * n3 * n3 * t3;
        }(e2, t2) + function(e3, t3) {
          var n3 = 1 - e3;
          return 3 * n3 * n3 * e3 * t3;
        }(e2, n2) + function(e3, t3) {
          return 3 * (1 - e3) * e3 * e3 * t3;
        }(e2, r2) + function(e3, t3) {
          return e3 * e3 * e3 * t3;
        }(e2, i3);
      }
      function bo(e2, t2, n2, r2) {
        so.call(this), this.type = "CubicBezierCurve", this.v0 = e2 || new Ft(), this.v1 = t2 || new Ft(), this.v2 = n2 || new Ft(), this.v3 = r2 || new Ft();
      }
      function wo(e2, t2, n2, r2) {
        so.call(this), this.type = "CubicBezierCurve3", this.v0 = e2 || new Ht(), this.v1 = t2 || new Ht(), this.v2 = n2 || new Ht(), this.v3 = r2 || new Ht();
      }
      function _o(e2, t2) {
        so.call(this), this.type = "LineCurve", this.v1 = e2 || new Ft(), this.v2 = t2 || new Ft();
      }
      function Mo(e2, t2) {
        so.call(this), this.type = "LineCurve3", this.v1 = e2 || new Ht(), this.v2 = t2 || new Ht();
      }
      function Eo(e2, t2, n2) {
        so.call(this), this.type = "QuadraticBezierCurve", this.v0 = e2 || new Ft(), this.v1 = t2 || new Ft(), this.v2 = n2 || new Ft();
      }
      function To(e2, t2, n2) {
        so.call(this), this.type = "QuadraticBezierCurve3", this.v0 = e2 || new Ht(), this.v1 = t2 || new Ht(), this.v2 = n2 || new Ht();
      }
      function So(e2) {
        so.call(this), this.type = "SplineCurve", this.points = e2 || [];
      }
      go.prototype = Object.create(so.prototype), go.prototype.constructor = go, go.prototype.isCatmullRomCurve3 = true, go.prototype.getPoint = function(e2, t2) {
        var n2, r2, i3, a2, o2 = t2 || new Ht(), s2 = this.points, c3 = s2.length, u2 = (c3 - (this.closed ? 0 : 1)) * e2, l2 = Math.floor(u2), h2 = u2 - l2;
        if (this.closed ? l2 += l2 > 0 ? 0 : (Math.floor(Math.abs(l2) / c3) + 1) * c3 : 0 === h2 && l2 === c3 - 1 && (l2 = c3 - 2, h2 = 1), this.closed || l2 > 0 ? n2 = s2[(l2 - 1) % c3] : (ho.subVectors(s2[0], s2[1]).add(s2[0]), n2 = ho), r2 = s2[l2 % c3], i3 = s2[(l2 + 1) % c3], this.closed || l2 + 2 < c3 ? a2 = s2[(l2 + 2) % c3] : (ho.subVectors(s2[c3 - 1], s2[c3 - 2]).add(s2[c3 - 1]), a2 = ho), "centripetal" === this.curveType || "chordal" === this.curveType) {
          var d2 = "chordal" === this.curveType ? 0.5 : 0.25, p2 = Math.pow(n2.distanceToSquared(r2), d2), f2 = Math.pow(r2.distanceToSquared(i3), d2), m3 = Math.pow(i3.distanceToSquared(a2), d2);
          f2 < 1e-4 && (f2 = 1), p2 < 1e-4 && (p2 = f2), m3 < 1e-4 && (m3 = f2), po.initNonuniformCatmullRom(n2.x, r2.x, i3.x, a2.x, p2, f2, m3), fo.initNonuniformCatmullRom(n2.y, r2.y, i3.y, a2.y, p2, f2, m3), mo.initNonuniformCatmullRom(n2.z, r2.z, i3.z, a2.z, p2, f2, m3);
        } else
          "catmullrom" === this.curveType && (po.initCatmullRom(n2.x, r2.x, i3.x, a2.x, this.tension), fo.initCatmullRom(n2.y, r2.y, i3.y, a2.y, this.tension), mo.initCatmullRom(n2.z, r2.z, i3.z, a2.z, this.tension));
        return o2.set(po.calc(h2), fo.calc(h2), mo.calc(h2)), o2;
      }, go.prototype.copy = function(e2) {
        so.prototype.copy.call(this, e2), this.points = [];
        for (var t2 = 0, n2 = e2.points.length; t2 < n2; t2++) {
          var r2 = e2.points[t2];
          this.points.push(r2.clone());
        }
        return this.closed = e2.closed, this.curveType = e2.curveType, this.tension = e2.tension, this;
      }, go.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        e2.points = [];
        for (var t2 = 0, n2 = this.points.length; t2 < n2; t2++) {
          var r2 = this.points[t2];
          e2.points.push(r2.toArray());
        }
        return e2.closed = this.closed, e2.curveType = this.curveType, e2.tension = this.tension, e2;
      }, go.prototype.fromJSON = function(e2) {
        so.prototype.fromJSON.call(this, e2), this.points = [];
        for (var t2 = 0, n2 = e2.points.length; t2 < n2; t2++) {
          var r2 = e2.points[t2];
          this.points.push(new Ht().fromArray(r2));
        }
        return this.closed = e2.closed, this.curveType = e2.curveType, this.tension = e2.tension, this;
      }, bo.prototype = Object.create(so.prototype), bo.prototype.constructor = bo, bo.prototype.isCubicBezierCurve = true, bo.prototype.getPoint = function(e2, t2) {
        var n2 = t2 || new Ft(), r2 = this.v0, i3 = this.v1, a2 = this.v2, o2 = this.v3;
        return n2.set(xo(e2, r2.x, i3.x, a2.x, o2.x), xo(e2, r2.y, i3.y, a2.y, o2.y)), n2;
      }, bo.prototype.copy = function(e2) {
        return so.prototype.copy.call(this, e2), this.v0.copy(e2.v0), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this.v3.copy(e2.v3), this;
      }, bo.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        return e2.v0 = this.v0.toArray(), e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2.v3 = this.v3.toArray(), e2;
      }, bo.prototype.fromJSON = function(e2) {
        return so.prototype.fromJSON.call(this, e2), this.v0.fromArray(e2.v0), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this.v3.fromArray(e2.v3), this;
      }, wo.prototype = Object.create(so.prototype), wo.prototype.constructor = wo, wo.prototype.isCubicBezierCurve3 = true, wo.prototype.getPoint = function(e2, t2) {
        var n2 = t2 || new Ht(), r2 = this.v0, i3 = this.v1, a2 = this.v2, o2 = this.v3;
        return n2.set(xo(e2, r2.x, i3.x, a2.x, o2.x), xo(e2, r2.y, i3.y, a2.y, o2.y), xo(e2, r2.z, i3.z, a2.z, o2.z)), n2;
      }, wo.prototype.copy = function(e2) {
        return so.prototype.copy.call(this, e2), this.v0.copy(e2.v0), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this.v3.copy(e2.v3), this;
      }, wo.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        return e2.v0 = this.v0.toArray(), e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2.v3 = this.v3.toArray(), e2;
      }, wo.prototype.fromJSON = function(e2) {
        return so.prototype.fromJSON.call(this, e2), this.v0.fromArray(e2.v0), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this.v3.fromArray(e2.v3), this;
      }, _o.prototype = Object.create(so.prototype), _o.prototype.constructor = _o, _o.prototype.isLineCurve = true, _o.prototype.getPoint = function(e2, t2) {
        var n2 = t2 || new Ft();
        return 1 === e2 ? n2.copy(this.v2) : (n2.copy(this.v2).sub(this.v1), n2.multiplyScalar(e2).add(this.v1)), n2;
      }, _o.prototype.getPointAt = function(e2, t2) {
        return this.getPoint(e2, t2);
      }, _o.prototype.getTangent = function() {
        return this.v2.clone().sub(this.v1).normalize();
      }, _o.prototype.copy = function(e2) {
        return so.prototype.copy.call(this, e2), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this;
      }, _o.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        return e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2;
      }, _o.prototype.fromJSON = function(e2) {
        return so.prototype.fromJSON.call(this, e2), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this;
      }, Mo.prototype = Object.create(so.prototype), Mo.prototype.constructor = Mo, Mo.prototype.isLineCurve3 = true, Mo.prototype.getPoint = function(e2, t2) {
        var n2 = t2 || new Ht();
        return 1 === e2 ? n2.copy(this.v2) : (n2.copy(this.v2).sub(this.v1), n2.multiplyScalar(e2).add(this.v1)), n2;
      }, Mo.prototype.getPointAt = function(e2, t2) {
        return this.getPoint(e2, t2);
      }, Mo.prototype.copy = function(e2) {
        return so.prototype.copy.call(this, e2), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this;
      }, Mo.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        return e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2;
      }, Mo.prototype.fromJSON = function(e2) {
        return so.prototype.fromJSON.call(this, e2), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this;
      }, Eo.prototype = Object.create(so.prototype), Eo.prototype.constructor = Eo, Eo.prototype.isQuadraticBezierCurve = true, Eo.prototype.getPoint = function(e2, t2) {
        var n2 = t2 || new Ft(), r2 = this.v0, i3 = this.v1, a2 = this.v2;
        return n2.set(yo(e2, r2.x, i3.x, a2.x), yo(e2, r2.y, i3.y, a2.y)), n2;
      }, Eo.prototype.copy = function(e2) {
        return so.prototype.copy.call(this, e2), this.v0.copy(e2.v0), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this;
      }, Eo.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        return e2.v0 = this.v0.toArray(), e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2;
      }, Eo.prototype.fromJSON = function(e2) {
        return so.prototype.fromJSON.call(this, e2), this.v0.fromArray(e2.v0), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this;
      }, To.prototype = Object.create(so.prototype), To.prototype.constructor = To, To.prototype.isQuadraticBezierCurve3 = true, To.prototype.getPoint = function(e2, t2) {
        var n2 = t2 || new Ht(), r2 = this.v0, i3 = this.v1, a2 = this.v2;
        return n2.set(yo(e2, r2.x, i3.x, a2.x), yo(e2, r2.y, i3.y, a2.y), yo(e2, r2.z, i3.z, a2.z)), n2;
      }, To.prototype.copy = function(e2) {
        return so.prototype.copy.call(this, e2), this.v0.copy(e2.v0), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this;
      }, To.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        return e2.v0 = this.v0.toArray(), e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2;
      }, To.prototype.fromJSON = function(e2) {
        return so.prototype.fromJSON.call(this, e2), this.v0.fromArray(e2.v0), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this;
      }, So.prototype = Object.create(so.prototype), So.prototype.constructor = So, So.prototype.isSplineCurve = true, So.prototype.getPoint = function(e2, t2) {
        var n2 = t2 || new Ft(), r2 = this.points, i3 = (r2.length - 1) * e2, a2 = Math.floor(i3), o2 = i3 - a2, s2 = r2[0 === a2 ? a2 : a2 - 1], c3 = r2[a2], u2 = r2[a2 > r2.length - 2 ? r2.length - 1 : a2 + 1], l2 = r2[a2 > r2.length - 3 ? r2.length - 1 : a2 + 2];
        return n2.set(vo(o2, s2.x, c3.x, u2.x, l2.x), vo(o2, s2.y, c3.y, u2.y, l2.y)), n2;
      }, So.prototype.copy = function(e2) {
        so.prototype.copy.call(this, e2), this.points = [];
        for (var t2 = 0, n2 = e2.points.length; t2 < n2; t2++) {
          var r2 = e2.points[t2];
          this.points.push(r2.clone());
        }
        return this;
      }, So.prototype.toJSON = function() {
        var e2 = so.prototype.toJSON.call(this);
        e2.points = [];
        for (var t2 = 0, n2 = this.points.length; t2 < n2; t2++) {
          var r2 = this.points[t2];
          e2.points.push(r2.toArray());
        }
        return e2;
      }, So.prototype.fromJSON = function(e2) {
        so.prototype.fromJSON.call(this, e2), this.points = [];
        for (var t2 = 0, n2 = e2.points.length; t2 < n2; t2++) {
          var r2 = e2.points[t2];
          this.points.push(new Ft().fromArray(r2));
        }
        return this;
      };
      var Ao = Object.freeze({ ArcCurve: uo, CatmullRomCurve3: go, CubicBezierCurve: bo, CubicBezierCurve3: wo, EllipseCurve: co, LineCurve: _o, LineCurve3: Mo, QuadraticBezierCurve: Eo, QuadraticBezierCurve3: To, SplineCurve: So });
      function Lo() {
        so.call(this), this.type = "CurvePath", this.curves = [], this.autoClose = false;
      }
      function Ro(e2) {
        Lo.call(this), this.type = "Path", this.currentPoint = new Ft(), e2 && this.setFromPoints(e2);
      }
      function Co(e2) {
        Ro.call(this, e2), this.uuid = Bt.generateUUID(), this.type = "Shape", this.holes = [];
      }
      function Po(e2, t2) {
        dn.call(this), this.type = "Light", this.color = new rn(e2), this.intensity = void 0 !== t2 ? t2 : 1, this.receiveShadow = void 0;
      }
      function Oo(e2, t2, n2) {
        Po.call(this, e2, n2), this.type = "HemisphereLight", this.castShadow = void 0, this.position.copy(dn.DefaultUp), this.updateMatrix(), this.groundColor = new rn(t2);
      }
      function No(e2) {
        this.camera = e2, this.bias = 0, this.radius = 1, this.mapSize = new Ft(512, 512), this.map = null, this.matrix = new Gt();
      }
      function Io() {
        No.call(this, new ri(50, 1, 0.5, 500));
      }
      function Do(e2, t2, n2, r2, i3, a2) {
        Po.call(this, e2, t2), this.type = "SpotLight", this.position.copy(dn.DefaultUp), this.updateMatrix(), this.target = new dn(), Object.defineProperty(this, "power", { get: function() {
          return this.intensity * Math.PI;
        }, set: function(e3) {
          this.intensity = e3 / Math.PI;
        } }), this.distance = void 0 !== n2 ? n2 : 0, this.angle = void 0 !== r2 ? r2 : Math.PI / 3, this.penumbra = void 0 !== i3 ? i3 : 0, this.decay = void 0 !== a2 ? a2 : 1, this.shadow = new Io();
      }
      function Uo(e2, t2, n2, r2) {
        Po.call(this, e2, t2), this.type = "PointLight", Object.defineProperty(this, "power", { get: function() {
          return 4 * this.intensity * Math.PI;
        }, set: function(e3) {
          this.intensity = e3 / (4 * Math.PI);
        } }), this.distance = void 0 !== n2 ? n2 : 0, this.decay = void 0 !== r2 ? r2 : 1, this.shadow = new No(new ri(90, 1, 0.5, 500));
      }
      function Bo() {
        No.call(this, new fn(-5, 5, 5, -5, 0.5, 500));
      }
      function Fo(e2, t2) {
        Po.call(this, e2, t2), this.type = "DirectionalLight", this.position.copy(dn.DefaultUp), this.updateMatrix(), this.target = new dn(), this.shadow = new Bo();
      }
      function Go(e2, t2) {
        Po.call(this, e2, t2), this.type = "AmbientLight", this.castShadow = void 0;
      }
      function zo(e2, t2, n2, r2) {
        Po.call(this, e2, t2), this.type = "RectAreaLight", this.width = void 0 !== n2 ? n2 : 10, this.height = void 0 !== r2 ? r2 : 10;
      }
      Lo.prototype = Object.assign(Object.create(so.prototype), { constructor: Lo, add: function(e2) {
        this.curves.push(e2);
      }, closePath: function() {
        var e2 = this.curves[0].getPoint(0), t2 = this.curves[this.curves.length - 1].getPoint(1);
        e2.equals(t2) || this.curves.push(new _o(t2, e2));
      }, getPoint: function(e2) {
        for (var t2 = e2 * this.getLength(), n2 = this.getCurveLengths(), r2 = 0; r2 < n2.length; ) {
          if (n2[r2] >= t2) {
            var i3 = n2[r2] - t2, a2 = this.curves[r2], o2 = a2.getLength(), s2 = 0 === o2 ? 0 : 1 - i3 / o2;
            return a2.getPointAt(s2);
          }
          r2++;
        }
        return null;
      }, getLength: function() {
        var e2 = this.getCurveLengths();
        return e2[e2.length - 1];
      }, updateArcLengths: function() {
        this.needsUpdate = true, this.cacheLengths = null, this.getCurveLengths();
      }, getCurveLengths: function() {
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
          return this.cacheLengths;
        for (var e2 = [], t2 = 0, n2 = 0, r2 = this.curves.length; n2 < r2; n2++)
          t2 += this.curves[n2].getLength(), e2.push(t2);
        return this.cacheLengths = e2, e2;
      }, getSpacedPoints: function(e2) {
        void 0 === e2 && (e2 = 40);
        for (var t2 = [], n2 = 0; n2 <= e2; n2++)
          t2.push(this.getPoint(n2 / e2));
        return this.autoClose && t2.push(t2[0]), t2;
      }, getPoints: function(e2) {
        e2 = e2 || 12;
        for (var t2, n2 = [], r2 = 0, i3 = this.curves; r2 < i3.length; r2++)
          for (var a2 = i3[r2], o2 = a2 && a2.isEllipseCurve ? 2 * e2 : a2 && (a2.isLineCurve || a2.isLineCurve3) ? 1 : a2 && a2.isSplineCurve ? e2 * a2.points.length : e2, s2 = a2.getPoints(o2), c3 = 0; c3 < s2.length; c3++) {
            var u2 = s2[c3];
            t2 && t2.equals(u2) || (n2.push(u2), t2 = u2);
          }
        return this.autoClose && n2.length > 1 && !n2[n2.length - 1].equals(n2[0]) && n2.push(n2[0]), n2;
      }, copy: function(e2) {
        so.prototype.copy.call(this, e2), this.curves = [];
        for (var t2 = 0, n2 = e2.curves.length; t2 < n2; t2++) {
          var r2 = e2.curves[t2];
          this.curves.push(r2.clone());
        }
        return this.autoClose = e2.autoClose, this;
      }, toJSON: function() {
        var e2 = so.prototype.toJSON.call(this);
        e2.autoClose = this.autoClose, e2.curves = [];
        for (var t2 = 0, n2 = this.curves.length; t2 < n2; t2++) {
          var r2 = this.curves[t2];
          e2.curves.push(r2.toJSON());
        }
        return e2;
      }, fromJSON: function(e2) {
        so.prototype.fromJSON.call(this, e2), this.autoClose = e2.autoClose, this.curves = [];
        for (var t2 = 0, n2 = e2.curves.length; t2 < n2; t2++) {
          var r2 = e2.curves[t2];
          this.curves.push(new Ao[r2.type]().fromJSON(r2));
        }
        return this;
      } }), Ro.prototype = Object.assign(Object.create(Lo.prototype), { constructor: Ro, setFromPoints: function(e2) {
        this.moveTo(e2[0].x, e2[0].y);
        for (var t2 = 1, n2 = e2.length; t2 < n2; t2++)
          this.lineTo(e2[t2].x, e2[t2].y);
      }, moveTo: function(e2, t2) {
        this.currentPoint.set(e2, t2);
      }, lineTo: function(e2, t2) {
        var n2 = new _o(this.currentPoint.clone(), new Ft(e2, t2));
        this.curves.push(n2), this.currentPoint.set(e2, t2);
      }, quadraticCurveTo: function(e2, t2, n2, r2) {
        var i3 = new Eo(this.currentPoint.clone(), new Ft(e2, t2), new Ft(n2, r2));
        this.curves.push(i3), this.currentPoint.set(n2, r2);
      }, bezierCurveTo: function(e2, t2, n2, r2, i3, a2) {
        var o2 = new bo(this.currentPoint.clone(), new Ft(e2, t2), new Ft(n2, r2), new Ft(i3, a2));
        this.curves.push(o2), this.currentPoint.set(i3, a2);
      }, splineThru: function(e2) {
        var t2 = new So([this.currentPoint.clone()].concat(e2));
        this.curves.push(t2), this.currentPoint.copy(e2[e2.length - 1]);
      }, arc: function(e2, t2, n2, r2, i3, a2) {
        var o2 = this.currentPoint.x, s2 = this.currentPoint.y;
        this.absarc(e2 + o2, t2 + s2, n2, r2, i3, a2);
      }, absarc: function(e2, t2, n2, r2, i3, a2) {
        this.absellipse(e2, t2, n2, n2, r2, i3, a2);
      }, ellipse: function(e2, t2, n2, r2, i3, a2, o2, s2) {
        var c3 = this.currentPoint.x, u2 = this.currentPoint.y;
        this.absellipse(e2 + c3, t2 + u2, n2, r2, i3, a2, o2, s2);
      }, absellipse: function(e2, t2, n2, r2, i3, a2, o2, s2) {
        var c3 = new co(e2, t2, n2, r2, i3, a2, o2, s2);
        if (this.curves.length > 0) {
          var u2 = c3.getPoint(0);
          u2.equals(this.currentPoint) || this.lineTo(u2.x, u2.y);
        }
        this.curves.push(c3);
        var l2 = c3.getPoint(1);
        this.currentPoint.copy(l2);
      }, copy: function(e2) {
        return Lo.prototype.copy.call(this, e2), this.currentPoint.copy(e2.currentPoint), this;
      }, toJSON: function() {
        var e2 = Lo.prototype.toJSON.call(this);
        return e2.currentPoint = this.currentPoint.toArray(), e2;
      }, fromJSON: function(e2) {
        return Lo.prototype.fromJSON.call(this, e2), this.currentPoint.fromArray(e2.currentPoint), this;
      } }), Co.prototype = Object.assign(Object.create(Ro.prototype), { constructor: Co, getPointsHoles: function(e2) {
        for (var t2 = [], n2 = 0, r2 = this.holes.length; n2 < r2; n2++)
          t2[n2] = this.holes[n2].getPoints(e2);
        return t2;
      }, extractPoints: function(e2) {
        return { shape: this.getPoints(e2), holes: this.getPointsHoles(e2) };
      }, copy: function(e2) {
        Ro.prototype.copy.call(this, e2), this.holes = [];
        for (var t2 = 0, n2 = e2.holes.length; t2 < n2; t2++) {
          var r2 = e2.holes[t2];
          this.holes.push(r2.clone());
        }
        return this;
      }, toJSON: function() {
        var e2 = Ro.prototype.toJSON.call(this);
        e2.uuid = this.uuid, e2.holes = [];
        for (var t2 = 0, n2 = this.holes.length; t2 < n2; t2++) {
          var r2 = this.holes[t2];
          e2.holes.push(r2.toJSON());
        }
        return e2;
      }, fromJSON: function(e2) {
        Ro.prototype.fromJSON.call(this, e2), this.uuid = e2.uuid, this.holes = [];
        for (var t2 = 0, n2 = e2.holes.length; t2 < n2; t2++) {
          var r2 = e2.holes[t2];
          this.holes.push(new Ro().fromJSON(r2));
        }
        return this;
      } }), Po.prototype = Object.assign(Object.create(dn.prototype), { constructor: Po, isLight: true, copy: function(e2) {
        return dn.prototype.copy.call(this, e2), this.color.copy(e2.color), this.intensity = e2.intensity, this;
      }, toJSON: function(e2) {
        var t2 = dn.prototype.toJSON.call(this, e2);
        return t2.object.color = this.color.getHex(), t2.object.intensity = this.intensity, void 0 !== this.groundColor && (t2.object.groundColor = this.groundColor.getHex()), void 0 !== this.distance && (t2.object.distance = this.distance), void 0 !== this.angle && (t2.object.angle = this.angle), void 0 !== this.decay && (t2.object.decay = this.decay), void 0 !== this.penumbra && (t2.object.penumbra = this.penumbra), void 0 !== this.shadow && (t2.object.shadow = this.shadow.toJSON()), t2;
      } }), Oo.prototype = Object.assign(Object.create(Po.prototype), { constructor: Oo, isHemisphereLight: true, copy: function(e2) {
        return Po.prototype.copy.call(this, e2), this.groundColor.copy(e2.groundColor), this;
      } }), Object.assign(No.prototype, { copy: function(e2) {
        return this.camera = e2.camera.clone(), this.bias = e2.bias, this.radius = e2.radius, this.mapSize.copy(e2.mapSize), this;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, toJSON: function() {
        var e2 = {};
        return 0 !== this.bias && (e2.bias = this.bias), 1 !== this.radius && (e2.radius = this.radius), 512 === this.mapSize.x && 512 === this.mapSize.y || (e2.mapSize = this.mapSize.toArray()), e2.camera = this.camera.toJSON(false).object, delete e2.camera.matrix, e2;
      } }), Io.prototype = Object.assign(Object.create(No.prototype), { constructor: Io, isSpotLightShadow: true, update: function(e2) {
        var t2 = this.camera, n2 = 2 * Bt.RAD2DEG * e2.angle, r2 = this.mapSize.width / this.mapSize.height, i3 = e2.distance || t2.far;
        n2 === t2.fov && r2 === t2.aspect && i3 === t2.far || (t2.fov = n2, t2.aspect = r2, t2.far = i3, t2.updateProjectionMatrix());
      } }), Do.prototype = Object.assign(Object.create(Po.prototype), { constructor: Do, isSpotLight: true, copy: function(e2) {
        return Po.prototype.copy.call(this, e2), this.distance = e2.distance, this.angle = e2.angle, this.penumbra = e2.penumbra, this.decay = e2.decay, this.target = e2.target.clone(), this.shadow = e2.shadow.clone(), this;
      } }), Uo.prototype = Object.assign(Object.create(Po.prototype), { constructor: Uo, isPointLight: true, copy: function(e2) {
        return Po.prototype.copy.call(this, e2), this.distance = e2.distance, this.decay = e2.decay, this.shadow = e2.shadow.clone(), this;
      } }), Bo.prototype = Object.assign(Object.create(No.prototype), { constructor: Bo }), Fo.prototype = Object.assign(Object.create(Po.prototype), { constructor: Fo, isDirectionalLight: true, copy: function(e2) {
        return Po.prototype.copy.call(this, e2), this.target = e2.target.clone(), this.shadow = e2.shadow.clone(), this;
      } }), Go.prototype = Object.assign(Object.create(Po.prototype), { constructor: Go, isAmbientLight: true }), zo.prototype = Object.assign(Object.create(Po.prototype), { constructor: zo, isRectAreaLight: true, copy: function(e2) {
        return Po.prototype.copy.call(this, e2), this.width = e2.width, this.height = e2.height, this;
      }, toJSON: function(e2) {
        var t2 = Po.prototype.toJSON.call(this, e2);
        return t2.object.width = this.width, t2.object.height = this.height, t2;
      } });
      var Ho = { arraySlice: function(e2, t2, n2) {
        return Ho.isTypedArray(e2) ? new e2.constructor(e2.subarray(t2, void 0 !== n2 ? n2 : e2.length)) : e2.slice(t2, n2);
      }, convertArray: function(e2, t2, n2) {
        return !e2 || !n2 && e2.constructor === t2 ? e2 : "number" == typeof t2.BYTES_PER_ELEMENT ? new t2(e2) : Array.prototype.slice.call(e2);
      }, isTypedArray: function(e2) {
        return ArrayBuffer.isView(e2) && !(e2 instanceof DataView);
      }, getKeyframeOrder: function(e2) {
        for (var t2 = e2.length, n2 = new Array(t2), r2 = 0; r2 !== t2; ++r2)
          n2[r2] = r2;
        return n2.sort(function(t3, n3) {
          return e2[t3] - e2[n3];
        }), n2;
      }, sortedArray: function(e2, t2, n2) {
        for (var r2 = e2.length, i3 = new e2.constructor(r2), a2 = 0, o2 = 0; o2 !== r2; ++a2)
          for (var s2 = n2[a2] * t2, c3 = 0; c3 !== t2; ++c3)
            i3[o2++] = e2[s2 + c3];
        return i3;
      }, flattenJSON: function(e2, t2, n2, r2) {
        for (var i3 = 1, a2 = e2[0]; void 0 !== a2 && void 0 === a2[r2]; )
          a2 = e2[i3++];
        if (void 0 !== a2) {
          var o2 = a2[r2];
          if (void 0 !== o2)
            if (Array.isArray(o2))
              do {
                void 0 !== (o2 = a2[r2]) && (t2.push(a2.time), n2.push.apply(n2, o2)), a2 = e2[i3++];
              } while (void 0 !== a2);
            else if (void 0 !== o2.toArray)
              do {
                void 0 !== (o2 = a2[r2]) && (t2.push(a2.time), o2.toArray(n2, n2.length)), a2 = e2[i3++];
              } while (void 0 !== a2);
            else
              do {
                void 0 !== (o2 = a2[r2]) && (t2.push(a2.time), n2.push(o2)), a2 = e2[i3++];
              } while (void 0 !== a2);
        }
      } };
      function ko(e2, t2, n2, r2) {
        this.parameterPositions = e2, this._cachedIndex = 0, this.resultBuffer = void 0 !== r2 ? r2 : new t2.constructor(n2), this.sampleValues = t2, this.valueSize = n2;
      }
      function jo(e2, t2, n2, r2) {
        ko.call(this, e2, t2, n2, r2), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0;
      }
      function Vo(e2, t2, n2, r2) {
        ko.call(this, e2, t2, n2, r2);
      }
      function Wo(e2, t2, n2, r2) {
        ko.call(this, e2, t2, n2, r2);
      }
      function Xo(e2, t2, n2, r2) {
        if (void 0 === e2)
          throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (void 0 === t2 || 0 === t2.length)
          throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e2);
        this.name = e2, this.times = Ho.convertArray(t2, this.TimeBufferType), this.values = Ho.convertArray(n2, this.ValueBufferType), this.setInterpolation(r2 || this.DefaultInterpolation);
      }
      function qo(e2, t2, n2) {
        Xo.call(this, e2, t2, n2);
      }
      function Yo(e2, t2, n2, r2) {
        Xo.call(this, e2, t2, n2, r2);
      }
      function Zo(e2, t2, n2, r2) {
        Xo.call(this, e2, t2, n2, r2);
      }
      function Jo(e2, t2, n2, r2) {
        ko.call(this, e2, t2, n2, r2);
      }
      function Ko(e2, t2, n2, r2) {
        Xo.call(this, e2, t2, n2, r2);
      }
      function Qo(e2, t2, n2, r2) {
        Xo.call(this, e2, t2, n2, r2);
      }
      function $o(e2, t2, n2, r2) {
        Xo.call(this, e2, t2, n2, r2);
      }
      function es(e2, t2, n2) {
        this.name = e2, this.tracks = n2, this.duration = void 0 !== t2 ? t2 : -1, this.uuid = Bt.generateUUID(), this.duration < 0 && this.resetDuration();
      }
      function ts(e2) {
        if (void 0 === e2.type)
          throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
        var t2 = function(e3) {
          switch (e3.toLowerCase()) {
            case "scalar":
            case "double":
            case "float":
            case "number":
            case "integer":
              return Zo;
            case "vector":
            case "vector2":
            case "vector3":
            case "vector4":
              return $o;
            case "color":
              return Yo;
            case "quaternion":
              return Ko;
            case "bool":
            case "boolean":
              return qo;
            case "string":
              return Qo;
          }
          throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + e3);
        }(e2.type);
        if (void 0 === e2.times) {
          var n2 = [], r2 = [];
          Ho.flattenJSON(e2.keys, n2, r2, "value"), e2.times = n2, e2.values = r2;
        }
        return void 0 !== t2.parse ? t2.parse(e2) : new t2(e2.name, e2.times, e2.values, e2.interpolation);
      }
      function ns(e2) {
        this.manager = void 0 !== e2 ? e2 : $a, this.textures = {};
      }
      function rs(e2) {
        this.manager = void 0 !== e2 ? e2 : $a;
      }
      Object.assign(ko.prototype, { evaluate: function(e2) {
        var t2 = this.parameterPositions, n2 = this._cachedIndex, r2 = t2[n2], i3 = t2[n2 - 1];
        e: {
          t: {
            var a2;
            n: {
              r:
                if (!(e2 < r2)) {
                  for (var o2 = n2 + 2; ; ) {
                    if (void 0 === r2) {
                      if (e2 < i3)
                        break r;
                      return n2 = t2.length, this._cachedIndex = n2, this.afterEnd_(n2 - 1, e2, i3);
                    }
                    if (n2 === o2)
                      break;
                    if (i3 = r2, e2 < (r2 = t2[++n2]))
                      break t;
                  }
                  a2 = t2.length;
                  break n;
                }
              if (e2 >= i3)
                break e;
              var s2 = t2[1];
              e2 < s2 && (n2 = 2, i3 = s2);
              for (o2 = n2 - 2; ; ) {
                if (void 0 === i3)
                  return this._cachedIndex = 0, this.beforeStart_(0, e2, r2);
                if (n2 === o2)
                  break;
                if (r2 = i3, e2 >= (i3 = t2[--n2 - 1]))
                  break t;
              }
              a2 = n2, n2 = 0;
            }
            for (; n2 < a2; ) {
              var c3 = n2 + a2 >>> 1;
              e2 < t2[c3] ? a2 = c3 : n2 = c3 + 1;
            }
            if (r2 = t2[n2], void 0 === (i3 = t2[n2 - 1]))
              return this._cachedIndex = 0, this.beforeStart_(0, e2, r2);
            if (void 0 === r2)
              return n2 = t2.length, this._cachedIndex = n2, this.afterEnd_(n2 - 1, i3, e2);
          }
          this._cachedIndex = n2, this.intervalChanged_(n2, i3, r2);
        }
        return this.interpolate_(n2, i3, e2, r2);
      }, settings: null, DefaultSettings_: {}, getSettings_: function() {
        return this.settings || this.DefaultSettings_;
      }, copySampleValue_: function(e2) {
        for (var t2 = this.resultBuffer, n2 = this.sampleValues, r2 = this.valueSize, i3 = e2 * r2, a2 = 0; a2 !== r2; ++a2)
          t2[a2] = n2[i3 + a2];
        return t2;
      }, interpolate_: function() {
        throw new Error("call to abstract method");
      }, intervalChanged_: function() {
      } }), Object.assign(ko.prototype, { beforeStart_: ko.prototype.copySampleValue_, afterEnd_: ko.prototype.copySampleValue_ }), jo.prototype = Object.assign(Object.create(ko.prototype), { constructor: jo, DefaultSettings_: { endingStart: xt, endingEnd: xt }, intervalChanged_: function(e2, t2, n2) {
        var r2 = this.parameterPositions, i3 = e2 - 2, a2 = e2 + 1, o2 = r2[i3], s2 = r2[a2];
        if (void 0 === o2)
          switch (this.getSettings_().endingStart) {
            case bt:
              i3 = e2, o2 = 2 * t2 - n2;
              break;
            case wt:
              o2 = t2 + r2[i3 = r2.length - 2] - r2[i3 + 1];
              break;
            default:
              i3 = e2, o2 = n2;
          }
        if (void 0 === s2)
          switch (this.getSettings_().endingEnd) {
            case bt:
              a2 = e2, s2 = 2 * n2 - t2;
              break;
            case wt:
              a2 = 1, s2 = n2 + r2[1] - r2[0];
              break;
            default:
              a2 = e2 - 1, s2 = t2;
          }
        var c3 = 0.5 * (n2 - t2), u2 = this.valueSize;
        this._weightPrev = c3 / (t2 - o2), this._weightNext = c3 / (s2 - n2), this._offsetPrev = i3 * u2, this._offsetNext = a2 * u2;
      }, interpolate_: function(e2, t2, n2, r2) {
        for (var i3 = this.resultBuffer, a2 = this.sampleValues, o2 = this.valueSize, s2 = e2 * o2, c3 = s2 - o2, u2 = this._offsetPrev, l2 = this._offsetNext, h2 = this._weightPrev, d2 = this._weightNext, p2 = (n2 - t2) / (r2 - t2), f2 = p2 * p2, m3 = f2 * p2, g2 = -h2 * m3 + 2 * h2 * f2 - h2 * p2, v2 = (1 + h2) * m3 + (-1.5 - 2 * h2) * f2 + (-0.5 + h2) * p2 + 1, y2 = (-1 - d2) * m3 + (1.5 + d2) * f2 + 0.5 * p2, x2 = d2 * m3 - d2 * f2, b2 = 0; b2 !== o2; ++b2)
          i3[b2] = g2 * a2[u2 + b2] + v2 * a2[c3 + b2] + y2 * a2[s2 + b2] + x2 * a2[l2 + b2];
        return i3;
      } }), Vo.prototype = Object.assign(Object.create(ko.prototype), { constructor: Vo, interpolate_: function(e2, t2, n2, r2) {
        for (var i3 = this.resultBuffer, a2 = this.sampleValues, o2 = this.valueSize, s2 = e2 * o2, c3 = s2 - o2, u2 = (n2 - t2) / (r2 - t2), l2 = 1 - u2, h2 = 0; h2 !== o2; ++h2)
          i3[h2] = a2[c3 + h2] * l2 + a2[s2 + h2] * u2;
        return i3;
      } }), Wo.prototype = Object.assign(Object.create(ko.prototype), { constructor: Wo, interpolate_: function(e2) {
        return this.copySampleValue_(e2 - 1);
      } }), Object.assign(Xo, { toJSON: function(e2) {
        var t2, n2 = e2.constructor;
        if (void 0 !== n2.toJSON)
          t2 = n2.toJSON(e2);
        else {
          t2 = { name: e2.name, times: Ho.convertArray(e2.times, Array), values: Ho.convertArray(e2.values, Array) };
          var r2 = e2.getInterpolation();
          r2 !== e2.DefaultInterpolation && (t2.interpolation = r2);
        }
        return t2.type = e2.ValueTypeName, t2;
      } }), Object.assign(Xo.prototype, { constructor: Xo, TimeBufferType: Float32Array, ValueBufferType: Float32Array, DefaultInterpolation: vt, InterpolantFactoryMethodDiscrete: function(e2) {
        return new Wo(this.times, this.values, this.getValueSize(), e2);
      }, InterpolantFactoryMethodLinear: function(e2) {
        return new Vo(this.times, this.values, this.getValueSize(), e2);
      }, InterpolantFactoryMethodSmooth: function(e2) {
        return new jo(this.times, this.values, this.getValueSize(), e2);
      }, setInterpolation: function(e2) {
        var t2;
        switch (e2) {
          case gt:
            t2 = this.InterpolantFactoryMethodDiscrete;
            break;
          case vt:
            t2 = this.InterpolantFactoryMethodLinear;
            break;
          case yt:
            t2 = this.InterpolantFactoryMethodSmooth;
        }
        if (void 0 === t2) {
          var n2 = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
          if (void 0 === this.createInterpolant) {
            if (e2 === this.DefaultInterpolation)
              throw new Error(n2);
            this.setInterpolation(this.DefaultInterpolation);
          }
          return console.warn("THREE.KeyframeTrack:", n2), this;
        }
        return this.createInterpolant = t2, this;
      }, getInterpolation: function() {
        switch (this.createInterpolant) {
          case this.InterpolantFactoryMethodDiscrete:
            return gt;
          case this.InterpolantFactoryMethodLinear:
            return vt;
          case this.InterpolantFactoryMethodSmooth:
            return yt;
        }
      }, getValueSize: function() {
        return this.values.length / this.times.length;
      }, shift: function(e2) {
        if (0 !== e2)
          for (var t2 = this.times, n2 = 0, r2 = t2.length; n2 !== r2; ++n2)
            t2[n2] += e2;
        return this;
      }, scale: function(e2) {
        if (1 !== e2)
          for (var t2 = this.times, n2 = 0, r2 = t2.length; n2 !== r2; ++n2)
            t2[n2] *= e2;
        return this;
      }, trim: function(e2, t2) {
        for (var n2 = this.times, r2 = n2.length, i3 = 0, a2 = r2 - 1; i3 !== r2 && n2[i3] < e2; )
          ++i3;
        for (; -1 !== a2 && n2[a2] > t2; )
          --a2;
        if (++a2, 0 !== i3 || a2 !== r2) {
          i3 >= a2 && (i3 = (a2 = Math.max(a2, 1)) - 1);
          var o2 = this.getValueSize();
          this.times = Ho.arraySlice(n2, i3, a2), this.values = Ho.arraySlice(this.values, i3 * o2, a2 * o2);
        }
        return this;
      }, validate: function() {
        var e2 = true, t2 = this.getValueSize();
        t2 - Math.floor(t2) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e2 = false);
        var n2 = this.times, r2 = this.values, i3 = n2.length;
        0 === i3 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e2 = false);
        for (var a2 = null, o2 = 0; o2 !== i3; o2++) {
          var s2 = n2[o2];
          if ("number" == typeof s2 && isNaN(s2)) {
            console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o2, s2), e2 = false;
            break;
          }
          if (null !== a2 && a2 > s2) {
            console.error("THREE.KeyframeTrack: Out of order keys.", this, o2, s2, a2), e2 = false;
            break;
          }
          a2 = s2;
        }
        if (void 0 !== r2 && Ho.isTypedArray(r2)) {
          o2 = 0;
          for (var c3 = r2.length; o2 !== c3; ++o2) {
            var u2 = r2[o2];
            if (isNaN(u2)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o2, u2), e2 = false;
              break;
            }
          }
        }
        return e2;
      }, optimize: function() {
        for (var e2 = this.times, t2 = this.values, n2 = this.getValueSize(), r2 = this.getInterpolation() === yt, i3 = 1, a2 = e2.length - 1, o2 = 1; o2 < a2; ++o2) {
          var s2 = false, c3 = e2[o2];
          if (c3 !== e2[o2 + 1] && (1 !== o2 || c3 !== c3[0]))
            if (r2)
              s2 = true;
            else
              for (var u2 = o2 * n2, l2 = u2 - n2, h2 = u2 + n2, d2 = 0; d2 !== n2; ++d2) {
                var p2 = t2[u2 + d2];
                if (p2 !== t2[l2 + d2] || p2 !== t2[h2 + d2]) {
                  s2 = true;
                  break;
                }
              }
          if (s2) {
            if (o2 !== i3) {
              e2[i3] = e2[o2];
              var f2 = o2 * n2, m3 = i3 * n2;
              for (d2 = 0; d2 !== n2; ++d2)
                t2[m3 + d2] = t2[f2 + d2];
            }
            ++i3;
          }
        }
        if (a2 > 0) {
          e2[i3] = e2[a2];
          for (f2 = a2 * n2, m3 = i3 * n2, d2 = 0; d2 !== n2; ++d2)
            t2[m3 + d2] = t2[f2 + d2];
          ++i3;
        }
        return i3 !== e2.length && (this.times = Ho.arraySlice(e2, 0, i3), this.values = Ho.arraySlice(t2, 0, i3 * n2)), this;
      } }), qo.prototype = Object.assign(Object.create(Xo.prototype), { constructor: qo, ValueTypeName: "bool", ValueBufferType: Array, DefaultInterpolation: gt, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 }), Yo.prototype = Object.assign(Object.create(Xo.prototype), { constructor: Yo, ValueTypeName: "color" }), Zo.prototype = Object.assign(Object.create(Xo.prototype), { constructor: Zo, ValueTypeName: "number" }), Jo.prototype = Object.assign(Object.create(ko.prototype), { constructor: Jo, interpolate_: function(e2, t2, n2, r2) {
        for (var i3 = this.resultBuffer, a2 = this.sampleValues, o2 = this.valueSize, s2 = e2 * o2, c3 = (n2 - t2) / (r2 - t2), u2 = s2 + o2; s2 !== u2; s2 += 4)
          zt.slerpFlat(i3, 0, a2, s2 - o2, a2, s2, c3);
        return i3;
      } }), Ko.prototype = Object.assign(Object.create(Xo.prototype), { constructor: Ko, ValueTypeName: "quaternion", DefaultInterpolation: vt, InterpolantFactoryMethodLinear: function(e2) {
        return new Jo(this.times, this.values, this.getValueSize(), e2);
      }, InterpolantFactoryMethodSmooth: void 0 }), Qo.prototype = Object.assign(Object.create(Xo.prototype), { constructor: Qo, ValueTypeName: "string", ValueBufferType: Array, DefaultInterpolation: gt, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 }), $o.prototype = Object.assign(Object.create(Xo.prototype), { constructor: $o, ValueTypeName: "vector" }), Object.assign(es, { parse: function(e2) {
        for (var t2 = [], n2 = e2.tracks, r2 = 1 / (e2.fps || 1), i3 = 0, a2 = n2.length; i3 !== a2; ++i3)
          t2.push(ts(n2[i3]).scale(r2));
        return new es(e2.name, e2.duration, t2);
      }, toJSON: function(e2) {
        for (var t2 = [], n2 = e2.tracks, r2 = { name: e2.name, duration: e2.duration, tracks: t2, uuid: e2.uuid }, i3 = 0, a2 = n2.length; i3 !== a2; ++i3)
          t2.push(Xo.toJSON(n2[i3]));
        return r2;
      }, CreateFromMorphTargetSequence: function(e2, t2, n2, r2) {
        for (var i3 = t2.length, a2 = [], o2 = 0; o2 < i3; o2++) {
          var s2 = [], c3 = [];
          s2.push((o2 + i3 - 1) % i3, o2, (o2 + 1) % i3), c3.push(0, 1, 0);
          var u2 = Ho.getKeyframeOrder(s2);
          s2 = Ho.sortedArray(s2, 1, u2), c3 = Ho.sortedArray(c3, 1, u2), r2 || 0 !== s2[0] || (s2.push(i3), c3.push(c3[0])), a2.push(new Zo(".morphTargetInfluences[" + t2[o2].name + "]", s2, c3).scale(1 / n2));
        }
        return new es(e2, -1, a2);
      }, findByName: function(e2, t2) {
        var n2 = e2;
        if (!Array.isArray(e2)) {
          var r2 = e2;
          n2 = r2.geometry && r2.geometry.animations || r2.animations;
        }
        for (var i3 = 0; i3 < n2.length; i3++)
          if (n2[i3].name === t2)
            return n2[i3];
        return null;
      }, CreateClipsFromMorphTargetSequences: function(e2, t2, n2) {
        for (var r2 = {}, i3 = /^([\w-]*?)([\d]+)$/, a2 = 0, o2 = e2.length; a2 < o2; a2++) {
          var s2 = e2[a2], c3 = s2.name.match(i3);
          if (c3 && c3.length > 1) {
            var u2 = r2[h2 = c3[1]];
            u2 || (r2[h2] = u2 = []), u2.push(s2);
          }
        }
        var l2 = [];
        for (var h2 in r2)
          l2.push(es.CreateFromMorphTargetSequence(h2, r2[h2], t2, n2));
        return l2;
      }, parseAnimation: function(e2, t2) {
        if (!e2)
          return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
        for (var n2 = function(e3, t3, n3, r3, i4) {
          if (0 !== n3.length) {
            var a3 = [], o3 = [];
            Ho.flattenJSON(n3, a3, o3, r3), 0 !== a3.length && i4.push(new e3(t3, a3, o3));
          }
        }, r2 = [], i3 = e2.name || "default", a2 = e2.length || -1, o2 = e2.fps || 30, s2 = e2.hierarchy || [], c3 = 0; c3 < s2.length; c3++) {
          var u2 = s2[c3].keys;
          if (u2 && 0 !== u2.length)
            if (u2[0].morphTargets) {
              for (var l2 = {}, h2 = 0; h2 < u2.length; h2++)
                if (u2[h2].morphTargets)
                  for (var d2 = 0; d2 < u2[h2].morphTargets.length; d2++)
                    l2[u2[h2].morphTargets[d2]] = -1;
              for (var p2 in l2) {
                var f2 = [], m3 = [];
                for (d2 = 0; d2 !== u2[h2].morphTargets.length; ++d2) {
                  var g2 = u2[h2];
                  f2.push(g2.time), m3.push(g2.morphTarget === p2 ? 1 : 0);
                }
                r2.push(new Zo(".morphTargetInfluence[" + p2 + "]", f2, m3));
              }
              a2 = l2.length * (o2 || 1);
            } else {
              var v2 = ".bones[" + t2[c3].name + "]";
              n2($o, v2 + ".position", u2, "pos", r2), n2(Ko, v2 + ".quaternion", u2, "rot", r2), n2($o, v2 + ".scale", u2, "scl", r2);
            }
        }
        return 0 === r2.length ? null : new es(i3, a2, r2);
      } }), Object.assign(es.prototype, { resetDuration: function() {
        for (var e2 = 0, t2 = 0, n2 = this.tracks.length; t2 !== n2; ++t2) {
          var r2 = this.tracks[t2];
          e2 = Math.max(e2, r2.times[r2.times.length - 1]);
        }
        return this.duration = e2, this;
      }, trim: function() {
        for (var e2 = 0; e2 < this.tracks.length; e2++)
          this.tracks[e2].trim(0, this.duration);
        return this;
      }, validate: function() {
        for (var e2 = true, t2 = 0; t2 < this.tracks.length; t2++)
          e2 = e2 && this.tracks[t2].validate();
        return e2;
      }, optimize: function() {
        for (var e2 = 0; e2 < this.tracks.length; e2++)
          this.tracks[e2].optimize();
        return this;
      } }), Object.assign(ns.prototype, { load: function(e2, t2, n2, r2) {
        var i3 = this;
        new to(i3.manager).load(e2, function(e3) {
          t2(i3.parse(JSON.parse(e3)));
        }, n2, r2);
      }, setTextures: function(e2) {
        this.textures = e2;
      }, parse: function(e2) {
        var t2 = this.textures;
        function n2(e3) {
          return void 0 === t2[e3] && console.warn("THREE.MaterialLoader: Undefined texture", e3), t2[e3];
        }
        var r2 = new Ja[e2.type]();
        if (void 0 !== e2.uuid && (r2.uuid = e2.uuid), void 0 !== e2.name && (r2.name = e2.name), void 0 !== e2.color && r2.color.setHex(e2.color), void 0 !== e2.roughness && (r2.roughness = e2.roughness), void 0 !== e2.metalness && (r2.metalness = e2.metalness), void 0 !== e2.emissive && r2.emissive.setHex(e2.emissive), void 0 !== e2.specular && r2.specular.setHex(e2.specular), void 0 !== e2.shininess && (r2.shininess = e2.shininess), void 0 !== e2.clearCoat && (r2.clearCoat = e2.clearCoat), void 0 !== e2.clearCoatRoughness && (r2.clearCoatRoughness = e2.clearCoatRoughness), void 0 !== e2.uniforms && (r2.uniforms = e2.uniforms), void 0 !== e2.vertexShader && (r2.vertexShader = e2.vertexShader), void 0 !== e2.fragmentShader && (r2.fragmentShader = e2.fragmentShader), void 0 !== e2.vertexColors && (r2.vertexColors = e2.vertexColors), void 0 !== e2.fog && (r2.fog = e2.fog), void 0 !== e2.flatShading && (r2.flatShading = e2.flatShading), void 0 !== e2.blending && (r2.blending = e2.blending), void 0 !== e2.side && (r2.side = e2.side), void 0 !== e2.opacity && (r2.opacity = e2.opacity), void 0 !== e2.transparent && (r2.transparent = e2.transparent), void 0 !== e2.alphaTest && (r2.alphaTest = e2.alphaTest), void 0 !== e2.depthTest && (r2.depthTest = e2.depthTest), void 0 !== e2.depthWrite && (r2.depthWrite = e2.depthWrite), void 0 !== e2.colorWrite && (r2.colorWrite = e2.colorWrite), void 0 !== e2.wireframe && (r2.wireframe = e2.wireframe), void 0 !== e2.wireframeLinewidth && (r2.wireframeLinewidth = e2.wireframeLinewidth), void 0 !== e2.wireframeLinecap && (r2.wireframeLinecap = e2.wireframeLinecap), void 0 !== e2.wireframeLinejoin && (r2.wireframeLinejoin = e2.wireframeLinejoin), void 0 !== e2.rotation && (r2.rotation = e2.rotation), 1 !== e2.linewidth && (r2.linewidth = e2.linewidth), void 0 !== e2.dashSize && (r2.dashSize = e2.dashSize), void 0 !== e2.gapSize && (r2.gapSize = e2.gapSize), void 0 !== e2.scale && (r2.scale = e2.scale), void 0 !== e2.polygonOffset && (r2.polygonOffset = e2.polygonOffset), void 0 !== e2.polygonOffsetFactor && (r2.polygonOffsetFactor = e2.polygonOffsetFactor), void 0 !== e2.polygonOffsetUnits && (r2.polygonOffsetUnits = e2.polygonOffsetUnits), void 0 !== e2.skinning && (r2.skinning = e2.skinning), void 0 !== e2.morphTargets && (r2.morphTargets = e2.morphTargets), void 0 !== e2.dithering && (r2.dithering = e2.dithering), void 0 !== e2.visible && (r2.visible = e2.visible), void 0 !== e2.userData && (r2.userData = e2.userData), void 0 !== e2.shading && (r2.flatShading = 1 === e2.shading), void 0 !== e2.size && (r2.size = e2.size), void 0 !== e2.sizeAttenuation && (r2.sizeAttenuation = e2.sizeAttenuation), void 0 !== e2.map && (r2.map = n2(e2.map)), void 0 !== e2.alphaMap && (r2.alphaMap = n2(e2.alphaMap), r2.transparent = true), void 0 !== e2.bumpMap && (r2.bumpMap = n2(e2.bumpMap)), void 0 !== e2.bumpScale && (r2.bumpScale = e2.bumpScale), void 0 !== e2.normalMap && (r2.normalMap = n2(e2.normalMap)), void 0 !== e2.normalMapType && (r2.normalMapType = e2.normalMapType), void 0 !== e2.normalScale) {
          var i3 = e2.normalScale;
          false === Array.isArray(i3) && (i3 = [i3, i3]), r2.normalScale = new Ft().fromArray(i3);
        }
        return void 0 !== e2.displacementMap && (r2.displacementMap = n2(e2.displacementMap)), void 0 !== e2.displacementScale && (r2.displacementScale = e2.displacementScale), void 0 !== e2.displacementBias && (r2.displacementBias = e2.displacementBias), void 0 !== e2.roughnessMap && (r2.roughnessMap = n2(e2.roughnessMap)), void 0 !== e2.metalnessMap && (r2.metalnessMap = n2(e2.metalnessMap)), void 0 !== e2.emissiveMap && (r2.emissiveMap = n2(e2.emissiveMap)), void 0 !== e2.emissiveIntensity && (r2.emissiveIntensity = e2.emissiveIntensity), void 0 !== e2.specularMap && (r2.specularMap = n2(e2.specularMap)), void 0 !== e2.envMap && (r2.envMap = n2(e2.envMap)), void 0 !== e2.reflectivity && (r2.reflectivity = e2.reflectivity), void 0 !== e2.lightMap && (r2.lightMap = n2(e2.lightMap)), void 0 !== e2.lightMapIntensity && (r2.lightMapIntensity = e2.lightMapIntensity), void 0 !== e2.aoMap && (r2.aoMap = n2(e2.aoMap)), void 0 !== e2.aoMapIntensity && (r2.aoMapIntensity = e2.aoMapIntensity), void 0 !== e2.gradientMap && (r2.gradientMap = n2(e2.gradientMap)), r2;
      } }), Object.assign(rs.prototype, { load: function(e2, t2, n2, r2) {
        var i3 = this;
        new to(i3.manager).load(e2, function(e3) {
          t2(i3.parse(JSON.parse(e3)));
        }, n2, r2);
      }, parse: function(e2) {
        var t2 = new Pn(), n2 = e2.data.index;
        if (void 0 !== n2) {
          var r2 = new is[n2.type](n2.array);
          t2.setIndex(new yn(r2, 1));
        }
        var i3 = e2.data.attributes;
        for (var a2 in i3) {
          var o2 = i3[a2];
          r2 = new is[o2.type](o2.array);
          t2.addAttribute(a2, new yn(r2, o2.itemSize, o2.normalized));
        }
        var s2 = e2.data.groups || e2.data.drawcalls || e2.data.offsets;
        if (void 0 !== s2)
          for (var c3 = 0, u2 = s2.length; c3 !== u2; ++c3) {
            var l2 = s2[c3];
            t2.addGroup(l2.start, l2.count, l2.materialIndex);
          }
        var h2 = e2.data.boundingSphere;
        if (void 0 !== h2) {
          var d2 = new Ht();
          void 0 !== h2.center && d2.fromArray(h2.center), t2.boundingSphere = new Kt(d2, h2.radius);
        }
        return t2;
      } });
      var is = { Int8Array, Uint8Array, Uint8ClampedArray: "undefined" != typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array };
      function as() {
      }
      as.Handlers = { handlers: [], add: function(e2, t2) {
        this.handlers.push(e2, t2);
      }, get: function(e2) {
        for (var t2 = this.handlers, n2 = 0, r2 = t2.length; n2 < r2; n2 += 2) {
          var i3 = t2[n2], a2 = t2[n2 + 1];
          if (i3.test(e2))
            return a2;
        }
        return null;
      } }, Object.assign(as.prototype, { crossOrigin: "anonymous", onLoadStart: function() {
      }, onLoadProgress: function() {
      }, onLoadComplete: function() {
      }, initMaterials: function(e2, t2, n2) {
        for (var r2 = [], i3 = 0; i3 < e2.length; ++i3)
          r2[i3] = this.createMaterial(e2[i3], t2, n2);
        return r2;
      }, createMaterial: function() {
        var e2 = { NoBlending: M, NormalBlending: E, AdditiveBlending: T, SubtractiveBlending: S, MultiplyBlending: A, CustomBlending: L }, t2 = new rn(), n2 = new oo(), r2 = new ns();
        return function(i3, a2, o2) {
          var s2 = {};
          function c3(e3, t3, r3, i4, c4) {
            var u3, l3 = a2 + e3, h3 = as.Handlers.get(l3);
            null !== h3 ? u3 = h3.load(l3) : (n2.setCrossOrigin(o2), u3 = n2.load(l3)), void 0 !== t3 && (u3.repeat.fromArray(t3), 1 !== t3[0] && (u3.wrapS = me), 1 !== t3[1] && (u3.wrapT = me)), void 0 !== r3 && u3.offset.fromArray(r3), void 0 !== i4 && ("repeat" === i4[0] && (u3.wrapS = me), "mirror" === i4[0] && (u3.wrapS = ve), "repeat" === i4[1] && (u3.wrapT = me), "mirror" === i4[1] && (u3.wrapT = ve)), void 0 !== c4 && (u3.anisotropy = c4);
            var d2 = Bt.generateUUID();
            return s2[d2] = u3, d2;
          }
          var u2 = { uuid: Bt.generateUUID(), type: "MeshLambertMaterial" };
          for (var l2 in i3) {
            var h2 = i3[l2];
            switch (l2) {
              case "DbgColor":
              case "DbgIndex":
              case "opticalDensity":
              case "illumination":
                break;
              case "DbgName":
                u2.name = h2;
                break;
              case "blending":
                u2.blending = e2[h2];
                break;
              case "colorAmbient":
              case "mapAmbient":
                console.warn("THREE.Loader.createMaterial:", l2, "is no longer supported.");
                break;
              case "colorDiffuse":
                u2.color = t2.fromArray(h2).getHex();
                break;
              case "colorSpecular":
                u2.specular = t2.fromArray(h2).getHex();
                break;
              case "colorEmissive":
                u2.emissive = t2.fromArray(h2).getHex();
                break;
              case "specularCoef":
                u2.shininess = h2;
                break;
              case "shading":
                "basic" === h2.toLowerCase() && (u2.type = "MeshBasicMaterial"), "phong" === h2.toLowerCase() && (u2.type = "MeshPhongMaterial"), "standard" === h2.toLowerCase() && (u2.type = "MeshStandardMaterial");
                break;
              case "mapDiffuse":
                u2.map = c3(h2, i3.mapDiffuseRepeat, i3.mapDiffuseOffset, i3.mapDiffuseWrap, i3.mapDiffuseAnisotropy);
                break;
              case "mapDiffuseRepeat":
              case "mapDiffuseOffset":
              case "mapDiffuseWrap":
              case "mapDiffuseAnisotropy":
                break;
              case "mapEmissive":
                u2.emissiveMap = c3(h2, i3.mapEmissiveRepeat, i3.mapEmissiveOffset, i3.mapEmissiveWrap, i3.mapEmissiveAnisotropy);
                break;
              case "mapEmissiveRepeat":
              case "mapEmissiveOffset":
              case "mapEmissiveWrap":
              case "mapEmissiveAnisotropy":
                break;
              case "mapLight":
                u2.lightMap = c3(h2, i3.mapLightRepeat, i3.mapLightOffset, i3.mapLightWrap, i3.mapLightAnisotropy);
                break;
              case "mapLightRepeat":
              case "mapLightOffset":
              case "mapLightWrap":
              case "mapLightAnisotropy":
                break;
              case "mapAO":
                u2.aoMap = c3(h2, i3.mapAORepeat, i3.mapAOOffset, i3.mapAOWrap, i3.mapAOAnisotropy);
                break;
              case "mapAORepeat":
              case "mapAOOffset":
              case "mapAOWrap":
              case "mapAOAnisotropy":
                break;
              case "mapBump":
                u2.bumpMap = c3(h2, i3.mapBumpRepeat, i3.mapBumpOffset, i3.mapBumpWrap, i3.mapBumpAnisotropy);
                break;
              case "mapBumpScale":
                u2.bumpScale = h2;
                break;
              case "mapBumpRepeat":
              case "mapBumpOffset":
              case "mapBumpWrap":
              case "mapBumpAnisotropy":
                break;
              case "mapNormal":
                u2.normalMap = c3(h2, i3.mapNormalRepeat, i3.mapNormalOffset, i3.mapNormalWrap, i3.mapNormalAnisotropy);
                break;
              case "mapNormalFactor":
                u2.normalScale = h2;
                break;
              case "mapNormalRepeat":
              case "mapNormalOffset":
              case "mapNormalWrap":
              case "mapNormalAnisotropy":
                break;
              case "mapSpecular":
                u2.specularMap = c3(h2, i3.mapSpecularRepeat, i3.mapSpecularOffset, i3.mapSpecularWrap, i3.mapSpecularAnisotropy);
                break;
              case "mapSpecularRepeat":
              case "mapSpecularOffset":
              case "mapSpecularWrap":
              case "mapSpecularAnisotropy":
                break;
              case "mapMetalness":
                u2.metalnessMap = c3(h2, i3.mapMetalnessRepeat, i3.mapMetalnessOffset, i3.mapMetalnessWrap, i3.mapMetalnessAnisotropy);
                break;
              case "mapMetalnessRepeat":
              case "mapMetalnessOffset":
              case "mapMetalnessWrap":
              case "mapMetalnessAnisotropy":
                break;
              case "mapRoughness":
                u2.roughnessMap = c3(h2, i3.mapRoughnessRepeat, i3.mapRoughnessOffset, i3.mapRoughnessWrap, i3.mapRoughnessAnisotropy);
                break;
              case "mapRoughnessRepeat":
              case "mapRoughnessOffset":
              case "mapRoughnessWrap":
              case "mapRoughnessAnisotropy":
                break;
              case "mapAlpha":
                u2.alphaMap = c3(h2, i3.mapAlphaRepeat, i3.mapAlphaOffset, i3.mapAlphaWrap, i3.mapAlphaAnisotropy);
                break;
              case "mapAlphaRepeat":
              case "mapAlphaOffset":
              case "mapAlphaWrap":
              case "mapAlphaAnisotropy":
                break;
              case "flipSided":
                u2.side = g;
                break;
              case "doubleSided":
                u2.side = v;
                break;
              case "transparency":
                console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"), u2.opacity = h2;
                break;
              case "depthTest":
              case "depthWrite":
              case "colorWrite":
              case "opacity":
              case "reflectivity":
              case "transparent":
              case "visible":
              case "wireframe":
                u2[l2] = h2;
                break;
              case "vertexColors":
                true === h2 && (u2.vertexColors = _), "face" === h2 && (u2.vertexColors = w);
                break;
              default:
                console.error("THREE.Loader.createMaterial: Unsupported", l2, h2);
            }
          }
          return "MeshBasicMaterial" === u2.type && delete u2.emissive, "MeshPhongMaterial" !== u2.type && delete u2.specular, u2.opacity < 1 && (u2.transparent = true), r2.setTextures(s2), r2.parse(u2);
        };
      }() });
      var os = { decodeText: function(e2) {
        if ("undefined" != typeof TextDecoder)
          return new TextDecoder().decode(e2);
        for (var t2 = "", n2 = 0, r2 = e2.length; n2 < r2; n2++)
          t2 += String.fromCharCode(e2[n2]);
        return decodeURIComponent(escape(t2));
      }, extractUrlBase: function(e2) {
        var t2 = e2.lastIndexOf("/");
        return -1 === t2 ? "./" : e2.substr(0, t2 + 1);
      } };
      function ss(e2) {
        "boolean" == typeof e2 && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."), e2 = void 0), this.manager = void 0 !== e2 ? e2 : $a, this.withCredentials = false;
      }
      function cs(e2) {
        this.manager = void 0 !== e2 ? e2 : $a, this.texturePath = "";
      }
      Object.assign(ss.prototype, { crossOrigin: "anonymous", load: function(e2, t2, n2, r2) {
        var i3 = this, a2 = this.texturePath && "string" == typeof this.texturePath ? this.texturePath : os.extractUrlBase(e2), o2 = new to(this.manager);
        o2.setWithCredentials(this.withCredentials), o2.load(e2, function(n3) {
          var r3 = JSON.parse(n3), o3 = r3.metadata;
          if (void 0 !== o3) {
            var s2 = o3.type;
            if (void 0 !== s2 && "object" === s2.toLowerCase())
              return void console.error("THREE.JSONLoader: " + e2 + " should be loaded with THREE.ObjectLoader instead.");
          }
          var c3 = i3.parse(r3, a2);
          t2(c3.geometry, c3.materials);
        }, n2, r2);
      }, setCrossOrigin: function(e2) {
        return this.crossOrigin = e2, this;
      }, setTexturePath: function(e2) {
        return this.texturePath = e2, this;
      }, parse: function() {
        return function(e2, t2) {
          void 0 !== e2.data && (e2 = e2.data), void 0 !== e2.scale ? e2.scale = 1 / e2.scale : e2.scale = 1;
          var n2 = new vn();
          return function(e3, t3) {
            function n3(e4, t4) {
              return e4 & 1 << t4;
            }
            var r2, i3, a2, o2, s2, c3, u2, l2, h2, d2, p2, f2, m3, g2, v2, y2, x2, b2, w2, _2, M2, E2, T2, S2, A2, L2 = e3.faces, R2 = e3.vertices, C2 = e3.normals, P2 = e3.colors, O2 = e3.scale, N2 = 0;
            if (void 0 !== e3.uvs) {
              for (r2 = 0; r2 < e3.uvs.length; r2++)
                e3.uvs[r2].length && N2++;
              for (r2 = 0; r2 < N2; r2++)
                t3.faceVertexUvs[r2] = [];
            }
            for (o2 = 0, s2 = R2.length; o2 < s2; )
              (b2 = new Ht()).x = R2[o2++] * O2, b2.y = R2[o2++] * O2, b2.z = R2[o2++] * O2, t3.vertices.push(b2);
            for (o2 = 0, s2 = L2.length; o2 < s2; )
              if (p2 = n3(d2 = L2[o2++], 0), f2 = n3(d2, 1), m3 = n3(d2, 3), g2 = n3(d2, 4), v2 = n3(d2, 5), y2 = n3(d2, 6), x2 = n3(d2, 7), p2) {
                if ((_2 = new mn()).a = L2[o2], _2.b = L2[o2 + 1], _2.c = L2[o2 + 3], (M2 = new mn()).a = L2[o2 + 1], M2.b = L2[o2 + 2], M2.c = L2[o2 + 3], o2 += 4, f2 && (h2 = L2[o2++], _2.materialIndex = h2, M2.materialIndex = h2), a2 = t3.faces.length, m3)
                  for (r2 = 0; r2 < N2; r2++)
                    for (S2 = e3.uvs[r2], t3.faceVertexUvs[r2][a2] = [], t3.faceVertexUvs[r2][a2 + 1] = [], i3 = 0; i3 < 4; i3++)
                      A2 = new Ft(S2[2 * (l2 = L2[o2++])], S2[2 * l2 + 1]), 2 !== i3 && t3.faceVertexUvs[r2][a2].push(A2), 0 !== i3 && t3.faceVertexUvs[r2][a2 + 1].push(A2);
                if (g2 && (u2 = 3 * L2[o2++], _2.normal.set(C2[u2++], C2[u2++], C2[u2]), M2.normal.copy(_2.normal)), v2)
                  for (r2 = 0; r2 < 4; r2++)
                    u2 = 3 * L2[o2++], T2 = new Ht(C2[u2++], C2[u2++], C2[u2]), 2 !== r2 && _2.vertexNormals.push(T2), 0 !== r2 && M2.vertexNormals.push(T2);
                if (y2 && (E2 = P2[c3 = L2[o2++]], _2.color.setHex(E2), M2.color.setHex(E2)), x2)
                  for (r2 = 0; r2 < 4; r2++)
                    E2 = P2[c3 = L2[o2++]], 2 !== r2 && _2.vertexColors.push(new rn(E2)), 0 !== r2 && M2.vertexColors.push(new rn(E2));
                t3.faces.push(_2), t3.faces.push(M2);
              } else {
                if ((w2 = new mn()).a = L2[o2++], w2.b = L2[o2++], w2.c = L2[o2++], f2 && (h2 = L2[o2++], w2.materialIndex = h2), a2 = t3.faces.length, m3)
                  for (r2 = 0; r2 < N2; r2++)
                    for (S2 = e3.uvs[r2], t3.faceVertexUvs[r2][a2] = [], i3 = 0; i3 < 3; i3++)
                      A2 = new Ft(S2[2 * (l2 = L2[o2++])], S2[2 * l2 + 1]), t3.faceVertexUvs[r2][a2].push(A2);
                if (g2 && (u2 = 3 * L2[o2++], w2.normal.set(C2[u2++], C2[u2++], C2[u2])), v2)
                  for (r2 = 0; r2 < 3; r2++)
                    u2 = 3 * L2[o2++], T2 = new Ht(C2[u2++], C2[u2++], C2[u2]), w2.vertexNormals.push(T2);
                if (y2 && (c3 = L2[o2++], w2.color.setHex(P2[c3])), x2)
                  for (r2 = 0; r2 < 3; r2++)
                    c3 = L2[o2++], w2.vertexColors.push(new rn(P2[c3]));
                t3.faces.push(w2);
              }
          }(e2, n2), function(e3, t3) {
            var n3 = void 0 !== e3.influencesPerVertex ? e3.influencesPerVertex : 2;
            if (e3.skinWeights)
              for (var r2 = 0, i3 = e3.skinWeights.length; r2 < i3; r2 += n3) {
                var a2 = e3.skinWeights[r2], o2 = n3 > 1 ? e3.skinWeights[r2 + 1] : 0, s2 = n3 > 2 ? e3.skinWeights[r2 + 2] : 0, c3 = n3 > 3 ? e3.skinWeights[r2 + 3] : 0;
                t3.skinWeights.push(new Xt(a2, o2, s2, c3));
              }
            if (e3.skinIndices)
              for (r2 = 0, i3 = e3.skinIndices.length; r2 < i3; r2 += n3) {
                var u2 = e3.skinIndices[r2], l2 = n3 > 1 ? e3.skinIndices[r2 + 1] : 0, h2 = n3 > 2 ? e3.skinIndices[r2 + 2] : 0, d2 = n3 > 3 ? e3.skinIndices[r2 + 3] : 0;
                t3.skinIndices.push(new Xt(u2, l2, h2, d2));
              }
            t3.bones = e3.bones, t3.bones && t3.bones.length > 0 && (t3.skinWeights.length !== t3.skinIndices.length || t3.skinIndices.length !== t3.vertices.length) && console.warn("When skinning, number of vertices (" + t3.vertices.length + "), skinIndices (" + t3.skinIndices.length + "), and skinWeights (" + t3.skinWeights.length + ") should match.");
          }(e2, n2), function(e3, t3) {
            var n3 = e3.scale;
            if (void 0 !== e3.morphTargets)
              for (var r2 = 0, i3 = e3.morphTargets.length; r2 < i3; r2++) {
                t3.morphTargets[r2] = {}, t3.morphTargets[r2].name = e3.morphTargets[r2].name, t3.morphTargets[r2].vertices = [];
                for (var a2 = t3.morphTargets[r2].vertices, o2 = e3.morphTargets[r2].vertices, s2 = 0, c3 = o2.length; s2 < c3; s2 += 3) {
                  var u2 = new Ht();
                  u2.x = o2[s2] * n3, u2.y = o2[s2 + 1] * n3, u2.z = o2[s2 + 2] * n3, a2.push(u2);
                }
              }
            if (void 0 !== e3.morphColors && e3.morphColors.length > 0) {
              console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');
              var l2 = t3.faces, h2 = e3.morphColors[0].colors;
              for (r2 = 0, i3 = l2.length; r2 < i3; r2++)
                l2[r2].color.fromArray(h2, 3 * r2);
            }
          }(e2, n2), function(e3, t3) {
            var n3 = [], r2 = [];
            void 0 !== e3.animation && r2.push(e3.animation), void 0 !== e3.animations && (e3.animations.length ? r2 = r2.concat(e3.animations) : r2.push(e3.animations));
            for (var i3 = 0; i3 < r2.length; i3++) {
              var a2 = es.parseAnimation(r2[i3], t3.bones);
              a2 && n3.push(a2);
            }
            if (t3.morphTargets) {
              var o2 = es.CreateClipsFromMorphTargetSequences(t3.morphTargets, 10);
              n3 = n3.concat(o2);
            }
            n3.length > 0 && (t3.animations = n3);
          }(e2, n2), n2.computeFaceNormals(), n2.computeBoundingSphere(), void 0 === e2.materials || 0 === e2.materials.length ? { geometry: n2 } : { geometry: n2, materials: as.prototype.initMaterials(e2.materials, t2, this.crossOrigin) };
        };
      }() }), Object.assign(cs.prototype, { crossOrigin: "anonymous", load: function(e2, t2, n2, r2) {
        "" === this.texturePath && (this.texturePath = e2.substring(0, e2.lastIndexOf("/") + 1));
        var i3 = this;
        new to(i3.manager).load(e2, function(n3) {
          var a2 = null;
          try {
            a2 = JSON.parse(n3);
          } catch (t3) {
            return void 0 !== r2 && r2(t3), void console.error("THREE:ObjectLoader: Can't parse " + e2 + ".", t3.message);
          }
          var o2 = a2.metadata;
          void 0 !== o2 && void 0 !== o2.type && "geometry" !== o2.type.toLowerCase() ? i3.parse(a2, t2) : console.error("THREE.ObjectLoader: Can't load " + e2 + ". Use THREE.JSONLoader instead.");
        }, n2, r2);
      }, setTexturePath: function(e2) {
        return this.texturePath = e2, this;
      }, setCrossOrigin: function(e2) {
        return this.crossOrigin = e2, this;
      }, parse: function(e2, t2) {
        var n2 = this.parseShape(e2.shapes), r2 = this.parseGeometries(e2.geometries, n2), i3 = this.parseImages(e2.images, function() {
          void 0 !== t2 && t2(s2);
        }), a2 = this.parseTextures(e2.textures, i3), o2 = this.parseMaterials(e2.materials, a2), s2 = this.parseObject(e2.object, r2, o2);
        return e2.animations && (s2.animations = this.parseAnimations(e2.animations)), void 0 !== e2.images && 0 !== e2.images.length || void 0 !== t2 && t2(s2), s2;
      }, parseShape: function(e2) {
        var t2 = {};
        if (void 0 !== e2)
          for (var n2 = 0, r2 = e2.length; n2 < r2; n2++) {
            var i3 = new Co().fromJSON(e2[n2]);
            t2[i3.uuid] = i3;
          }
        return t2;
      }, parseGeometries: function(e2, t2) {
        var n2 = {};
        if (void 0 !== e2)
          for (var r2 = new ss(), i3 = new rs(), a2 = 0, o2 = e2.length; a2 < o2; a2++) {
            var s2, c3 = e2[a2];
            switch (c3.type) {
              case "PlaneGeometry":
              case "PlaneBufferGeometry":
                s2 = new za[c3.type](c3.width, c3.height, c3.widthSegments, c3.heightSegments);
                break;
              case "BoxGeometry":
              case "BoxBufferGeometry":
              case "CubeGeometry":
                s2 = new za[c3.type](c3.width, c3.height, c3.depth, c3.widthSegments, c3.heightSegments, c3.depthSegments);
                break;
              case "CircleGeometry":
              case "CircleBufferGeometry":
                s2 = new za[c3.type](c3.radius, c3.segments, c3.thetaStart, c3.thetaLength);
                break;
              case "CylinderGeometry":
              case "CylinderBufferGeometry":
                s2 = new za[c3.type](c3.radiusTop, c3.radiusBottom, c3.height, c3.radialSegments, c3.heightSegments, c3.openEnded, c3.thetaStart, c3.thetaLength);
                break;
              case "ConeGeometry":
              case "ConeBufferGeometry":
                s2 = new za[c3.type](c3.radius, c3.height, c3.radialSegments, c3.heightSegments, c3.openEnded, c3.thetaStart, c3.thetaLength);
                break;
              case "SphereGeometry":
              case "SphereBufferGeometry":
                s2 = new za[c3.type](c3.radius, c3.widthSegments, c3.heightSegments, c3.phiStart, c3.phiLength, c3.thetaStart, c3.thetaLength);
                break;
              case "DodecahedronGeometry":
              case "DodecahedronBufferGeometry":
              case "IcosahedronGeometry":
              case "IcosahedronBufferGeometry":
              case "OctahedronGeometry":
              case "OctahedronBufferGeometry":
              case "TetrahedronGeometry":
              case "TetrahedronBufferGeometry":
                s2 = new za[c3.type](c3.radius, c3.detail);
                break;
              case "RingGeometry":
              case "RingBufferGeometry":
                s2 = new za[c3.type](c3.innerRadius, c3.outerRadius, c3.thetaSegments, c3.phiSegments, c3.thetaStart, c3.thetaLength);
                break;
              case "TorusGeometry":
              case "TorusBufferGeometry":
                s2 = new za[c3.type](c3.radius, c3.tube, c3.radialSegments, c3.tubularSegments, c3.arc);
                break;
              case "TorusKnotGeometry":
              case "TorusKnotBufferGeometry":
                s2 = new za[c3.type](c3.radius, c3.tube, c3.tubularSegments, c3.radialSegments, c3.p, c3.q);
                break;
              case "LatheGeometry":
              case "LatheBufferGeometry":
                s2 = new za[c3.type](c3.points, c3.segments, c3.phiStart, c3.phiLength);
                break;
              case "PolyhedronGeometry":
              case "PolyhedronBufferGeometry":
                s2 = new za[c3.type](c3.vertices, c3.indices, c3.radius, c3.details);
                break;
              case "ShapeGeometry":
              case "ShapeBufferGeometry":
                for (var u2 = [], l2 = 0, h2 = c3.shapes.length; l2 < h2; l2++) {
                  var d2 = t2[c3.shapes[l2]];
                  u2.push(d2);
                }
                s2 = new za[c3.type](u2, c3.curveSegments);
                break;
              case "ExtrudeGeometry":
              case "ExtrudeBufferGeometry":
                for (u2 = [], l2 = 0, h2 = c3.shapes.length; l2 < h2; l2++) {
                  d2 = t2[c3.shapes[l2]];
                  u2.push(d2);
                }
                var p2 = c3.options.extrudePath;
                void 0 !== p2 && (c3.options.extrudePath = new Ao[p2.type]().fromJSON(p2)), s2 = new za[c3.type](u2, c3.options);
                break;
              case "BufferGeometry":
                s2 = i3.parse(c3);
                break;
              case "Geometry":
                s2 = r2.parse(c3, this.texturePath).geometry;
                break;
              default:
                console.warn('THREE.ObjectLoader: Unsupported geometry type "' + c3.type + '"');
                continue;
            }
            s2.uuid = c3.uuid, void 0 !== c3.name && (s2.name = c3.name), true === s2.isBufferGeometry && void 0 !== c3.userData && (s2.userData = c3.userData), n2[c3.uuid] = s2;
          }
        return n2;
      }, parseMaterials: function(e2, t2) {
        var n2 = {};
        if (void 0 !== e2) {
          var r2 = new ns();
          r2.setTextures(t2);
          for (var i3 = 0, a2 = e2.length; i3 < a2; i3++) {
            var o2 = e2[i3];
            if ("MultiMaterial" === o2.type) {
              for (var s2 = [], c3 = 0; c3 < o2.materials.length; c3++)
                s2.push(r2.parse(o2.materials[c3]));
              n2[o2.uuid] = s2;
            } else
              n2[o2.uuid] = r2.parse(o2);
          }
        }
        return n2;
      }, parseAnimations: function(e2) {
        for (var t2 = [], n2 = 0; n2 < e2.length; n2++) {
          var r2 = e2[n2], i3 = es.parse(r2);
          void 0 !== r2.uuid && (i3.uuid = r2.uuid), t2.push(i3);
        }
        return t2;
      }, parseImages: function(e2, t2) {
        var n2 = this, r2 = {};
        function i3(e3) {
          return n2.manager.itemStart(e3), a2.load(e3, function() {
            n2.manager.itemEnd(e3);
          }, void 0, function() {
            n2.manager.itemEnd(e3), n2.manager.itemError(e3);
          });
        }
        if (void 0 !== e2 && e2.length > 0) {
          var a2 = new io(new Qa(t2));
          a2.setCrossOrigin(this.crossOrigin);
          for (var o2 = 0, s2 = e2.length; o2 < s2; o2++) {
            var c3 = e2[o2], u2 = c3.url;
            if (Array.isArray(u2)) {
              r2[c3.uuid] = [];
              for (var l2 = 0, h2 = u2.length; l2 < h2; l2++) {
                var d2 = u2[l2], p2 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(d2) ? d2 : n2.texturePath + d2;
                r2[c3.uuid].push(i3(p2));
              }
            } else {
              p2 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c3.url) ? c3.url : n2.texturePath + c3.url;
              r2[c3.uuid] = i3(p2);
            }
          }
        }
        return r2;
      }, parseTextures: function(e2, t2) {
        function n2(e3, t3) {
          return "number" == typeof e3 ? e3 : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", e3), t3[e3]);
        }
        var r2 = {};
        if (void 0 !== e2)
          for (var i3 = 0, a2 = e2.length; i3 < a2; i3++) {
            var o2, s2 = e2[i3];
            void 0 === s2.image && console.warn('THREE.ObjectLoader: No "image" specified for', s2.uuid), void 0 === t2[s2.image] && console.warn("THREE.ObjectLoader: Undefined image", s2.image), (o2 = Array.isArray(t2[s2.image]) ? new Vn(t2[s2.image]) : new Wt(t2[s2.image])).needsUpdate = true, o2.uuid = s2.uuid, void 0 !== s2.name && (o2.name = s2.name), void 0 !== s2.mapping && (o2.mapping = n2(s2.mapping, ls)), void 0 !== s2.offset && o2.offset.fromArray(s2.offset), void 0 !== s2.repeat && o2.repeat.fromArray(s2.repeat), void 0 !== s2.center && o2.center.fromArray(s2.center), void 0 !== s2.rotation && (o2.rotation = s2.rotation), void 0 !== s2.wrap && (o2.wrapS = n2(s2.wrap[0], hs), o2.wrapT = n2(s2.wrap[1], hs)), void 0 !== s2.format && (o2.format = s2.format), void 0 !== s2.minFilter && (o2.minFilter = n2(s2.minFilter, ds)), void 0 !== s2.magFilter && (o2.magFilter = n2(s2.magFilter, ds)), void 0 !== s2.anisotropy && (o2.anisotropy = s2.anisotropy), void 0 !== s2.flipY && (o2.flipY = s2.flipY), r2[s2.uuid] = o2;
          }
        return r2;
      }, parseObject: function(e2, t2, n2) {
        var r2;
        function i3(e3) {
          return void 0 === t2[e3] && console.warn("THREE.ObjectLoader: Undefined geometry", e3), t2[e3];
        }
        function a2(e3) {
          if (void 0 !== e3) {
            if (Array.isArray(e3)) {
              for (var t3 = [], r3 = 0, i4 = e3.length; r3 < i4; r3++) {
                var a3 = e3[r3];
                void 0 === n2[a3] && console.warn("THREE.ObjectLoader: Undefined material", a3), t3.push(n2[a3]);
              }
              return t3;
            }
            return void 0 === n2[e3] && console.warn("THREE.ObjectLoader: Undefined material", e3), n2[e3];
          }
        }
        switch (e2.type) {
          case "Scene":
            r2 = new ui(), void 0 !== e2.background && Number.isInteger(e2.background) && (r2.background = new rn(e2.background)), void 0 !== e2.fog && ("Fog" === e2.fog.type ? r2.fog = new ci(e2.fog.color, e2.fog.near, e2.fog.far) : "FogExp2" === e2.fog.type && (r2.fog = new si(e2.fog.color, e2.fog.density)));
            break;
          case "PerspectiveCamera":
            r2 = new ri(e2.fov, e2.aspect, e2.near, e2.far), void 0 !== e2.focus && (r2.focus = e2.focus), void 0 !== e2.zoom && (r2.zoom = e2.zoom), void 0 !== e2.filmGauge && (r2.filmGauge = e2.filmGauge), void 0 !== e2.filmOffset && (r2.filmOffset = e2.filmOffset), void 0 !== e2.view && (r2.view = Object.assign({}, e2.view));
            break;
          case "OrthographicCamera":
            r2 = new fn(e2.left, e2.right, e2.top, e2.bottom, e2.near, e2.far), void 0 !== e2.zoom && (r2.zoom = e2.zoom), void 0 !== e2.view && (r2.view = Object.assign({}, e2.view));
            break;
          case "AmbientLight":
            r2 = new Go(e2.color, e2.intensity);
            break;
          case "DirectionalLight":
            r2 = new Fo(e2.color, e2.intensity);
            break;
          case "PointLight":
            r2 = new Uo(e2.color, e2.intensity, e2.distance, e2.decay);
            break;
          case "RectAreaLight":
            r2 = new zo(e2.color, e2.intensity, e2.width, e2.height);
            break;
          case "SpotLight":
            r2 = new Do(e2.color, e2.intensity, e2.distance, e2.angle, e2.penumbra, e2.decay);
            break;
          case "HemisphereLight":
            r2 = new Oo(e2.color, e2.groundColor, e2.intensity);
            break;
          case "SkinnedMesh":
            console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
          case "Mesh":
            var o2 = i3(e2.geometry), s2 = a2(e2.material);
            r2 = o2.bones && o2.bones.length > 0 ? new vi(o2, s2) : new kn(o2, s2);
            break;
          case "LOD":
            r2 = new fi();
            break;
          case "Line":
            r2 = new xi(i3(e2.geometry), a2(e2.material), e2.mode);
            break;
          case "LineLoop":
            r2 = new wi(i3(e2.geometry), a2(e2.material));
            break;
          case "LineSegments":
            r2 = new bi(i3(e2.geometry), a2(e2.material));
            break;
          case "PointCloud":
          case "Points":
            r2 = new Mi(i3(e2.geometry), a2(e2.material));
            break;
          case "Sprite":
            r2 = new pi(a2(e2.material));
            break;
          case "Group":
            r2 = new ni();
            break;
          default:
            r2 = new dn();
        }
        if (r2.uuid = e2.uuid, void 0 !== e2.name && (r2.name = e2.name), void 0 !== e2.matrix ? (r2.matrix.fromArray(e2.matrix), void 0 !== e2.matrixAutoUpdate && (r2.matrixAutoUpdate = e2.matrixAutoUpdate), r2.matrixAutoUpdate && r2.matrix.decompose(r2.position, r2.quaternion, r2.scale)) : (void 0 !== e2.position && r2.position.fromArray(e2.position), void 0 !== e2.rotation && r2.rotation.fromArray(e2.rotation), void 0 !== e2.quaternion && r2.quaternion.fromArray(e2.quaternion), void 0 !== e2.scale && r2.scale.fromArray(e2.scale)), void 0 !== e2.castShadow && (r2.castShadow = e2.castShadow), void 0 !== e2.receiveShadow && (r2.receiveShadow = e2.receiveShadow), e2.shadow && (void 0 !== e2.shadow.bias && (r2.shadow.bias = e2.shadow.bias), void 0 !== e2.shadow.radius && (r2.shadow.radius = e2.shadow.radius), void 0 !== e2.shadow.mapSize && r2.shadow.mapSize.fromArray(e2.shadow.mapSize), void 0 !== e2.shadow.camera && (r2.shadow.camera = this.parseObject(e2.shadow.camera))), void 0 !== e2.visible && (r2.visible = e2.visible), void 0 !== e2.frustumCulled && (r2.frustumCulled = e2.frustumCulled), void 0 !== e2.renderOrder && (r2.renderOrder = e2.renderOrder), void 0 !== e2.userData && (r2.userData = e2.userData), void 0 !== e2.layers && (r2.layers.mask = e2.layers), void 0 !== e2.children)
          for (var c3 = e2.children, u2 = 0; u2 < c3.length; u2++)
            r2.add(this.parseObject(c3[u2], t2, n2));
        if ("LOD" === e2.type)
          for (var l2 = e2.levels, h2 = 0; h2 < l2.length; h2++) {
            var d2 = l2[h2], p2 = r2.getObjectByProperty("uuid", d2.object);
            void 0 !== p2 && r2.addLevel(p2, d2.distance);
          }
        return r2;
      } });
      var us, ls = { UVMapping: se, CubeReflectionMapping: ce, CubeRefractionMapping: ue, EquirectangularReflectionMapping: le, EquirectangularRefractionMapping: he, SphericalReflectionMapping: de, CubeUVReflectionMapping: pe, CubeUVRefractionMapping: fe }, hs = { RepeatWrapping: me, ClampToEdgeWrapping: ge, MirroredRepeatWrapping: ve }, ds = { NearestFilter: ye, NearestMipMapNearestFilter: xe, NearestMipMapLinearFilter: be, LinearFilter: we, LinearMipMapNearestFilter: _e, LinearMipMapLinearFilter: Me };
      function ps(e2) {
        "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.manager = void 0 !== e2 ? e2 : $a, this.options = void 0;
      }
      function fs() {
        this.type = "ShapePath", this.color = new rn(), this.subPaths = [], this.currentPath = null;
      }
      function ms(e2) {
        this.type = "Font", this.data = e2;
      }
      function gs(e2, t2, n2, r2, i3) {
        var a2 = i3.glyphs[e2] || i3.glyphs["?"];
        if (a2) {
          var o2, s2, c3, u2, l2, h2, d2, p2, f2 = new fs();
          if (a2.o)
            for (var m3 = a2._cachedOutline || (a2._cachedOutline = a2.o.split(" ")), g2 = 0, v2 = m3.length; g2 < v2; ) {
              switch (m3[g2++]) {
                case "m":
                  o2 = m3[g2++] * t2 + n2, s2 = m3[g2++] * t2 + r2, f2.moveTo(o2, s2);
                  break;
                case "l":
                  o2 = m3[g2++] * t2 + n2, s2 = m3[g2++] * t2 + r2, f2.lineTo(o2, s2);
                  break;
                case "q":
                  c3 = m3[g2++] * t2 + n2, u2 = m3[g2++] * t2 + r2, l2 = m3[g2++] * t2 + n2, h2 = m3[g2++] * t2 + r2, f2.quadraticCurveTo(l2, h2, c3, u2);
                  break;
                case "b":
                  c3 = m3[g2++] * t2 + n2, u2 = m3[g2++] * t2 + r2, l2 = m3[g2++] * t2 + n2, h2 = m3[g2++] * t2 + r2, d2 = m3[g2++] * t2 + n2, p2 = m3[g2++] * t2 + r2, f2.bezierCurveTo(l2, h2, d2, p2, c3, u2);
              }
            }
          return { offsetX: a2.ha * t2, path: f2 };
        }
      }
      function vs(e2) {
        this.manager = void 0 !== e2 ? e2 : $a;
      }
      ps.prototype = { constructor: ps, setOptions: function(e2) {
        return this.options = e2, this;
      }, load: function(e2, t2, n2, r2) {
        void 0 === e2 && (e2 = ""), void 0 !== this.path && (e2 = this.path + e2), e2 = this.manager.resolveURL(e2);
        var i3 = this, a2 = Ka.get(e2);
        if (void 0 !== a2)
          return i3.manager.itemStart(e2), setTimeout(function() {
            t2 && t2(a2), i3.manager.itemEnd(e2);
          }, 0), a2;
        fetch(e2).then(function(e3) {
          return e3.blob();
        }).then(function(e3) {
          return createImageBitmap(e3, i3.options);
        }).then(function(n3) {
          Ka.add(e2, n3), t2 && t2(n3), i3.manager.itemEnd(e2);
        }).catch(function(t3) {
          r2 && r2(t3), i3.manager.itemEnd(e2), i3.manager.itemError(e2);
        });
      }, setCrossOrigin: function() {
        return this;
      }, setPath: function(e2) {
        return this.path = e2, this;
      } }, Object.assign(fs.prototype, { moveTo: function(e2, t2) {
        this.currentPath = new Ro(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e2, t2);
      }, lineTo: function(e2, t2) {
        this.currentPath.lineTo(e2, t2);
      }, quadraticCurveTo: function(e2, t2, n2, r2) {
        this.currentPath.quadraticCurveTo(e2, t2, n2, r2);
      }, bezierCurveTo: function(e2, t2, n2, r2, i3, a2) {
        this.currentPath.bezierCurveTo(e2, t2, n2, r2, i3, a2);
      }, splineThru: function(e2) {
        this.currentPath.splineThru(e2);
      }, toShapes: function(e2, t2) {
        function n2(e3) {
          for (var t3 = [], n3 = 0, r3 = e3.length; n3 < r3; n3++) {
            var i4 = e3[n3], a3 = new Co();
            a3.curves = i4.curves, t3.push(a3);
          }
          return t3;
        }
        function r2(e3, t3) {
          for (var n3 = t3.length, r3 = false, i4 = n3 - 1, a3 = 0; a3 < n3; i4 = a3++) {
            var o3 = t3[i4], s3 = t3[a3], c4 = s3.x - o3.x, u3 = s3.y - o3.y;
            if (Math.abs(u3) > Number.EPSILON) {
              if (u3 < 0 && (o3 = t3[a3], c4 = -c4, s3 = t3[i4], u3 = -u3), e3.y < o3.y || e3.y > s3.y)
                continue;
              if (e3.y === o3.y) {
                if (e3.x === o3.x)
                  return true;
              } else {
                var l3 = u3 * (e3.x - o3.x) - c4 * (e3.y - o3.y);
                if (0 === l3)
                  return true;
                if (l3 < 0)
                  continue;
                r3 = !r3;
              }
            } else {
              if (e3.y !== o3.y)
                continue;
              if (s3.x <= e3.x && e3.x <= o3.x || o3.x <= e3.x && e3.x <= s3.x)
                return true;
            }
          }
          return r3;
        }
        var i3 = ma.isClockWise, a2 = this.subPaths;
        if (0 === a2.length)
          return [];
        if (true === t2)
          return n2(a2);
        var o2, s2, c3, u2 = [];
        if (1 === a2.length)
          return s2 = a2[0], (c3 = new Co()).curves = s2.curves, u2.push(c3), u2;
        var l2 = !i3(a2[0].getPoints());
        l2 = e2 ? !l2 : l2;
        var h2, d2, p2 = [], f2 = [], m3 = [], g2 = 0;
        f2[g2] = void 0, m3[g2] = [];
        for (var v2 = 0, y2 = a2.length; v2 < y2; v2++)
          o2 = i3(h2 = (s2 = a2[v2]).getPoints()), (o2 = e2 ? !o2 : o2) ? (!l2 && f2[g2] && g2++, f2[g2] = { s: new Co(), p: h2 }, f2[g2].s.curves = s2.curves, l2 && g2++, m3[g2] = []) : m3[g2].push({ h: s2, p: h2[0] });
        if (!f2[0])
          return n2(a2);
        if (f2.length > 1) {
          for (var x2 = false, b2 = [], w2 = 0, _2 = f2.length; w2 < _2; w2++)
            p2[w2] = [];
          for (w2 = 0, _2 = f2.length; w2 < _2; w2++)
            for (var M2 = m3[w2], E2 = 0; E2 < M2.length; E2++) {
              for (var T2 = M2[E2], S2 = true, A2 = 0; A2 < f2.length; A2++)
                r2(T2.p, f2[A2].p) && (w2 !== A2 && b2.push({ froms: w2, tos: A2, hole: E2 }), S2 ? (S2 = false, p2[A2].push(T2)) : x2 = true);
              S2 && p2[w2].push(T2);
            }
          b2.length > 0 && (x2 || (m3 = p2));
        }
        v2 = 0;
        for (var L2 = f2.length; v2 < L2; v2++) {
          c3 = f2[v2].s, u2.push(c3);
          for (var R2 = 0, C2 = (d2 = m3[v2]).length; R2 < C2; R2++)
            c3.holes.push(d2[R2].h);
        }
        return u2;
      } }), Object.assign(ms.prototype, { isFont: true, generateShapes: function(e2, t2) {
        void 0 === t2 && (t2 = 100);
        for (var n2 = [], r2 = function(e3, t3, n3) {
          for (var r3 = Array.from ? Array.from(e3) : String(e3).split(""), i4 = t3 / n3.resolution, a3 = (n3.boundingBox.yMax - n3.boundingBox.yMin + n3.underlineThickness) * i4, o2 = [], s2 = 0, c3 = 0, u2 = 0; u2 < r3.length; u2++) {
            var l2 = r3[u2];
            if ("\n" === l2)
              s2 = 0, c3 -= a3;
            else {
              var h2 = gs(l2, i4, s2, c3, n3);
              s2 += h2.offsetX, o2.push(h2.path);
            }
          }
          return o2;
        }(e2, t2, this.data), i3 = 0, a2 = r2.length; i3 < a2; i3++)
          Array.prototype.push.apply(n2, r2[i3].toShapes());
        return n2;
      } }), Object.assign(vs.prototype, { load: function(e2, t2, n2, r2) {
        var i3 = this, a2 = new to(this.manager);
        a2.setPath(this.path), a2.load(e2, function(e3) {
          var n3;
          try {
            n3 = JSON.parse(e3);
          } catch (t3) {
            console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), n3 = JSON.parse(e3.substring(65, e3.length - 2));
          }
          var r3 = i3.parse(n3);
          t2 && t2(r3);
        }, n2, r2);
      }, parse: function(e2) {
        return new ms(e2);
      }, setPath: function(e2) {
        return this.path = e2, this;
      } });
      var ys = { getContext: function() {
        return void 0 === us && (us = new (window.AudioContext || window.webkitAudioContext)()), us;
      }, setContext: function(e2) {
        us = e2;
      } };
      function xs(e2) {
        this.manager = void 0 !== e2 ? e2 : $a;
      }
      function bs() {
        this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new ri(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = false, this.cameraR = new ri(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = false;
      }
      function ws(e2, t2, n2) {
        dn.call(this), this.type = "CubeCamera";
        var r2 = new ri(90, 1, e2, t2);
        r2.up.set(0, -1, 0), r2.lookAt(new Ht(1, 0, 0)), this.add(r2);
        var i3 = new ri(90, 1, e2, t2);
        i3.up.set(0, -1, 0), i3.lookAt(new Ht(-1, 0, 0)), this.add(i3);
        var a2 = new ri(90, 1, e2, t2);
        a2.up.set(0, 0, 1), a2.lookAt(new Ht(0, 1, 0)), this.add(a2);
        var o2 = new ri(90, 1, e2, t2);
        o2.up.set(0, 0, -1), o2.lookAt(new Ht(0, -1, 0)), this.add(o2);
        var s2 = new ri(90, 1, e2, t2);
        s2.up.set(0, -1, 0), s2.lookAt(new Ht(0, 0, 1)), this.add(s2);
        var c3 = new ri(90, 1, e2, t2);
        c3.up.set(0, -1, 0), c3.lookAt(new Ht(0, 0, -1)), this.add(c3);
        var u2 = { format: Be, magFilter: we, minFilter: we };
        this.renderTarget = new Yt(n2, n2, u2), this.renderTarget.texture.name = "CubeCamera", this.update = function(e3, t3) {
          null === this.parent && this.updateMatrixWorld();
          var n3 = this.renderTarget, u3 = n3.texture.generateMipmaps;
          n3.texture.generateMipmaps = false, n3.activeCubeFace = 0, e3.render(t3, r2, n3), n3.activeCubeFace = 1, e3.render(t3, i3, n3), n3.activeCubeFace = 2, e3.render(t3, a2, n3), n3.activeCubeFace = 3, e3.render(t3, o2, n3), n3.activeCubeFace = 4, e3.render(t3, s2, n3), n3.texture.generateMipmaps = u3, n3.activeCubeFace = 5, e3.render(t3, c3, n3), e3.setRenderTarget(null);
        }, this.clear = function(e3, t3, n3, r3) {
          for (var i4 = this.renderTarget, a3 = 0; a3 < 6; a3++)
            i4.activeCubeFace = a3, e3.setRenderTarget(i4), e3.clear(t3, n3, r3);
          e3.setRenderTarget(null);
        };
      }
      function _s() {
        dn.call(this), this.type = "AudioListener", this.context = ys.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null;
      }
      function Ms(e2) {
        dn.call(this), this.type = "Audio", this.context = e2.context, this.gain = this.context.createGain(), this.gain.connect(e2.getInput()), this.autoplay = false, this.buffer = null, this.loop = false, this.startTime = 0, this.offset = 0, this.playbackRate = 1, this.isPlaying = false, this.hasPlaybackControl = true, this.sourceType = "empty", this.filters = [];
      }
      function Es(e2) {
        Ms.call(this, e2), this.panner = this.context.createPanner(), this.panner.connect(this.gain);
      }
      function Ts(e2, t2) {
        this.analyser = e2.context.createAnalyser(), this.analyser.fftSize = void 0 !== t2 ? t2 : 2048, this.data = new Uint8Array(this.analyser.frequencyBinCount), e2.getOutput().connect(this.analyser);
      }
      function Ss(e2, t2, n2) {
        this.binding = e2, this.valueSize = n2;
        var r2, i3 = Float64Array;
        switch (t2) {
          case "quaternion":
            r2 = this._slerp;
            break;
          case "string":
          case "bool":
            i3 = Array, r2 = this._select;
            break;
          default:
            r2 = this._lerp;
        }
        this.buffer = new i3(4 * n2), this._mixBufferRegion = r2, this.cumulativeWeight = 0, this.useCount = 0, this.referenceCount = 0;
      }
      Object.assign(xs.prototype, { load: function(e2, t2, n2, r2) {
        var i3 = new to(this.manager);
        i3.setResponseType("arraybuffer"), i3.load(e2, function(e3) {
          var n3 = e3.slice(0);
          ys.getContext().decodeAudioData(n3, function(e4) {
            t2(e4);
          });
        }, n2, r2);
      } }), Object.assign(bs.prototype, { update: function() {
        var e2, t2, n2, r2, i3, a2, o2, s2, c3 = new Gt(), u2 = new Gt();
        return function(l2) {
          if (e2 !== this || t2 !== l2.focus || n2 !== l2.fov || r2 !== l2.aspect * this.aspect || i3 !== l2.near || a2 !== l2.far || o2 !== l2.zoom || s2 !== this.eyeSep) {
            e2 = this, t2 = l2.focus, n2 = l2.fov, r2 = l2.aspect * this.aspect, i3 = l2.near, a2 = l2.far, o2 = l2.zoom;
            var h2, d2, p2 = l2.projectionMatrix.clone(), f2 = (s2 = this.eyeSep / 2) * i3 / t2, m3 = i3 * Math.tan(Bt.DEG2RAD * n2 * 0.5) / o2;
            u2.elements[12] = -s2, c3.elements[12] = s2, h2 = -m3 * r2 + f2, d2 = m3 * r2 + f2, p2.elements[0] = 2 * i3 / (d2 - h2), p2.elements[8] = (d2 + h2) / (d2 - h2), this.cameraL.projectionMatrix.copy(p2), h2 = -m3 * r2 - f2, d2 = m3 * r2 - f2, p2.elements[0] = 2 * i3 / (d2 - h2), p2.elements[8] = (d2 + h2) / (d2 - h2), this.cameraR.projectionMatrix.copy(p2);
          }
          this.cameraL.matrixWorld.copy(l2.matrixWorld).multiply(u2), this.cameraR.matrixWorld.copy(l2.matrixWorld).multiply(c3);
        };
      }() }), ws.prototype = Object.create(dn.prototype), ws.prototype.constructor = ws, _s.prototype = Object.assign(Object.create(dn.prototype), { constructor: _s, getInput: function() {
        return this.gain;
      }, removeFilter: function() {
        return null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
      }, getFilter: function() {
        return this.filter;
      }, setFilter: function(e2) {
        return null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e2, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
      }, getMasterVolume: function() {
        return this.gain.gain.value;
      }, setMasterVolume: function(e2) {
        return this.gain.gain.setTargetAtTime(e2, this.context.currentTime, 0.01), this;
      }, updateMatrixWorld: function() {
        var e2 = new Ht(), t2 = new zt(), n2 = new Ht(), r2 = new Ht();
        return function(i3) {
          dn.prototype.updateMatrixWorld.call(this, i3);
          var a2 = this.context.listener, o2 = this.up;
          this.matrixWorld.decompose(e2, t2, n2), r2.set(0, 0, -1).applyQuaternion(t2), a2.positionX ? (a2.positionX.setValueAtTime(e2.x, this.context.currentTime), a2.positionY.setValueAtTime(e2.y, this.context.currentTime), a2.positionZ.setValueAtTime(e2.z, this.context.currentTime), a2.forwardX.setValueAtTime(r2.x, this.context.currentTime), a2.forwardY.setValueAtTime(r2.y, this.context.currentTime), a2.forwardZ.setValueAtTime(r2.z, this.context.currentTime), a2.upX.setValueAtTime(o2.x, this.context.currentTime), a2.upY.setValueAtTime(o2.y, this.context.currentTime), a2.upZ.setValueAtTime(o2.z, this.context.currentTime)) : (a2.setPosition(e2.x, e2.y, e2.z), a2.setOrientation(r2.x, r2.y, r2.z, o2.x, o2.y, o2.z));
        };
      }() }), Ms.prototype = Object.assign(Object.create(dn.prototype), { constructor: Ms, getOutput: function() {
        return this.gain;
      }, setNodeSource: function(e2) {
        return this.hasPlaybackControl = false, this.sourceType = "audioNode", this.source = e2, this.connect(), this;
      }, setMediaElementSource: function(e2) {
        return this.hasPlaybackControl = false, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e2), this.connect(), this;
      }, setBuffer: function(e2) {
        return this.buffer = e2, this.sourceType = "buffer", this.autoplay && this.play(), this;
      }, play: function() {
        if (true !== this.isPlaying) {
          if (false !== this.hasPlaybackControl) {
            var e2 = this.context.createBufferSource();
            return e2.buffer = this.buffer, e2.loop = this.loop, e2.onended = this.onEnded.bind(this), e2.playbackRate.setValueAtTime(this.playbackRate, this.startTime), this.startTime = this.context.currentTime, e2.start(this.startTime, this.offset), this.isPlaying = true, this.source = e2, this.connect();
          }
          console.warn("THREE.Audio: this Audio has no playback control.");
        } else
          console.warn("THREE.Audio: Audio is already playing.");
      }, pause: function() {
        if (false !== this.hasPlaybackControl)
          return true === this.isPlaying && (this.source.stop(), this.source.onended = null, this.offset += (this.context.currentTime - this.startTime) * this.playbackRate, this.isPlaying = false), this;
        console.warn("THREE.Audio: this Audio has no playback control.");
      }, stop: function() {
        if (false !== this.hasPlaybackControl)
          return this.source.stop(), this.source.onended = null, this.offset = 0, this.isPlaying = false, this;
        console.warn("THREE.Audio: this Audio has no playback control.");
      }, connect: function() {
        if (this.filters.length > 0) {
          this.source.connect(this.filters[0]);
          for (var e2 = 1, t2 = this.filters.length; e2 < t2; e2++)
            this.filters[e2 - 1].connect(this.filters[e2]);
          this.filters[this.filters.length - 1].connect(this.getOutput());
        } else
          this.source.connect(this.getOutput());
        return this;
      }, disconnect: function() {
        if (this.filters.length > 0) {
          this.source.disconnect(this.filters[0]);
          for (var e2 = 1, t2 = this.filters.length; e2 < t2; e2++)
            this.filters[e2 - 1].disconnect(this.filters[e2]);
          this.filters[this.filters.length - 1].disconnect(this.getOutput());
        } else
          this.source.disconnect(this.getOutput());
        return this;
      }, getFilters: function() {
        return this.filters;
      }, setFilters: function(e2) {
        return e2 || (e2 = []), true === this.isPlaying ? (this.disconnect(), this.filters = e2, this.connect()) : this.filters = e2, this;
      }, getFilter: function() {
        return this.getFilters()[0];
      }, setFilter: function(e2) {
        return this.setFilters(e2 ? [e2] : []);
      }, setPlaybackRate: function(e2) {
        if (false !== this.hasPlaybackControl)
          return this.playbackRate = e2, true === this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime), this;
        console.warn("THREE.Audio: this Audio has no playback control.");
      }, getPlaybackRate: function() {
        return this.playbackRate;
      }, onEnded: function() {
        this.isPlaying = false;
      }, getLoop: function() {
        return false === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), false) : this.loop;
      }, setLoop: function(e2) {
        if (false !== this.hasPlaybackControl)
          return this.loop = e2, true === this.isPlaying && (this.source.loop = this.loop), this;
        console.warn("THREE.Audio: this Audio has no playback control.");
      }, getVolume: function() {
        return this.gain.gain.value;
      }, setVolume: function(e2) {
        return this.gain.gain.setTargetAtTime(e2, this.context.currentTime, 0.01), this;
      } }), Es.prototype = Object.assign(Object.create(Ms.prototype), { constructor: Es, getOutput: function() {
        return this.panner;
      }, getRefDistance: function() {
        return this.panner.refDistance;
      }, setRefDistance: function(e2) {
        return this.panner.refDistance = e2, this;
      }, getRolloffFactor: function() {
        return this.panner.rolloffFactor;
      }, setRolloffFactor: function(e2) {
        return this.panner.rolloffFactor = e2, this;
      }, getDistanceModel: function() {
        return this.panner.distanceModel;
      }, setDistanceModel: function(e2) {
        return this.panner.distanceModel = e2, this;
      }, getMaxDistance: function() {
        return this.panner.maxDistance;
      }, setMaxDistance: function(e2) {
        return this.panner.maxDistance = e2, this;
      }, setDirectionalCone: function(e2, t2, n2) {
        return this.panner.coneInnerAngle = e2, this.panner.coneOuterAngle = t2, this.panner.coneOuterGain = n2, this;
      }, updateMatrixWorld: function() {
        var e2 = new Ht(), t2 = new zt(), n2 = new Ht(), r2 = new Ht();
        return function(i3) {
          dn.prototype.updateMatrixWorld.call(this, i3);
          var a2 = this.panner;
          this.matrixWorld.decompose(e2, t2, n2), r2.set(0, 0, 1).applyQuaternion(t2), a2.setPosition(e2.x, e2.y, e2.z), a2.setOrientation(r2.x, r2.y, r2.z);
        };
      }() }), Object.assign(Ts.prototype, { getFrequencyData: function() {
        return this.analyser.getByteFrequencyData(this.data), this.data;
      }, getAverageFrequency: function() {
        for (var e2 = 0, t2 = this.getFrequencyData(), n2 = 0; n2 < t2.length; n2++)
          e2 += t2[n2];
        return e2 / t2.length;
      } }), Object.assign(Ss.prototype, { accumulate: function(e2, t2) {
        var n2 = this.buffer, r2 = this.valueSize, i3 = e2 * r2 + r2, a2 = this.cumulativeWeight;
        if (0 === a2) {
          for (var o2 = 0; o2 !== r2; ++o2)
            n2[i3 + o2] = n2[o2];
          a2 = t2;
        } else {
          var s2 = t2 / (a2 += t2);
          this._mixBufferRegion(n2, i3, 0, s2, r2);
        }
        this.cumulativeWeight = a2;
      }, apply: function(e2) {
        var t2 = this.valueSize, n2 = this.buffer, r2 = e2 * t2 + t2, i3 = this.cumulativeWeight, a2 = this.binding;
        if (this.cumulativeWeight = 0, i3 < 1) {
          var o2 = 3 * t2;
          this._mixBufferRegion(n2, r2, o2, 1 - i3, t2);
        }
        for (var s2 = t2, c3 = t2 + t2; s2 !== c3; ++s2)
          if (n2[s2] !== n2[s2 + t2]) {
            a2.setValue(n2, r2);
            break;
          }
      }, saveOriginalState: function() {
        var e2 = this.binding, t2 = this.buffer, n2 = this.valueSize, r2 = 3 * n2;
        e2.getValue(t2, r2);
        for (var i3 = n2, a2 = r2; i3 !== a2; ++i3)
          t2[i3] = t2[r2 + i3 % n2];
        this.cumulativeWeight = 0;
      }, restoreOriginalState: function() {
        var e2 = 3 * this.valueSize;
        this.binding.setValue(this.buffer, e2);
      }, _select: function(e2, t2, n2, r2, i3) {
        if (r2 >= 0.5)
          for (var a2 = 0; a2 !== i3; ++a2)
            e2[t2 + a2] = e2[n2 + a2];
      }, _slerp: function(e2, t2, n2, r2) {
        zt.slerpFlat(e2, t2, e2, t2, e2, n2, r2);
      }, _lerp: function(e2, t2, n2, r2, i3) {
        for (var a2 = 1 - r2, o2 = 0; o2 !== i3; ++o2) {
          var s2 = t2 + o2;
          e2[s2] = e2[s2] * a2 + e2[n2 + o2] * r2;
        }
      } });
      var As, Ls;
      function Rs(e2, t2, n2) {
        var r2 = n2 || Cs.parseTrackName(t2);
        this._targetGroup = e2, this._bindings = e2.subscribe_(t2, r2);
      }
      function Cs(e2, t2, n2) {
        this.path = t2, this.parsedPath = n2 || Cs.parseTrackName(t2), this.node = Cs.findNode(e2, this.parsedPath.nodeName) || e2, this.rootNode = e2;
      }
      function Ps() {
        this.uuid = Bt.generateUUID(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
        var e2 = {};
        this._indicesByUUID = e2;
        for (var t2 = 0, n2 = arguments.length; t2 !== n2; ++t2)
          e2[arguments[t2].uuid] = t2;
        this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
        var r2 = this;
        this.stats = { objects: { get total() {
          return r2._objects.length;
        }, get inUse() {
          return this.total - r2.nCachedObjects_;
        } }, get bindingsPerObject() {
          return r2._bindings.length;
        } };
      }
      function Os(e2, t2, n2) {
        this._mixer = e2, this._clip = t2, this._localRoot = n2 || null;
        for (var r2 = t2.tracks, i3 = r2.length, a2 = new Array(i3), o2 = { endingStart: xt, endingEnd: xt }, s2 = 0; s2 !== i3; ++s2) {
          var c3 = r2[s2].createInterpolant(null);
          a2[s2] = c3, c3.settings = o2;
        }
        this._interpolantSettings = o2, this._interpolants = a2, this._propertyBindings = new Array(i3), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = ft, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = false, this.enabled = true, this.clampWhenFinished = false, this.zeroSlopeAtStart = true, this.zeroSlopeAtEnd = true;
      }
      function Ns(e2) {
        this._root = e2, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
      }
      function Is(e2) {
        "string" == typeof e2 && (console.warn("THREE.Uniform: Type parameter is no longer needed."), e2 = arguments[1]), this.value = e2;
      }
      function Ds() {
        Pn.call(this), this.type = "InstancedBufferGeometry", this.maxInstancedCount = void 0;
      }
      function Us(e2, t2, n2) {
        li.call(this, e2, t2), this.meshPerAttribute = n2 || 1;
      }
      function Bs(e2, t2, n2) {
        yn.call(this, e2, t2), this.meshPerAttribute = n2 || 1;
      }
      function Fs(e2, t2, n2, r2) {
        this.ray = new zn(e2, t2), this.near = n2 || 0, this.far = r2 || 1 / 0, this.params = { Mesh: {}, Line: {}, LOD: {}, Points: { threshold: 1 }, Sprite: {} }, Object.defineProperties(this.params, { PointCloud: { get: function() {
          return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."), this.Points;
        } } });
      }
      function Gs(e2, t2) {
        return e2.distance - t2.distance;
      }
      function zs(e2, t2, n2, r2) {
        if (false !== e2.visible && (e2.raycast(t2, n2), true === r2))
          for (var i3 = e2.children, a2 = 0, o2 = i3.length; a2 < o2; a2++)
            zs(i3[a2], t2, n2, true);
      }
      function Hs(e2) {
        this.autoStart = void 0 === e2 || e2, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = false;
      }
      function ks(e2, t2, n2) {
        return this.radius = void 0 !== e2 ? e2 : 1, this.phi = void 0 !== t2 ? t2 : 0, this.theta = void 0 !== n2 ? n2 : 0, this;
      }
      function js(e2, t2, n2) {
        return this.radius = void 0 !== e2 ? e2 : 1, this.theta = void 0 !== t2 ? t2 : 0, this.y = void 0 !== n2 ? n2 : 0, this;
      }
      function Vs(e2, t2) {
        this.min = void 0 !== e2 ? e2 : new Ft(1 / 0, 1 / 0), this.max = void 0 !== t2 ? t2 : new Ft(-1 / 0, -1 / 0);
      }
      function Ws(e2, t2) {
        this.start = void 0 !== e2 ? e2 : new Ht(), this.end = void 0 !== t2 ? t2 : new Ht();
      }
      function Xs(e2) {
        dn.call(this), this.material = e2, this.render = function() {
        };
      }
      function qs(e2, t2, n2, r2) {
        this.object = e2, this.size = void 0 !== t2 ? t2 : 1;
        var i3 = void 0 !== n2 ? n2 : 16711680, a2 = void 0 !== r2 ? r2 : 1, o2 = 0, s2 = this.object.geometry;
        s2 && s2.isGeometry ? o2 = 3 * s2.faces.length : s2 && s2.isBufferGeometry && (o2 = s2.attributes.normal.count);
        var c3 = new Pn(), u2 = new Sn(2 * o2 * 3, 3);
        c3.addAttribute("position", u2), bi.call(this, c3, new yi({ color: i3, linewidth: a2 })), this.matrixAutoUpdate = false, this.update();
      }
      function Ys(e2, t2) {
        dn.call(this), this.light = e2, this.light.updateMatrixWorld(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.color = t2;
        for (var n2 = new Pn(), r2 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], i3 = 0, a2 = 1; i3 < 32; i3++, a2++) {
          var o2 = i3 / 32 * Math.PI * 2, s2 = a2 / 32 * Math.PI * 2;
          r2.push(Math.cos(o2), Math.sin(o2), 1, Math.cos(s2), Math.sin(s2), 1);
        }
        n2.addAttribute("position", new Sn(r2, 3));
        var c3 = new yi({ fog: false });
        this.cone = new bi(n2, c3), this.add(this.cone), this.update();
      }
      function Zs(e2) {
        for (var t2 = function e3(t3) {
          var n3 = [];
          t3 && t3.isBone && n3.push(t3);
          for (var r3 = 0; r3 < t3.children.length; r3++)
            n3.push.apply(n3, e3(t3.children[r3]));
          return n3;
        }(e2), n2 = new Pn(), r2 = [], i3 = [], a2 = new rn(0, 0, 1), o2 = new rn(0, 1, 0), s2 = 0; s2 < t2.length; s2++) {
          var c3 = t2[s2];
          c3.parent && c3.parent.isBone && (r2.push(0, 0, 0), r2.push(0, 0, 0), i3.push(a2.r, a2.g, a2.b), i3.push(o2.r, o2.g, o2.b));
        }
        n2.addAttribute("position", new Sn(r2, 3)), n2.addAttribute("color", new Sn(i3, 3));
        var u2 = new yi({ vertexColors: _, depthTest: false, depthWrite: false, transparent: true });
        bi.call(this, n2, u2), this.root = e2, this.bones = t2, this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false;
      }
      function Js(e2, t2, n2) {
        this.light = e2, this.light.updateMatrixWorld(), this.color = n2;
        var r2 = new Ta(t2, 4, 2), i3 = new Fn({ wireframe: true, fog: false });
        kn.call(this, r2, i3), this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = false, this.update();
      }
      function Ks(e2, t2) {
        dn.call(this), this.light = e2, this.light.updateMatrixWorld(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.color = t2;
        var n2 = new yi({ fog: false }), r2 = new Pn();
        r2.addAttribute("position", new yn(new Float32Array(15), 3)), this.line = new xi(r2, n2), this.add(this.line), this.update();
      }
      function Qs(e2, t2, n2) {
        dn.call(this), this.light = e2, this.light.updateMatrixWorld(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.color = n2;
        var r2 = new Ui(t2);
        r2.rotateY(0.5 * Math.PI), this.material = new Fn({ wireframe: true, fog: false }), void 0 === this.color && (this.material.vertexColors = _);
        var i3 = r2.getAttribute("position"), a2 = new Float32Array(3 * i3.count);
        r2.addAttribute("color", new yn(a2, 3)), this.add(new kn(r2, this.material)), this.update();
      }
      function $s(e2, t2, n2, r2) {
        e2 = e2 || 10, t2 = t2 || 10, n2 = new rn(void 0 !== n2 ? n2 : 4473924), r2 = new rn(void 0 !== r2 ? r2 : 8947848);
        for (var i3 = t2 / 2, a2 = e2 / t2, o2 = e2 / 2, s2 = [], c3 = [], u2 = 0, l2 = 0, h2 = -o2; u2 <= t2; u2++, h2 += a2) {
          s2.push(-o2, 0, h2, o2, 0, h2), s2.push(h2, 0, -o2, h2, 0, o2);
          var d2 = u2 === i3 ? n2 : r2;
          d2.toArray(c3, l2), l2 += 3, d2.toArray(c3, l2), l2 += 3, d2.toArray(c3, l2), l2 += 3, d2.toArray(c3, l2), l2 += 3;
        }
        var p2 = new Pn();
        p2.addAttribute("position", new Sn(s2, 3)), p2.addAttribute("color", new Sn(c3, 3));
        var f2 = new yi({ vertexColors: _ });
        bi.call(this, p2, f2);
      }
      function ec(e2, t2, n2, r2, i3, a2) {
        e2 = e2 || 10, t2 = t2 || 16, n2 = n2 || 8, r2 = r2 || 64, i3 = new rn(void 0 !== i3 ? i3 : 4473924), a2 = new rn(void 0 !== a2 ? a2 : 8947848);
        var o2, s2, c3, u2, l2, h2, d2, p2 = [], f2 = [];
        for (u2 = 0; u2 <= t2; u2++)
          c3 = u2 / t2 * (2 * Math.PI), o2 = Math.sin(c3) * e2, s2 = Math.cos(c3) * e2, p2.push(0, 0, 0), p2.push(o2, 0, s2), d2 = 1 & u2 ? i3 : a2, f2.push(d2.r, d2.g, d2.b), f2.push(d2.r, d2.g, d2.b);
        for (u2 = 0; u2 <= n2; u2++)
          for (d2 = 1 & u2 ? i3 : a2, h2 = e2 - e2 / n2 * u2, l2 = 0; l2 < r2; l2++)
            c3 = l2 / r2 * (2 * Math.PI), o2 = Math.sin(c3) * h2, s2 = Math.cos(c3) * h2, p2.push(o2, 0, s2), f2.push(d2.r, d2.g, d2.b), c3 = (l2 + 1) / r2 * (2 * Math.PI), o2 = Math.sin(c3) * h2, s2 = Math.cos(c3) * h2, p2.push(o2, 0, s2), f2.push(d2.r, d2.g, d2.b);
        var m3 = new Pn();
        m3.addAttribute("position", new Sn(p2, 3)), m3.addAttribute("color", new Sn(f2, 3));
        var g2 = new yi({ vertexColors: _ });
        bi.call(this, m3, g2);
      }
      function tc(e2, t2, n2, r2) {
        this.object = e2, this.size = void 0 !== t2 ? t2 : 1;
        var i3 = void 0 !== n2 ? n2 : 16776960, a2 = void 0 !== r2 ? r2 : 1, o2 = 0, s2 = this.object.geometry;
        s2 && s2.isGeometry ? o2 = s2.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
        var c3 = new Pn(), u2 = new Sn(2 * o2 * 3, 3);
        c3.addAttribute("position", u2), bi.call(this, c3, new yi({ color: i3, linewidth: a2 })), this.matrixAutoUpdate = false, this.update();
      }
      function nc(e2, t2, n2) {
        dn.call(this), this.light = e2, this.light.updateMatrixWorld(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.color = n2, void 0 === t2 && (t2 = 1);
        var r2 = new Pn();
        r2.addAttribute("position", new Sn([-t2, t2, 0, t2, t2, 0, t2, -t2, 0, -t2, -t2, 0, -t2, t2, 0], 3));
        var i3 = new yi({ fog: false });
        this.lightPlane = new xi(r2, i3), this.add(this.lightPlane), (r2 = new Pn()).addAttribute("position", new Sn([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new xi(r2, i3), this.add(this.targetLine), this.update();
      }
      function rc(e2) {
        var t2 = new Pn(), n2 = new yi({ color: 16777215, vertexColors: w }), r2 = [], i3 = [], a2 = {}, o2 = new rn(16755200), s2 = new rn(16711680), c3 = new rn(43775), u2 = new rn(16777215), l2 = new rn(3355443);
        function h2(e3, t3, n3) {
          d2(e3, n3), d2(t3, n3);
        }
        function d2(e3, t3) {
          r2.push(0, 0, 0), i3.push(t3.r, t3.g, t3.b), void 0 === a2[e3] && (a2[e3] = []), a2[e3].push(r2.length / 3 - 1);
        }
        h2("n1", "n2", o2), h2("n2", "n4", o2), h2("n4", "n3", o2), h2("n3", "n1", o2), h2("f1", "f2", o2), h2("f2", "f4", o2), h2("f4", "f3", o2), h2("f3", "f1", o2), h2("n1", "f1", o2), h2("n2", "f2", o2), h2("n3", "f3", o2), h2("n4", "f4", o2), h2("p", "n1", s2), h2("p", "n2", s2), h2("p", "n3", s2), h2("p", "n4", s2), h2("u1", "u2", c3), h2("u2", "u3", c3), h2("u3", "u1", c3), h2("c", "t", u2), h2("p", "c", l2), h2("cn1", "cn2", l2), h2("cn3", "cn4", l2), h2("cf1", "cf2", l2), h2("cf3", "cf4", l2), t2.addAttribute("position", new Sn(r2, 3)), t2.addAttribute("color", new Sn(i3, 3)), bi.call(this, t2, n2), this.camera = e2, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.pointMap = a2, this.update();
      }
      function ic2(e2, t2) {
        this.object = e2, void 0 === t2 && (t2 = 16776960);
        var n2 = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r2 = new Float32Array(24), i3 = new Pn();
        i3.setIndex(new yn(n2, 1)), i3.addAttribute("position", new yn(r2, 3)), bi.call(this, i3, new yi({ color: t2 })), this.matrixAutoUpdate = false, this.update();
      }
      function ac(e2, t2) {
        this.type = "Box3Helper", this.box = e2;
        var n2 = void 0 !== t2 ? t2 : 16776960, r2 = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), i3 = new Pn();
        i3.setIndex(new yn(r2, 1)), i3.addAttribute("position", new Sn([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3)), bi.call(this, i3, new yi({ color: n2 })), this.geometry.computeBoundingSphere();
      }
      function oc(e2, t2, n2) {
        this.type = "PlaneHelper", this.plane = e2, this.size = void 0 === t2 ? 1 : t2;
        var r2 = void 0 !== n2 ? n2 : 16776960, i3 = new Pn();
        i3.addAttribute("position", new Sn([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3)), i3.computeBoundingSphere(), xi.call(this, i3, new yi({ color: r2 }));
        var a2 = new Pn();
        a2.addAttribute("position", new Sn([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3)), a2.computeBoundingSphere(), this.add(new kn(a2, new Fn({ color: r2, opacity: 0.2, transparent: true, depthWrite: false })));
      }
      function sc(e2, t2, n2, r2, i3, a2) {
        dn.call(this), void 0 === r2 && (r2 = 16776960), void 0 === n2 && (n2 = 1), void 0 === i3 && (i3 = 0.2 * n2), void 0 === a2 && (a2 = 0.2 * i3), void 0 === As && ((As = new Pn()).addAttribute("position", new Sn([0, 0, 0, 0, 1, 0], 3)), (Ls = new Da(0, 0.5, 1, 5, 1)).translate(0, -0.5, 0)), this.position.copy(t2), this.line = new xi(As, new yi({ color: r2 })), this.line.matrixAutoUpdate = false, this.add(this.line), this.cone = new kn(Ls, new Fn({ color: r2 })), this.cone.matrixAutoUpdate = false, this.add(this.cone), this.setDirection(e2), this.setLength(n2, i3, a2);
      }
      function cc(e2) {
        var t2 = [0, 0, 0, e2 = e2 || 1, 0, 0, 0, 0, 0, 0, e2, 0, 0, 0, 0, 0, 0, e2], n2 = new Pn();
        n2.addAttribute("position", new Sn(t2, 3)), n2.addAttribute("color", new Sn([1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1], 3));
        var r2 = new yi({ vertexColors: _ });
        bi.call(this, n2, r2);
      }
      function uc(e2, t2, n2, r2, i3, a2, o2) {
        return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."), new mn(e2, t2, n2, i3, a2, o2);
      }
      Object.assign(Rs.prototype, { getValue: function(e2, t2) {
        this.bind();
        var n2 = this._targetGroup.nCachedObjects_, r2 = this._bindings[n2];
        void 0 !== r2 && r2.getValue(e2, t2);
      }, setValue: function(e2, t2) {
        for (var n2 = this._bindings, r2 = this._targetGroup.nCachedObjects_, i3 = n2.length; r2 !== i3; ++r2)
          n2[r2].setValue(e2, t2);
      }, bind: function() {
        for (var e2 = this._bindings, t2 = this._targetGroup.nCachedObjects_, n2 = e2.length; t2 !== n2; ++t2)
          e2[t2].bind();
      }, unbind: function() {
        for (var e2 = this._bindings, t2 = this._targetGroup.nCachedObjects_, n2 = e2.length; t2 !== n2; ++t2)
          e2[t2].unbind();
      } }), Object.assign(Cs, { Composite: Rs, create: function(e2, t2, n2) {
        return e2 && e2.isAnimationObjectGroup ? new Cs.Composite(e2, t2, n2) : new Cs(e2, t2, n2);
      }, sanitizeNodeName: function() {
        var e2 = new RegExp("[\\[\\]\\.:\\/]", "g");
        return function(t2) {
          return t2.replace(/\s/g, "_").replace(e2, "");
        };
      }(), parseTrackName: function() {
        var e2 = "[^\\[\\]\\.:\\/]", t2 = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]", n2 = /((?:WC+[\/:])*)/.source.replace("WC", e2), r2 = /(WCOD+)?/.source.replace("WCOD", t2), i3 = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", e2), a2 = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", e2), o2 = new RegExp("^" + n2 + r2 + i3 + a2 + "$"), s2 = ["material", "materials", "bones"];
        return function(e3) {
          var t3 = o2.exec(e3);
          if (!t3)
            throw new Error("PropertyBinding: Cannot parse trackName: " + e3);
          var n3 = { nodeName: t3[2], objectName: t3[3], objectIndex: t3[4], propertyName: t3[5], propertyIndex: t3[6] }, r3 = n3.nodeName && n3.nodeName.lastIndexOf(".");
          if (void 0 !== r3 && -1 !== r3) {
            var i4 = n3.nodeName.substring(r3 + 1);
            -1 !== s2.indexOf(i4) && (n3.nodeName = n3.nodeName.substring(0, r3), n3.objectName = i4);
          }
          if (null === n3.propertyName || 0 === n3.propertyName.length)
            throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e3);
          return n3;
        };
      }(), findNode: function(e2, t2) {
        if (!t2 || "" === t2 || "root" === t2 || "." === t2 || -1 === t2 || t2 === e2.name || t2 === e2.uuid)
          return e2;
        if (e2.skeleton) {
          var n2 = e2.skeleton.getBoneByName(t2);
          if (void 0 !== n2)
            return n2;
        }
        if (e2.children) {
          var r2 = function(e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var i4 = e3[n3];
              if (i4.name === t2 || i4.uuid === t2)
                return i4;
              var a2 = r2(i4.children);
              if (a2)
                return a2;
            }
            return null;
          }, i3 = r2(e2.children);
          if (i3)
            return i3;
        }
        return null;
      } }), Object.assign(Cs.prototype, { _getValue_unavailable: function() {
      }, _setValue_unavailable: function() {
      }, BindingType: { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 }, Versioning: { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 }, GetterByBindingType: [function(e2, t2) {
        e2[t2] = this.node[this.propertyName];
      }, function(e2, t2) {
        for (var n2 = this.resolvedProperty, r2 = 0, i3 = n2.length; r2 !== i3; ++r2)
          e2[t2++] = n2[r2];
      }, function(e2, t2) {
        e2[t2] = this.resolvedProperty[this.propertyIndex];
      }, function(e2, t2) {
        this.resolvedProperty.toArray(e2, t2);
      }], SetterByBindingTypeAndVersioning: [[function(e2, t2) {
        this.targetObject[this.propertyName] = e2[t2];
      }, function(e2, t2) {
        this.targetObject[this.propertyName] = e2[t2], this.targetObject.needsUpdate = true;
      }, function(e2, t2) {
        this.targetObject[this.propertyName] = e2[t2], this.targetObject.matrixWorldNeedsUpdate = true;
      }], [function(e2, t2) {
        for (var n2 = this.resolvedProperty, r2 = 0, i3 = n2.length; r2 !== i3; ++r2)
          n2[r2] = e2[t2++];
      }, function(e2, t2) {
        for (var n2 = this.resolvedProperty, r2 = 0, i3 = n2.length; r2 !== i3; ++r2)
          n2[r2] = e2[t2++];
        this.targetObject.needsUpdate = true;
      }, function(e2, t2) {
        for (var n2 = this.resolvedProperty, r2 = 0, i3 = n2.length; r2 !== i3; ++r2)
          n2[r2] = e2[t2++];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }], [function(e2, t2) {
        this.resolvedProperty[this.propertyIndex] = e2[t2];
      }, function(e2, t2) {
        this.resolvedProperty[this.propertyIndex] = e2[t2], this.targetObject.needsUpdate = true;
      }, function(e2, t2) {
        this.resolvedProperty[this.propertyIndex] = e2[t2], this.targetObject.matrixWorldNeedsUpdate = true;
      }], [function(e2, t2) {
        this.resolvedProperty.fromArray(e2, t2);
      }, function(e2, t2) {
        this.resolvedProperty.fromArray(e2, t2), this.targetObject.needsUpdate = true;
      }, function(e2, t2) {
        this.resolvedProperty.fromArray(e2, t2), this.targetObject.matrixWorldNeedsUpdate = true;
      }]], getValue: function(e2, t2) {
        this.bind(), this.getValue(e2, t2);
      }, setValue: function(e2, t2) {
        this.bind(), this.setValue(e2, t2);
      }, bind: function() {
        var e2 = this.node, t2 = this.parsedPath, n2 = t2.objectName, r2 = t2.propertyName, i3 = t2.propertyIndex;
        if (e2 || (e2 = Cs.findNode(this.rootNode, t2.nodeName) || this.rootNode, this.node = e2), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, e2) {
          if (n2) {
            var a2 = t2.objectIndex;
            switch (n2) {
              case "materials":
                if (!e2.material)
                  return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                if (!e2.material.materials)
                  return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                e2 = e2.material.materials;
                break;
              case "bones":
                if (!e2.skeleton)
                  return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                e2 = e2.skeleton.bones;
                for (var o2 = 0; o2 < e2.length; o2++)
                  if (e2[o2].name === a2) {
                    a2 = o2;
                    break;
                  }
                break;
              default:
                if (void 0 === e2[n2])
                  return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                e2 = e2[n2];
            }
            if (void 0 !== a2) {
              if (void 0 === e2[a2])
                return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e2);
              e2 = e2[a2];
            }
          }
          var s2 = e2[r2];
          if (void 0 !== s2) {
            var c3 = this.Versioning.None;
            void 0 !== e2.needsUpdate ? (c3 = this.Versioning.NeedsUpdate, this.targetObject = e2) : void 0 !== e2.matrixWorldNeedsUpdate && (c3 = this.Versioning.MatrixWorldNeedsUpdate, this.targetObject = e2);
            var u2 = this.BindingType.Direct;
            if (void 0 !== i3) {
              if ("morphTargetInfluences" === r2) {
                if (!e2.geometry)
                  return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                if (e2.geometry.isBufferGeometry) {
                  if (!e2.geometry.morphAttributes)
                    return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                  for (o2 = 0; o2 < this.node.geometry.morphAttributes.position.length; o2++)
                    if (e2.geometry.morphAttributes.position[o2].name === i3) {
                      i3 = o2;
                      break;
                    }
                } else {
                  if (!e2.geometry.morphTargets)
                    return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                  for (o2 = 0; o2 < this.node.geometry.morphTargets.length; o2++)
                    if (e2.geometry.morphTargets[o2].name === i3) {
                      i3 = o2;
                      break;
                    }
                }
              }
              u2 = this.BindingType.ArrayElement, this.resolvedProperty = s2, this.propertyIndex = i3;
            } else
              void 0 !== s2.fromArray && void 0 !== s2.toArray ? (u2 = this.BindingType.HasFromToArray, this.resolvedProperty = s2) : Array.isArray(s2) ? (u2 = this.BindingType.EntireArray, this.resolvedProperty = s2) : this.propertyName = r2;
            this.getValue = this.GetterByBindingType[u2], this.setValue = this.SetterByBindingTypeAndVersioning[u2][c3];
          } else {
            var l2 = t2.nodeName;
            console.error("THREE.PropertyBinding: Trying to update property for track: " + l2 + "." + r2 + " but it wasn't found.", e2);
          }
        } else
          console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
      }, unbind: function() {
        this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
      } }), Object.assign(Cs.prototype, { _getValue_unbound: Cs.prototype.getValue, _setValue_unbound: Cs.prototype.setValue }), Object.assign(Ps.prototype, { isAnimationObjectGroup: true, add: function() {
        for (var e2 = this._objects, t2 = e2.length, n2 = this.nCachedObjects_, r2 = this._indicesByUUID, i3 = this._paths, a2 = this._parsedPaths, o2 = this._bindings, s2 = o2.length, c3 = void 0, u2 = 0, l2 = arguments.length; u2 !== l2; ++u2) {
          var h2 = arguments[u2], d2 = h2.uuid, p2 = r2[d2];
          if (void 0 === p2) {
            p2 = t2++, r2[d2] = p2, e2.push(h2);
            for (var f2 = 0, m3 = s2; f2 !== m3; ++f2)
              o2[f2].push(new Cs(h2, i3[f2], a2[f2]));
          } else if (p2 < n2) {
            c3 = e2[p2];
            var g2 = --n2, v2 = e2[g2];
            r2[v2.uuid] = p2, e2[p2] = v2, r2[d2] = g2, e2[g2] = h2;
            for (f2 = 0, m3 = s2; f2 !== m3; ++f2) {
              var y2 = o2[f2], x2 = y2[g2], b2 = y2[p2];
              y2[p2] = x2, void 0 === b2 && (b2 = new Cs(h2, i3[f2], a2[f2])), y2[g2] = b2;
            }
          } else
            e2[p2] !== c3 && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
        this.nCachedObjects_ = n2;
      }, remove: function() {
        for (var e2 = this._objects, t2 = this.nCachedObjects_, n2 = this._indicesByUUID, r2 = this._bindings, i3 = r2.length, a2 = 0, o2 = arguments.length; a2 !== o2; ++a2) {
          var s2 = arguments[a2], c3 = s2.uuid, u2 = n2[c3];
          if (void 0 !== u2 && u2 >= t2) {
            var l2 = t2++, h2 = e2[l2];
            n2[h2.uuid] = u2, e2[u2] = h2, n2[c3] = l2, e2[l2] = s2;
            for (var d2 = 0, p2 = i3; d2 !== p2; ++d2) {
              var f2 = r2[d2], m3 = f2[l2], g2 = f2[u2];
              f2[u2] = m3, f2[l2] = g2;
            }
          }
        }
        this.nCachedObjects_ = t2;
      }, uncache: function() {
        for (var e2 = this._objects, t2 = e2.length, n2 = this.nCachedObjects_, r2 = this._indicesByUUID, i3 = this._bindings, a2 = i3.length, o2 = 0, s2 = arguments.length; o2 !== s2; ++o2) {
          var c3 = arguments[o2].uuid, u2 = r2[c3];
          if (void 0 !== u2)
            if (delete r2[c3], u2 < n2) {
              var l2 = --n2, h2 = e2[l2], d2 = e2[v2 = --t2];
              r2[h2.uuid] = u2, e2[u2] = h2, r2[d2.uuid] = l2, e2[l2] = d2, e2.pop();
              for (var p2 = 0, f2 = a2; p2 !== f2; ++p2) {
                var m3 = (y2 = i3[p2])[l2], g2 = y2[v2];
                y2[u2] = m3, y2[l2] = g2, y2.pop();
              }
            } else {
              var v2;
              r2[(d2 = e2[v2 = --t2]).uuid] = u2, e2[u2] = d2, e2.pop();
              for (p2 = 0, f2 = a2; p2 !== f2; ++p2) {
                var y2;
                (y2 = i3[p2])[u2] = y2[v2], y2.pop();
              }
            }
        }
        this.nCachedObjects_ = n2;
      }, subscribe_: function(e2, t2) {
        var n2 = this._bindingsIndicesByPath, r2 = n2[e2], i3 = this._bindings;
        if (void 0 !== r2)
          return i3[r2];
        var a2 = this._paths, o2 = this._parsedPaths, s2 = this._objects, c3 = s2.length, u2 = this.nCachedObjects_, l2 = new Array(c3);
        r2 = i3.length, n2[e2] = r2, a2.push(e2), o2.push(t2), i3.push(l2);
        for (var h2 = u2, d2 = s2.length; h2 !== d2; ++h2) {
          var p2 = s2[h2];
          l2[h2] = new Cs(p2, e2, t2);
        }
        return l2;
      }, unsubscribe_: function(e2) {
        var t2 = this._bindingsIndicesByPath, n2 = t2[e2];
        if (void 0 !== n2) {
          var r2 = this._paths, i3 = this._parsedPaths, a2 = this._bindings, o2 = a2.length - 1, s2 = a2[o2];
          t2[e2[o2]] = n2, a2[n2] = s2, a2.pop(), i3[n2] = i3[o2], i3.pop(), r2[n2] = r2[o2], r2.pop();
        }
      } }), Object.assign(Os.prototype, { play: function() {
        return this._mixer._activateAction(this), this;
      }, stop: function() {
        return this._mixer._deactivateAction(this), this.reset();
      }, reset: function() {
        return this.paused = false, this.enabled = true, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
      }, isRunning: function() {
        return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
      }, isScheduled: function() {
        return this._mixer._isActiveAction(this);
      }, startAt: function(e2) {
        return this._startTime = e2, this;
      }, setLoop: function(e2, t2) {
        return this.loop = e2, this.repetitions = t2, this;
      }, setEffectiveWeight: function(e2) {
        return this.weight = e2, this._effectiveWeight = this.enabled ? e2 : 0, this.stopFading();
      }, getEffectiveWeight: function() {
        return this._effectiveWeight;
      }, fadeIn: function(e2) {
        return this._scheduleFading(e2, 0, 1);
      }, fadeOut: function(e2) {
        return this._scheduleFading(e2, 1, 0);
      }, crossFadeFrom: function(e2, t2, n2) {
        if (e2.fadeOut(t2), this.fadeIn(t2), n2) {
          var r2 = this._clip.duration, i3 = e2._clip.duration, a2 = i3 / r2, o2 = r2 / i3;
          e2.warp(1, a2, t2), this.warp(o2, 1, t2);
        }
        return this;
      }, crossFadeTo: function(e2, t2, n2) {
        return e2.crossFadeFrom(this, t2, n2);
      }, stopFading: function() {
        var e2 = this._weightInterpolant;
        return null !== e2 && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e2)), this;
      }, setEffectiveTimeScale: function(e2) {
        return this.timeScale = e2, this._effectiveTimeScale = this.paused ? 0 : e2, this.stopWarping();
      }, getEffectiveTimeScale: function() {
        return this._effectiveTimeScale;
      }, setDuration: function(e2) {
        return this.timeScale = this._clip.duration / e2, this.stopWarping();
      }, syncWith: function(e2) {
        return this.time = e2.time, this.timeScale = e2.timeScale, this.stopWarping();
      }, halt: function(e2) {
        return this.warp(this._effectiveTimeScale, 0, e2);
      }, warp: function(e2, t2, n2) {
        var r2 = this._mixer, i3 = r2.time, a2 = this._timeScaleInterpolant, o2 = this.timeScale;
        null === a2 && (a2 = r2._lendControlInterpolant(), this._timeScaleInterpolant = a2);
        var s2 = a2.parameterPositions, c3 = a2.sampleValues;
        return s2[0] = i3, s2[1] = i3 + n2, c3[0] = e2 / o2, c3[1] = t2 / o2, this;
      }, stopWarping: function() {
        var e2 = this._timeScaleInterpolant;
        return null !== e2 && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e2)), this;
      }, getMixer: function() {
        return this._mixer;
      }, getClip: function() {
        return this._clip;
      }, getRoot: function() {
        return this._localRoot || this._mixer._root;
      }, _update: function(e2, t2, n2, r2) {
        if (this.enabled) {
          var i3 = this._startTime;
          if (null !== i3) {
            var a2 = (e2 - i3) * n2;
            if (a2 < 0 || 0 === n2)
              return;
            this._startTime = null, t2 = n2 * a2;
          }
          t2 *= this._updateTimeScale(e2);
          var o2 = this._updateTime(t2), s2 = this._updateWeight(e2);
          if (s2 > 0)
            for (var c3 = this._interpolants, u2 = this._propertyBindings, l2 = 0, h2 = c3.length; l2 !== h2; ++l2)
              c3[l2].evaluate(o2), u2[l2].accumulate(r2, s2);
        } else
          this._updateWeight(e2);
      }, _updateWeight: function(e2) {
        var t2 = 0;
        if (this.enabled) {
          t2 = this.weight;
          var n2 = this._weightInterpolant;
          if (null !== n2) {
            var r2 = n2.evaluate(e2)[0];
            t2 *= r2, e2 > n2.parameterPositions[1] && (this.stopFading(), 0 === r2 && (this.enabled = false));
          }
        }
        return this._effectiveWeight = t2, t2;
      }, _updateTimeScale: function(e2) {
        var t2 = 0;
        if (!this.paused) {
          t2 = this.timeScale;
          var n2 = this._timeScaleInterpolant;
          if (null !== n2)
            t2 *= n2.evaluate(e2)[0], e2 > n2.parameterPositions[1] && (this.stopWarping(), 0 === t2 ? this.paused = true : this.timeScale = t2);
        }
        return this._effectiveTimeScale = t2, t2;
      }, _updateTime: function(e2) {
        var t2 = this.time + e2, n2 = this._clip.duration, r2 = this.loop, i3 = this._loopCount, a2 = r2 === mt;
        if (0 === e2)
          return -1 === i3 ? t2 : a2 && 1 == (1 & i3) ? n2 - t2 : t2;
        if (r2 === pt) {
          -1 === i3 && (this._loopCount = 0, this._setEndings(true, true, false));
          e: {
            if (t2 >= n2)
              t2 = n2;
            else {
              if (!(t2 < 0))
                break e;
              t2 = 0;
            }
            this.clampWhenFinished ? this.paused = true : this.enabled = false, this._mixer.dispatchEvent({ type: "finished", action: this, direction: e2 < 0 ? -1 : 1 });
          }
        } else {
          if (-1 === i3 && (e2 >= 0 ? (i3 = 0, this._setEndings(true, 0 === this.repetitions, a2)) : this._setEndings(0 === this.repetitions, true, a2)), t2 >= n2 || t2 < 0) {
            var o2 = Math.floor(t2 / n2);
            t2 -= n2 * o2, i3 += Math.abs(o2);
            var s2 = this.repetitions - i3;
            if (s2 <= 0)
              this.clampWhenFinished ? this.paused = true : this.enabled = false, t2 = e2 > 0 ? n2 : 0, this._mixer.dispatchEvent({ type: "finished", action: this, direction: e2 > 0 ? 1 : -1 });
            else {
              if (1 === s2) {
                var c3 = e2 < 0;
                this._setEndings(c3, !c3, a2);
              } else
                this._setEndings(false, false, a2);
              this._loopCount = i3, this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: o2 });
            }
          }
          if (a2 && 1 == (1 & i3))
            return this.time = t2, n2 - t2;
        }
        return this.time = t2, t2;
      }, _setEndings: function(e2, t2, n2) {
        var r2 = this._interpolantSettings;
        n2 ? (r2.endingStart = bt, r2.endingEnd = bt) : (r2.endingStart = e2 ? this.zeroSlopeAtStart ? bt : xt : wt, r2.endingEnd = t2 ? this.zeroSlopeAtEnd ? bt : xt : wt);
      }, _scheduleFading: function(e2, t2, n2) {
        var r2 = this._mixer, i3 = r2.time, a2 = this._weightInterpolant;
        null === a2 && (a2 = r2._lendControlInterpolant(), this._weightInterpolant = a2);
        var o2 = a2.parameterPositions, s2 = a2.sampleValues;
        return o2[0] = i3, s2[0] = t2, o2[1] = i3 + e2, s2[1] = n2, this;
      } }), Ns.prototype = Object.assign(Object.create(r.prototype), { constructor: Ns, _bindAction: function(e2, t2) {
        var n2 = e2._localRoot || this._root, r2 = e2._clip.tracks, i3 = r2.length, a2 = e2._propertyBindings, o2 = e2._interpolants, s2 = n2.uuid, c3 = this._bindingsByRootAndName, u2 = c3[s2];
        void 0 === u2 && (u2 = {}, c3[s2] = u2);
        for (var l2 = 0; l2 !== i3; ++l2) {
          var h2 = r2[l2], d2 = h2.name, p2 = u2[d2];
          if (void 0 !== p2)
            a2[l2] = p2;
          else {
            if (void 0 !== (p2 = a2[l2])) {
              null === p2._cacheIndex && (++p2.referenceCount, this._addInactiveBinding(p2, s2, d2));
              continue;
            }
            var f2 = t2 && t2._propertyBindings[l2].binding.parsedPath;
            ++(p2 = new Ss(Cs.create(n2, d2, f2), h2.ValueTypeName, h2.getValueSize())).referenceCount, this._addInactiveBinding(p2, s2, d2), a2[l2] = p2;
          }
          o2[l2].resultBuffer = p2.buffer;
        }
      }, _activateAction: function(e2) {
        if (!this._isActiveAction(e2)) {
          if (null === e2._cacheIndex) {
            var t2 = (e2._localRoot || this._root).uuid, n2 = e2._clip.uuid, r2 = this._actionsByClip[n2];
            this._bindAction(e2, r2 && r2.knownActions[0]), this._addInactiveAction(e2, n2, t2);
          }
          for (var i3 = e2._propertyBindings, a2 = 0, o2 = i3.length; a2 !== o2; ++a2) {
            var s2 = i3[a2];
            0 == s2.useCount++ && (this._lendBinding(s2), s2.saveOriginalState());
          }
          this._lendAction(e2);
        }
      }, _deactivateAction: function(e2) {
        if (this._isActiveAction(e2)) {
          for (var t2 = e2._propertyBindings, n2 = 0, r2 = t2.length; n2 !== r2; ++n2) {
            var i3 = t2[n2];
            0 == --i3.useCount && (i3.restoreOriginalState(), this._takeBackBinding(i3));
          }
          this._takeBackAction(e2);
        }
      }, _initMemoryManager: function() {
        this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
        var e2 = this;
        this.stats = { actions: { get total() {
          return e2._actions.length;
        }, get inUse() {
          return e2._nActiveActions;
        } }, bindings: { get total() {
          return e2._bindings.length;
        }, get inUse() {
          return e2._nActiveBindings;
        } }, controlInterpolants: { get total() {
          return e2._controlInterpolants.length;
        }, get inUse() {
          return e2._nActiveControlInterpolants;
        } } };
      }, _isActiveAction: function(e2) {
        var t2 = e2._cacheIndex;
        return null !== t2 && t2 < this._nActiveActions;
      }, _addInactiveAction: function(e2, t2, n2) {
        var r2 = this._actions, i3 = this._actionsByClip, a2 = i3[t2];
        if (void 0 === a2)
          a2 = { knownActions: [e2], actionByRoot: {} }, e2._byClipCacheIndex = 0, i3[t2] = a2;
        else {
          var o2 = a2.knownActions;
          e2._byClipCacheIndex = o2.length, o2.push(e2);
        }
        e2._cacheIndex = r2.length, r2.push(e2), a2.actionByRoot[n2] = e2;
      }, _removeInactiveAction: function(e2) {
        var t2 = this._actions, n2 = t2[t2.length - 1], r2 = e2._cacheIndex;
        n2._cacheIndex = r2, t2[r2] = n2, t2.pop(), e2._cacheIndex = null;
        var i3 = e2._clip.uuid, a2 = this._actionsByClip, o2 = a2[i3], s2 = o2.knownActions, c3 = s2[s2.length - 1], u2 = e2._byClipCacheIndex;
        c3._byClipCacheIndex = u2, s2[u2] = c3, s2.pop(), e2._byClipCacheIndex = null, delete o2.actionByRoot[(e2._localRoot || this._root).uuid], 0 === s2.length && delete a2[i3], this._removeInactiveBindingsForAction(e2);
      }, _removeInactiveBindingsForAction: function(e2) {
        for (var t2 = e2._propertyBindings, n2 = 0, r2 = t2.length; n2 !== r2; ++n2) {
          var i3 = t2[n2];
          0 == --i3.referenceCount && this._removeInactiveBinding(i3);
        }
      }, _lendAction: function(e2) {
        var t2 = this._actions, n2 = e2._cacheIndex, r2 = this._nActiveActions++, i3 = t2[r2];
        e2._cacheIndex = r2, t2[r2] = e2, i3._cacheIndex = n2, t2[n2] = i3;
      }, _takeBackAction: function(e2) {
        var t2 = this._actions, n2 = e2._cacheIndex, r2 = --this._nActiveActions, i3 = t2[r2];
        e2._cacheIndex = r2, t2[r2] = e2, i3._cacheIndex = n2, t2[n2] = i3;
      }, _addInactiveBinding: function(e2, t2, n2) {
        var r2 = this._bindingsByRootAndName, i3 = r2[t2], a2 = this._bindings;
        void 0 === i3 && (i3 = {}, r2[t2] = i3), i3[n2] = e2, e2._cacheIndex = a2.length, a2.push(e2);
      }, _removeInactiveBinding: function(e2) {
        var t2 = this._bindings, n2 = e2.binding, r2 = n2.rootNode.uuid, i3 = n2.path, a2 = this._bindingsByRootAndName, o2 = a2[r2], s2 = t2[t2.length - 1], c3 = e2._cacheIndex;
        s2._cacheIndex = c3, t2[c3] = s2, t2.pop(), delete o2[i3];
        e: {
          for (var u2 in o2)
            break e;
          delete a2[r2];
        }
      }, _lendBinding: function(e2) {
        var t2 = this._bindings, n2 = e2._cacheIndex, r2 = this._nActiveBindings++, i3 = t2[r2];
        e2._cacheIndex = r2, t2[r2] = e2, i3._cacheIndex = n2, t2[n2] = i3;
      }, _takeBackBinding: function(e2) {
        var t2 = this._bindings, n2 = e2._cacheIndex, r2 = --this._nActiveBindings, i3 = t2[r2];
        e2._cacheIndex = r2, t2[r2] = e2, i3._cacheIndex = n2, t2[n2] = i3;
      }, _lendControlInterpolant: function() {
        var e2 = this._controlInterpolants, t2 = this._nActiveControlInterpolants++, n2 = e2[t2];
        return void 0 === n2 && ((n2 = new Vo(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer)).__cacheIndex = t2, e2[t2] = n2), n2;
      }, _takeBackControlInterpolant: function(e2) {
        var t2 = this._controlInterpolants, n2 = e2.__cacheIndex, r2 = --this._nActiveControlInterpolants, i3 = t2[r2];
        e2.__cacheIndex = r2, t2[r2] = e2, i3.__cacheIndex = n2, t2[n2] = i3;
      }, _controlInterpolantsResultBuffer: new Float32Array(1), clipAction: function(e2, t2) {
        var n2 = t2 || this._root, r2 = n2.uuid, i3 = "string" == typeof e2 ? es.findByName(n2, e2) : e2, a2 = null !== i3 ? i3.uuid : e2, o2 = this._actionsByClip[a2], s2 = null;
        if (void 0 !== o2) {
          var c3 = o2.actionByRoot[r2];
          if (void 0 !== c3)
            return c3;
          s2 = o2.knownActions[0], null === i3 && (i3 = s2._clip);
        }
        if (null === i3)
          return null;
        var u2 = new Os(this, i3, t2);
        return this._bindAction(u2, s2), this._addInactiveAction(u2, a2, r2), u2;
      }, existingAction: function(e2, t2) {
        var n2 = t2 || this._root, r2 = n2.uuid, i3 = "string" == typeof e2 ? es.findByName(n2, e2) : e2, a2 = i3 ? i3.uuid : e2, o2 = this._actionsByClip[a2];
        return void 0 !== o2 && o2.actionByRoot[r2] || null;
      }, stopAllAction: function() {
        var e2 = this._actions, t2 = this._nActiveActions, n2 = this._bindings, r2 = this._nActiveBindings;
        this._nActiveActions = 0, this._nActiveBindings = 0;
        for (var i3 = 0; i3 !== t2; ++i3)
          e2[i3].reset();
        for (i3 = 0; i3 !== r2; ++i3)
          n2[i3].useCount = 0;
        return this;
      }, update: function(e2) {
        e2 *= this.timeScale;
        for (var t2 = this._actions, n2 = this._nActiveActions, r2 = this.time += e2, i3 = Math.sign(e2), a2 = this._accuIndex ^= 1, o2 = 0; o2 !== n2; ++o2) {
          t2[o2]._update(r2, e2, i3, a2);
        }
        var s2 = this._bindings, c3 = this._nActiveBindings;
        for (o2 = 0; o2 !== c3; ++o2)
          s2[o2].apply(a2);
        return this;
      }, getRoot: function() {
        return this._root;
      }, uncacheClip: function(e2) {
        var t2 = this._actions, n2 = e2.uuid, r2 = this._actionsByClip, i3 = r2[n2];
        if (void 0 !== i3) {
          for (var a2 = i3.knownActions, o2 = 0, s2 = a2.length; o2 !== s2; ++o2) {
            var c3 = a2[o2];
            this._deactivateAction(c3);
            var u2 = c3._cacheIndex, l2 = t2[t2.length - 1];
            c3._cacheIndex = null, c3._byClipCacheIndex = null, l2._cacheIndex = u2, t2[u2] = l2, t2.pop(), this._removeInactiveBindingsForAction(c3);
          }
          delete r2[n2];
        }
      }, uncacheRoot: function(e2) {
        var t2 = e2.uuid, n2 = this._actionsByClip;
        for (var r2 in n2) {
          var i3 = n2[r2].actionByRoot[t2];
          void 0 !== i3 && (this._deactivateAction(i3), this._removeInactiveAction(i3));
        }
        var a2 = this._bindingsByRootAndName[t2];
        if (void 0 !== a2)
          for (var o2 in a2) {
            var s2 = a2[o2];
            s2.restoreOriginalState(), this._removeInactiveBinding(s2);
          }
      }, uncacheAction: function(e2, t2) {
        var n2 = this.existingAction(e2, t2);
        null !== n2 && (this._deactivateAction(n2), this._removeInactiveAction(n2));
      } }), Is.prototype.clone = function() {
        return new Is(void 0 === this.value.clone ? this.value : this.value.clone());
      }, Ds.prototype = Object.assign(Object.create(Pn.prototype), { constructor: Ds, isInstancedBufferGeometry: true, copy: function(e2) {
        return Pn.prototype.copy.call(this, e2), this.maxInstancedCount = e2.maxInstancedCount, this;
      }, clone: function() {
        return new this.constructor().copy(this);
      } }), Us.prototype = Object.assign(Object.create(li.prototype), { constructor: Us, isInstancedInterleavedBuffer: true, copy: function(e2) {
        return li.prototype.copy.call(this, e2), this.meshPerAttribute = e2.meshPerAttribute, this;
      } }), Bs.prototype = Object.assign(Object.create(yn.prototype), { constructor: Bs, isInstancedBufferAttribute: true, copy: function(e2) {
        return yn.prototype.copy.call(this, e2), this.meshPerAttribute = e2.meshPerAttribute, this;
      } }), Object.assign(Fs.prototype, { linePrecision: 1, set: function(e2, t2) {
        this.ray.set(e2, t2);
      }, setFromCamera: function(e2, t2) {
        t2 && t2.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t2.matrixWorld), this.ray.direction.set(e2.x, e2.y, 0.5).unproject(t2).sub(this.ray.origin).normalize()) : t2 && t2.isOrthographicCamera ? (this.ray.origin.set(e2.x, e2.y, (t2.near + t2.far) / (t2.near - t2.far)).unproject(t2), this.ray.direction.set(0, 0, -1).transformDirection(t2.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
      }, intersectObject: function(e2, t2, n2) {
        var r2 = n2 || [];
        return zs(e2, this, r2, t2), r2.sort(Gs), r2;
      }, intersectObjects: function(e2, t2, n2) {
        var r2 = n2 || [];
        if (false === Array.isArray(e2))
          return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), r2;
        for (var i3 = 0, a2 = e2.length; i3 < a2; i3++)
          zs(e2[i3], this, r2, t2);
        return r2.sort(Gs), r2;
      } }), Object.assign(Hs.prototype, { start: function() {
        this.startTime = ("undefined" == typeof performance ? Date : performance).now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = true;
      }, stop: function() {
        this.getElapsedTime(), this.running = false, this.autoStart = false;
      }, getElapsedTime: function() {
        return this.getDelta(), this.elapsedTime;
      }, getDelta: function() {
        var e2 = 0;
        if (this.autoStart && !this.running)
          return this.start(), 0;
        if (this.running) {
          var t2 = ("undefined" == typeof performance ? Date : performance).now();
          e2 = (t2 - this.oldTime) / 1e3, this.oldTime = t2, this.elapsedTime += e2;
        }
        return e2;
      } }), Object.assign(ks.prototype, { set: function(e2, t2, n2) {
        return this.radius = e2, this.phi = t2, this.theta = n2, this;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.radius = e2.radius, this.phi = e2.phi, this.theta = e2.theta, this;
      }, makeSafe: function() {
        return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
      }, setFromVector3: function(e2) {
        return this.radius = e2.length(), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e2.x, e2.z), this.phi = Math.acos(Bt.clamp(e2.y / this.radius, -1, 1))), this;
      } }), Object.assign(js.prototype, { set: function(e2, t2, n2) {
        return this.radius = e2, this.theta = t2, this.y = n2, this;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.radius = e2.radius, this.theta = e2.theta, this.y = e2.y, this;
      }, setFromVector3: function(e2) {
        return this.radius = Math.sqrt(e2.x * e2.x + e2.z * e2.z), this.theta = Math.atan2(e2.x, e2.z), this.y = e2.y, this;
      } }), Object.assign(Vs.prototype, { set: function(e2, t2) {
        return this.min.copy(e2), this.max.copy(t2), this;
      }, setFromPoints: function(e2) {
        this.makeEmpty();
        for (var t2 = 0, n2 = e2.length; t2 < n2; t2++)
          this.expandByPoint(e2[t2]);
        return this;
      }, setFromCenterAndSize: function() {
        var e2 = new Ft();
        return function(t2, n2) {
          var r2 = e2.copy(n2).multiplyScalar(0.5);
          return this.min.copy(t2).sub(r2), this.max.copy(t2).add(r2), this;
        };
      }(), clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.min.copy(e2.min), this.max.copy(e2.max), this;
      }, makeEmpty: function() {
        return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
      }, isEmpty: function() {
        return this.max.x < this.min.x || this.max.y < this.min.y;
      }, getCenter: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Box2: .getCenter() target is now required"), e2 = new Ft()), this.isEmpty() ? e2.set(0, 0) : e2.addVectors(this.min, this.max).multiplyScalar(0.5);
      }, getSize: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Box2: .getSize() target is now required"), e2 = new Ft()), this.isEmpty() ? e2.set(0, 0) : e2.subVectors(this.max, this.min);
      }, expandByPoint: function(e2) {
        return this.min.min(e2), this.max.max(e2), this;
      }, expandByVector: function(e2) {
        return this.min.sub(e2), this.max.add(e2), this;
      }, expandByScalar: function(e2) {
        return this.min.addScalar(-e2), this.max.addScalar(e2), this;
      }, containsPoint: function(e2) {
        return !(e2.x < this.min.x || e2.x > this.max.x || e2.y < this.min.y || e2.y > this.max.y);
      }, containsBox: function(e2) {
        return this.min.x <= e2.min.x && e2.max.x <= this.max.x && this.min.y <= e2.min.y && e2.max.y <= this.max.y;
      }, getParameter: function(e2, t2) {
        return void 0 === t2 && (console.warn("THREE.Box2: .getParameter() target is now required"), t2 = new Ft()), t2.set((e2.x - this.min.x) / (this.max.x - this.min.x), (e2.y - this.min.y) / (this.max.y - this.min.y));
      }, intersectsBox: function(e2) {
        return !(e2.max.x < this.min.x || e2.min.x > this.max.x || e2.max.y < this.min.y || e2.min.y > this.max.y);
      }, clampPoint: function(e2, t2) {
        return void 0 === t2 && (console.warn("THREE.Box2: .clampPoint() target is now required"), t2 = new Ft()), t2.copy(e2).clamp(this.min, this.max);
      }, distanceToPoint: function() {
        var e2 = new Ft();
        return function(t2) {
          return e2.copy(t2).clamp(this.min, this.max).sub(t2).length();
        };
      }(), intersect: function(e2) {
        return this.min.max(e2.min), this.max.min(e2.max), this;
      }, union: function(e2) {
        return this.min.min(e2.min), this.max.max(e2.max), this;
      }, translate: function(e2) {
        return this.min.add(e2), this.max.add(e2), this;
      }, equals: function(e2) {
        return e2.min.equals(this.min) && e2.max.equals(this.max);
      } }), Object.assign(Ws.prototype, { set: function(e2, t2) {
        return this.start.copy(e2), this.end.copy(t2), this;
      }, clone: function() {
        return new this.constructor().copy(this);
      }, copy: function(e2) {
        return this.start.copy(e2.start), this.end.copy(e2.end), this;
      }, getCenter: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Line3: .getCenter() target is now required"), e2 = new Ht()), e2.addVectors(this.start, this.end).multiplyScalar(0.5);
      }, delta: function(e2) {
        return void 0 === e2 && (console.warn("THREE.Line3: .delta() target is now required"), e2 = new Ht()), e2.subVectors(this.end, this.start);
      }, distanceSq: function() {
        return this.start.distanceToSquared(this.end);
      }, distance: function() {
        return this.start.distanceTo(this.end);
      }, at: function(e2, t2) {
        return void 0 === t2 && (console.warn("THREE.Line3: .at() target is now required"), t2 = new Ht()), this.delta(t2).multiplyScalar(e2).add(this.start);
      }, closestPointToPointParameter: function() {
        var e2 = new Ht(), t2 = new Ht();
        return function(n2, r2) {
          e2.subVectors(n2, this.start), t2.subVectors(this.end, this.start);
          var i3 = t2.dot(t2), a2 = t2.dot(e2) / i3;
          return r2 && (a2 = Bt.clamp(a2, 0, 1)), a2;
        };
      }(), closestPointToPoint: function(e2, t2, n2) {
        var r2 = this.closestPointToPointParameter(e2, t2);
        return void 0 === n2 && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), n2 = new Ht()), this.delta(n2).multiplyScalar(r2).add(this.start);
      }, applyMatrix4: function(e2) {
        return this.start.applyMatrix4(e2), this.end.applyMatrix4(e2), this;
      }, equals: function(e2) {
        return e2.start.equals(this.start) && e2.end.equals(this.end);
      } }), Xs.prototype = Object.create(dn.prototype), Xs.prototype.constructor = Xs, Xs.prototype.isImmediateRenderObject = true, qs.prototype = Object.create(bi.prototype), qs.prototype.constructor = qs, qs.prototype.update = function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new kt();
        return function() {
          var r2 = ["a", "b", "c"];
          this.object.updateMatrixWorld(true), n2.getNormalMatrix(this.object.matrixWorld);
          var i3 = this.object.matrixWorld, a2 = this.geometry.attributes.position, o2 = this.object.geometry;
          if (o2 && o2.isGeometry)
            for (var s2 = o2.vertices, c3 = o2.faces, u2 = 0, l2 = 0, h2 = c3.length; l2 < h2; l2++)
              for (var d2 = c3[l2], p2 = 0, f2 = d2.vertexNormals.length; p2 < f2; p2++) {
                var m3 = s2[d2[r2[p2]]], g2 = d2.vertexNormals[p2];
                e2.copy(m3).applyMatrix4(i3), t2.copy(g2).applyMatrix3(n2).normalize().multiplyScalar(this.size).add(e2), a2.setXYZ(u2, e2.x, e2.y, e2.z), u2 += 1, a2.setXYZ(u2, t2.x, t2.y, t2.z), u2 += 1;
              }
          else if (o2 && o2.isBufferGeometry) {
            var v2 = o2.attributes.position, y2 = o2.attributes.normal;
            for (u2 = 0, p2 = 0, f2 = v2.count; p2 < f2; p2++)
              e2.set(v2.getX(p2), v2.getY(p2), v2.getZ(p2)).applyMatrix4(i3), t2.set(y2.getX(p2), y2.getY(p2), y2.getZ(p2)), t2.applyMatrix3(n2).normalize().multiplyScalar(this.size).add(e2), a2.setXYZ(u2, e2.x, e2.y, e2.z), u2 += 1, a2.setXYZ(u2, t2.x, t2.y, t2.z), u2 += 1;
          }
          a2.needsUpdate = true;
        };
      }(), Ys.prototype = Object.create(dn.prototype), Ys.prototype.constructor = Ys, Ys.prototype.dispose = function() {
        this.cone.geometry.dispose(), this.cone.material.dispose();
      }, Ys.prototype.update = function() {
        var e2 = new Ht(), t2 = new Ht();
        return function() {
          this.light.updateMatrixWorld();
          var n2 = this.light.distance ? this.light.distance : 1e3, r2 = n2 * Math.tan(this.light.angle);
          this.cone.scale.set(r2, r2, n2), e2.setFromMatrixPosition(this.light.matrixWorld), t2.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(t2.sub(e2)), void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
        };
      }(), Zs.prototype = Object.create(bi.prototype), Zs.prototype.constructor = Zs, Zs.prototype.updateMatrixWorld = function() {
        var e2 = new Ht(), t2 = new Gt(), n2 = new Gt();
        return function(r2) {
          var i3 = this.bones, a2 = this.geometry, o2 = a2.getAttribute("position");
          n2.getInverse(this.root.matrixWorld);
          for (var s2 = 0, c3 = 0; s2 < i3.length; s2++) {
            var u2 = i3[s2];
            u2.parent && u2.parent.isBone && (t2.multiplyMatrices(n2, u2.matrixWorld), e2.setFromMatrixPosition(t2), o2.setXYZ(c3, e2.x, e2.y, e2.z), t2.multiplyMatrices(n2, u2.parent.matrixWorld), e2.setFromMatrixPosition(t2), o2.setXYZ(c3 + 1, e2.x, e2.y, e2.z), c3 += 2);
          }
          a2.getAttribute("position").needsUpdate = true, dn.prototype.updateMatrixWorld.call(this, r2);
        };
      }(), Js.prototype = Object.create(kn.prototype), Js.prototype.constructor = Js, Js.prototype.dispose = function() {
        this.geometry.dispose(), this.material.dispose();
      }, Js.prototype.update = function() {
        void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
      }, Ks.prototype = Object.create(dn.prototype), Ks.prototype.constructor = Ks, Ks.prototype.dispose = function() {
        this.children[0].geometry.dispose(), this.children[0].material.dispose();
      }, Ks.prototype.update = function() {
        var e2 = 0.5 * this.light.width, t2 = 0.5 * this.light.height, n2 = this.line.geometry.attributes.position, r2 = n2.array;
        r2[0] = e2, r2[1] = -t2, r2[2] = 0, r2[3] = e2, r2[4] = t2, r2[5] = 0, r2[6] = -e2, r2[7] = t2, r2[8] = 0, r2[9] = -e2, r2[10] = -t2, r2[11] = 0, r2[12] = e2, r2[13] = -t2, r2[14] = 0, n2.needsUpdate = true, void 0 !== this.color ? this.line.material.color.set(this.color) : this.line.material.color.copy(this.light.color);
      }, Qs.prototype = Object.create(dn.prototype), Qs.prototype.constructor = Qs, Qs.prototype.dispose = function() {
        this.children[0].geometry.dispose(), this.children[0].material.dispose();
      }, Qs.prototype.update = function() {
        var e2 = new Ht(), t2 = new rn(), n2 = new rn();
        return function() {
          var r2 = this.children[0];
          if (void 0 !== this.color)
            this.material.color.set(this.color);
          else {
            var i3 = r2.geometry.getAttribute("color");
            t2.copy(this.light.color), n2.copy(this.light.groundColor);
            for (var a2 = 0, o2 = i3.count; a2 < o2; a2++) {
              var s2 = a2 < o2 / 2 ? t2 : n2;
              i3.setXYZ(a2, s2.r, s2.g, s2.b);
            }
            i3.needsUpdate = true;
          }
          r2.lookAt(e2.setFromMatrixPosition(this.light.matrixWorld).negate());
        };
      }(), $s.prototype = Object.create(bi.prototype), $s.prototype.constructor = $s, ec.prototype = Object.create(bi.prototype), ec.prototype.constructor = ec, tc.prototype = Object.create(bi.prototype), tc.prototype.constructor = tc, tc.prototype.update = function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new kt();
        return function() {
          this.object.updateMatrixWorld(true), n2.getNormalMatrix(this.object.matrixWorld);
          for (var r2 = this.object.matrixWorld, i3 = this.geometry.attributes.position, a2 = this.object.geometry, o2 = a2.vertices, s2 = a2.faces, c3 = 0, u2 = 0, l2 = s2.length; u2 < l2; u2++) {
            var h2 = s2[u2], d2 = h2.normal;
            e2.copy(o2[h2.a]).add(o2[h2.b]).add(o2[h2.c]).divideScalar(3).applyMatrix4(r2), t2.copy(d2).applyMatrix3(n2).normalize().multiplyScalar(this.size).add(e2), i3.setXYZ(c3, e2.x, e2.y, e2.z), c3 += 1, i3.setXYZ(c3, t2.x, t2.y, t2.z), c3 += 1;
          }
          i3.needsUpdate = true;
        };
      }(), nc.prototype = Object.create(dn.prototype), nc.prototype.constructor = nc, nc.prototype.dispose = function() {
        this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
      }, nc.prototype.update = function() {
        var e2 = new Ht(), t2 = new Ht(), n2 = new Ht();
        return function() {
          e2.setFromMatrixPosition(this.light.matrixWorld), t2.setFromMatrixPosition(this.light.target.matrixWorld), n2.subVectors(t2, e2), this.lightPlane.lookAt(n2), void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(n2), this.targetLine.scale.z = n2.length();
        };
      }(), rc.prototype = Object.create(bi.prototype), rc.prototype.constructor = rc, rc.prototype.update = function() {
        var e2, t2, n2 = new Ht(), r2 = new pn();
        function i3(i4, a2, o2, s2) {
          n2.set(a2, o2, s2).unproject(r2);
          var c3 = t2[i4];
          if (void 0 !== c3)
            for (var u2 = e2.getAttribute("position"), l2 = 0, h2 = c3.length; l2 < h2; l2++)
              u2.setXYZ(c3[l2], n2.x, n2.y, n2.z);
        }
        return function() {
          e2 = this.geometry, t2 = this.pointMap;
          r2.projectionMatrix.copy(this.camera.projectionMatrix), i3("c", 0, 0, -1), i3("t", 0, 0, 1), i3("n1", -1, -1, -1), i3("n2", 1, -1, -1), i3("n3", -1, 1, -1), i3("n4", 1, 1, -1), i3("f1", -1, -1, 1), i3("f2", 1, -1, 1), i3("f3", -1, 1, 1), i3("f4", 1, 1, 1), i3("u1", 0.7, 1.1, -1), i3("u2", -0.7, 1.1, -1), i3("u3", 0, 2, -1), i3("cf1", -1, 0, 1), i3("cf2", 1, 0, 1), i3("cf3", 0, -1, 1), i3("cf4", 0, 1, 1), i3("cn1", -1, 0, -1), i3("cn2", 1, 0, -1), i3("cn3", 0, -1, -1), i3("cn4", 0, 1, -1), e2.getAttribute("position").needsUpdate = true;
        };
      }(), ic2.prototype = Object.create(bi.prototype), ic2.prototype.constructor = ic2, ic2.prototype.update = function() {
        var e2 = new Jt();
        return function(t2) {
          if (void 0 !== t2 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), void 0 !== this.object && e2.setFromObject(this.object), !e2.isEmpty()) {
            var n2 = e2.min, r2 = e2.max, i3 = this.geometry.attributes.position, a2 = i3.array;
            a2[0] = r2.x, a2[1] = r2.y, a2[2] = r2.z, a2[3] = n2.x, a2[4] = r2.y, a2[5] = r2.z, a2[6] = n2.x, a2[7] = n2.y, a2[8] = r2.z, a2[9] = r2.x, a2[10] = n2.y, a2[11] = r2.z, a2[12] = r2.x, a2[13] = r2.y, a2[14] = n2.z, a2[15] = n2.x, a2[16] = r2.y, a2[17] = n2.z, a2[18] = n2.x, a2[19] = n2.y, a2[20] = n2.z, a2[21] = r2.x, a2[22] = n2.y, a2[23] = n2.z, i3.needsUpdate = true, this.geometry.computeBoundingSphere();
          }
        };
      }(), ic2.prototype.setFromObject = function(e2) {
        return this.object = e2, this.update(), this;
      }, ac.prototype = Object.create(bi.prototype), ac.prototype.constructor = ac, ac.prototype.updateMatrixWorld = function(e2) {
        var t2 = this.box;
        t2.isEmpty() || (t2.getCenter(this.position), t2.getSize(this.scale), this.scale.multiplyScalar(0.5), dn.prototype.updateMatrixWorld.call(this, e2));
      }, oc.prototype = Object.create(xi.prototype), oc.prototype.constructor = oc, oc.prototype.updateMatrixWorld = function(e2) {
        var t2 = -this.plane.constant;
        Math.abs(t2) < 1e-8 && (t2 = 1e-8), this.scale.set(0.5 * this.size, 0.5 * this.size, t2), this.children[0].material.side = t2 < 0 ? g : m2, this.lookAt(this.plane.normal), dn.prototype.updateMatrixWorld.call(this, e2);
      }, sc.prototype = Object.create(dn.prototype), sc.prototype.constructor = sc, sc.prototype.setDirection = function() {
        var e2, t2 = new Ht();
        return function(n2) {
          n2.y > 0.99999 ? this.quaternion.set(0, 0, 0, 1) : n2.y < -0.99999 ? this.quaternion.set(1, 0, 0, 0) : (t2.set(n2.z, 0, -n2.x).normalize(), e2 = Math.acos(n2.y), this.quaternion.setFromAxisAngle(t2, e2));
        };
      }(), sc.prototype.setLength = function(e2, t2, n2) {
        void 0 === t2 && (t2 = 0.2 * e2), void 0 === n2 && (n2 = 0.2 * t2), this.line.scale.set(1, Math.max(0, e2 - t2), 1), this.line.updateMatrix(), this.cone.scale.set(n2, t2, n2), this.cone.position.y = e2, this.cone.updateMatrix();
      }, sc.prototype.setColor = function(e2) {
        this.line.material.color.copy(e2), this.cone.material.color.copy(e2);
      }, cc.prototype = Object.create(bi.prototype), cc.prototype.constructor = cc;
      var lc = 0, hc = 1;
      function dc(e2) {
        return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."), e2;
      }
      function pc(e2) {
        return void 0 === e2 && (e2 = []), console.warn("THREE.MultiMaterial has been removed. Use an Array instead."), e2.isMultiMaterial = true, e2.materials = e2, e2.clone = function() {
          return e2.slice();
        }, e2;
      }
      function fc(e2, t2) {
        return console.warn("THREE.PointCloud has been renamed to THREE.Points."), new Mi(e2, t2);
      }
      function mc(e2) {
        return console.warn("THREE.Particle has been renamed to THREE.Sprite."), new pi(e2);
      }
      function gc(e2, t2) {
        return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."), new Mi(e2, t2);
      }
      function vc(e2) {
        return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."), new _i(e2);
      }
      function yc(e2) {
        return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."), new _i(e2);
      }
      function xc(e2) {
        return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."), new _i(e2);
      }
      function bc(e2, t2, n2) {
        return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."), new Ht(e2, t2, n2);
      }
      function wc(e2, t2) {
        return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."), new yn(e2, t2).setDynamic(true);
      }
      function _c(e2, t2) {
        return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."), new xn(e2, t2);
      }
      function Mc(e2, t2) {
        return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."), new bn(e2, t2);
      }
      function Ec(e2, t2) {
        return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."), new wn(e2, t2);
      }
      function Tc(e2, t2) {
        return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."), new _n(e2, t2);
      }
      function Sc(e2, t2) {
        return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."), new Mn(e2, t2);
      }
      function Ac(e2, t2) {
        return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."), new En(e2, t2);
      }
      function Lc(e2, t2) {
        return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."), new Tn(e2, t2);
      }
      function Rc(e2, t2) {
        return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."), new Sn(e2, t2);
      }
      function Cc(e2, t2) {
        return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."), new An(e2, t2);
      }
      function Pc(e2) {
        console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."), go.call(this, e2), this.type = "catmullrom", this.closed = true;
      }
      function Oc(e2) {
        console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."), go.call(this, e2), this.type = "catmullrom";
      }
      function Nc(e2) {
        console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."), go.call(this, e2), this.type = "catmullrom";
      }
      function Ic(e2) {
        return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."), new cc(e2);
      }
      function Dc(e2, t2) {
        return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."), new ic2(e2, t2);
      }
      function Uc(e2, t2) {
        return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."), new bi(new Na(e2.geometry), new yi({ color: void 0 !== t2 ? t2 : 16777215 }));
      }
      function Bc(e2, t2) {
        return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."), new bi(new Li(e2.geometry), new yi({ color: void 0 !== t2 ? t2 : 16777215 }));
      }
      function Fc(e2) {
        return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."), new to(e2);
      }
      function Gc(e2) {
        return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."), new ro(e2);
      }
      so.create = function(e2, t2) {
        return console.log("THREE.Curve.create() has been deprecated"), e2.prototype = Object.create(so.prototype), e2.prototype.constructor = e2, e2.prototype.getPoint = t2, e2;
      }, Object.assign(Lo.prototype, { createPointsGeometry: function(e2) {
        console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
        var t2 = this.getPoints(e2);
        return this.createGeometry(t2);
      }, createSpacedPointsGeometry: function(e2) {
        console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
        var t2 = this.getSpacedPoints(e2);
        return this.createGeometry(t2);
      }, createGeometry: function(e2) {
        console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
        for (var t2 = new vn(), n2 = 0, r2 = e2.length; n2 < r2; n2++) {
          var i3 = e2[n2];
          t2.vertices.push(new Ht(i3.x, i3.y, i3.z || 0));
        }
        return t2;
      } }), Object.assign(Ro.prototype, { fromPoints: function(e2) {
        console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(e2);
      } }), Pc.prototype = Object.create(go.prototype), Oc.prototype = Object.create(go.prototype), Nc.prototype = Object.create(go.prototype), Object.assign(Nc.prototype, { initFromArray: function() {
        console.error("THREE.Spline: .initFromArray() has been removed.");
      }, getControlPointsArray: function() {
        console.error("THREE.Spline: .getControlPointsArray() has been removed.");
      }, reparametrizeByArcLength: function() {
        console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
      } }), $s.prototype.setColors = function() {
        console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
      }, Zs.prototype.update = function() {
        console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
      }, Object.assign(as.prototype, { extractUrlBase: function(e2) {
        return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), os.extractUrlBase(e2);
      } }), Object.assign(Vs.prototype, { center: function(e2) {
        return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(e2);
      }, empty: function() {
        return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty();
      }, isIntersectionBox: function(e2) {
        return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e2);
      }, size: function(e2) {
        return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(e2);
      } }), Object.assign(Jt.prototype, { center: function(e2) {
        return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(e2);
      }, empty: function() {
        return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty();
      }, isIntersectionBox: function(e2) {
        return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e2);
      }, isIntersectionSphere: function(e2) {
        return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(e2);
      }, size: function(e2) {
        return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(e2);
      } }), Ws.prototype.center = function(e2) {
        return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(e2);
      }, Object.assign(Bt, { random16: function() {
        return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."), Math.random();
      }, nearestPowerOfTwo: function(e2) {
        return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."), Bt.floorPowerOfTwo(e2);
      }, nextPowerOfTwo: function(e2) {
        return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."), Bt.ceilPowerOfTwo(e2);
      } }), Object.assign(kt.prototype, { flattenToArrayOffset: function(e2, t2) {
        return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(e2, t2);
      }, multiplyVector3: function(e2) {
        return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), e2.applyMatrix3(this);
      }, multiplyVector3Array: function() {
        console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
      }, applyToBuffer: function(e2) {
        return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."), this.applyToBufferAttribute(e2);
      }, applyToVector3Array: function() {
        console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
      } }), Object.assign(Gt.prototype, { extractPosition: function(e2) {
        return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(e2);
      }, flattenToArrayOffset: function(e2, t2) {
        return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(e2, t2);
      }, getPosition: function() {
        var e2;
        return function() {
          return void 0 === e2 && (e2 = new Ht()), console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), e2.setFromMatrixColumn(this, 3);
        };
      }(), setRotationFromQuaternion: function(e2) {
        return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(e2);
      }, multiplyToArray: function() {
        console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
      }, multiplyVector3: function(e2) {
        return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), e2.applyMatrix4(this);
      }, multiplyVector4: function(e2) {
        return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), e2.applyMatrix4(this);
      }, multiplyVector3Array: function() {
        console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
      }, rotateAxis: function(e2) {
        console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), e2.transformDirection(this);
      }, crossVector: function(e2) {
        return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), e2.applyMatrix4(this);
      }, translate: function() {
        console.error("THREE.Matrix4: .translate() has been removed.");
      }, rotateX: function() {
        console.error("THREE.Matrix4: .rotateX() has been removed.");
      }, rotateY: function() {
        console.error("THREE.Matrix4: .rotateY() has been removed.");
      }, rotateZ: function() {
        console.error("THREE.Matrix4: .rotateZ() has been removed.");
      }, rotateByAxis: function() {
        console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
      }, applyToBuffer: function(e2) {
        return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."), this.applyToBufferAttribute(e2);
      }, applyToVector3Array: function() {
        console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
      }, makeFrustum: function(e2, t2, n2, r2, i3, a2) {
        return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(e2, t2, r2, n2, i3, a2);
      } }), Qt.prototype.isIntersectionLine = function(e2) {
        return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(e2);
      }, zt.prototype.multiplyVector3 = function(e2) {
        return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), e2.applyQuaternion(this);
      }, Object.assign(zn.prototype, { isIntersectionBox: function(e2) {
        return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e2);
      }, isIntersectionPlane: function(e2) {
        return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(e2);
      }, isIntersectionSphere: function(e2) {
        return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(e2);
      } }), Object.assign(Hn.prototype, { area: function() {
        return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea();
      }, barycoordFromPoint: function(e2, t2) {
        return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(e2, t2);
      }, midpoint: function(e2) {
        return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(e2);
      }, normal: function(e2) {
        return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(e2);
      }, plane: function(e2) {
        return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(e2);
      } }), Object.assign(Hn, { barycoordFromPoint: function(e2, t2, n2, r2, i3) {
        return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), Hn.getBarycoord(e2, t2, n2, r2, i3);
      }, normal: function(e2, t2, n2, r2) {
        return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), Hn.getNormal(e2, t2, n2, r2);
      } }), Object.assign(Co.prototype, { extractAllPoints: function(e2) {
        return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(e2);
      }, extrude: function(e2) {
        return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new ya(this, e2);
      }, makeGeometry: function(e2) {
        return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Ca(this, e2);
      } }), Object.assign(Ft.prototype, { fromAttribute: function(e2, t2, n2) {
        return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e2, t2, n2);
      }, distanceToManhattan: function(e2) {
        return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(e2);
      }, lengthManhattan: function() {
        return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
      } }), Object.assign(Ht.prototype, { setEulerFromRotationMatrix: function() {
        console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
      }, setEulerFromQuaternion: function() {
        console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
      }, getPositionFromMatrix: function(e2) {
        return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(e2);
      }, getScaleFromMatrix: function(e2) {
        return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(e2);
      }, getColumnFromMatrix: function(e2, t2) {
        return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(t2, e2);
      }, applyProjection: function(e2) {
        return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(e2);
      }, fromAttribute: function(e2, t2, n2) {
        return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e2, t2, n2);
      }, distanceToManhattan: function(e2) {
        return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(e2);
      }, lengthManhattan: function() {
        return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
      } }), Object.assign(Xt.prototype, { fromAttribute: function(e2, t2, n2) {
        return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e2, t2, n2);
      }, lengthManhattan: function() {
        return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
      } }), Object.assign(vn.prototype, { computeTangents: function() {
        console.error("THREE.Geometry: .computeTangents() has been removed.");
      }, computeLineDistances: function() {
        console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
      } }), Object.assign(dn.prototype, { getChildByName: function(e2) {
        return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(e2);
      }, renderDepth: function() {
        console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
      }, translate: function(e2, t2) {
        return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(t2, e2);
      }, getWorldRotation: function() {
        console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
      } }), Object.defineProperties(dn.prototype, { eulerOrder: { get: function() {
        return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order;
      }, set: function(e2) {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order = e2;
      } }, useQuaternion: { get: function() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      }, set: function() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      } } }), Object.defineProperties(fi.prototype, { objects: { get: function() {
        return console.warn("THREE.LOD: .objects has been renamed to .levels."), this.levels;
      } } }), Object.defineProperty(mi.prototype, "useVertexTexture", { get: function() {
        console.warn("THREE.Skeleton: useVertexTexture has been removed.");
      }, set: function() {
        console.warn("THREE.Skeleton: useVertexTexture has been removed.");
      } }), Object.defineProperty(so.prototype, "__arcLengthDivisions", { get: function() {
        return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions;
      }, set: function(e2) {
        console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions = e2;
      } }), ri.prototype.setLens = function(e2, t2) {
        console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), void 0 !== t2 && (this.filmGauge = t2), this.setFocalLength(e2);
      }, Object.defineProperties(Po.prototype, { onlyShadow: { set: function() {
        console.warn("THREE.Light: .onlyShadow has been removed.");
      } }, shadowCameraFov: { set: function(e2) {
        console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), this.shadow.camera.fov = e2;
      } }, shadowCameraLeft: { set: function(e2) {
        console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), this.shadow.camera.left = e2;
      } }, shadowCameraRight: { set: function(e2) {
        console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), this.shadow.camera.right = e2;
      } }, shadowCameraTop: { set: function(e2) {
        console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), this.shadow.camera.top = e2;
      } }, shadowCameraBottom: { set: function(e2) {
        console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), this.shadow.camera.bottom = e2;
      } }, shadowCameraNear: { set: function(e2) {
        console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), this.shadow.camera.near = e2;
      } }, shadowCameraFar: { set: function(e2) {
        console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), this.shadow.camera.far = e2;
      } }, shadowCameraVisible: { set: function() {
        console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
      } }, shadowBias: { set: function(e2) {
        console.warn("THREE.Light: .shadowBias is now .shadow.bias."), this.shadow.bias = e2;
      } }, shadowDarkness: { set: function() {
        console.warn("THREE.Light: .shadowDarkness has been removed.");
      } }, shadowMapWidth: { set: function(e2) {
        console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), this.shadow.mapSize.width = e2;
      } }, shadowMapHeight: { set: function(e2) {
        console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), this.shadow.mapSize.height = e2;
      } } }), Object.defineProperties(yn.prototype, { length: { get: function() {
        return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length;
      } }, copyIndicesArray: function() {
        console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
      } }), Object.assign(Pn.prototype, { addIndex: function(e2) {
        console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(e2);
      }, addDrawCall: function(e2, t2, n2) {
        void 0 !== n2 && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(e2, t2);
      }, clearDrawCalls: function() {
        console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups();
      }, computeTangents: function() {
        console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
      }, computeOffsets: function() {
        console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
      } }), Object.defineProperties(Pn.prototype, { drawcalls: { get: function() {
        return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups;
      } }, offsets: { get: function() {
        return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups;
      } } }), Object.assign(xa.prototype, { getArrays: function() {
        console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
      }, addShapeList: function() {
        console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
      }, addShape: function() {
        console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
      } }), Object.defineProperties(Is.prototype, { dynamic: { set: function() {
        console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
      } }, onUpdate: { value: function() {
        return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this;
      } } }), Object.defineProperties(Bn.prototype, { wrapAround: { get: function() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      }, set: function() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      } }, wrapRGB: { get: function() {
        return console.warn("THREE.Material: .wrapRGB has been removed."), new rn();
      } }, shading: { get: function() {
        console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
      }, set: function(e2) {
        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = e2 === y;
      } } }), Object.defineProperties(Wa.prototype, { metal: { get: function() {
        return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."), false;
      }, set: function() {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
      } } }), Object.defineProperties(Gn.prototype, { derivatives: { get: function() {
        return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives;
      }, set: function(e2) {
        console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives = e2;
      } } }), Object.assign(oi.prototype, { animate: function(e2) {
        console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(e2);
      }, getCurrentRenderTarget: function() {
        return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget();
      }, getMaxAnisotropy: function() {
        return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy();
      }, getPrecision: function() {
        return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision;
      }, resetGLState: function() {
        return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset();
      }, supportsFloatTextures: function() {
        return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float");
      }, supportsHalfFloatTextures: function() {
        return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float");
      }, supportsStandardDerivatives: function() {
        return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives");
      }, supportsCompressedTextureS3TC: function() {
        return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc");
      }, supportsCompressedTexturePVRTC: function() {
        return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc");
      }, supportsBlendMinMax: function() {
        return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax");
      }, supportsVertexTextures: function() {
        return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures;
      }, supportsInstancedArrays: function() {
        return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays");
      }, enableScissorTest: function(e2) {
        console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(e2);
      }, initMaterial: function() {
        console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
      }, addPrePlugin: function() {
        console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
      }, addPostPlugin: function() {
        console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
      }, updateShadowMap: function() {
        console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
      }, setFaceCulling: function() {
        console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
      } }), Object.defineProperties(oi.prototype, { shadowMapEnabled: { get: function() {
        return this.shadowMap.enabled;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), this.shadowMap.enabled = e2;
      } }, shadowMapType: { get: function() {
        return this.shadowMap.type;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), this.shadowMap.type = e2;
      } }, shadowMapCullFace: { get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      }, set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      } } }), Object.defineProperties($r.prototype, { cullFace: { get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      }, set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      } }, renderReverseSided: { get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      }, set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      } }, renderSingleSided: { get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      }, set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      } } }), Object.defineProperties(qt.prototype, { wrapS: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS = e2;
      } }, wrapT: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT = e2;
      } }, magFilter: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter = e2;
      } }, minFilter: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter = e2;
      } }, anisotropy: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy = e2;
      } }, offset: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset = e2;
      } }, repeat: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat = e2;
      } }, format: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format = e2;
      } }, type: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type = e2;
      } }, generateMipmaps: { get: function() {
        return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps;
      }, set: function(e2) {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps = e2;
      } } }), Object.defineProperties(ai.prototype, { standing: { set: function() {
        console.warn("THREE.WebVRManager: .standing has been removed.");
      } } }), Ms.prototype.load = function(e2) {
        console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
        var t2 = this;
        return new xs().load(e2, function(e3) {
          t2.setBuffer(e3);
        }), this;
      }, Ts.prototype.getData = function() {
        return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData();
      }, ws.prototype.updateCubeMap = function(e2, t2) {
        return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(e2, t2);
      };
      var zc = { merge: function(e2, t2, n2) {
        var r2;
        console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."), t2.isMesh && (t2.matrixAutoUpdate && t2.updateMatrix(), r2 = t2.matrix, t2 = t2.geometry), e2.merge(t2, r2, n2);
      }, center: function(e2) {
        return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."), e2.center();
      } };
      function Hc() {
        console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."), this.projectVector = function(e2, t2) {
          console.warn("THREE.Projector: .projectVector() is now vector.project()."), e2.project(t2);
        }, this.unprojectVector = function(e2, t2) {
          console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."), e2.unproject(t2);
        }, this.pickingRay = function() {
          console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
        };
      }
      function kc() {
        console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"), this.domElement = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), this.clear = function() {
        }, this.render = function() {
        }, this.setClearColor = function() {
        }, this.setSize = function() {
        };
      }
      jt.crossOrigin = void 0, jt.loadTexture = function(e2, t2, n2, r2) {
        console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
        var i3 = new oo();
        i3.setCrossOrigin(this.crossOrigin);
        var a2 = i3.load(e2, n2, void 0, r2);
        return t2 && (a2.mapping = t2), a2;
      }, jt.loadTextureCube = function(e2, t2, n2, r2) {
        console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
        var i3 = new ao();
        i3.setCrossOrigin(this.crossOrigin);
        var a2 = i3.load(e2, n2, void 0, r2);
        return t2 && (a2.mapping = t2), a2;
      }, jt.loadCompressedTexture = function() {
        console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
      }, jt.loadCompressedTextureCube = function() {
        console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
      };
      var jc = { createMultiMaterialObject: function() {
        console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
      }, detach: function() {
        console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
      }, attach: function() {
        console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
      } };
      function Vc() {
        console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js");
      }
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true });
      var r, i2, a = function() {
        function e2(e3, t2) {
          for (var n2 = 0; n2 < t2.length; n2++) {
            var r2 = t2[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
          }
        }
        return function(t2, n2, r2) {
          return n2 && e2(t2.prototype, n2), r2 && e2(t2, r2), t2;
        };
      }(), o = l(n(5)), s = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = {};
        if (null != e2)
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
        return t2.default = e2, t2;
      }(n(0)), c2 = n(4), u = l(n(3));
      function l(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      var h = { directionligth: { create: function() {
        var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = e2.color, n2 = e2.position, r2 = e2.castShadow, i3 = new s.DirectionalLight(new s.Color(t2), 0.95);
        return i3.position.set(n2.x, n2.y, n2.z), i3.castShadow = r2, i3;
      } }, ambientlight: { create: function() {
        var e2 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).color;
        return new s.AmbientLight(new s.Color(e2));
      } }, spotlight: { create: function() {
      } } }, d = function e2(t2) {
        if (t2 instanceof s.Mesh) {
          var n2 = t2.geometry;
          if (n2) {
            n2.boundingBox || n2.computeBoundingBox();
            var r2 = n2.boundingBox;
            return t2.updateMatrix(), r2.applyMatrix4(t2.matrix), r2;
          }
          return new s.Box3(new s.Vector3(), new s.Vector3());
        }
        var i3, a2 = t2.children.length, o2 = new s.Box3(new s.Vector3(), new s.Vector3());
        for (i3 = 0; i3 < a2; i3++) {
          var c3 = e2(t2.children[i3]);
          c3.min.x < o2.min.x && (o2.min.x = c3.min.x), c3.max.x > o2.max.x && (o2.max.x = c3.max.x), c3.min.y < o2.min.y && (o2.min.y = c3.min.y), c3.max.y > o2.max.y && (o2.max.y = c3.max.y), c3.min.z < o2.min.z && (o2.min.z = c3.min.z), c3.max.z > o2.max.z && (o2.max.z = c3.max.z);
        }
        return t2.updateMatrix(), o2.applyMatrix4(t2.matrix), o2;
      }, p = (i2 = r = function(e2) {
        function t2(e3) {
          !function(e4, t3) {
            if (!(e4 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }(this, t2);
          var n2 = function(e4, t3) {
            if (!e4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t3 || "object" != typeof t3 && "function" != typeof t3 ? e4 : t3;
          }(this, (t2.__proto__ || Object.getPrototypeOf(t2)).call(this, e3));
          return n2.obj3d, n2.src, n2.state = { lights: [] }, n2.lights = [], n2.group = new s.Group(), n2;
        }
        return function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t3);
          e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }), t3 && (Object.setPrototypeOf ? Object.setPrototypeOf(e3, t3) : e3.__proto__ = t3);
        }(t2, o.default.Component), a(t2, [{ key: "render", value: function() {
          var e3 = this;
          this.state.lights;
          return o.default.createElement("div", { ref: function(t3) {
            return e3.$container = t3;
          }, "data-loader": this.props.loader, style: this.style() });
        } }, { key: "componentDidUpdate", value: function() {
          var e3 = this;
          if (!this.obj3d)
            return false;
          var t3 = this.props, n2 = t3.src, r2 = (t3.background, t3.width), i3 = t3.height;
          this.camera.aspect = r2 / i3, this.camera.updateProjectionMatrix(), this.renderer.setSize(r2, i3);
          var a2 = this.props, o2 = a2.enableKeys, s2 = a2.enableRotate, u2 = a2.enableZoom, l2 = a2.enabled;
          Object.assign(this.orbit_controls, { enableKeys: o2, enablePan: true, enableRotate: s2, enableZoom: u2, enabled: l2 }), void 0 !== this.src && this.src != n2 && (this.src = n2, this.remove3dModel(), this.load3dModel()), this.lights.forEach(function(t4) {
            return e3.scene.remove(t4);
          }), this.lights = [], this.addLight("ambientlight", c2.AmbientLight.defaultProps), this.need_children_lights ? this.addChildrenLights() : this.addLight("directionligth", c2.DirectionLight.defaultProps);
        } }, { key: "componentWillUnmount", value: function() {
          this.tick.animate = false;
        } }, { key: "componentDidMount", value: function() {
          var e3 = this, t3 = this.props, n2 = t3.width, r2 = t3.height, i3 = t3.antialias, a2 = t3.background;
          this.scene = new s.Scene(), this.camera = new s.PerspectiveCamera(45, n2 / r2, 0.1, 8888), this.renderer = new s.WebGLRenderer({ antialias: i3 }), this.renderer.setClearColor(new s.Color(a2)), this.renderer.setSize(n2, r2), this.$container.appendChild(this.renderer.domElement), this.scene.add(this.group), this.camera.position.set(0, 0, 0.1), this.createDefaultLight();
          var o2 = this.props, c3 = o2.position, l2 = o2.rotation, h2 = o2.scale;
          this.group.position.copy(new s.Vector3(c3.x, c3.y, c3.z)), this.group.rotation.set(l2.x, l2.y, l2.z), this.group.scale.set(h2.x, h2.y, h2.z), this.load3dModel(), this.tick = (0, u.default)(function() {
            if (e3.renderer.render(e3.scene, e3.camera), e3.obj3d) {
              e3.group.children.length || e3.group.add(e3.obj3d);
              var t4 = e3.props, n3 = t4.position, r3 = t4.rotation, i4 = t4.scale;
              e3.group.position.copy(new s.Vector3(n3.x, n3.y, n3.z)), e3.group.rotation.set(r3.x, r3.y, r3.z), e3.group.scale.set(i4.x, i4.y, i4.z);
            }
          });
        } }, { key: "initControl", value: function() {
          var e3 = this.props, t3 = e3.enableKeys, n2 = e3.enableRotate, r2 = e3.enableZoom, i3 = e3.enabled;
          this.orbit_controls = new s.OrbitControls(this.camera, this.renderer.domElement), Object.assign(this.orbit_controls, { enableKeys: t3, enablePan: true, enableRotate: n2, enableZoom: r2, enabled: i3 }), this.orbit_controls.update();
        } }, { key: "remove3dModel", value: function() {
          this.obj3d && this.scene.remove(this.obj3d);
        } }, { key: "load3dModel", value: function() {
        } }, { key: "style", value: function() {
          var e3 = this.props, t3 = e3.width, n2 = e3.height;
          return Object.assign({}, { width: t3 + "px", height: n2 + "px" });
        } }, { key: "computeBoundingBox", value: function(e3) {
          if (e3 instanceof s.Mesh) {
            var t3 = e3.geometry;
            if (t3) {
              t3.boundingBox || t3.computeBoundingBox();
              var n2 = t3.boundingBox;
              return e3.updateMatrix(), n2.applyMatrix4(e3.matrix), n2;
            }
            return new s.Box3(new s.Vector3(), new s.Vector3());
          }
          var r2, i3 = e3.children.length, a2 = new s.Box3(new s.Vector3(), new s.Vector3());
          for (r2 = 0; r2 < i3; r2++) {
            var o2 = d(e3.children[r2]);
            o2.min.x < a2.min.x && (a2.min.x = o2.min.x), o2.max.x > a2.max.x && (a2.max.x = o2.max.x), o2.min.y < a2.min.y && (a2.min.y = o2.min.y), o2.max.y > a2.max.y && (a2.max.y = o2.max.y), o2.min.z < a2.min.z && (a2.min.z = o2.min.z), o2.max.z > a2.max.z && (a2.max.z = o2.max.z);
          }
          return e3.updateMatrix(), a2.applyMatrix4(e3.matrix), a2;
        } }, { key: "traverseScene", value: function() {
        } }, { key: "createEnvironment", value: function() {
        } }, { key: "addLight", value: function(e3, t3) {
          if (/directionligth|ambientlight|spotlight/.test(e3)) {
            var n2 = h[e3].create(t3);
            return this.scene.add(n2), this.lights.push(n2), n2;
          }
        } }, { key: "addChildrenLights", value: function() {
          var e3 = this;
          this.lights.forEach(function(t3) {
            e3.scene.remove(t3);
          }), this.lights = [], this.array_children.map(function(t3) {
            var n2 = t3.props, r2 = n2.__constructor;
            e3.addLight(r2, n2);
          });
        } }, { key: "createDefaultLight", value: function() {
          this.addLight("ambientlight", c2.AmbientLight.defaultProps), this.need_children_lights ? this.addChildrenLights() : this.addLight("directionligth", c2.DirectionLight.defaultProps);
        } }, { key: "array_children", get: function() {
          return this.props.children ? this.props.children instanceof Array ? this.props.children : [this.props.children] : [];
        } }, { key: "need_children_lights", get: function() {
          return !!this.array_children.filter(function(e3) {
            return /directionligth|ambientlight|spotlight/.test(e3.props.__constructor);
          }).length;
        } }]), t2;
      }(), r.defaultProps = { width: 500, height: 500, antialias: true, loader: "", baseUrl: "", texPath: "", position: { x: 0, y: 0, z: 0 }, scale: { x: 1, y: 1, z: 1 }, rotation: { x: 0, y: 0, z: 0 }, background: "rgb(255,255,255)", enableKeys: true, enableRotate: true, enableZoom: true, enabled: true }, i2);
      t.default = p;
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true }), t.GLTFLoader = t.ColladaLoader = t.OBJLoader = t.MTLLoader = t.OrbitControls = void 0;
      var r = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = {};
        if (null != e2)
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
        return t2.default = e2, t2;
      }(n(0));
      r.OrbitControls = function(e2, t2) {
        this.object = e2, this.domElement = void 0 !== t2 ? t2 : document, this.enabled = true, this.target = new r.Vector3(), this.minDistance = 0, this.maxDistance = 1 / 0, this.minZoom = 0, this.maxZoom = 1 / 0, this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.enableDamping = false, this.dampingFactor = 0.25, this.enableZoom = true, this.zoomSpeed = 1, this.enableRotate = true, this.rotateSpeed = 1, this.enablePan = true, this.keyPanSpeed = 7, this.autoRotate = false, this.autoRotateSpeed = 2, this.enableKeys = true, this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 }, this.mouseButtons = { ORBIT: r.MOUSE.LEFT, ZOOM: r.MOUSE.MIDDLE, PAN: r.MOUSE.RIGHT }, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = function() {
          return l.phi;
        }, this.getAzimuthalAngle = function() {
          return l.theta;
        }, this.reset = function() {
          n2.target.copy(n2.target0), n2.object.position.copy(n2.position0), n2.object.zoom = n2.zoom0, n2.object.updateProjectionMatrix(), n2.dispatchEvent(i3), n2.update(), c3 = s2.NONE;
        }, this.update = function() {
          var t3 = new r.Vector3(), a3 = new r.Quaternion().setFromUnitVectors(e2.up, new r.Vector3(0, 1, 0)), o3 = a3.clone().inverse(), m3 = new r.Vector3(), g2 = new r.Quaternion();
          return function() {
            var e3 = n2.object.position;
            return t3.copy(e3).sub(n2.target), t3.applyQuaternion(a3), l.setFromVector3(t3), n2.autoRotate && c3 === s2.NONE && T(2 * Math.PI / 60 / 60 * n2.autoRotateSpeed), l.theta += h.theta, l.phi += h.phi, l.theta = Math.max(n2.minAzimuthAngle, Math.min(n2.maxAzimuthAngle, l.theta)), l.phi = Math.max(n2.minPolarAngle, Math.min(n2.maxPolarAngle, l.phi)), l.makeSafe(), l.radius *= d, l.radius = Math.max(n2.minDistance, Math.min(n2.maxDistance, l.radius)), n2.target.add(p), t3.setFromSpherical(l), t3.applyQuaternion(o3), e3.copy(n2.target).add(t3), n2.object.lookAt(n2.target), true === n2.enableDamping ? (h.theta *= 1 - n2.dampingFactor, h.phi *= 1 - n2.dampingFactor) : h.set(0, 0, 0), d = 1, p.set(0, 0, 0), !!(f || m3.distanceToSquared(n2.object.position) > u || 8 * (1 - g2.dot(n2.object.quaternion)) > u) && (n2.dispatchEvent(i3), m3.copy(n2.object.position), g2.copy(n2.object.quaternion), f = false, true);
          };
        }(), this.dispose = function() {
          n2.domElement.removeEventListener("contextmenu", z, false), n2.domElement.removeEventListener("mousedown", O, false), n2.domElement.removeEventListener("wheel", D, false), n2.domElement.removeEventListener("touchstart", B, false), n2.domElement.removeEventListener("touchend", G, false), n2.domElement.removeEventListener("touchmove", F, false), document.removeEventListener("mousemove", N, false), document.removeEventListener("mouseup", I, false), window.removeEventListener("keydown", U, false);
        };
        var n2 = this, i3 = { type: "change" }, a2 = { type: "start" }, o2 = { type: "end" }, s2 = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 }, c3 = s2.NONE, u = 1e-6, l = new r.Spherical(), h = new r.Spherical(), d = 1, p = new r.Vector3(), f = false, m2 = new r.Vector2(), g = new r.Vector2(), v = new r.Vector2(), y = new r.Vector2(), x = new r.Vector2(), b = new r.Vector2(), w = new r.Vector2(), _ = new r.Vector2(), M = new r.Vector2();
        function E() {
          return Math.pow(0.95, n2.zoomSpeed);
        }
        function T(e3) {
          h.theta -= e3;
        }
        function S(e3) {
          h.phi -= e3;
        }
        var A = function() {
          var e3 = new r.Vector3();
          return function(t3, n3) {
            e3.setFromMatrixColumn(n3, 0), e3.multiplyScalar(-t3), p.add(e3);
          };
        }(), L = function() {
          var e3 = new r.Vector3();
          return function(t3, n3) {
            e3.setFromMatrixColumn(n3, 1), e3.multiplyScalar(t3), p.add(e3);
          };
        }(), R = function() {
          var e3 = new r.Vector3();
          return function(t3, i4) {
            var a3 = n2.domElement === document ? n2.domElement.body : n2.domElement;
            if (n2.object instanceof r.PerspectiveCamera) {
              var o3 = n2.object.position;
              e3.copy(o3).sub(n2.target);
              var s3 = e3.length();
              s3 *= Math.tan(n2.object.fov / 2 * Math.PI / 180), A(2 * t3 * s3 / a3.clientHeight, n2.object.matrix), L(2 * i4 * s3 / a3.clientHeight, n2.object.matrix);
            } else
              n2.object instanceof r.OrthographicCamera ? (A(t3 * (n2.object.right - n2.object.left) / n2.object.zoom / a3.clientWidth, n2.object.matrix), L(i4 * (n2.object.top - n2.object.bottom) / n2.object.zoom / a3.clientHeight, n2.object.matrix)) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), n2.enablePan = false);
          };
        }();
        function C(e3) {
          n2.object instanceof r.PerspectiveCamera ? d /= e3 : n2.object instanceof r.OrthographicCamera ? (n2.object.zoom = Math.max(n2.minZoom, Math.min(n2.maxZoom, n2.object.zoom * e3)), n2.object.updateProjectionMatrix(), f = true) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), n2.enableZoom = false);
        }
        function P(e3) {
          n2.object instanceof r.PerspectiveCamera ? d *= e3 : n2.object instanceof r.OrthographicCamera ? (n2.object.zoom = Math.max(n2.minZoom, Math.min(n2.maxZoom, n2.object.zoom / e3)), n2.object.updateProjectionMatrix(), f = true) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), n2.enableZoom = false);
        }
        function O(e3) {
          if (false !== n2.enabled) {
            if (e3.preventDefault(), e3.button === n2.mouseButtons.ORBIT) {
              if (false === n2.enableRotate)
                return;
              !function(e4) {
                m2.set(e4.clientX, e4.clientY);
              }(e3), c3 = s2.ROTATE;
            } else if (e3.button === n2.mouseButtons.ZOOM) {
              if (false === n2.enableZoom)
                return;
              !function(e4) {
                w.set(e4.clientX, e4.clientY);
              }(e3), c3 = s2.DOLLY;
            } else if (e3.button === n2.mouseButtons.PAN) {
              if (false === n2.enablePan)
                return;
              !function(e4) {
                y.set(e4.clientX, e4.clientY);
              }(e3), c3 = s2.PAN;
            }
            c3 !== s2.NONE && (document.addEventListener("mousemove", N, false), document.addEventListener("mouseup", I, false), n2.dispatchEvent(a2));
          }
        }
        function N(e3) {
          if (false !== n2.enabled) {
            if (e3.preventDefault(), c3 === s2.ROTATE) {
              if (false === n2.enableRotate)
                return;
              !function(e4) {
                g.set(e4.clientX, e4.clientY), v.subVectors(g, m2);
                var t3 = n2.domElement === document ? n2.domElement.body : n2.domElement;
                T(2 * Math.PI * v.x / t3.clientWidth * n2.rotateSpeed), S(2 * Math.PI * v.y / t3.clientHeight * n2.rotateSpeed), m2.copy(g), n2.update();
              }(e3);
            } else if (c3 === s2.DOLLY) {
              if (false === n2.enableZoom)
                return;
              !function(e4) {
                _.set(e4.clientX, e4.clientY), M.subVectors(_, w), M.y > 0 ? C(E()) : M.y < 0 && P(E()), w.copy(_), n2.update();
              }(e3);
            } else if (c3 === s2.PAN) {
              if (false === n2.enablePan)
                return;
              !function(e4) {
                x.set(e4.clientX, e4.clientY), b.subVectors(x, y), R(b.x, b.y), y.copy(x), n2.update();
              }(e3);
            }
          }
        }
        function I(e3) {
          false !== n2.enabled && (document.removeEventListener("mousemove", N, false), document.removeEventListener("mouseup", I, false), n2.dispatchEvent(o2), c3 = s2.NONE);
        }
        function D(e3) {
          false === n2.enabled || false === n2.enableZoom || c3 !== s2.NONE && c3 !== s2.ROTATE || (e3.preventDefault(), e3.stopPropagation(), function(e4) {
            e4.deltaY < 0 ? P(E()) : e4.deltaY > 0 && C(E()), n2.update();
          }(e3), n2.dispatchEvent(a2), n2.dispatchEvent(o2));
        }
        function U(e3) {
          false !== n2.enabled && false !== n2.enableKeys && false !== n2.enablePan && function(e4) {
            switch (e4.keyCode) {
              case n2.keys.UP:
                R(0, n2.keyPanSpeed), n2.update();
                break;
              case n2.keys.BOTTOM:
                R(0, -n2.keyPanSpeed), n2.update();
                break;
              case n2.keys.LEFT:
                R(n2.keyPanSpeed, 0), n2.update();
                break;
              case n2.keys.RIGHT:
                R(-n2.keyPanSpeed, 0), n2.update();
            }
          }(e3);
        }
        function B(e3) {
          if (false !== n2.enabled) {
            switch (e3.touches.length) {
              case 1:
                if (false === n2.enableRotate)
                  return;
                !function(e4) {
                  m2.set(e4.touches[0].pageX, e4.touches[0].pageY);
                }(e3), c3 = s2.TOUCH_ROTATE;
                break;
              case 2:
                if (false === n2.enableZoom)
                  return;
                !function(e4) {
                  var t3 = e4.touches[0].pageX - e4.touches[1].pageX, n3 = e4.touches[0].pageY - e4.touches[1].pageY, r2 = Math.sqrt(t3 * t3 + n3 * n3);
                  w.set(0, r2);
                }(e3), c3 = s2.TOUCH_DOLLY;
                break;
              case 3:
                if (false === n2.enablePan)
                  return;
                !function(e4) {
                  y.set(e4.touches[0].pageX, e4.touches[0].pageY);
                }(e3), c3 = s2.TOUCH_PAN;
                break;
              default:
                c3 = s2.NONE;
            }
            c3 !== s2.NONE && n2.dispatchEvent(a2);
          }
        }
        function F(e3) {
          if (false !== n2.enabled)
            switch (e3.preventDefault(), e3.stopPropagation(), e3.touches.length) {
              case 1:
                if (false === n2.enableRotate)
                  return;
                if (c3 !== s2.TOUCH_ROTATE)
                  return;
                !function(e4) {
                  g.set(e4.touches[0].pageX, e4.touches[0].pageY), v.subVectors(g, m2);
                  var t3 = n2.domElement === document ? n2.domElement.body : n2.domElement;
                  T(2 * Math.PI * v.x / t3.clientWidth * n2.rotateSpeed), S(2 * Math.PI * v.y / t3.clientHeight * n2.rotateSpeed), m2.copy(g), n2.update();
                }(e3);
                break;
              case 2:
                if (false === n2.enableZoom)
                  return;
                if (c3 !== s2.TOUCH_DOLLY)
                  return;
                !function(e4) {
                  var t3 = e4.touches[0].pageX - e4.touches[1].pageX, r2 = e4.touches[0].pageY - e4.touches[1].pageY, i4 = Math.sqrt(t3 * t3 + r2 * r2);
                  _.set(0, i4), M.subVectors(_, w), M.y > 0 ? P(E()) : M.y < 0 && C(E()), w.copy(_), n2.update();
                }(e3);
                break;
              case 3:
                if (false === n2.enablePan)
                  return;
                if (c3 !== s2.TOUCH_PAN)
                  return;
                !function(e4) {
                  x.set(e4.touches[0].pageX, e4.touches[0].pageY), b.subVectors(x, y), R(b.x, b.y), y.copy(x), n2.update();
                }(e3);
                break;
              default:
                c3 = s2.NONE;
            }
        }
        function G(e3) {
          false !== n2.enabled && (n2.dispatchEvent(o2), c3 = s2.NONE);
        }
        function z(e3) {
          e3.preventDefault();
        }
        n2.domElement.addEventListener("contextmenu", z, false), n2.domElement.addEventListener("mousedown", O, false), n2.domElement.addEventListener("wheel", D, false), n2.domElement.addEventListener("touchstart", B, false), n2.domElement.addEventListener("touchend", G, false), n2.domElement.addEventListener("touchmove", F, false), window.addEventListener("keydown", U, false), this.update();
      }, r.OrbitControls.prototype = Object.create(r.EventDispatcher.prototype), r.OrbitControls.prototype.constructor = r.OrbitControls, Object.defineProperties(r.OrbitControls.prototype, { center: { get: function() {
        return console.warn("THREE.OrbitControls: .center has been renamed to .target"), this.target;
      } }, noZoom: { get: function() {
        return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."), !this.enableZoom;
      }, set: function(e2) {
        console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."), this.enableZoom = !e2;
      } }, noRotate: { get: function() {
        return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."), !this.enableRotate;
      }, set: function(e2) {
        console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."), this.enableRotate = !e2;
      } }, noPan: { get: function() {
        return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."), !this.enablePan;
      }, set: function(e2) {
        console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."), this.enablePan = !e2;
      } }, noKeys: { get: function() {
        return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."), !this.enableKeys;
      }, set: function(e2) {
        console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."), this.enableKeys = !e2;
      } }, staticMoving: { get: function() {
        return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."), !this.enableDamping;
      }, set: function(e2) {
        console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."), this.enableDamping = !e2;
      } }, dynamicDampingFactor: { get: function() {
        return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."), this.dampingFactor;
      }, set: function(e2) {
        console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."), this.dampingFactor = e2;
      } } }), r.MTLLoader = function(e2) {
        this.manager = void 0 !== e2 ? e2 : r.DefaultLoadingManager;
      }, r.MTLLoader.prototype = { constructor: r.MTLLoader, load: function(e2, t2, n2, i3) {
        var a2 = this, o2 = new r.FileLoader(this.manager);
        o2.setPath(this.path), o2.load(e2, function(e3) {
          t2(a2.parse(e3));
        }, n2, i3);
      }, setPath: function(e2) {
        this.path = e2;
      }, setTexturePath: function(e2) {
        this.texturePath = e2;
      }, setBaseUrl: function(e2) {
        console.warn("THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead."), this.setTexturePath(e2);
      }, setCrossOrigin: function(e2) {
        this.crossOrigin = e2;
      }, setMaterialOptions: function(e2) {
        this.materialOptions = e2;
      }, parse: function(e2) {
        for (var t2 = e2.split("\n"), n2 = {}, i3 = /\s+/, a2 = {}, o2 = 0; o2 < t2.length; o2++) {
          var s2 = t2[o2];
          if (0 !== (s2 = s2.trim()).length && "#" !== s2.charAt(0)) {
            var c3 = s2.indexOf(" "), u = c3 >= 0 ? s2.substring(0, c3) : s2;
            u = u.toLowerCase();
            var l = c3 >= 0 ? s2.substring(c3 + 1) : "";
            if (l = l.trim(), "newmtl" === u)
              n2 = { name: l }, a2[l] = n2;
            else if (n2)
              if ("ka" === u || "kd" === u || "ks" === u) {
                var h = l.split(i3, 3);
                n2[u] = [parseFloat(h[0]), parseFloat(h[1]), parseFloat(h[2])];
              } else
                n2[u] = l;
          }
        }
        var d = new r.MTLLoader.MaterialCreator(this.texturePath || this.path, this.materialOptions);
        return d.setCrossOrigin(this.crossOrigin), d.setManager(this.manager), d.setMaterials(a2), d;
      } }, r.MTLLoader.MaterialCreator = function(e2, t2) {
        this.baseUrl = e2 || "", this.options = t2, this.materialsInfo = {}, this.materials = {}, this.materialsArray = [], this.nameLookup = {}, this.side = this.options && this.options.side ? this.options.side : r.FrontSide, this.wrap = this.options && this.options.wrap ? this.options.wrap : r.RepeatWrapping;
      }, r.MTLLoader.MaterialCreator.prototype = { constructor: r.MTLLoader.MaterialCreator, crossOrigin: "Anonymous", setCrossOrigin: function(e2) {
        this.crossOrigin = e2;
      }, setManager: function(e2) {
        this.manager = e2;
      }, setMaterials: function(e2) {
        this.materialsInfo = this.convert(e2), this.materials = {}, this.materialsArray = [], this.nameLookup = {};
      }, convert: function(e2) {
        if (!this.options)
          return e2;
        var t2 = {};
        for (var n2 in e2) {
          var r2 = e2[n2], i3 = {};
          for (var a2 in t2[n2] = i3, r2) {
            var o2 = true, s2 = r2[a2], c3 = a2.toLowerCase();
            switch (c3) {
              case "kd":
              case "ka":
              case "ks":
                this.options && this.options.normalizeRGB && (s2 = [s2[0] / 255, s2[1] / 255, s2[2] / 255]), this.options && this.options.ignoreZeroRGBs && 0 === s2[0] && 0 === s2[1] && 0 === s2[2] && (o2 = false);
            }
            o2 && (i3[c3] = s2);
          }
        }
        return t2;
      }, preload: function() {
        for (var e2 in this.materialsInfo)
          this.create(e2);
      }, getIndex: function(e2) {
        return this.nameLookup[e2];
      }, getAsArray: function() {
        var e2 = 0;
        for (var t2 in this.materialsInfo)
          this.materialsArray[e2] = this.create(t2), this.nameLookup[t2] = e2, e2++;
        return this.materialsArray;
      }, create: function(e2) {
        return void 0 === this.materials[e2] && this.createMaterial_(e2), this.materials[e2];
      }, createMaterial_: function(e2) {
        var t2 = this, n2 = this.materialsInfo[e2], i3 = { name: e2, side: this.side };
        function a2(e3, n3) {
          if (!i3[e3]) {
            var r2 = t2.getTextureParams(n3, i3), a3 = t2.loadTexture(function(e4, t3) {
              return "string" != typeof t3 || "" === t3 ? "" : /^https?:\/\//i.test(t3) ? t3 : e4 + t3;
            }(t2.baseUrl, r2.url));
            a3.repeat.copy(r2.scale), a3.offset.copy(r2.offset), a3.wrapS = t2.wrap, a3.wrapT = t2.wrap, i3[e3] = a3;
          }
        }
        for (var o2 in n2) {
          var s2, c3 = n2[o2];
          if ("" !== c3)
            switch (o2.toLowerCase()) {
              case "kd":
                i3.color = new r.Color().fromArray(c3);
                break;
              case "ks":
                i3.specular = new r.Color().fromArray(c3);
                break;
              case "map_kd":
                a2("map", c3);
                break;
              case "map_ks":
                a2("specularMap", c3);
                break;
              case "norm":
                a2("normalMap", c3);
                break;
              case "map_bump":
              case "bump":
                a2("bumpMap", c3);
                break;
              case "ns":
                i3.shininess = parseFloat(c3);
                break;
              case "d":
                (s2 = parseFloat(c3)) < 1 && (i3.opacity = s2, i3.transparent = true);
                break;
              case "tr":
                (s2 = parseFloat(c3)) > 0 && (i3.opacity = 1 - s2, i3.transparent = true);
            }
        }
        return this.materials[e2] = new r.MeshPhongMaterial(i3), this.materials[e2];
      }, getTextureParams: function(e2, t2) {
        var n2, i3 = { scale: new r.Vector2(1, 1), offset: new r.Vector2(0, 0) }, a2 = e2.split(/\s+/);
        return (n2 = a2.indexOf("-bm")) >= 0 && (t2.bumpScale = parseFloat(a2[n2 + 1]), a2.splice(n2, 2)), (n2 = a2.indexOf("-s")) >= 0 && (i3.scale.set(parseFloat(a2[n2 + 1]), parseFloat(a2[n2 + 2])), a2.splice(n2, 4)), (n2 = a2.indexOf("-o")) >= 0 && (i3.offset.set(parseFloat(a2[n2 + 1]), parseFloat(a2[n2 + 2])), a2.splice(n2, 4)), i3.url = a2.join(" ").trim(), i3;
      }, loadTexture: function(e2, t2, n2, i3, a2) {
        var o2, s2 = r.Loader.Handlers.get(e2), c3 = void 0 !== this.manager ? this.manager : r.DefaultLoadingManager;
        return null === s2 && (s2 = new r.TextureLoader(c3)), s2.setCrossOrigin && s2.setCrossOrigin(this.crossOrigin), o2 = s2.load(e2, n2, i3, a2), void 0 !== t2 && (o2.mapping = t2), o2;
      } }, r.OBJLoader = function() {
        var e2 = /^[og]\s*(.+)?/, t2 = /^mtllib /, n2 = /^usemtl /;
        function i3(e3) {
          this.manager = void 0 !== e3 ? e3 : r.DefaultLoadingManager, this.materials = null;
        }
        return i3.prototype = { constructor: i3, load: function(e3, t3, n3, i4) {
          var a2 = this, o2 = new r.FileLoader(a2.manager);
          o2.setPath(this.path), o2.load(e3, function(e4) {
            t3(a2.parse(e4));
          }, n3, i4);
        }, setPath: function(e3) {
          this.path = e3;
        }, setMaterials: function(e3) {
          return this.materials = e3, this;
        }, parse: function(i4) {
          console.time("OBJLoader");
          var a2 = new function() {
            var e3 = { objects: [], object: {}, vertices: [], normals: [], colors: [], uvs: [], materialLibraries: [], startObject: function(e4, t3) {
              if (this.object && false === this.object.fromDeclaration)
                return this.object.name = e4, void (this.object.fromDeclaration = false !== t3);
              var n3 = this.object && "function" == typeof this.object.currentMaterial ? this.object.currentMaterial() : void 0;
              if (this.object && "function" == typeof this.object._finalize && this.object._finalize(true), this.object = { name: e4 || "", fromDeclaration: false !== t3, geometry: { vertices: [], normals: [], colors: [], uvs: [] }, materials: [], smooth: true, startMaterial: function(e5, t4) {
                var n4 = this._finalize(false);
                n4 && (n4.inherited || n4.groupCount <= 0) && this.materials.splice(n4.index, 1);
                var r3 = { index: this.materials.length, name: e5 || "", mtllib: Array.isArray(t4) && t4.length > 0 ? t4[t4.length - 1] : "", smooth: void 0 !== n4 ? n4.smooth : this.smooth, groupStart: void 0 !== n4 ? n4.groupEnd : 0, groupEnd: -1, groupCount: -1, inherited: false, clone: function(e6) {
                  var t5 = { index: "number" == typeof e6 ? e6 : this.index, name: this.name, mtllib: this.mtllib, smooth: this.smooth, groupStart: 0, groupEnd: -1, groupCount: -1, inherited: false };
                  return t5.clone = this.clone.bind(t5), t5;
                } };
                return this.materials.push(r3), r3;
              }, currentMaterial: function() {
                if (this.materials.length > 0)
                  return this.materials[this.materials.length - 1];
              }, _finalize: function(e5) {
                var t4 = this.currentMaterial();
                if (t4 && -1 === t4.groupEnd && (t4.groupEnd = this.geometry.vertices.length / 3, t4.groupCount = t4.groupEnd - t4.groupStart, t4.inherited = false), e5 && this.materials.length > 1)
                  for (var n4 = this.materials.length - 1; n4 >= 0; n4--)
                    this.materials[n4].groupCount <= 0 && this.materials.splice(n4, 1);
                return e5 && 0 === this.materials.length && this.materials.push({ name: "", smooth: this.smooth }), t4;
              } }, n3 && n3.name && "function" == typeof n3.clone) {
                var r2 = n3.clone(0);
                r2.inherited = true, this.object.materials.push(r2);
              }
              this.objects.push(this.object);
            }, finalize: function() {
              this.object && "function" == typeof this.object._finalize && this.object._finalize(true);
            }, parseVertexIndex: function(e4, t3) {
              var n3 = parseInt(e4, 10);
              return 3 * (n3 >= 0 ? n3 - 1 : n3 + t3 / 3);
            }, parseNormalIndex: function(e4, t3) {
              var n3 = parseInt(e4, 10);
              return 3 * (n3 >= 0 ? n3 - 1 : n3 + t3 / 3);
            }, parseUVIndex: function(e4, t3) {
              var n3 = parseInt(e4, 10);
              return 2 * (n3 >= 0 ? n3 - 1 : n3 + t3 / 2);
            }, addVertex: function(e4, t3, n3) {
              var r2 = this.vertices, i5 = this.object.geometry.vertices;
              i5.push(r2[e4 + 0], r2[e4 + 1], r2[e4 + 2]), i5.push(r2[t3 + 0], r2[t3 + 1], r2[t3 + 2]), i5.push(r2[n3 + 0], r2[n3 + 1], r2[n3 + 2]);
            }, addVertexLine: function(e4) {
              var t3 = this.vertices;
              this.object.geometry.vertices.push(t3[e4 + 0], t3[e4 + 1], t3[e4 + 2]);
            }, addNormal: function(e4, t3, n3) {
              var r2 = this.normals, i5 = this.object.geometry.normals;
              i5.push(r2[e4 + 0], r2[e4 + 1], r2[e4 + 2]), i5.push(r2[t3 + 0], r2[t3 + 1], r2[t3 + 2]), i5.push(r2[n3 + 0], r2[n3 + 1], r2[n3 + 2]);
            }, addColor: function(e4, t3, n3) {
              var r2 = this.colors, i5 = this.object.geometry.colors;
              i5.push(r2[e4 + 0], r2[e4 + 1], r2[e4 + 2]), i5.push(r2[t3 + 0], r2[t3 + 1], r2[t3 + 2]), i5.push(r2[n3 + 0], r2[n3 + 1], r2[n3 + 2]);
            }, addUV: function(e4, t3, n3) {
              var r2 = this.uvs, i5 = this.object.geometry.uvs;
              i5.push(r2[e4 + 0], r2[e4 + 1]), i5.push(r2[t3 + 0], r2[t3 + 1]), i5.push(r2[n3 + 0], r2[n3 + 1]);
            }, addUVLine: function(e4) {
              var t3 = this.uvs;
              this.object.geometry.uvs.push(t3[e4 + 0], t3[e4 + 1]);
            }, addFace: function(e4, t3, n3, r2, i5, a3, o3, s3, c4) {
              var u2 = this.vertices.length, l2 = this.parseVertexIndex(e4, u2), h2 = this.parseVertexIndex(t3, u2), d2 = this.parseVertexIndex(n3, u2);
              if (this.addVertex(l2, h2, d2), void 0 !== r2) {
                var p2 = this.uvs.length;
                l2 = this.parseUVIndex(r2, p2), h2 = this.parseUVIndex(i5, p2), d2 = this.parseUVIndex(a3, p2), this.addUV(l2, h2, d2);
              }
              if (void 0 !== o3) {
                var f2 = this.normals.length;
                l2 = this.parseNormalIndex(o3, f2), h2 = o3 === s3 ? l2 : this.parseNormalIndex(s3, f2), d2 = o3 === c4 ? l2 : this.parseNormalIndex(c4, f2), this.addNormal(l2, h2, d2);
              }
              this.colors.length > 0 && this.addColor(l2, h2, d2);
            }, addLineGeometry: function(e4, t3) {
              this.object.geometry.type = "Line";
              for (var n3 = this.vertices.length, r2 = this.uvs.length, i5 = 0, a3 = e4.length; i5 < a3; i5++)
                this.addVertexLine(this.parseVertexIndex(e4[i5], n3));
              var o3 = 0;
              for (a3 = t3.length; o3 < a3; o3++)
                this.addUVLine(this.parseUVIndex(t3[o3], r2));
            } };
            return e3.startObject("", false), e3;
          }();
          -1 !== i4.indexOf("\r\n") && (i4 = i4.replace(/\r\n/g, "\n")), -1 !== i4.indexOf("\\\n") && (i4 = i4.replace(/\\\n/g, ""));
          for (var o2 = i4.split("\n"), s2 = "", c3 = "", u = [], l = "function" == typeof "".trimLeft, h = 0, d = o2.length; h < d; h++)
            if (s2 = o2[h], 0 !== (s2 = l ? s2.trimLeft() : s2.trim()).length && "#" !== (c3 = s2.charAt(0)))
              if ("v" === c3) {
                var p = s2.split(/\s+/);
                switch (p[0]) {
                  case "v":
                    a2.vertices.push(parseFloat(p[1]), parseFloat(p[2]), parseFloat(p[3])), 8 === p.length && a2.colors.push(parseFloat(p[4]), parseFloat(p[5]), parseFloat(p[6]));
                    break;
                  case "vn":
                    a2.normals.push(parseFloat(p[1]), parseFloat(p[2]), parseFloat(p[3]));
                    break;
                  case "vt":
                    a2.uvs.push(parseFloat(p[1]), parseFloat(p[2]));
                }
              } else if ("f" === c3) {
                for (var f = s2.substr(1).trim().split(/\s+/), m2 = [], g = 0, v = f.length; g < v; g++) {
                  var y = f[g];
                  if (y.length > 0) {
                    var x = y.split("/");
                    m2.push(x);
                  }
                }
                var b = m2[0];
                for (g = 1, v = m2.length - 1; g < v; g++) {
                  var w = m2[g], _ = m2[g + 1];
                  a2.addFace(b[0], w[0], _[0], b[1], w[1], _[1], b[2], w[2], _[2]);
                }
              } else if ("l" === c3) {
                var M = s2.substring(1).trim().split(" "), E = [], T = [];
                if (-1 === s2.indexOf("/"))
                  E = M;
                else
                  for (var S = 0, A = M.length; S < A; S++) {
                    var L = M[S].split("/");
                    "" !== L[0] && E.push(L[0]), "" !== L[1] && T.push(L[1]);
                  }
                a2.addLineGeometry(E, T);
              } else if (null !== (u = e2.exec(s2))) {
                var R = (" " + u[0].substr(1).trim()).substr(1);
                a2.startObject(R);
              } else if (n2.test(s2))
                a2.object.startMaterial(s2.substring(7).trim(), a2.materialLibraries);
              else if (t2.test(s2))
                a2.materialLibraries.push(s2.substring(7).trim());
              else {
                if ("s" !== c3) {
                  if ("\0" === s2)
                    continue;
                  throw new Error('THREE.OBJLoader: Unexpected line: "' + s2 + '"');
                }
                if ((u = s2.split(" ")).length > 1) {
                  var C = u[1].trim().toLowerCase();
                  a2.object.smooth = "0" !== C && "off" !== C;
                } else
                  a2.object.smooth = true;
                (k = a2.object.currentMaterial()) && (k.smooth = a2.object.smooth);
              }
          a2.finalize();
          var P = new r.Group();
          P.materialLibraries = [].concat(a2.materialLibraries);
          for (h = 0, d = a2.objects.length; h < d; h++) {
            var O = a2.objects[h], N = O.geometry, I = O.materials, D = "Line" === N.type;
            if (0 !== N.vertices.length) {
              var U = new r.BufferGeometry();
              U.addAttribute("position", new r.Float32BufferAttribute(N.vertices, 3)), N.normals.length > 0 ? U.addAttribute("normal", new r.Float32BufferAttribute(N.normals, 3)) : U.computeVertexNormals(), N.colors.length > 0 && U.addAttribute("color", new r.Float32BufferAttribute(N.colors, 3)), N.uvs.length > 0 && U.addAttribute("uv", new r.Float32BufferAttribute(N.uvs, 2));
              for (var B, F = [], G = 0, z = I.length; G < z; G++) {
                var H = I[G], k = void 0;
                if (null !== this.materials && (k = this.materials.create(H.name), D && k && !(k instanceof r.LineBasicMaterial))) {
                  var j = new r.LineBasicMaterial();
                  j.copy(k), k = j;
                }
                k || ((k = D ? new r.LineBasicMaterial() : new r.MeshPhongMaterial()).name = H.name), k.flatShading = !H.smooth, F.push(k);
              }
              if (F.length > 1) {
                for (G = 0, z = I.length; G < z; G++) {
                  H = I[G];
                  U.addGroup(H.groupStart, H.groupCount, G);
                }
                B = D ? new r.LineSegments(U, F) : new r.Mesh(U, F);
              } else
                B = D ? new r.LineSegments(U, F[0]) : new r.Mesh(U, F[0]);
              B.name = O.name, P.add(B);
            }
          }
          return console.timeEnd("OBJLoader"), P;
        } }, i3;
      }(), r.ColladaLoader = function(e2) {
        this.manager = void 0 !== e2 ? e2 : r.DefaultLoadingManager;
      }, r.ColladaLoader.prototype = { constructor: r.ColladaLoader, crossOrigin: "anonymous", load: function(e2, t2, n2, i3) {
        var a2 = this, o2 = void 0 === a2.path ? r.LoaderUtils.extractUrlBase(e2) : a2.path;
        new r.FileLoader(a2.manager).load(e2, function(e3) {
          t2(a2.parse(e3, o2));
        }, n2, i3);
      }, setPath: function(e2) {
        return this.path = e2, this;
      }, options: { set convertUpAxis(e2) {
        console.warn("THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.");
      } }, setCrossOrigin: function(e2) {
        return this.crossOrigin = e2, this;
      }, parse: function(e2, t2) {
        function n2(e3, t3) {
          for (var n3 = [], r2 = e3.childNodes, i4 = 0, a3 = r2.length; i4 < a3; i4++) {
            var o3 = r2[i4];
            o3.nodeName === t3 && n3.push(o3);
          }
          return n3;
        }
        function i3(e3) {
          if (0 === e3.length)
            return [];
          for (var t3 = e3.trim().split(/\s+/), n3 = new Array(t3.length), r2 = 0, i4 = t3.length; r2 < i4; r2++)
            n3[r2] = t3[r2];
          return n3;
        }
        function a2(e3) {
          if (0 === e3.length)
            return [];
          for (var t3 = e3.trim().split(/\s+/), n3 = new Array(t3.length), r2 = 0, i4 = t3.length; r2 < i4; r2++)
            n3[r2] = parseFloat(t3[r2]);
          return n3;
        }
        function o2(e3) {
          if (0 === e3.length)
            return [];
          for (var t3 = e3.trim().split(/\s+/), n3 = new Array(t3.length), r2 = 0, i4 = t3.length; r2 < i4; r2++)
            n3[r2] = parseInt(t3[r2]);
          return n3;
        }
        function s2(e3) {
          return e3.substring(1);
        }
        function c3(e3) {
          return 0 === Object.keys(e3).length;
        }
        function u(e3, t3, r2, i4) {
          var a3 = n2(e3, t3)[0];
          if (void 0 !== a3)
            for (var o3 = n2(a3, r2), s3 = 0; s3 < o3.length; s3++)
              i4(o3[s3]);
        }
        function l(e3, t3) {
          for (var n3 in e3) {
            e3[n3].build = t3(e3[n3]);
          }
        }
        function h(e3, t3) {
          return void 0 !== e3.build ? e3.build : (e3.build = t3(e3), e3.build);
        }
        function d(e3) {
          for (var t3 = { inputs: {} }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "input":
                  var a3 = s2(i4.getAttribute("source")), o3 = i4.getAttribute("semantic");
                  t3.inputs[o3] = a3;
              }
          }
          return t3;
        }
        function p(e3) {
          var t3 = {}, n3 = e3.getAttribute("target").split("/"), r2 = n3.shift(), i4 = n3.shift(), a3 = -1 !== i4.indexOf("("), o3 = -1 !== i4.indexOf(".");
          if (o3)
            i4 = (n3 = i4.split(".")).shift(), t3.member = n3.shift();
          else if (a3) {
            var c4 = i4.split("(");
            i4 = c4.shift();
            for (var u2 = 0; u2 < c4.length; u2++)
              c4[u2] = parseInt(c4[u2].replace(/\)/, ""));
            t3.indices = c4;
          }
          return t3.id = r2, t3.sid = i4, t3.arraySyntax = a3, t3.memberSyntax = o3, t3.sampler = s2(e3.getAttribute("source")), t3;
        }
        function f(e3) {
          var t3 = [], n3 = e3.channels, r2 = e3.samplers, i4 = e3.sources;
          for (var a3 in n3)
            if (n3.hasOwnProperty(a3)) {
              var o3 = n3[a3], s3 = r2[o3.sampler], c4 = s3.inputs.INPUT, u2 = s3.inputs.OUTPUT;
              b(g(o3, i4[c4], i4[u2]), t3);
            }
          return t3;
        }
        function m2(e3) {
          return h(Ve.animations[e3], f);
        }
        function g(e3, t3, n3) {
          var r2, i4, a3, o3, s3, c4, u2 = Ve.nodes[e3.id], l2 = Ne(u2.id), h2 = u2.transforms[e3.sid], d2 = u2.matrix.clone().transpose(), p2 = {};
          switch (h2) {
            case "matrix":
              for (a3 = 0, o3 = t3.array.length; a3 < o3; a3++)
                if (r2 = t3.array[a3], i4 = a3 * n3.stride, void 0 === p2[r2] && (p2[r2] = {}), true === e3.arraySyntax) {
                  var f2 = n3.array[i4], m3 = e3.indices[0] + 4 * e3.indices[1];
                  p2[r2][m3] = f2;
                } else
                  for (s3 = 0, c4 = n3.stride; s3 < c4; s3++)
                    p2[r2][s3] = n3.array[i4 + s3];
              break;
            case "translate":
            case "rotate":
            case "scale":
              console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', h2);
          }
          var g2 = function(e4, t4) {
            var n4 = [];
            for (var r3 in e4)
              n4.push({ time: parseFloat(r3), value: e4[r3] });
            n4.sort(function(e5, t5) {
              return e5.time - t5.time;
            });
            for (var i5 = 0; i5 < 16; i5++)
              w(n4, i5, t4.elements[i5]);
            return n4;
          }(p2, d2);
          return { name: l2.uuid, keyframes: g2 };
        }
        var v = new r.Vector3(), y = new r.Vector3(), x = new r.Quaternion();
        function b(e3, t3) {
          for (var n3 = e3.keyframes, i4 = e3.name, a3 = [], o3 = [], s3 = [], c4 = [], u2 = 0, l2 = n3.length; u2 < l2; u2++) {
            var h2 = n3[u2], d2 = h2.time, p2 = h2.value;
            Me.fromArray(p2).transpose(), Me.decompose(v, x, y), a3.push(d2), o3.push(v.x, v.y, v.z), s3.push(x.x, x.y, x.z, x.w), c4.push(y.x, y.y, y.z);
          }
          return o3.length > 0 && t3.push(new r.VectorKeyframeTrack(i4 + ".position", a3, o3)), s3.length > 0 && t3.push(new r.QuaternionKeyframeTrack(i4 + ".quaternion", a3, s3)), c4.length > 0 && t3.push(new r.VectorKeyframeTrack(i4 + ".scale", a3, c4)), t3;
        }
        function w(e3, t3, n3) {
          var r2, i4, a3, o3 = true;
          for (i4 = 0, a3 = e3.length; i4 < a3; i4++)
            void 0 === (r2 = e3[i4]).value[t3] ? r2.value[t3] = null : o3 = false;
          if (true === o3)
            for (i4 = 0, a3 = e3.length; i4 < a3; i4++)
              (r2 = e3[i4]).value[t3] = n3;
          else
            !function(e4, t4) {
              for (var n4, r3, i5 = 0, a4 = e4.length; i5 < a4; i5++) {
                var o4 = e4[i5];
                if (null === o4.value[t4]) {
                  if (n4 = _(e4, i5, t4), r3 = M(e4, i5, t4), null === n4) {
                    o4.value[t4] = r3.value[t4];
                    continue;
                  }
                  if (null === r3) {
                    o4.value[t4] = n4.value[t4];
                    continue;
                  }
                  E(o4, n4, r3, t4);
                }
              }
            }(e3, t3);
        }
        function _(e3, t3, n3) {
          for (; t3 >= 0; ) {
            var r2 = e3[t3];
            if (null !== r2.value[n3])
              return r2;
            t3--;
          }
          return null;
        }
        function M(e3, t3, n3) {
          for (; t3 < e3.length; ) {
            var r2 = e3[t3];
            if (null !== r2.value[n3])
              return r2;
            t3++;
          }
          return null;
        }
        function E(e3, t3, n3, r2) {
          n3.time - t3.time != 0 ? e3.value[r2] = (e3.time - t3.time) * (n3.value[r2] - t3.value[r2]) / (n3.time - t3.time) + t3.value[r2] : e3.value[r2] = t3.value[r2];
        }
        function T(e3) {
          for (var t3 = [], n3 = e3.name, i4 = e3.end - e3.start || -1, a3 = e3.animations, o3 = 0, s3 = a3.length; o3 < s3; o3++)
            for (var c4 = m2(a3[o3]), u2 = 0, l2 = c4.length; u2 < l2; u2++)
              t3.push(c4[u2]);
          return new r.AnimationClip(n3, i4, t3);
        }
        function S(e3) {
          return h(Ve.clips[e3], T);
        }
        function A(e3) {
          for (var t3 = { sources: {} }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "bind_shape_matrix":
                  t3.bindShapeMatrix = a2(i4.textContent);
                  break;
                case "source":
                  var o3 = i4.getAttribute("id");
                  t3.sources[o3] = ie(i4);
                  break;
                case "joints":
                  t3.joints = L(i4);
                  break;
                case "vertex_weights":
                  t3.vertexWeights = R(i4);
              }
          }
          return t3;
        }
        function L(e3) {
          for (var t3 = { inputs: {} }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "input":
                  var a3 = i4.getAttribute("semantic"), o3 = s2(i4.getAttribute("source"));
                  t3.inputs[a3] = o3;
              }
          }
          return t3;
        }
        function R(e3) {
          for (var t3 = { inputs: {} }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "input":
                  var a3 = i4.getAttribute("semantic"), c4 = s2(i4.getAttribute("source")), u2 = parseInt(i4.getAttribute("offset"));
                  t3.inputs[a3] = { id: c4, offset: u2 };
                  break;
                case "vcount":
                  t3.vcount = o2(i4.textContent);
                  break;
                case "v":
                  t3.v = o2(i4.textContent);
              }
          }
          return t3;
        }
        function C(e3) {
          var t3 = { id: e3.id }, n3 = Ve.geometries[t3.id];
          return void 0 !== e3.skin && (t3.skin = function(e4) {
            var t4, n4, i4, a3 = { joints: [], indices: { array: [], stride: 4 }, weights: { array: [], stride: 4 } }, o3 = e4.sources, s3 = e4.vertexWeights, c4 = s3.vcount, u2 = s3.v, l2 = s3.inputs.JOINT.offset, h2 = s3.inputs.WEIGHT.offset, d2 = e4.sources[e4.joints.inputs.JOINT], p2 = e4.sources[e4.joints.inputs.INV_BIND_MATRIX], f2 = o3[s3.inputs.WEIGHT.id].array, m3 = 0;
            for (t4 = 0, i4 = c4.length; t4 < i4; t4++) {
              var g2 = c4[t4], v2 = [];
              for (n4 = 0; n4 < g2; n4++) {
                var y2 = u2[m3 + l2], x2 = u2[m3 + h2], b2 = f2[x2];
                v2.push({ index: y2, weight: b2 }), m3 += 2;
              }
              for (v2.sort(E2), n4 = 0; n4 < 4; n4++) {
                var w2 = v2[n4];
                void 0 !== w2 ? (a3.indices.array.push(w2.index), a3.weights.array.push(w2.weight)) : (a3.indices.array.push(0), a3.weights.array.push(0));
              }
            }
            e4.bindShapeMatrix ? a3.bindMatrix = new r.Matrix4().fromArray(e4.bindShapeMatrix).transpose() : a3.bindMatrix = new r.Matrix4().transpose();
            for (t4 = 0, i4 = d2.array.length; t4 < i4; t4++) {
              var _2 = d2.array[t4], M2 = new r.Matrix4().fromArray(p2.array, t4 * p2.stride).transpose();
              a3.joints.push({ name: _2, boneInverse: M2 });
            }
            return a3;
            function E2(e5, t5) {
              return t5.weight - e5.weight;
            }
          }(e3.skin), n3.sources.skinIndices = t3.skin.indices, n3.sources.skinWeights = t3.skin.weights), t3;
        }
        function P(e3) {
          return h(Ve.controllers[e3], C);
        }
        function O(e3) {
          return void 0 !== e3.build ? e3.build : e3.init_from;
        }
        function N(e3) {
          var t3 = Ve.images[e3];
          return void 0 !== t3 ? h(t3, O) : (console.warn("THREE.ColladaLoader: Couldn't find image with ID:", e3), null);
        }
        function I(e3) {
          for (var t3 = { surfaces: {}, samplers: {} }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "newparam":
                  D(i4, t3);
                  break;
                case "technique":
                  t3.technique = F(i4);
                  break;
                case "extra":
                  t3.extra = V(i4);
              }
          }
          return t3;
        }
        function D(e3, t3) {
          for (var n3 = e3.getAttribute("sid"), r2 = 0, i4 = e3.childNodes.length; r2 < i4; r2++) {
            var a3 = e3.childNodes[r2];
            if (1 === a3.nodeType)
              switch (a3.nodeName) {
                case "surface":
                  t3.surfaces[n3] = U(a3);
                  break;
                case "sampler2D":
                  t3.samplers[n3] = B(a3);
              }
          }
        }
        function U(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "init_from":
                  t3.init_from = i4.textContent;
              }
          }
          return t3;
        }
        function B(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "source":
                  t3.source = i4.textContent;
              }
          }
          return t3;
        }
        function F(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "constant":
                case "lambert":
                case "blinn":
                case "phong":
                  t3.type = i4.nodeName, t3.parameters = G(i4);
              }
          }
          return t3;
        }
        function G(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "emission":
                case "diffuse":
                case "specular":
                case "shininess":
                case "transparency":
                  t3[i4.nodeName] = z(i4);
                  break;
                case "transparent":
                  t3[i4.nodeName] = { opaque: i4.getAttribute("opaque"), data: z(i4) };
              }
          }
          return t3;
        }
        function z(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "color":
                  t3[i4.nodeName] = a2(i4.textContent);
                  break;
                case "float":
                  t3[i4.nodeName] = parseFloat(i4.textContent);
                  break;
                case "texture":
                  t3[i4.nodeName] = { id: i4.getAttribute("texture"), extra: H(i4) };
              }
          }
          return t3;
        }
        function H(e3) {
          for (var t3 = { technique: {} }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "extra":
                  k(i4, t3);
              }
          }
          return t3;
        }
        function k(e3, t3) {
          for (var n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "technique":
                  j(i4, t3);
              }
          }
        }
        function j(e3, t3) {
          for (var n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "repeatU":
                case "repeatV":
                case "offsetU":
                case "offsetV":
                  t3.technique[i4.nodeName] = parseFloat(i4.textContent);
                  break;
                case "wrapU":
                case "wrapV":
                  "TRUE" === i4.textContent.toUpperCase() ? t3.technique[i4.nodeName] = 1 : "FALSE" === i4.textContent.toUpperCase() ? t3.technique[i4.nodeName] = 0 : t3.technique[i4.nodeName] = parseInt(i4.textContent);
              }
          }
        }
        function V(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "technique":
                  t3.technique = W(i4);
              }
          }
          return t3;
        }
        function W(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "double_sided":
                  t3[i4.nodeName] = parseInt(i4.textContent);
              }
          }
          return t3;
        }
        function X(e3) {
          return e3;
        }
        function q(e3) {
          var t3, n3 = function(e4) {
            return h(Ve.effects[e4], X);
          }(e3.url), i4 = n3.profile.technique, a3 = n3.profile.extra;
          switch (i4.type) {
            case "phong":
            case "blinn":
              t3 = new r.MeshPhongMaterial();
              break;
            case "lambert":
              t3 = new r.MeshLambertMaterial();
              break;
            default:
              t3 = new r.MeshBasicMaterial();
          }
          function o3(e4) {
            var t4 = n3.profile.samplers[e4.id], i5 = null;
            void 0 !== t4 ? i5 = N(n3.profile.surfaces[t4.source].init_from) : (console.warn("THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530)."), i5 = N(e4.id));
            if (null !== i5) {
              var a4 = ze.load(i5), o4 = e4.extra;
              if (void 0 !== o4 && void 0 !== o4.technique && false === c3(o4.technique)) {
                var s4 = o4.technique;
                a4.wrapS = s4.wrapU ? r.RepeatWrapping : r.ClampToEdgeWrapping, a4.wrapT = s4.wrapV ? r.RepeatWrapping : r.ClampToEdgeWrapping, a4.offset.set(s4.offsetU || 0, s4.offsetV || 0), a4.repeat.set(s4.repeatU || 1, s4.repeatV || 1);
              } else
                a4.wrapS = r.RepeatWrapping, a4.wrapT = r.RepeatWrapping;
              return a4;
            }
            return console.warn("THREE.ColladaLoader: Couldn't create texture with ID:", e4.id), null;
          }
          t3.name = e3.name;
          var s3 = i4.parameters;
          for (var u2 in s3) {
            var l2 = s3[u2];
            switch (u2) {
              case "diffuse":
                l2.color && t3.color.fromArray(l2.color), l2.texture && (t3.map = o3(l2.texture));
                break;
              case "specular":
                l2.color && t3.specular && t3.specular.fromArray(l2.color), l2.texture && (t3.specularMap = o3(l2.texture));
                break;
              case "shininess":
                l2.float && t3.shininess && (t3.shininess = l2.float);
                break;
              case "emission":
                l2.color && t3.emissive && t3.emissive.fromArray(l2.color), l2.texture && (t3.emissiveMap = o3(l2.texture));
            }
          }
          var d2 = s3.transparent, p2 = s3.transparency;
          if (void 0 === p2 && d2 && (p2 = { float: 1 }), void 0 === d2 && p2 && (d2 = { opaque: "A_ONE", data: { color: [1, 1, 1, 1] } }), d2 && p2)
            if (d2.data.texture)
              t3.transparent = true;
            else {
              var f2 = d2.data.color;
              switch (d2.opaque) {
                case "A_ONE":
                  t3.opacity = f2[3] * p2.float;
                  break;
                case "RGB_ZERO":
                  t3.opacity = 1 - f2[0] * p2.float;
                  break;
                case "A_ZERO":
                  t3.opacity = 1 - f2[3] * p2.float;
                  break;
                case "RGB_ONE":
                  t3.opacity = f2[0] * p2.float;
                  break;
                default:
                  console.warn('THREE.ColladaLoader: Invalid opaque type "%s" of transparent tag.', d2.opaque);
              }
              t3.opacity < 1 && (t3.transparent = true);
            }
          return void 0 !== a3 && void 0 !== a3.technique && 1 === a3.technique.double_sided && (t3.side = r.DoubleSide), t3;
        }
        function Y(e3) {
          return h(Ve.materials[e3], q);
        }
        function Z(e3) {
          for (var t3 = 0; t3 < e3.childNodes.length; t3++) {
            var n3 = e3.childNodes[t3];
            switch (n3.nodeName) {
              case "technique_common":
                return J(n3);
            }
          }
          return {};
        }
        function J(e3) {
          for (var t3 = {}, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            switch (r2.nodeName) {
              case "perspective":
              case "orthographic":
                t3.technique = r2.nodeName, t3.parameters = K2(r2);
            }
          }
          return t3;
        }
        function K2(e3) {
          for (var t3 = {}, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            switch (r2.nodeName) {
              case "xfov":
              case "yfov":
              case "xmag":
              case "ymag":
              case "znear":
              case "zfar":
              case "aspect_ratio":
                t3[r2.nodeName] = parseFloat(r2.textContent);
            }
          }
          return t3;
        }
        function Q(e3) {
          var t3;
          switch (e3.optics.technique) {
            case "perspective":
              t3 = new r.PerspectiveCamera(e3.optics.parameters.yfov, e3.optics.parameters.aspect_ratio, e3.optics.parameters.znear, e3.optics.parameters.zfar);
              break;
            case "orthographic":
              var n3 = e3.optics.parameters.ymag, i4 = e3.optics.parameters.xmag, a3 = e3.optics.parameters.aspect_ratio;
              i4 = void 0 === i4 ? n3 * a3 : i4, n3 = void 0 === n3 ? i4 / a3 : n3, i4 *= 0.5, n3 *= 0.5, t3 = new r.OrthographicCamera(-i4, i4, n3, -n3, e3.optics.parameters.znear, e3.optics.parameters.zfar);
              break;
            default:
              t3 = new r.PerspectiveCamera();
          }
          return t3.name = e3.name, t3;
        }
        function $(e3) {
          var t3 = Ve.cameras[e3];
          return void 0 !== t3 ? h(t3, Q) : (console.warn("THREE.ColladaLoader: Couldn't find camera with ID:", e3), null);
        }
        function ee(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "directional":
                case "point":
                case "spot":
                case "ambient":
                  t3.technique = i4.nodeName, t3.parameters = te(i4);
              }
          }
          return t3;
        }
        function te(e3) {
          for (var t3 = {}, n3 = 0, i4 = e3.childNodes.length; n3 < i4; n3++) {
            var o3 = e3.childNodes[n3];
            if (1 === o3.nodeType)
              switch (o3.nodeName) {
                case "color":
                  var s3 = a2(o3.textContent);
                  t3.color = new r.Color().fromArray(s3);
                  break;
                case "falloff_angle":
                  t3.falloffAngle = parseFloat(o3.textContent);
                  break;
                case "quadratic_attenuation":
                  var c4 = parseFloat(o3.textContent);
                  t3.distance = c4 ? Math.sqrt(1 / c4) : 0;
              }
          }
          return t3;
        }
        function ne(e3) {
          var t3;
          switch (e3.technique) {
            case "directional":
              t3 = new r.DirectionalLight();
              break;
            case "point":
              t3 = new r.PointLight();
              break;
            case "spot":
              t3 = new r.SpotLight();
              break;
            case "ambient":
              t3 = new r.AmbientLight();
          }
          return e3.parameters.color && t3.color.copy(e3.parameters.color), e3.parameters.distance && (t3.distance = e3.parameters.distance), t3;
        }
        function re(e3) {
          var t3 = Ve.lights[e3];
          return void 0 !== t3 ? h(t3, ne) : (console.warn("THREE.ColladaLoader: Couldn't find light with ID:", e3), null);
        }
        function ie(e3) {
          for (var t3 = { array: [], stride: 3 }, r2 = 0; r2 < e3.childNodes.length; r2++) {
            var o3 = e3.childNodes[r2];
            if (1 === o3.nodeType)
              switch (o3.nodeName) {
                case "float_array":
                  t3.array = a2(o3.textContent);
                  break;
                case "Name_array":
                  t3.array = i3(o3.textContent);
                  break;
                case "technique_common":
                  var s3 = n2(o3, "accessor")[0];
                  void 0 !== s3 && (t3.stride = parseInt(s3.getAttribute("stride")));
              }
          }
          return t3;
        }
        function ae(e3) {
          for (var t3 = {}, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            1 === r2.nodeType && (t3[r2.getAttribute("semantic")] = s2(r2.getAttribute("source")));
          }
          return t3;
        }
        function oe(e3) {
          for (var t3 = { type: e3.nodeName, material: e3.getAttribute("material"), count: parseInt(e3.getAttribute("count")), inputs: {}, stride: 0, hasUV: false }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "input":
                  var a3 = s2(i4.getAttribute("source")), c4 = i4.getAttribute("semantic"), u2 = parseInt(i4.getAttribute("offset"));
                  t3.inputs[c4] = { id: a3, offset: u2 }, t3.stride = Math.max(t3.stride, u2 + 1), "TEXCOORD" === c4 && (t3.hasUV = true);
                  break;
                case "vcount":
                  t3.vcount = o2(i4.textContent);
                  break;
                case "p":
                  t3.p = o2(i4.textContent);
              }
          }
          return t3;
        }
        function se(e3) {
          for (var t3 = 0, n3 = 0, r2 = e3.length; n3 < r2; n3++) {
            true === e3[n3].hasUV && t3++;
          }
          t3 > 0 && t3 < e3.length && (e3.uvsNeedsFix = true);
        }
        function ce(e3) {
          var t3 = {}, n3 = e3.sources, r2 = e3.vertices, i4 = e3.primitives;
          if (0 === i4.length)
            return {};
          var a3 = function(e4) {
            for (var t4 = {}, n4 = 0; n4 < e4.length; n4++) {
              var r3 = e4[n4];
              void 0 === t4[r3.type] && (t4[r3.type] = []), t4[r3.type].push(r3);
            }
            return t4;
          }(i4);
          for (var o3 in a3) {
            var s3 = a3[o3];
            se(s3), t3[o3] = ue(s3, n3, r2);
          }
          return t3;
        }
        function ue(e3, t3, n3) {
          for (var i4 = {}, a3 = { array: [], stride: 0 }, o3 = { array: [], stride: 0 }, s3 = { array: [], stride: 0 }, c4 = { array: [], stride: 0 }, u2 = [], l2 = 4, h2 = [], d2 = 4, p2 = new r.BufferGeometry(), f2 = [], m3 = 0, g2 = 0; g2 < e3.length; g2++) {
            var v2 = e3[g2], y2 = v2.inputs, x2 = 0;
            switch (v2.type) {
              case "lines":
              case "linestrips":
                x2 = 2 * v2.count;
                break;
              case "triangles":
                x2 = 3 * v2.count;
                break;
              case "polylist":
                for (var b2 = 0; b2 < v2.count; b2++) {
                  var w2 = v2.vcount[b2];
                  switch (w2) {
                    case 3:
                      x2 += 3;
                      break;
                    case 4:
                      x2 += 6;
                      break;
                    default:
                      x2 += 3 * (w2 - 2);
                  }
                }
                break;
              default:
                console.warn("THREE.ColladaLoader: Unknow primitive type:", v2.type);
            }
            for (var _2 in p2.addGroup(m3, x2, g2), m3 += x2, v2.material && f2.push(v2.material), y2) {
              var M2 = y2[_2];
              switch (_2) {
                case "VERTEX":
                  for (var E2 in n3) {
                    var T2 = n3[E2];
                    switch (E2) {
                      case "POSITION":
                        var S2 = a3.array.length;
                        if (le(v2, t3[T2], M2.offset, a3.array), a3.stride = t3[T2].stride, t3.skinWeights && t3.skinIndices && (le(v2, t3.skinIndices, M2.offset, u2), le(v2, t3.skinWeights, M2.offset, h2)), false === v2.hasUV && true === e3.uvsNeedsFix) {
                          x2 = (a3.array.length - S2) / a3.stride;
                          for (var A2 = 0; A2 < x2; A2++)
                            s3.array.push(0, 0);
                        }
                        break;
                      case "NORMAL":
                        le(v2, t3[T2], M2.offset, o3.array), o3.stride = t3[T2].stride;
                        break;
                      case "COLOR":
                        le(v2, t3[T2], M2.offset, c4.array), c4.stride = t3[T2].stride;
                        break;
                      case "TEXCOORD":
                        le(v2, t3[T2], M2.offset, s3.array), s3.stride = t3[T2].stride;
                        break;
                      default:
                        console.warn('THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.', E2);
                    }
                  }
                  break;
                case "NORMAL":
                  le(v2, t3[M2.id], M2.offset, o3.array), o3.stride = t3[M2.id].stride;
                  break;
                case "COLOR":
                  le(v2, t3[M2.id], M2.offset, c4.array), c4.stride = t3[M2.id].stride;
                  break;
                case "TEXCOORD":
                  le(v2, t3[M2.id], M2.offset, s3.array), s3.stride = t3[M2.id].stride;
              }
            }
          }
          return a3.array.length > 0 && p2.addAttribute("position", new r.Float32BufferAttribute(a3.array, a3.stride)), o3.array.length > 0 && p2.addAttribute("normal", new r.Float32BufferAttribute(o3.array, o3.stride)), c4.array.length > 0 && p2.addAttribute("color", new r.Float32BufferAttribute(c4.array, c4.stride)), s3.array.length > 0 && p2.addAttribute("uv", new r.Float32BufferAttribute(s3.array, s3.stride)), u2.length > 0 && p2.addAttribute("skinIndex", new r.Float32BufferAttribute(u2, l2)), h2.length > 0 && p2.addAttribute("skinWeight", new r.Float32BufferAttribute(h2, d2)), i4.data = p2, i4.type = e3[0].type, i4.materialKeys = f2, i4;
        }
        function le(e3, t3, n3, r2) {
          var i4 = e3.p, a3 = e3.stride, o3 = e3.vcount;
          function s3(e4) {
            for (var t4 = i4[e4 + n3] * u2, a4 = t4 + u2; t4 < a4; t4++)
              r2.push(c4[t4]);
          }
          var c4 = t3.array, u2 = t3.stride;
          if (void 0 !== e3.vcount)
            for (var l2 = 0, h2 = 0, d2 = o3.length; h2 < d2; h2++) {
              var p2 = o3[h2];
              if (4 === p2) {
                var f2 = l2 + 1 * a3, m3 = l2 + 2 * a3, g2 = l2 + 3 * a3;
                s3(l2 + 0 * a3), s3(f2), s3(g2), s3(f2), s3(m3), s3(g2);
              } else if (3 === p2) {
                f2 = l2 + 1 * a3, m3 = l2 + 2 * a3;
                s3(l2 + 0 * a3), s3(f2), s3(m3);
              } else if (p2 > 4)
                for (var v2 = 1, y2 = p2 - 2; v2 <= y2; v2++) {
                  f2 = l2 + a3 * v2, m3 = l2 + a3 * (v2 + 1);
                  s3(l2 + 0 * a3), s3(f2), s3(m3);
                }
              l2 += a3 * p2;
            }
          else
            for (h2 = 0, d2 = i4.length; h2 < d2; h2 += a3)
              s3(h2);
        }
        function he(e3) {
          return h(Ve.geometries[e3], ce);
        }
        function de(e3) {
          return void 0 !== e3.build ? e3.build : e3;
        }
        function pe(e3, t3) {
          for (var n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "joint":
                  t3.joints[r2.getAttribute("sid")] = fe(r2);
                  break;
                case "link":
                  t3.links.push(ge(r2));
              }
          }
        }
        function fe(e3) {
          for (var t3, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "prismatic":
                case "revolute":
                  t3 = me(r2);
              }
          }
          return t3;
        }
        function me(e3, t3) {
          t3 = { sid: e3.getAttribute("sid"), name: e3.getAttribute("name") || "", axis: new r.Vector3(), limits: { min: 0, max: 0 }, type: e3.nodeName, static: false, zeroPosition: 0, middlePosition: 0 };
          for (var n3 = 0; n3 < e3.childNodes.length; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "axis":
                  var o3 = a2(i4.textContent);
                  t3.axis.fromArray(o3);
                  break;
                case "limits":
                  var s3 = i4.getElementsByTagName("max")[0], c4 = i4.getElementsByTagName("min")[0];
                  t3.limits.max = parseFloat(s3.textContent), t3.limits.min = parseFloat(c4.textContent);
              }
          }
          return t3.limits.min >= t3.limits.max && (t3.static = true), t3.middlePosition = (t3.limits.min + t3.limits.max) / 2, t3;
        }
        function ge(e3) {
          for (var t3 = { sid: e3.getAttribute("sid"), name: e3.getAttribute("name") || "", attachments: [], transforms: [] }, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "attachment_full":
                  t3.attachments.push(ve(r2));
                  break;
                case "matrix":
                case "translate":
                case "rotate":
                  t3.transforms.push(ye(r2));
              }
          }
          return t3;
        }
        function ve(e3) {
          for (var t3 = { joint: e3.getAttribute("joint").split("/").pop(), transforms: [], links: [] }, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "link":
                  t3.links.push(ge(r2));
                  break;
                case "matrix":
                case "translate":
                case "rotate":
                  t3.transforms.push(ye(r2));
              }
          }
          return t3;
        }
        function ye(e3) {
          var t3 = { type: e3.nodeName }, n3 = a2(e3.textContent);
          switch (t3.type) {
            case "matrix":
              t3.obj = new r.Matrix4(), t3.obj.fromArray(n3).transpose();
              break;
            case "translate":
              t3.obj = new r.Vector3(), t3.obj.fromArray(n3);
              break;
            case "rotate":
              t3.obj = new r.Vector3(), t3.obj.fromArray(n3), t3.angle = r.Math.degToRad(n3[3]);
          }
          return t3;
        }
        function xe(e3, t3) {
          for (var n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "technique_common":
                  be(r2, t3);
              }
          }
        }
        function be(e3, t3) {
          for (var n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "inertia":
                  t3.inertia = a2(r2.textContent);
                  break;
                case "mass":
                  t3.mass = a2(r2.textContent)[0];
              }
          }
        }
        function we(e3) {
          for (var t3 = { target: e3.getAttribute("target").split("/").pop() }, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "axis":
                  var i4 = r2.getElementsByTagName("param")[0];
                  t3.axis = i4.textContent;
                  var a3 = t3.axis.split("inst_").pop().split("axis")[0];
                  t3.jointIndex = a3.substr(0, a3.length - 1);
              }
          }
          return t3;
        }
        function _e(e3) {
          return void 0 !== e3.build ? e3.build : e3;
        }
        var Me = new r.Matrix4(), Ee = new r.Vector3();
        function Te(e3) {
          for (var t3 = { name: e3.getAttribute("name") || "", type: e3.getAttribute("type"), id: e3.getAttribute("id"), sid: e3.getAttribute("sid"), matrix: new r.Matrix4(), nodes: [], instanceCameras: [], instanceControllers: [], instanceLights: [], instanceGeometries: [], instanceNodes: [], transforms: {} }, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "node":
                  t3.nodes.push(i4.getAttribute("id")), Te(i4);
                  break;
                case "instance_camera":
                  t3.instanceCameras.push(s2(i4.getAttribute("url")));
                  break;
                case "instance_controller":
                  t3.instanceControllers.push(Se(i4));
                  break;
                case "instance_light":
                  t3.instanceLights.push(s2(i4.getAttribute("url")));
                  break;
                case "instance_geometry":
                  t3.instanceGeometries.push(Se(i4));
                  break;
                case "instance_node":
                  t3.instanceNodes.push(s2(i4.getAttribute("url")));
                  break;
                case "matrix":
                  var o3 = a2(i4.textContent);
                  t3.matrix.multiply(Me.fromArray(o3).transpose()), t3.transforms[i4.getAttribute("sid")] = i4.nodeName;
                  break;
                case "translate":
                  o3 = a2(i4.textContent);
                  Ee.fromArray(o3), t3.matrix.multiply(Me.makeTranslation(Ee.x, Ee.y, Ee.z)), t3.transforms[i4.getAttribute("sid")] = i4.nodeName;
                  break;
                case "rotate":
                  o3 = a2(i4.textContent);
                  var c4 = r.Math.degToRad(o3[3]);
                  t3.matrix.multiply(Me.makeRotationAxis(Ee.fromArray(o3), c4)), t3.transforms[i4.getAttribute("sid")] = i4.nodeName;
                  break;
                case "scale":
                  o3 = a2(i4.textContent);
                  t3.matrix.scale(Ee.fromArray(o3)), t3.transforms[i4.getAttribute("sid")] = i4.nodeName;
                  break;
                case "extra":
                  break;
                default:
                  console.log(i4);
              }
          }
          return Ve.nodes[t3.id] = t3, t3;
        }
        function Se(e3) {
          for (var t3 = { id: s2(e3.getAttribute("url")), materials: {}, skeletons: [] }, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            switch (r2.nodeName) {
              case "bind_material":
                for (var i4 = r2.getElementsByTagName("instance_material"), a3 = 0; a3 < i4.length; a3++) {
                  var o3 = i4[a3], c4 = o3.getAttribute("symbol"), u2 = o3.getAttribute("target");
                  t3.materials[c4] = s2(u2);
                }
                break;
              case "skeleton":
                t3.skeletons.push(s2(r2.textContent));
            }
          }
          return t3;
        }
        function Ae(e3, t3) {
          var n3, i4, a3 = [], o3 = [];
          for (n3 = 0; n3 < e3.length; n3++) {
            var s3 = e3[n3];
            if (Oe(s3))
              Le(Ne(s3), t3, a3);
            else if (De(s3))
              for (var c4 = Ve.visualScenes[s3].children, u2 = 0; u2 < c4.length; u2++) {
                var l2 = c4[u2];
                if ("JOINT" === l2.type)
                  Le(Ne(l2.id), t3, a3);
              }
            else
              console.error("THREE.ColladaLoader: Unable to find root bone of skeleton with ID:", s3);
          }
          for (n3 = 0; n3 < t3.length; n3++)
            for (u2 = 0; u2 < a3.length; u2++)
              if ((i4 = a3[u2]).bone.name === t3[n3].name) {
                o3[n3] = i4, i4.processed = true;
                break;
              }
          for (n3 = 0; n3 < a3.length; n3++)
            false === (i4 = a3[n3]).processed && (o3.push(i4), i4.processed = true);
          var h2 = [], d2 = [];
          for (n3 = 0; n3 < o3.length; n3++)
            i4 = o3[n3], h2.push(i4.bone), d2.push(i4.boneInverse);
          return new r.Skeleton(h2, d2);
        }
        function Le(e3, t3, n3) {
          e3.traverse(function(e4) {
            if (true === e4.isBone) {
              for (var i4, a3 = 0; a3 < t3.length; a3++) {
                var o3 = t3[a3];
                if (o3.name === e4.name) {
                  i4 = o3.boneInverse;
                  break;
                }
              }
              void 0 === i4 && (i4 = new r.Matrix4()), n3.push({ bone: e4, boneInverse: i4, processed: false });
            }
          });
        }
        function Re(e3) {
          for (var t3 = [], n3 = e3.matrix, i4 = e3.nodes, a3 = e3.type, o3 = e3.instanceCameras, s3 = e3.instanceControllers, c4 = e3.instanceLights, u2 = e3.instanceGeometries, l2 = e3.instanceNodes, h2 = 0, d2 = i4.length; h2 < d2; h2++)
            t3.push(Ne(i4[h2]));
          for (h2 = 0, d2 = o3.length; h2 < d2; h2++) {
            var p2 = $(o3[h2]);
            null !== p2 && t3.push(p2.clone());
          }
          for (h2 = 0, d2 = s3.length; h2 < d2; h2++)
            for (var f2 = P((w2 = s3[h2]).id), m3 = Pe(he(f2.id), w2.materials), g2 = Ae(w2.skeletons, f2.skin.joints), v2 = 0, y2 = m3.length; v2 < y2; v2++) {
              var x2;
              (x2 = m3[v2]).isSkinnedMesh && (x2.bind(g2, f2.skin.bindMatrix), x2.normalizeSkinWeights()), t3.push(x2);
            }
          for (h2 = 0, d2 = c4.length; h2 < d2; h2++) {
            var b2 = re(c4[h2]);
            null !== b2 && t3.push(b2.clone());
          }
          for (h2 = 0, d2 = u2.length; h2 < d2; h2++) {
            var w2;
            for (v2 = 0, y2 = (m3 = Pe(he((w2 = u2[h2]).id), w2.materials)).length; v2 < y2; v2++)
              t3.push(m3[v2]);
          }
          for (h2 = 0, d2 = l2.length; h2 < d2; h2++)
            t3.push(Ne(l2[h2]).clone());
          if (0 === i4.length && 1 === t3.length)
            x2 = t3[0];
          else {
            x2 = "JOINT" === a3 ? new r.Bone() : new r.Group();
            for (h2 = 0; h2 < t3.length; h2++)
              x2.add(t3[h2]);
          }
          return "" === x2.name && (x2.name = "JOINT" === a3 ? e3.sid : e3.name), x2.matrix.copy(n3), x2.matrix.decompose(x2.position, x2.quaternion, x2.scale), x2;
        }
        function Ce(e3, t3) {
          for (var n3 = [], r2 = 0, i4 = e3.length; r2 < i4; r2++) {
            var a3 = t3[e3[r2]];
            n3.push(Y(a3));
          }
          return n3;
        }
        function Pe(e3, t3) {
          var n3 = [];
          for (var i4 in e3) {
            var a3 = e3[i4], o3 = Ce(a3.materialKeys, t3);
            0 === o3.length && ("lines" === i4 || "linestrips" === i4 ? o3.push(new r.LineBasicMaterial()) : o3.push(new r.MeshPhongMaterial()));
            var s3 = void 0 !== a3.data.attributes.skinIndex;
            if (s3)
              for (var c4 = 0, u2 = o3.length; c4 < u2; c4++)
                o3[c4].skinning = true;
            var l2, h2 = 1 === o3.length ? o3[0] : o3;
            switch (i4) {
              case "lines":
                l2 = new r.LineSegments(a3.data, h2);
                break;
              case "linestrips":
                l2 = new r.Line(a3.data, h2);
                break;
              case "triangles":
              case "polylist":
                l2 = s3 ? new r.SkinnedMesh(a3.data, h2) : new r.Mesh(a3.data, h2);
            }
            n3.push(l2);
          }
          return n3;
        }
        function Oe(e3) {
          return void 0 !== Ve.nodes[e3];
        }
        function Ne(e3) {
          return h(Ve.nodes[e3], Re);
        }
        function Ie(e3) {
          var t3 = new r.Group();
          t3.name = e3.name;
          for (var n3 = e3.children, i4 = 0; i4 < n3.length; i4++) {
            var a3 = n3[i4];
            t3.add(Ne(a3.id));
          }
          return t3;
        }
        function De(e3) {
          return void 0 !== Ve.visualScenes[e3];
        }
        function Ue(e3) {
          return h(Ve.visualScenes[e3], Ie);
        }
        if (0 === e2.length)
          return { scene: new r.Scene() };
        var Be = n2(new DOMParser().parseFromString(e2, "application/xml"), "COLLADA")[0], Fe = Be.getAttribute("version");
        console.log("THREE.ColladaLoader: File version", Fe);
        var Ge = function(e3) {
          return { unit: function(e4) {
            return void 0 !== e4 && true === e4.hasAttribute("meter") ? parseFloat(e4.getAttribute("meter")) : 1;
          }(n2(e3, "unit")[0]), upAxis: function(e4) {
            return void 0 !== e4 ? e4.textContent : "Y_UP";
          }(n2(e3, "up_axis")[0]) };
        }(n2(Be, "asset")[0]), ze = new r.TextureLoader(this.manager);
        ze.setPath(t2).setCrossOrigin(this.crossOrigin);
        var He = [], ke = {}, je = 0, Ve = { animations: {}, clips: {}, controllers: {}, images: {}, effects: {}, materials: {}, cameras: {}, lights: {}, geometries: {}, nodes: {}, visualScenes: {}, kinematicsModels: {}, physicsModels: {}, kinematicsScenes: {} };
        u(Be, "library_animations", "animation", function(e3) {
          for (var t3 = { sources: {}, samplers: {}, channels: {} }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4, a3 = e3.childNodes[n3];
            if (1 === a3.nodeType)
              switch (a3.nodeName) {
                case "source":
                  i4 = a3.getAttribute("id"), t3.sources[i4] = ie(a3);
                  break;
                case "sampler":
                  i4 = a3.getAttribute("id"), t3.samplers[i4] = d(a3);
                  break;
                case "channel":
                  i4 = a3.getAttribute("target"), t3.channels[i4] = p(a3);
                  break;
                default:
                  console.log(a3);
              }
          }
          Ve.animations[e3.getAttribute("id")] = t3;
        }), u(Be, "library_animation_clips", "animation_clip", function(e3) {
          for (var t3 = { name: e3.getAttribute("id") || "default", start: parseFloat(e3.getAttribute("start") || 0), end: parseFloat(e3.getAttribute("end") || 0), animations: [] }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "instance_animation":
                  t3.animations.push(s2(i4.getAttribute("url")));
              }
          }
          Ve.clips[e3.getAttribute("id")] = t3;
        }), u(Be, "library_controllers", "controller", function(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "skin":
                  t3.id = s2(i4.getAttribute("source")), t3.skin = A(i4);
                  break;
                case "morph":
                  t3.id = s2(i4.getAttribute("source")), console.warn("THREE.ColladaLoader: Morph target animation not supported yet.");
              }
          }
          Ve.controllers[e3.getAttribute("id")] = t3;
        }), u(Be, "library_images", "image", function(e3) {
          var t3 = { init_from: n2(e3, "init_from")[0].textContent };
          Ve.images[e3.getAttribute("id")] = t3;
        }), u(Be, "library_effects", "effect", function(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "profile_COMMON":
                  t3.profile = I(i4);
              }
          }
          Ve.effects[e3.getAttribute("id")] = t3;
        }), u(Be, "library_materials", "material", function(e3) {
          for (var t3 = { name: e3.getAttribute("name") }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "instance_effect":
                  t3.url = s2(i4.getAttribute("url"));
              }
          }
          Ve.materials[e3.getAttribute("id")] = t3;
        }), u(Be, "library_cameras", "camera", function(e3) {
          for (var t3 = { name: e3.getAttribute("name") }, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "optics":
                  t3.optics = Z(i4);
              }
          }
          Ve.cameras[e3.getAttribute("id")] = t3;
        }), u(Be, "library_lights", "light", function(e3) {
          for (var t3 = {}, n3 = 0, r2 = e3.childNodes.length; n3 < r2; n3++) {
            var i4 = e3.childNodes[n3];
            if (1 === i4.nodeType)
              switch (i4.nodeName) {
                case "technique_common":
                  t3 = ee(i4);
              }
          }
          Ve.lights[e3.getAttribute("id")] = t3;
        }), u(Be, "library_geometries", "geometry", function(e3) {
          var t3 = { name: e3.getAttribute("name"), sources: {}, vertices: {}, primitives: [] }, r2 = n2(e3, "mesh")[0];
          if (void 0 !== r2) {
            for (var i4 = 0; i4 < r2.childNodes.length; i4++) {
              var a3 = r2.childNodes[i4];
              if (1 === a3.nodeType) {
                var o3 = a3.getAttribute("id");
                switch (a3.nodeName) {
                  case "source":
                    t3.sources[o3] = ie(a3);
                    break;
                  case "vertices":
                    t3.vertices = ae(a3);
                    break;
                  case "polygons":
                    console.warn("THREE.ColladaLoader: Unsupported primitive type: ", a3.nodeName);
                    break;
                  case "lines":
                  case "linestrips":
                  case "polylist":
                  case "triangles":
                    t3.primitives.push(oe(a3));
                    break;
                  default:
                    console.log(a3);
                }
              }
            }
            Ve.geometries[e3.getAttribute("id")] = t3;
          }
        }), u(Be, "library_nodes", "node", Te), u(Be, "library_visual_scenes", "visual_scene", function(e3) {
          var t3 = { name: e3.getAttribute("name"), children: [] };
          !function(e4) {
            for (var t4 = e4.getElementsByTagName("node"), n3 = 0; n3 < t4.length; n3++) {
              var r3 = t4[n3];
              false === r3.hasAttribute("id") && r3.setAttribute("id", "three_default_" + je++);
            }
          }(e3);
          for (var r2 = n2(e3, "node"), i4 = 0; i4 < r2.length; i4++)
            t3.children.push(Te(r2[i4]));
          Ve.visualScenes[e3.getAttribute("id")] = t3;
        }), u(Be, "library_kinematics_models", "kinematics_model", function(e3) {
          for (var t3 = { name: e3.getAttribute("name") || "", joints: {}, links: [] }, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "technique_common":
                  pe(r2, t3);
              }
          }
          Ve.kinematicsModels[e3.getAttribute("id")] = t3;
        }), u(Be, "library_physics_models", "physics_model", function(e3) {
          for (var t3 = { name: e3.getAttribute("name") || "", rigidBodies: {} }, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "rigid_body":
                  t3.rigidBodies[r2.getAttribute("name")] = {}, xe(r2, t3.rigidBodies[r2.getAttribute("name")]);
              }
          }
          Ve.physicsModels[e3.getAttribute("id")] = t3;
        }), u(Be, "scene", "instance_kinematics_scene", function(e3) {
          for (var t3 = { bindJointAxis: [] }, n3 = 0; n3 < e3.childNodes.length; n3++) {
            var r2 = e3.childNodes[n3];
            if (1 === r2.nodeType)
              switch (r2.nodeName) {
                case "bind_joint_axis":
                  t3.bindJointAxis.push(we(r2));
              }
          }
          Ve.kinematicsScenes[s2(e3.getAttribute("url"))] = t3;
        }), l(Ve.animations, f), l(Ve.clips, T), l(Ve.controllers, C), l(Ve.images, O), l(Ve.effects, X), l(Ve.materials, q), l(Ve.cameras, Q), l(Ve.lights, ne), l(Ve.geometries, ce), l(Ve.visualScenes, Ie), function() {
          var e3 = Ve.clips;
          if (true === c3(e3)) {
            if (false === c3(Ve.animations)) {
              var t3 = [];
              for (var n3 in Ve.animations)
                for (var i4 = m2(n3), a3 = 0, o3 = i4.length; a3 < o3; a3++)
                  t3.push(i4[a3]);
              He.push(new r.AnimationClip("default", -1, t3));
            }
          } else
            for (var n3 in e3)
              He.push(S(n3));
        }(), function() {
          var e3 = Object.keys(Ve.kinematicsModels)[0], t3 = Object.keys(Ve.kinematicsScenes)[0], n3 = Object.keys(Ve.visualScenes)[0];
          if (void 0 !== e3 && void 0 !== t3) {
            for (var i4 = function(e4) {
              return h(Ve.kinematicsModels[e4], de);
            }(e3), o3 = function(e4) {
              return h(Ve.kinematicsScenes[e4], _e);
            }(t3), s3 = Ue(n3), c4 = o3.bindJointAxis, u2 = {}, l2 = 0, d2 = c4.length; l2 < d2; l2++) {
              var p2 = c4[l2], f2 = Be.querySelector('[sid="' + p2.target + '"]');
              if (f2) {
                var m3 = f2.parentElement;
                v2(p2.jointIndex, m3);
              }
            }
            var g2 = new r.Matrix4();
            ke = { joints: i4 && i4.joints, getJointValue: function(e4) {
              var t4 = u2[e4];
              if (t4)
                return t4.position;
              console.warn("THREE.ColladaLoader: Joint " + e4 + " doesn't exist.");
            }, setJointValue: function(e4, t4) {
              var n4 = u2[e4];
              if (n4) {
                var i5 = n4.joint;
                if (t4 > i5.limits.max || t4 < i5.limits.min)
                  console.warn("THREE.ColladaLoader: Joint " + e4 + " value " + t4 + " outside of limits (min: " + i5.limits.min + ", max: " + i5.limits.max + ").");
                else if (i5.static)
                  console.warn("THREE.ColladaLoader: Joint " + e4 + " is static.");
                else {
                  var a3 = n4.object, o4 = i5.axis, s4 = n4.transforms;
                  Me.identity();
                  for (var c5 = 0; c5 < s4.length; c5++) {
                    var l3 = s4[c5];
                    if (l3.sid && -1 !== l3.sid.indexOf(e4))
                      switch (i5.type) {
                        case "revolute":
                          Me.multiply(g2.makeRotationAxis(o4, r.Math.degToRad(t4)));
                          break;
                        case "prismatic":
                          Me.multiply(g2.makeTranslation(o4.x * t4, o4.y * t4, o4.z * t4));
                          break;
                        default:
                          console.warn("THREE.ColladaLoader: Unknown joint type: " + i5.type);
                      }
                    else
                      switch (l3.type) {
                        case "matrix":
                          Me.multiply(l3.obj);
                          break;
                        case "translate":
                          Me.multiply(g2.makeTranslation(l3.obj.x, l3.obj.y, l3.obj.z));
                          break;
                        case "scale":
                          Me.scale(l3.obj);
                          break;
                        case "rotate":
                          Me.multiply(g2.makeRotationAxis(l3.obj, l3.angle));
                      }
                  }
                  a3.matrix.copy(Me), a3.matrix.decompose(a3.position, a3.quaternion, a3.scale), u2[e4].position = t4;
                }
              } else
                console.log("THREE.ColladaLoader: " + e4 + " does not exist.");
            } };
          }
          function v2(e4, t4) {
            var n4 = t4.getAttribute("name"), o4 = i4.joints[e4];
            s3.traverse(function(i5) {
              i5.name === n4 && (u2[e4] = { object: i5, transforms: function(e5) {
                for (var t5 = [], n5 = Be.querySelector('[id="' + e5.id + '"]'), i6 = 0; i6 < n5.childNodes.length; i6++) {
                  var o5 = n5.childNodes[i6];
                  if (1 === o5.nodeType)
                    switch (o5.nodeName) {
                      case "matrix":
                        var s4 = a2(o5.textContent), c5 = new r.Matrix4().fromArray(s4).transpose();
                        t5.push({ sid: o5.getAttribute("sid"), type: o5.nodeName, obj: c5 });
                        break;
                      case "translate":
                      case "scale":
                        var s4 = a2(o5.textContent), u3 = new r.Vector3().fromArray(s4);
                        t5.push({ sid: o5.getAttribute("sid"), type: o5.nodeName, obj: u3 });
                        break;
                      case "rotate":
                        var s4 = a2(o5.textContent), u3 = new r.Vector3().fromArray(s4), l3 = r.Math.degToRad(s4[3]);
                        t5.push({ sid: o5.getAttribute("sid"), type: o5.nodeName, obj: u3, angle: l3 });
                    }
                }
                return t5;
              }(t4), joint: o4, position: o4.zeroPosition });
            });
          }
        }();
        var We = function(e3) {
          return Ue(s2(n2(e3, "instance_visual_scene")[0].getAttribute("url")));
        }(n2(Be, "scene")[0]);
        return "Z_UP" === Ge.upAxis && We.quaternion.setFromEuler(new r.Euler(-Math.PI / 2, 0, 0)), We.scale.multiplyScalar(Ge.unit), { animations: He, kinematics: ke, library: Ve, scene: We };
      } }, r.GLTFLoader = function() {
        function e2(e3) {
          this.manager = void 0 !== e3 ? e3 : r.DefaultLoadingManager, this.dracoLoader = null;
        }
        e2.prototype = { constructor: e2, crossOrigin: "anonymous", load: function(e3, t3, n3, i4) {
          var a3 = this, o3 = void 0 !== this.path ? this.path : r.LoaderUtils.extractUrlBase(e3), s3 = new r.FileLoader(a3.manager);
          s3.setResponseType("arraybuffer"), s3.load(e3, function(e4) {
            try {
              a3.parse(e4, o3, t3, i4);
            } catch (e5) {
              if (void 0 === i4)
                throw e5;
              i4(e5);
            }
          }, n3, i4);
        }, setCrossOrigin: function(e3) {
          return this.crossOrigin = e3, this;
        }, setPath: function(e3) {
          return this.path = e3, this;
        }, setDRACOLoader: function(e3) {
          return this.dracoLoader = e3, this;
        }, parse: function(e3, h2, d2, p2) {
          var f2, m3 = {};
          if ("string" == typeof e3)
            f2 = e3;
          else if (r.LoaderUtils.decodeText(new Uint8Array(e3, 0, 4)) === o2) {
            try {
              m3[t2.KHR_BINARY_GLTF] = new function(e4) {
                this.name = t2.KHR_BINARY_GLTF, this.content = null, this.body = null;
                var n3 = new DataView(e4, 0, s2);
                if (this.header = { magic: r.LoaderUtils.decodeText(new Uint8Array(e4.slice(0, 4))), version: n3.getUint32(4, true), length: n3.getUint32(8, true) }, this.header.magic !== o2)
                  throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");
                if (this.header.version < 2)
                  throw new Error("THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.");
                var i4 = new DataView(e4, s2), a3 = 0;
                for (; a3 < i4.byteLength; ) {
                  var u2 = i4.getUint32(a3, true);
                  a3 += 4;
                  var l2 = i4.getUint32(a3, true);
                  if (a3 += 4, l2 === c3.JSON) {
                    var h3 = new Uint8Array(e4, s2 + a3, u2);
                    this.content = r.LoaderUtils.decodeText(h3);
                  } else if (l2 === c3.BIN) {
                    var d3 = s2 + a3;
                    this.body = e4.slice(d3, d3 + u2);
                  }
                  a3 += u2;
                }
                if (null === this.content)
                  throw new Error("THREE.GLTFLoader: JSON content not found.");
              }(e3);
            } catch (e4) {
              return void (p2 && p2(e4));
            }
            f2 = m3[t2.KHR_BINARY_GLTF].content;
          } else
            f2 = r.LoaderUtils.decodeText(new Uint8Array(e3));
          var g2 = JSON.parse(f2);
          if (void 0 === g2.asset || g2.asset.version[0] < 2)
            p2 && p2(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead."));
          else {
            if (g2.extensionsUsed)
              for (var v2 = 0; v2 < g2.extensionsUsed.length; ++v2) {
                var y2 = g2.extensionsUsed[v2], x2 = g2.extensionsRequired || [];
                switch (y2) {
                  case t2.KHR_LIGHTS:
                    m3[y2] = new i3(g2);
                    break;
                  case t2.KHR_MATERIALS_UNLIT:
                    m3[y2] = new a2();
                    break;
                  case t2.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
                    m3[y2] = new l();
                    break;
                  case t2.KHR_DRACO_MESH_COMPRESSION:
                    m3[y2] = new u(g2, this.dracoLoader);
                    break;
                  case t2.MSFT_TEXTURE_DDS:
                    m3[t2.MSFT_TEXTURE_DDS] = new n2();
                    break;
                  default:
                    x2.indexOf(y2) >= 0 && console.warn('THREE.GLTFLoader: Unknown extension "' + y2 + '".');
                }
              }
            var b2 = new G(g2, m3, { path: h2 || this.path || "", crossOrigin: this.crossOrigin, manager: this.manager });
            b2.parse(function(e4, t3, n3, r2, i4) {
              var a3 = { scene: e4, scenes: t3, cameras: n3, animations: r2, asset: i4.asset, parser: b2, userData: {} };
              O(m3, a3, i4), d2(a3);
            }, p2);
          }
        } };
        var t2 = { KHR_BINARY_GLTF: "KHR_binary_glTF", KHR_DRACO_MESH_COMPRESSION: "KHR_draco_mesh_compression", KHR_LIGHTS: "KHR_lights", KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: "KHR_materials_pbrSpecularGlossiness", KHR_MATERIALS_UNLIT: "KHR_materials_unlit", MSFT_TEXTURE_DDS: "MSFT_texture_dds" };
        function n2() {
          if (!r.DDSLoader)
            throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader");
          this.name = t2.MSFT_TEXTURE_DDS, this.ddsLoader = new r.DDSLoader();
        }
        function i3(e3) {
          this.name = t2.KHR_LIGHTS, this.lights = {};
          var n3 = (e3.extensions && e3.extensions[t2.KHR_LIGHTS] || {}).lights || {};
          for (var i4 in n3) {
            var a3, o3 = n3[i4], s3 = new r.Color().fromArray(o3.color);
            switch (o3.type) {
              case "directional":
                (a3 = new r.DirectionalLight(s3)).target.position.set(0, 0, 1), a3.add(a3.target);
                break;
              case "point":
                a3 = new r.PointLight(s3);
                break;
              case "spot":
                a3 = new r.SpotLight(s3), o3.spot = o3.spot || {}, o3.spot.innerConeAngle = void 0 !== o3.spot.innerConeAngle ? o3.spot.innerConeAngle : 0, o3.spot.outerConeAngle = void 0 !== o3.spot.outerConeAngle ? o3.spot.outerConeAngle : Math.PI / 4, a3.angle = o3.spot.outerConeAngle, a3.penumbra = 1 - o3.spot.innerConeAngle / o3.spot.outerConeAngle, a3.target.position.set(0, 0, 1), a3.add(a3.target);
                break;
              case "ambient":
                a3 = new r.AmbientLight(s3);
            }
            a3 && (a3.decay = 2, void 0 !== o3.intensity && (a3.intensity = o3.intensity), a3.name = o3.name || "light_" + i4, this.lights[i4] = a3);
          }
        }
        function a2(e3) {
          this.name = t2.KHR_MATERIALS_UNLIT;
        }
        a2.prototype.getMaterialType = function(e3) {
          return r.MeshBasicMaterial;
        }, a2.prototype.extendParams = function(e3, t3, n3) {
          var i4 = [];
          e3.color = new r.Color(1, 1, 1), e3.opacity = 1;
          var a3 = t3.pbrMetallicRoughness;
          if (a3) {
            if (Array.isArray(a3.baseColorFactor)) {
              var o3 = a3.baseColorFactor;
              e3.color.fromArray(o3), e3.opacity = o3[3];
            }
            void 0 !== a3.baseColorTexture && i4.push(n3.assignTexture(e3, "map", a3.baseColorTexture.index));
          }
          return Promise.all(i4);
        };
        var o2 = "glTF", s2 = 12, c3 = { JSON: 1313821514, BIN: 5130562 };
        function u(e3, n3) {
          if (!n3)
            throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");
          this.name = t2.KHR_DRACO_MESH_COMPRESSION, this.json = e3, this.dracoLoader = n3;
        }
        function l() {
          return { name: t2.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS, specularGlossinessParams: ["color", "map", "lightMap", "lightMapIntensity", "aoMap", "aoMapIntensity", "emissive", "emissiveIntensity", "emissiveMap", "bumpMap", "bumpScale", "normalMap", "displacementMap", "displacementScale", "displacementBias", "specularMap", "specular", "glossinessMap", "glossiness", "alphaMap", "envMap", "envMapIntensity", "refractionRatio"], getMaterialType: function() {
            return r.ShaderMaterial;
          }, extendParams: function(e3, t3, n3) {
            var i4 = t3.extensions[this.name], a3 = r.ShaderLib.standard, o3 = r.UniformsUtils.clone(a3.uniforms), s3 = ["#ifdef USE_SPECULARMAP", "	uniform sampler2D specularMap;", "#endif"].join("\n"), c4 = ["#ifdef USE_GLOSSINESSMAP", "	uniform sampler2D glossinessMap;", "#endif"].join("\n"), u2 = ["vec3 specularFactor = specular;", "#ifdef USE_SPECULARMAP", "	vec4 texelSpecular = texture2D( specularMap, vUv );", "	texelSpecular = sRGBToLinear( texelSpecular );", "	// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture", "	specularFactor *= texelSpecular.rgb;", "#endif"].join("\n"), l2 = ["float glossinessFactor = glossiness;", "#ifdef USE_GLOSSINESSMAP", "	vec4 texelGlossiness = texture2D( glossinessMap, vUv );", "	// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture", "	glossinessFactor *= texelGlossiness.a;", "#endif"].join("\n"), h2 = ["PhysicalMaterial material;", "material.diffuseColor = diffuseColor.rgb;", "material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );", "material.specularColor = specularFactor.rgb;"].join("\n"), d2 = a3.fragmentShader.replace("uniform float roughness;", "uniform vec3 specular;").replace("uniform float metalness;", "uniform float glossiness;").replace("#include <roughnessmap_pars_fragment>", s3).replace("#include <metalnessmap_pars_fragment>", c4).replace("#include <roughnessmap_fragment>", u2).replace("#include <metalnessmap_fragment>", l2).replace("#include <lights_physical_fragment>", h2);
            delete o3.roughness, delete o3.metalness, delete o3.roughnessMap, delete o3.metalnessMap, o3.specular = { value: new r.Color().setHex(1118481) }, o3.glossiness = { value: 0.5 }, o3.specularMap = { value: null }, o3.glossinessMap = { value: null }, e3.vertexShader = a3.vertexShader, e3.fragmentShader = d2, e3.uniforms = o3, e3.defines = { STANDARD: "" }, e3.color = new r.Color(1, 1, 1), e3.opacity = 1;
            var p2 = [];
            if (Array.isArray(i4.diffuseFactor)) {
              var f2 = i4.diffuseFactor;
              e3.color.fromArray(f2), e3.opacity = f2[3];
            }
            if (void 0 !== i4.diffuseTexture && p2.push(n3.assignTexture(e3, "map", i4.diffuseTexture.index)), e3.emissive = new r.Color(0, 0, 0), e3.glossiness = void 0 !== i4.glossinessFactor ? i4.glossinessFactor : 1, e3.specular = new r.Color(1, 1, 1), Array.isArray(i4.specularFactor) && e3.specular.fromArray(i4.specularFactor), void 0 !== i4.specularGlossinessTexture) {
              var m3 = i4.specularGlossinessTexture.index;
              p2.push(n3.assignTexture(e3, "glossinessMap", m3)), p2.push(n3.assignTexture(e3, "specularMap", m3));
            }
            return Promise.all(p2);
          }, createMaterial: function(e3) {
            var t3 = new r.ShaderMaterial({ defines: e3.defines, vertexShader: e3.vertexShader, fragmentShader: e3.fragmentShader, uniforms: e3.uniforms, fog: true, lights: true, opacity: e3.opacity, transparent: e3.transparent });
            return t3.isGLTFSpecularGlossinessMaterial = true, t3.color = e3.color, t3.map = void 0 === e3.map ? null : e3.map, t3.lightMap = null, t3.lightMapIntensity = 1, t3.aoMap = void 0 === e3.aoMap ? null : e3.aoMap, t3.aoMapIntensity = 1, t3.emissive = e3.emissive, t3.emissiveIntensity = 1, t3.emissiveMap = void 0 === e3.emissiveMap ? null : e3.emissiveMap, t3.bumpMap = void 0 === e3.bumpMap ? null : e3.bumpMap, t3.bumpScale = 1, t3.normalMap = void 0 === e3.normalMap ? null : e3.normalMap, e3.normalScale && (t3.normalScale = e3.normalScale), t3.displacementMap = null, t3.displacementScale = 1, t3.displacementBias = 0, t3.specularMap = void 0 === e3.specularMap ? null : e3.specularMap, t3.specular = e3.specular, t3.glossinessMap = void 0 === e3.glossinessMap ? null : e3.glossinessMap, t3.glossiness = e3.glossiness, t3.alphaMap = null, t3.envMap = void 0 === e3.envMap ? null : e3.envMap, t3.envMapIntensity = 1, t3.refractionRatio = 0.98, t3.extensions.derivatives = true, t3;
          }, cloneMaterial: function(e3) {
            var t3 = e3.clone();
            t3.isGLTFSpecularGlossinessMaterial = true;
            for (var n3 = this.specularGlossinessParams, r2 = 0, i4 = n3.length; r2 < i4; r2++)
              t3[n3[r2]] = e3[n3[r2]];
            return t3;
          }, refreshUniforms: function(e3, t3, n3, r2, i4, a3) {
            if (true === i4.isGLTFSpecularGlossinessMaterial) {
              var o3, s3 = i4.uniforms, c4 = i4.defines;
              s3.opacity.value = i4.opacity, s3.diffuse.value.copy(i4.color), s3.emissive.value.copy(i4.emissive).multiplyScalar(i4.emissiveIntensity), s3.map.value = i4.map, s3.specularMap.value = i4.specularMap, s3.alphaMap.value = i4.alphaMap, s3.lightMap.value = i4.lightMap, s3.lightMapIntensity.value = i4.lightMapIntensity, s3.aoMap.value = i4.aoMap, s3.aoMapIntensity.value = i4.aoMapIntensity, i4.map ? o3 = i4.map : i4.specularMap ? o3 = i4.specularMap : i4.displacementMap ? o3 = i4.displacementMap : i4.normalMap ? o3 = i4.normalMap : i4.bumpMap ? o3 = i4.bumpMap : i4.glossinessMap ? o3 = i4.glossinessMap : i4.alphaMap ? o3 = i4.alphaMap : i4.emissiveMap && (o3 = i4.emissiveMap), void 0 !== o3 && (o3.isWebGLRenderTarget && (o3 = o3.texture), true === o3.matrixAutoUpdate && o3.updateMatrix(), s3.uvTransform.value.copy(o3.matrix)), s3.envMap.value = i4.envMap, s3.envMapIntensity.value = i4.envMapIntensity, s3.flipEnvMap.value = i4.envMap && i4.envMap.isCubeTexture ? -1 : 1, s3.refractionRatio.value = i4.refractionRatio, s3.specular.value.copy(i4.specular), s3.glossiness.value = i4.glossiness, s3.glossinessMap.value = i4.glossinessMap, s3.emissiveMap.value = i4.emissiveMap, s3.bumpMap.value = i4.bumpMap, s3.normalMap.value = i4.normalMap, s3.displacementMap.value = i4.displacementMap, s3.displacementScale.value = i4.displacementScale, s3.displacementBias.value = i4.displacementBias, null !== s3.glossinessMap.value && void 0 === c4.USE_GLOSSINESSMAP && (c4.USE_GLOSSINESSMAP = "", c4.USE_ROUGHNESSMAP = ""), null === s3.glossinessMap.value && void 0 !== c4.USE_GLOSSINESSMAP && (delete c4.USE_GLOSSINESSMAP, delete c4.USE_ROUGHNESSMAP);
            }
          } };
        }
        function h(e3, t3, n3, i4) {
          r.Interpolant.call(this, e3, t3, n3, i4);
        }
        u.prototype.decodePrimitive = function(e3, t3) {
          var n3 = this.json, r2 = this.dracoLoader, i4 = e3.extensions[this.name].bufferView, a3 = e3.extensions[this.name].attributes, o3 = {}, s3 = {}, c4 = {};
          for (var u2 in a3)
            u2 in T && (o3[T[u2]] = a3[u2]);
          for (u2 in e3.attributes)
            if (void 0 !== T[u2] && void 0 !== a3[u2]) {
              var l2 = n3.accessors[e3.attributes[u2]], h2 = x[l2.componentType];
              c4[T[u2]] = h2, s3[T[u2]] = true === l2.normalized;
            }
          return t3.getDependency("bufferView", i4).then(function(e4) {
            return new Promise(function(t4) {
              r2.decodeDracoFile(e4, function(e5) {
                for (var n4 in e5.attributes) {
                  var r3 = e5.attributes[n4], i5 = s3[n4];
                  void 0 !== i5 && (r3.normalized = i5);
                }
                t4(e5);
              }, o3, c4);
            });
          });
        }, h.prototype = Object.create(r.Interpolant.prototype), h.prototype.constructor = h, h.prototype.interpolate_ = function(e3, t3, n3, r2) {
          for (var i4 = this.resultBuffer, a3 = this.sampleValues, o3 = this.valueSize, s3 = 2 * o3, c4 = 3 * o3, u2 = r2 - t3, l2 = (n3 - t3) / u2, h2 = l2 * l2, d2 = h2 * l2, p2 = e3 * c4, f2 = p2 - c4, m3 = 2 * d2 - 3 * h2 + 1, g2 = d2 - 2 * h2 + l2, v2 = -2 * d2 + 3 * h2, y2 = d2 - h2, x2 = 0; x2 !== o3; x2++) {
            var b2 = a3[f2 + x2 + o3], w2 = a3[f2 + x2 + s3] * u2, _2 = a3[p2 + x2 + o3], M2 = a3[p2 + x2] * u2;
            i4[x2] = m3 * b2 + g2 * w2 + v2 * _2 + y2 * M2;
          }
          return i4;
        };
        var d = 0, p = 1, f = 2, m2 = 3, g = 4, v = 5, y = 6, x = (r.Matrix3, r.Matrix4, r.Vector2, r.Vector3, r.Vector4, r.Texture, { 5120: Int8Array, 5121: Uint8Array, 5122: Int16Array, 5123: Uint16Array, 5125: Uint32Array, 5126: Float32Array }), b = { 9728: r.NearestFilter, 9729: r.LinearFilter, 9984: r.NearestMipMapNearestFilter, 9985: r.LinearMipMapNearestFilter, 9986: r.NearestMipMapLinearFilter, 9987: r.LinearMipMapLinearFilter }, w = { 33071: r.ClampToEdgeWrapping, 33648: r.MirroredRepeatWrapping, 10497: r.RepeatWrapping }, _ = { 6406: r.AlphaFormat, 6407: r.RGBFormat, 6408: r.RGBAFormat, 6409: r.LuminanceFormat, 6410: r.LuminanceAlphaFormat }, M = { 5121: r.UnsignedByteType, 32819: r.UnsignedShort4444Type, 32820: r.UnsignedShort5551Type, 33635: r.UnsignedShort565Type }, E = (r.BackSide, r.FrontSide, r.NeverDepth, r.LessDepth, r.EqualDepth, r.LessEqualDepth, r.GreaterEqualDepth, r.NotEqualDepth, r.GreaterEqualDepth, r.AlwaysDepth, r.AddEquation, r.SubtractEquation, r.ReverseSubtractEquation, r.ZeroFactor, r.OneFactor, r.SrcColorFactor, r.OneMinusSrcColorFactor, r.SrcAlphaFactor, r.OneMinusSrcAlphaFactor, r.DstAlphaFactor, r.OneMinusDstAlphaFactor, r.DstColorFactor, r.OneMinusDstColorFactor, r.SrcAlphaSaturateFactor, { SCALAR: 1, VEC2: 2, VEC3: 3, VEC4: 4, MAT2: 4, MAT3: 9, MAT4: 16 }), T = { POSITION: "position", NORMAL: "normal", TEXCOORD_0: "uv", TEXCOORD0: "uv", TEXCOORD: "uv", TEXCOORD_1: "uv2", COLOR_0: "color", COLOR0: "color", COLOR: "color", WEIGHTS_0: "skinWeight", WEIGHT: "skinWeight", JOINTS_0: "skinIndex", JOINT: "skinIndex" }, S = { scale: "scale", translation: "position", rotation: "quaternion", weights: "morphTargetInfluences" }, A = { CUBICSPLINE: r.InterpolateSmooth, LINEAR: r.InterpolateLinear, STEP: r.InterpolateDiscrete }, L = "OPAQUE", R = "MASK", C = "BLEND";
        function P(e3, t3) {
          return "string" != typeof e3 || "" === e3 ? "" : /^(https?:)?\/\//i.test(e3) ? e3 : /^data:.*,.*$/i.test(e3) ? e3 : /^blob:.*$/i.test(e3) ? e3 : t3 + e3;
        }
        function O(e3, t3, n3) {
          for (var r2 in n3.extensions)
            void 0 === e3[r2] && (t3.userData.gltfExtensions = t3.userData.gltfExtensions || {}, t3.userData.gltfExtensions[r2] = n3.extensions[r2]);
        }
        function N(e3, t3) {
          if (e3.updateMorphTargets(), void 0 !== t3.weights)
            for (var n3 = 0, r2 = t3.weights.length; n3 < r2; n3++)
              e3.morphTargetInfluences[n3] = t3.weights[n3];
          if (t3.extras && Array.isArray(t3.extras.targetNames)) {
            var i4 = t3.extras.targetNames;
            if (e3.morphTargetInfluences.length === i4.length) {
              e3.morphTargetDictionary = {};
              for (n3 = 0, r2 = i4.length; n3 < r2; n3++)
                e3.morphTargetDictionary[i4[n3]] = n3;
            } else
              console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.");
          }
        }
        function I(e3, t3) {
          return e3.indices === t3.indices && D(e3.attributes, t3.attributes);
        }
        function D(e3, t3) {
          if (Object.keys(e3).length !== Object.keys(t3).length)
            return false;
          for (var n3 in e3)
            if (e3[n3] !== t3[n3])
              return false;
          return true;
        }
        function U(e3, t3) {
          if (e3.length !== t3.length)
            return false;
          for (var n3 = 0, r2 = e3.length; n3 < r2; n3++)
            if (e3[n3] !== t3[n3])
              return false;
          return true;
        }
        function B(e3, t3) {
          for (var n3 = 0, r2 = e3.length; n3 < r2; n3++) {
            var i4 = e3[n3];
            if (I(i4.primitive, t3))
              return i4.promise;
          }
          return null;
        }
        function F(e3) {
          if (e3.isInterleavedBufferAttribute) {
            for (var t3 = e3.count, n3 = e3.itemSize, i4 = e3.array.slice(0, t3 * n3), a3 = 0; a3 < t3; ++a3)
              i4[a3] = e3.getX(a3), n3 >= 2 && (i4[a3 + 1] = e3.getY(a3)), n3 >= 3 && (i4[a3 + 2] = e3.getZ(a3)), n3 >= 4 && (i4[a3 + 3] = e3.getW(a3));
            return new r.BufferAttribute(i4, n3, e3.normalized);
          }
          return e3.clone();
        }
        function G(e3, t3, n3) {
          this.json = e3 || {}, this.extensions = t3 || {}, this.options = n3 || {}, this.cache = new function() {
            var e4 = {};
            return { get: function(t4) {
              return e4[t4];
            }, add: function(t4, n4) {
              e4[t4] = n4;
            }, remove: function(t4) {
              delete e4[t4];
            }, removeAll: function() {
              e4 = {};
            } };
          }(), this.primitiveCache = [], this.multiplePrimitivesCache = [], this.multiPassGeometryCache = [], this.textureLoader = new r.TextureLoader(this.options.manager), this.textureLoader.setCrossOrigin(this.options.crossOrigin), this.fileLoader = new r.FileLoader(this.options.manager), this.fileLoader.setResponseType("arraybuffer");
        }
        function z(e3, t3, n3) {
          var r2 = t3.attributes;
          for (var i4 in r2) {
            var a3 = T[i4], o3 = n3[r2[i4]];
            a3 && (a3 in e3.attributes || e3.addAttribute(a3, o3));
          }
          void 0 === t3.indices || e3.index || e3.setIndex(n3[t3.indices]), void 0 !== t3.targets && function(e4, t4, n4) {
            for (var r3 = false, i5 = false, a4 = 0, o4 = t4.length; a4 < o4 && (void 0 !== (u2 = t4[a4]).POSITION && (r3 = true), void 0 !== u2.NORMAL && (i5 = true), !r3 || !i5); a4++)
              ;
            if (r3 || i5) {
              var s3 = [], c4 = [];
              for (a4 = 0, o4 = t4.length; a4 < o4; a4++) {
                var u2 = t4[a4], l2 = "morphTarget" + a4;
                if (r3) {
                  if (void 0 !== u2.POSITION) {
                    var h2 = F(n4[u2.POSITION]);
                    h2.name = l2;
                    for (var d2 = e4.attributes.position, p2 = 0, f2 = h2.count; p2 < f2; p2++)
                      h2.setXYZ(p2, h2.getX(p2) + d2.getX(p2), h2.getY(p2) + d2.getY(p2), h2.getZ(p2) + d2.getZ(p2));
                  } else
                    h2 = e4.attributes.position;
                  s3.push(h2);
                }
                if (i5) {
                  if (void 0 !== u2.NORMAL) {
                    var m3;
                    (m3 = F(n4[u2.NORMAL])).name = l2;
                    var g2 = e4.attributes.normal;
                    for (p2 = 0, f2 = m3.count; p2 < f2; p2++)
                      m3.setXYZ(p2, m3.getX(p2) + g2.getX(p2), m3.getY(p2) + g2.getY(p2), m3.getZ(p2) + g2.getZ(p2));
                  } else
                    m3 = e4.attributes.normal;
                  c4.push(m3);
                }
              }
              r3 && (e4.morphAttributes.position = s3), i5 && (e4.morphAttributes.normal = c4);
            }
          }(e3, t3.targets, n3), void 0 !== t3.extras && (e3.userData = t3.extras);
        }
        return G.prototype.parse = function(e3, t3) {
          var n3 = this.json;
          this.cache.removeAll(), this.markDefs(), this.getMultiDependencies(["scene", "animation", "camera"]).then(function(t4) {
            var r2 = t4.scenes || [], i4 = r2[n3.scene || 0], a3 = t4.animations || [], o3 = t4.cameras || [];
            e3(i4, r2, o3, a3, n3);
          }).catch(t3);
        }, G.prototype.markDefs = function() {
          for (var e3 = this.json.nodes || [], t3 = this.json.skins || [], n3 = this.json.meshes || [], r2 = {}, i4 = {}, a3 = 0, o3 = t3.length; a3 < o3; a3++)
            for (var s3 = t3[a3].joints, c4 = 0, u2 = s3.length; c4 < u2; c4++)
              e3[s3[c4]].isBone = true;
          for (var l2 = 0, h2 = e3.length; l2 < h2; l2++) {
            var d2 = e3[l2];
            void 0 !== d2.mesh && (void 0 === r2[d2.mesh] && (r2[d2.mesh] = i4[d2.mesh] = 0), r2[d2.mesh]++, void 0 !== d2.skin && (n3[d2.mesh].isSkinnedMesh = true));
          }
          this.json.meshReferences = r2, this.json.meshUses = i4;
        }, G.prototype.getDependency = function(e3, t3) {
          var n3 = e3 + ":" + t3, r2 = this.cache.get(n3);
          if (!r2) {
            switch (e3) {
              case "scene":
                r2 = this.loadScene(t3);
                break;
              case "node":
                r2 = this.loadNode(t3);
                break;
              case "mesh":
                r2 = this.loadMesh(t3);
                break;
              case "accessor":
                r2 = this.loadAccessor(t3);
                break;
              case "bufferView":
                r2 = this.loadBufferView(t3);
                break;
              case "buffer":
                r2 = this.loadBuffer(t3);
                break;
              case "material":
                r2 = this.loadMaterial(t3);
                break;
              case "texture":
                r2 = this.loadTexture(t3);
                break;
              case "skin":
                r2 = this.loadSkin(t3);
                break;
              case "animation":
                r2 = this.loadAnimation(t3);
                break;
              case "camera":
                r2 = this.loadCamera(t3);
                break;
              default:
                throw new Error("Unknown type: " + e3);
            }
            this.cache.add(n3, r2);
          }
          return r2;
        }, G.prototype.getDependencies = function(e3) {
          var t3 = this.cache.get(e3);
          if (!t3) {
            var n3 = this, r2 = this.json[e3 + ("mesh" === e3 ? "es" : "s")] || [];
            t3 = Promise.all(r2.map(function(t4, r3) {
              return n3.getDependency(e3, r3);
            })), this.cache.add(e3, t3);
          }
          return t3;
        }, G.prototype.getMultiDependencies = function(e3) {
          for (var t3 = {}, n3 = [], r2 = 0, i4 = e3.length; r2 < i4; r2++) {
            var a3 = e3[r2], o3 = this.getDependencies(a3);
            o3 = o3.then(function(e4, n4) {
              t3[e4] = n4;
            }.bind(this, a3 + ("mesh" === a3 ? "es" : "s"))), n3.push(o3);
          }
          return Promise.all(n3).then(function() {
            return t3;
          });
        }, G.prototype.loadBuffer = function(e3) {
          var n3 = this.json.buffers[e3], r2 = this.fileLoader;
          if (n3.type && "arraybuffer" !== n3.type)
            throw new Error("THREE.GLTFLoader: " + n3.type + " buffer type is not supported.");
          if (void 0 === n3.uri && 0 === e3)
            return Promise.resolve(this.extensions[t2.KHR_BINARY_GLTF].body);
          var i4 = this.options;
          return new Promise(function(e4, t3) {
            r2.load(P(n3.uri, i4.path), e4, void 0, function() {
              t3(new Error('THREE.GLTFLoader: Failed to load buffer "' + n3.uri + '".'));
            });
          });
        }, G.prototype.loadBufferView = function(e3) {
          var t3 = this.json.bufferViews[e3];
          return this.getDependency("buffer", t3.buffer).then(function(e4) {
            var n3 = t3.byteLength || 0, r2 = t3.byteOffset || 0;
            return e4.slice(r2, r2 + n3);
          });
        }, G.prototype.loadAccessor = function(e3) {
          var t3 = this, n3 = this.json, i4 = this.json.accessors[e3];
          if (void 0 === i4.bufferView && void 0 === i4.sparse)
            return null;
          var a3 = [];
          return void 0 !== i4.bufferView ? a3.push(this.getDependency("bufferView", i4.bufferView)) : a3.push(null), void 0 !== i4.sparse && (a3.push(this.getDependency("bufferView", i4.sparse.indices.bufferView)), a3.push(this.getDependency("bufferView", i4.sparse.values.bufferView))), Promise.all(a3).then(function(e4) {
            var a4, o3, s3 = e4[0], c4 = E[i4.type], u2 = x[i4.componentType], l2 = u2.BYTES_PER_ELEMENT, h2 = l2 * c4, d2 = i4.byteOffset || 0, p2 = n3.bufferViews[i4.bufferView].byteStride, f2 = true === i4.normalized;
            if (p2 && p2 !== h2) {
              var m3 = "InterleavedBuffer:" + i4.bufferView + ":" + i4.componentType, g2 = t3.cache.get(m3);
              g2 || (a4 = new u2(s3), g2 = new r.InterleavedBuffer(a4, p2 / l2), t3.cache.add(m3, g2)), o3 = new r.InterleavedBufferAttribute(g2, c4, d2 / l2, f2);
            } else
              a4 = null === s3 ? new u2(i4.count * c4) : new u2(s3, d2, i4.count * c4), o3 = new r.BufferAttribute(a4, c4, f2);
            if (void 0 !== i4.sparse) {
              var v2 = E.SCALAR, y2 = x[i4.sparse.indices.componentType], b2 = i4.sparse.indices.byteOffset || 0, w2 = i4.sparse.values.byteOffset || 0, _2 = new y2(e4[1], b2, i4.sparse.count * v2), M2 = new u2(e4[2], w2, i4.sparse.count * c4);
              null !== s3 && o3.setArray(o3.array.slice());
              for (var T2 = 0, S2 = _2.length; T2 < S2; T2++) {
                var A2 = _2[T2];
                if (o3.setX(A2, M2[T2 * c4]), c4 >= 2 && o3.setY(A2, M2[T2 * c4 + 1]), c4 >= 3 && o3.setZ(A2, M2[T2 * c4 + 2]), c4 >= 4 && o3.setW(A2, M2[T2 * c4 + 3]), c4 >= 5)
                  throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.");
              }
            }
            return o3;
          });
        }, G.prototype.loadTexture = function(e3) {
          var n3, i4 = this, a3 = this.json, o3 = this.options, s3 = this.textureLoader, c4 = window.URL || window.webkitURL, u2 = a3.textures[e3], l2 = u2.extensions || {}, h2 = (n3 = l2[t2.MSFT_TEXTURE_DDS] ? a3.images[l2[t2.MSFT_TEXTURE_DDS].source] : a3.images[u2.source]).uri, d2 = false;
          return void 0 !== n3.bufferView && (h2 = i4.getDependency("bufferView", n3.bufferView).then(function(e4) {
            d2 = true;
            var t3 = new Blob([e4], { type: n3.mimeType });
            return h2 = c4.createObjectURL(t3);
          })), Promise.resolve(h2).then(function(e4) {
            var n4 = r.Loader.Handlers.get(e4);
            return n4 || (n4 = l2[t2.MSFT_TEXTURE_DDS] ? i4.extensions[t2.MSFT_TEXTURE_DDS].ddsLoader : s3), new Promise(function(t3, r2) {
              n4.load(P(e4, o3.path), t3, void 0, r2);
            });
          }).then(function(e4) {
            true === d2 && c4.revokeObjectURL(h2), e4.flipY = false, void 0 !== u2.name && (e4.name = u2.name), l2[t2.MSFT_TEXTURE_DDS] || (e4.format = void 0 !== u2.format ? _[u2.format] : r.RGBAFormat), void 0 !== u2.internalFormat && e4.format !== _[u2.internalFormat] && console.warn("THREE.GLTFLoader: Three.js does not support texture internalFormat which is different from texture format. internalFormat will be forced to be the same value as format."), e4.type = void 0 !== u2.type ? M[u2.type] : r.UnsignedByteType;
            var n4 = (a3.samplers || {})[u2.sampler] || {};
            return e4.magFilter = b[n4.magFilter] || r.LinearFilter, e4.minFilter = b[n4.minFilter] || r.LinearMipMapLinearFilter, e4.wrapS = w[n4.wrapS] || r.RepeatWrapping, e4.wrapT = w[n4.wrapT] || r.RepeatWrapping, e4;
          });
        }, G.prototype.assignTexture = function(e3, t3, n3) {
          return this.getDependency("texture", n3).then(function(n4) {
            e3[t3] = n4;
          });
        }, G.prototype.loadMaterial = function(e3) {
          this.json;
          var n3, i4 = this.extensions, a3 = this.json.materials[e3], o3 = {}, s3 = a3.extensions || {}, c4 = [];
          if (s3[t2.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {
            var u2 = i4[t2.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];
            n3 = u2.getMaterialType(a3), c4.push(u2.extendParams(o3, a3, this));
          } else if (s3[t2.KHR_MATERIALS_UNLIT]) {
            var l2 = i4[t2.KHR_MATERIALS_UNLIT];
            n3 = l2.getMaterialType(a3), c4.push(l2.extendParams(o3, a3, this));
          } else {
            n3 = r.MeshStandardMaterial;
            var h2 = a3.pbrMetallicRoughness || {};
            if (o3.color = new r.Color(1, 1, 1), o3.opacity = 1, Array.isArray(h2.baseColorFactor)) {
              var d2 = h2.baseColorFactor;
              o3.color.fromArray(d2), o3.opacity = d2[3];
            }
            if (void 0 !== h2.baseColorTexture && c4.push(this.assignTexture(o3, "map", h2.baseColorTexture.index)), o3.metalness = void 0 !== h2.metallicFactor ? h2.metallicFactor : 1, o3.roughness = void 0 !== h2.roughnessFactor ? h2.roughnessFactor : 1, void 0 !== h2.metallicRoughnessTexture) {
              var p2 = h2.metallicRoughnessTexture.index;
              c4.push(this.assignTexture(o3, "metalnessMap", p2)), c4.push(this.assignTexture(o3, "roughnessMap", p2));
            }
          }
          true === a3.doubleSided && (o3.side = r.DoubleSide);
          var f2 = a3.alphaMode || L;
          return f2 === C ? o3.transparent = true : (o3.transparent = false, f2 === R && (o3.alphaTest = void 0 !== a3.alphaCutoff ? a3.alphaCutoff : 0.5)), void 0 !== a3.normalTexture && n3 !== r.MeshBasicMaterial && (c4.push(this.assignTexture(o3, "normalMap", a3.normalTexture.index)), o3.normalScale = new r.Vector2(1, 1), void 0 !== a3.normalTexture.scale && o3.normalScale.set(a3.normalTexture.scale, a3.normalTexture.scale)), void 0 !== a3.occlusionTexture && n3 !== r.MeshBasicMaterial && (c4.push(this.assignTexture(o3, "aoMap", a3.occlusionTexture.index)), void 0 !== a3.occlusionTexture.strength && (o3.aoMapIntensity = a3.occlusionTexture.strength)), void 0 !== a3.emissiveFactor && n3 !== r.MeshBasicMaterial && (o3.emissive = new r.Color().fromArray(a3.emissiveFactor)), void 0 !== a3.emissiveTexture && n3 !== r.MeshBasicMaterial && c4.push(this.assignTexture(o3, "emissiveMap", a3.emissiveTexture.index)), Promise.all(c4).then(function() {
            var e4;
            return e4 = n3 === r.ShaderMaterial ? i4[t2.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(o3) : new n3(o3), void 0 !== a3.name && (e4.name = a3.name), e4.normalScale && (e4.normalScale.y = -e4.normalScale.y), e4.map && (e4.map.encoding = r.sRGBEncoding), e4.emissiveMap && (e4.emissiveMap.encoding = r.sRGBEncoding), e4.specularMap && (e4.specularMap.encoding = r.sRGBEncoding), a3.extras && (e4.userData = a3.extras), a3.extensions && O(i4, e4, a3), e4;
          });
        }, G.prototype.loadGeometries = function(e3) {
          var n3, i4 = this, a3 = this.extensions, o3 = this.primitiveCache, s3 = function(e4) {
            if (e4.length < 2)
              return false;
            var t3 = e4[0], n4 = t3.targets || [];
            if (void 0 === t3.indices)
              return false;
            for (var r2 = 1, i5 = e4.length; r2 < i5; r2++) {
              var a4 = e4[r2];
              if (t3.mode !== a4.mode)
                return false;
              if (void 0 === a4.indices)
                return false;
              if (!D(t3.attributes, a4.attributes))
                return false;
              var o4 = a4.targets || [];
              if (n4.length !== o4.length)
                return false;
              for (var s4 = 0, c4 = n4.length; s4 < c4; s4++)
                if (!D(n4[s4], o4[s4]))
                  return false;
            }
            return true;
          }(e3);
          return s3 && (n3 = e3, e3 = [e3[0]]), this.getDependencies("accessor").then(function(c4) {
            for (var u2 = [], l2 = 0, h2 = e3.length; l2 < h2; l2++) {
              var d2 = e3[l2], p2 = B(o3, d2);
              if (p2)
                u2.push(p2);
              else if (d2.extensions && d2.extensions[t2.KHR_DRACO_MESH_COMPRESSION]) {
                var f2 = a3[t2.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(d2, i4).then(function(e4) {
                  return z(e4, d2, c4), e4;
                });
                o3.push({ primitive: d2, promise: f2 }), u2.push(f2);
              } else {
                var m3 = new r.BufferGeometry();
                z(m3, d2, c4);
                f2 = Promise.resolve(m3);
                o3.push({ primitive: d2, promise: f2 }), u2.push(f2);
              }
            }
            return Promise.all(u2).then(function(t3) {
              if (s3) {
                var a4 = t3[0];
                if (null !== (y2 = function(e4, t4, n4) {
                  for (var r2 = 0, i5 = e4.length; r2 < i5; r2++) {
                    var a5 = e4[r2];
                    if (t4 === a5.baseGeometry && U(n4, a5.primitives))
                      return a5.geometry;
                  }
                  return null;
                }(v2 = i4.multiPassGeometryCache, a4, n3)))
                  return [y2.geometry];
                var o4 = new r.BufferGeometry();
                for (var u3 in o4.name = a4.name, o4.userData = a4.userData, a4.attributes)
                  o4.addAttribute(u3, a4.attributes[u3]);
                for (var u3 in a4.morphAttributes)
                  o4.morphAttributes[u3] = a4.morphAttributes[u3];
                for (var l3 = [], h3 = 0, d3 = 0, p3 = n3.length; d3 < p3; d3++) {
                  for (var f3 = c4[n3[d3].indices], m4 = 0, g2 = f3.count; m4 < g2; m4++)
                    l3.push(f3.array[m4]);
                  o4.addGroup(h3, f3.count, d3), h3 += f3.count;
                }
                return o4.setIndex(l3), v2.push({ geometry: o4, baseGeometry: a4, primitives: n3 }), [o4];
              }
              if (t3.length > 1 && void 0 !== r.BufferGeometryUtils) {
                for (d3 = 1, p3 = e3.length; d3 < p3; d3++)
                  if (e3[0].mode !== e3[d3].mode)
                    return t3;
                var v2, y2;
                if (y2 = function(e4, t4) {
                  for (var n4 = 0, r2 = e4.length; n4 < r2; n4++) {
                    var i5 = e4[n4];
                    if (U(t4, i5.baseGeometries))
                      return i5.geometry;
                  }
                  return null;
                }(v2 = i4.multiplePrimitivesCache, t3)) {
                  if (null !== y2.geometry)
                    return [y2.geometry];
                } else {
                  o4 = r.BufferGeometryUtils.mergeBufferGeometries(t3, true);
                  if (v2.push({ geometry: o4, baseGeometries: t3 }), null !== o4)
                    return [o4];
                }
              }
              return t3;
            });
          });
        }, G.prototype.loadMesh = function(e3) {
          var n3 = this, i4 = (this.json, this.extensions), a3 = this.json.meshes[e3];
          return this.getMultiDependencies(["accessor", "material"]).then(function(o3) {
            for (var s3 = a3.primitives, c4 = [], u2 = 0, l2 = s3.length; u2 < l2; u2++)
              c4[u2] = void 0 === s3[u2].material ? new r.MeshStandardMaterial({ color: 16777215, emissive: 0, metalness: 1, roughness: 1, transparent: false, depthTest: true, side: r.FrontSide }) : o3.materials[s3[u2].material];
            return n3.loadGeometries(s3).then(function(o4) {
              for (var u3 = 1 === o4.length && o4[0].groups.length > 0, l3 = [], h2 = 0, x2 = o4.length; h2 < x2; h2++) {
                var b2, w2 = o4[h2], _2 = s3[h2], M2 = u3 ? c4 : c4[h2];
                if (_2.mode === g || _2.mode === v || _2.mode === y || void 0 === _2.mode)
                  b2 = true === a3.isSkinnedMesh ? new r.SkinnedMesh(w2, M2) : new r.Mesh(w2, M2), _2.mode === v ? b2.drawMode = r.TriangleStripDrawMode : _2.mode === y && (b2.drawMode = r.TriangleFanDrawMode);
                else if (_2.mode === p)
                  b2 = new r.LineSegments(w2, M2);
                else if (_2.mode === m2)
                  b2 = new r.Line(w2, M2);
                else if (_2.mode === f)
                  b2 = new r.LineLoop(w2, M2);
                else {
                  if (_2.mode !== d)
                    throw new Error("THREE.GLTFLoader: Primitive mode unsupported: " + _2.mode);
                  b2 = new r.Points(w2, M2);
                }
                Object.keys(b2.geometry.morphAttributes).length > 0 && N(b2, a3), b2.name = a3.name || "mesh_" + e3, o4.length > 1 && (b2.name += "_" + h2), void 0 !== a3.extras && (b2.userData = a3.extras), l3.push(b2);
                for (var E2 = u3 ? b2.material : [b2.material], T2 = void 0 !== w2.attributes.color, S2 = void 0 === w2.attributes.normal, A2 = true === b2.isSkinnedMesh, L2 = Object.keys(w2.morphAttributes).length > 0, R2 = L2 && void 0 !== w2.morphAttributes.normal, C2 = 0, P2 = E2.length; C2 < P2; C2++) {
                  M2 = E2[C2];
                  if (b2.isPoints) {
                    var O2 = "PointsMaterial:" + M2.uuid, I2 = n3.cache.get(O2);
                    I2 || (I2 = new r.PointsMaterial(), r.Material.prototype.copy.call(I2, M2), I2.color.copy(M2.color), I2.map = M2.map, I2.lights = false, n3.cache.add(O2, I2)), M2 = I2;
                  } else if (b2.isLine) {
                    O2 = "LineBasicMaterial:" + M2.uuid;
                    var D2 = n3.cache.get(O2);
                    D2 || (D2 = new r.LineBasicMaterial(), r.Material.prototype.copy.call(D2, M2), D2.color.copy(M2.color), D2.lights = false, n3.cache.add(O2, D2)), M2 = D2;
                  }
                  if (T2 || S2 || A2 || L2) {
                    O2 = "ClonedMaterial:" + M2.uuid + ":";
                    M2.isGLTFSpecularGlossinessMaterial && (O2 += "specular-glossiness:"), A2 && (O2 += "skinning:"), T2 && (O2 += "vertex-colors:"), S2 && (O2 += "flat-shading:"), L2 && (O2 += "morph-targets:"), R2 && (O2 += "morph-normals:");
                    var U2 = n3.cache.get(O2);
                    U2 || (U2 = M2.isGLTFSpecularGlossinessMaterial ? i4[t2.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].cloneMaterial(M2) : M2.clone(), A2 && (U2.skinning = true), T2 && (U2.vertexColors = r.VertexColors), S2 && (U2.flatShading = true), L2 && (U2.morphTargets = true), R2 && (U2.morphNormals = true), n3.cache.add(O2, U2)), M2 = U2;
                  }
                  E2[C2] = M2, M2.aoMap && void 0 === w2.attributes.uv2 && void 0 !== w2.attributes.uv && (console.log("THREE.GLTFLoader: Duplicating UVs to support aoMap."), w2.addAttribute("uv2", new r.BufferAttribute(w2.attributes.uv.array, 2))), M2.isGLTFSpecularGlossinessMaterial && (b2.onBeforeRender = i4[t2.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].refreshUniforms);
                }
                b2.material = u3 ? E2 : E2[0];
              }
              if (1 === l3.length)
                return l3[0];
              var B2 = new r.Group();
              for (h2 = 0, x2 = l3.length; h2 < x2; h2++)
                B2.add(l3[h2]);
              return B2;
            });
          });
        }, G.prototype.loadCamera = function(e3) {
          var t3, n3 = this.json.cameras[e3], i4 = n3[n3.type];
          if (i4)
            return "perspective" === n3.type ? t3 = new r.PerspectiveCamera(r.Math.radToDeg(i4.yfov), i4.aspectRatio || 1, i4.znear || 1, i4.zfar || 2e6) : "orthographic" === n3.type && (t3 = new r.OrthographicCamera(i4.xmag / -2, i4.xmag / 2, i4.ymag / 2, i4.ymag / -2, i4.znear, i4.zfar)), void 0 !== n3.name && (t3.name = n3.name), n3.extras && (t3.userData = n3.extras), Promise.resolve(t3);
          console.warn("THREE.GLTFLoader: Missing camera parameters.");
        }, G.prototype.loadSkin = function(e3) {
          var t3 = this.json.skins[e3], n3 = { joints: t3.joints };
          return void 0 === t3.inverseBindMatrices ? Promise.resolve(n3) : this.getDependency("accessor", t3.inverseBindMatrices).then(function(e4) {
            return n3.inverseBindMatrices = e4, n3;
          });
        }, G.prototype.loadAnimation = function(e3) {
          this.json;
          var t3 = this.json.animations[e3];
          return this.getMultiDependencies(["accessor", "node"]).then(function(n3) {
            for (var i4 = [], a3 = 0, o3 = t3.channels.length; a3 < o3; a3++) {
              var s3 = t3.channels[a3], c4 = t3.samplers[s3.sampler];
              if (c4) {
                var u2 = s3.target, l2 = void 0 !== u2.node ? u2.node : u2.id, d2 = void 0 !== t3.parameters ? t3.parameters[c4.input] : c4.input, p2 = void 0 !== t3.parameters ? t3.parameters[c4.output] : c4.output, f2 = n3.accessors[d2], m3 = n3.accessors[p2], g2 = n3.nodes[l2];
                if (g2) {
                  var v2;
                  switch (g2.updateMatrix(), g2.matrixAutoUpdate = true, S[u2.path]) {
                    case S.weights:
                      v2 = r.NumberKeyframeTrack;
                      break;
                    case S.rotation:
                      v2 = r.QuaternionKeyframeTrack;
                      break;
                    case S.position:
                    case S.scale:
                    default:
                      v2 = r.VectorKeyframeTrack;
                  }
                  var y2 = g2.name ? g2.name : g2.uuid, x2 = void 0 !== c4.interpolation ? A[c4.interpolation] : r.InterpolateLinear, b2 = [];
                  S[u2.path] === S.weights ? g2.traverse(function(e4) {
                    true === e4.isMesh && e4.morphTargetInfluences && b2.push(e4.name ? e4.name : e4.uuid);
                  }) : b2.push(y2);
                  for (var w2 = 0, _2 = b2.length; w2 < _2; w2++) {
                    var M2 = new v2(b2[w2] + "." + S[u2.path], r.AnimationUtils.arraySlice(f2.array, 0), r.AnimationUtils.arraySlice(m3.array, 0), x2);
                    "CUBICSPLINE" === c4.interpolation && (M2.createInterpolant = function(e4) {
                      return new h(this.times, this.values, this.getValueSize() / 3, e4);
                    }, M2.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true), i4.push(M2);
                  }
                }
              }
            }
            l2 = void 0 !== t3.name ? t3.name : "animation_" + e3;
            return new r.AnimationClip(l2, void 0, i4);
          });
        }, G.prototype.loadNode = function(e3) {
          this.json;
          var n3 = this.extensions, i4 = this.json.meshReferences, a3 = this.json.meshUses, o3 = this.json.nodes[e3];
          return this.getMultiDependencies(["mesh", "skin", "camera", "light"]).then(function(e4) {
            var s3;
            if (true === o3.isBone)
              s3 = new r.Bone();
            else if (void 0 !== o3.mesh) {
              var c4 = e4.meshes[o3.mesh];
              if (s3 = c4.clone(), true === c4.isGroup)
                for (var u2 = 0, l2 = c4.children.length; u2 < l2; u2++) {
                  var h2 = c4.children[u2];
                  h2.material && true === h2.material.isGLTFSpecularGlossinessMaterial && (s3.children[u2].onBeforeRender = h2.onBeforeRender);
                }
              else
                c4.material && true === c4.material.isGLTFSpecularGlossinessMaterial && (s3.onBeforeRender = c4.onBeforeRender);
              i4[o3.mesh] > 1 && (s3.name += "_instance_" + a3[o3.mesh]++);
            } else if (void 0 !== o3.camera)
              s3 = e4.cameras[o3.camera];
            else if (o3.extensions && o3.extensions[t2.KHR_LIGHTS] && void 0 !== o3.extensions[t2.KHR_LIGHTS].light) {
              s3 = n3[t2.KHR_LIGHTS].lights[o3.extensions[t2.KHR_LIGHTS].light];
            } else
              s3 = new r.Object3D();
            if (void 0 !== o3.name && (s3.name = r.PropertyBinding.sanitizeNodeName(o3.name)), o3.extras && (s3.userData = o3.extras), o3.extensions && O(n3, s3, o3), void 0 !== o3.matrix) {
              var d2 = new r.Matrix4();
              d2.fromArray(o3.matrix), s3.applyMatrix(d2);
            } else
              void 0 !== o3.translation && s3.position.fromArray(o3.translation), void 0 !== o3.rotation && s3.quaternion.fromArray(o3.rotation), void 0 !== o3.scale && s3.scale.fromArray(o3.scale);
            return s3;
          });
        }, G.prototype.loadScene = function() {
          function e3(t3, n3, i4, a3, o3) {
            var s3 = a3[t3], c4 = i4.nodes[t3];
            if (void 0 !== c4.skin)
              for (var u2 = true === s3.isGroup ? s3.children : [s3], l2 = 0, h2 = u2.length; l2 < h2; l2++) {
                for (var d2 = u2[l2], p2 = o3[c4.skin], f2 = [], m3 = [], g2 = 0, v2 = p2.joints.length; g2 < v2; g2++) {
                  var y2 = p2.joints[g2], x2 = a3[y2];
                  if (x2) {
                    f2.push(x2);
                    var b2 = new r.Matrix4();
                    void 0 !== p2.inverseBindMatrices && b2.fromArray(p2.inverseBindMatrices.array, 16 * g2), m3.push(b2);
                  } else
                    console.warn('THREE.GLTFLoader: Joint "%s" could not be found.', y2);
                }
                d2.bind(new r.Skeleton(f2, m3), d2.matrixWorld);
              }
            if (n3.add(s3), c4.children) {
              var w2 = c4.children;
              for (l2 = 0, h2 = w2.length; l2 < h2; l2++) {
                e3(w2[l2], s3, i4, a3, o3);
              }
            }
          }
          return function(n3) {
            var i4 = this.json, a3 = this.extensions, o3 = this.json.scenes[n3];
            return this.getMultiDependencies(["node", "skin"]).then(function(n4) {
              var s3 = new r.Scene();
              void 0 !== o3.name && (s3.name = o3.name), o3.extras && (s3.userData = o3.extras), o3.extensions && O(a3, s3, o3);
              for (var c4 = o3.nodes || [], u2 = 0, l2 = c4.length; u2 < l2; u2++)
                e3(c4[u2], s3, i4, n4.nodes, n4.skins);
              if (o3.extensions && o3.extensions[t2.KHR_LIGHTS] && void 0 !== o3.extensions[t2.KHR_LIGHTS].light) {
                var h2 = a3[t2.KHR_LIGHTS].lights;
                s3.add(h2[o3.extensions[t2.KHR_LIGHTS].light]);
              }
              return s3;
            });
          };
        }(), e2;
      }();
      var i2 = r.MTLLoader, a = r.OBJLoader, o = r.OrbitControls, s = r.ColladaLoader, c2 = r.GLTFLoader;
      t.OrbitControls = o, t.MTLLoader = i2, t.OBJLoader = a, t.ColladaLoader = s, t.GLTFLoader = c2;
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true }), t.default = function(e2, n2) {
        var r = { animate: true, name: "" };
        var i2 = [Object.assign(Object.create(r), { fuc: e2, name: n2 })];
        !function e3() {
          requestAnimationFrame(e3), i2.forEach(function(e4) {
            var t2 = e4.fuc, n3 = e4.animate;
            n3 && t2.call(e4, Date.now());
          });
        }();
        t.default = function(e3, t2) {
          var n3 = Object.assign(Object.create(r), { fuc: e3, name: t2 });
          return i2.push(n3), n3;
        };
        return i2[0];
      };
    }, function(e, t, n) {
      var r, i2, a, o, s = function() {
        function e2(e3, t2) {
          for (var n2 = 0; n2 < t2.length; n2++) {
            var r2 = t2[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
          }
        }
        return function(t2, n2, r2) {
          return n2 && e2(t2.prototype, n2), r2 && e2(t2, r2), t2;
        };
      }(), c2 = n(5), u = function(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }(c2), l = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = {};
        if (null != e2)
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
        return t2.default = e2, t2;
      }(n(0));
      function h(e2, t2) {
        if (!(e2 instanceof t2))
          throw new TypeError("Cannot call a class as a function");
      }
      function d(e2, t2) {
        if (!e2)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t2 || "object" != typeof t2 && "function" != typeof t2 ? e2 : t2;
      }
      function p(e2, t2) {
        if ("function" != typeof t2 && null !== t2)
          throw new TypeError("Super expression must either be null or a function, not " + typeof t2);
        e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, enumerable: false, writable: true, configurable: true } }), t2 && (Object.setPrototypeOf ? Object.setPrototypeOf(e2, t2) : e2.__proto__ = t2);
      }
      var f = (i2 = r = function(e2) {
        function t2() {
          return h(this, t2), d(this, (t2.__proto__ || Object.getPrototypeOf(t2)).apply(this, arguments));
        }
        return p(t2, c2.Component), s(t2, [{ key: "render", value: function() {
          return u.default.createElement(u.default.Fragment, null, " ");
        } }]), t2;
      }(), r.defaultProps = { color: "rgb(30,30,30)", __constructor: "ambientlight" }, i2), m2 = (o = a = function(e2) {
        function t2() {
          return h(this, t2), d(this, (t2.__proto__ || Object.getPrototypeOf(t2)).apply(this, arguments));
        }
        return p(t2, c2.Component), s(t2, [{ key: "render", value: function() {
          return u.default.createElement(u.default.Fragment, null, " ");
        } }]), t2;
      }(), a.defaultProps = { color: 16777215, __constructor: "directionligth", position: new l.Vector3(-30, 30, 30), castShadow: true }, o);
      e.exports = { AmbientLight: f, DirectionLight: m2 };
    }, function(e, t, n) {
      e.exports = n(12);
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true });
      var r, i2, a = function() {
        function e2(e3, t2) {
          for (var n2 = 0; n2 < t2.length; n2++) {
            var r2 = t2[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
          }
        }
        return function(t2, n2, r2) {
          return n2 && e2(t2.prototype, n2), r2 && e2(t2, r2), t2;
        };
      }(), o = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = {};
        if (null != e2)
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
        return t2.default = e2, t2;
      }(n(0)), s = (n(2), function(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }(n(1)));
      var c2 = (i2 = r = function(e2) {
        function t2(e3) {
          return function(e4, t3) {
            if (!(e4 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }(this, t2), function(e4, t3) {
            if (!e4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t3 || "object" != typeof t3 && "function" != typeof t3 ? e4 : t3;
          }(this, (t2.__proto__ || Object.getPrototypeOf(t2)).call(this, e3));
        }
        return function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t3);
          e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }), t3 && (Object.setPrototypeOf ? Object.setPrototypeOf(e3, t3) : e3.__proto__ = t3);
        }(t2, s.default), a(t2, [{ key: "load3dModel", value: function() {
          var e3 = this, t3 = this.props, n2 = t3.src;
          t3.texPath;
          if (!n2)
            return false;
          new o.GLTFLoader().load(n2, function(t4) {
            e3.obj3d = t4.scene;
            var n3 = {};
            if (t4.scene.traverse(function(e4) {
              e4 instanceof o.Camera && (n3.cameras || (n3.cameras = []), n3.cameras.push(e4)), e4 instanceof o.Light && (n3.lights || (n3.lights = []), n3.lights.push(e4));
            }), n3.cameras && n3.cameras.length)
              e3.camera = n3.cameras[0], e3.camera.position.copy(e3.camera.position.clone().add(new o.Vector3(0, 0, 0.01)));
            else {
              var r2 = e3.computeBoundingBox(t4.scene), i3 = r2.max, a2 = r2.max.z - r2.min.z;
              e3.camera.position.set(i3.x, i3.y, i3.z + 0.6 * a2);
            }
            n3.lights && n3.lights.length, e3.initControl(), e3.props.onLoad && e3.props.onLoad();
          }, function(t4) {
            e3.props.onProgress && e3.props.onProgress(t4);
          }, function() {
            console.log("An error happened");
          });
        } }]), t2;
      }(), r.defaultProps = Object.assign({}, s.default.defaultProps, { loader: "gltf" }), i2);
      t.default = c2;
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true });
      var r, i2, a = function() {
        function e2(e3, t2) {
          for (var n2 = 0; n2 < t2.length; n2++) {
            var r2 = t2[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
          }
        }
        return function(t2, n2, r2) {
          return n2 && e2(t2.prototype, n2), r2 && e2(t2, r2), t2;
        };
      }(), o = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = {};
        if (null != e2)
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
        return t2.default = e2, t2;
      }(n(0)), s = (n(2), function(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }(n(1)));
      var c2 = (i2 = r = function(e2) {
        function t2(e3) {
          return function(e4, t3) {
            if (!(e4 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }(this, t2), function(e4, t3) {
            if (!e4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t3 || "object" != typeof t3 && "function" != typeof t3 ? e4 : t3;
          }(this, (t2.__proto__ || Object.getPrototypeOf(t2)).call(this, e3));
        }
        return function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t3);
          e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }), t3 && (Object.setPrototypeOf ? Object.setPrototypeOf(e3, t3) : e3.__proto__ = t3);
        }(t2, s.default), a(t2, [{ key: "load3dModel", value: function() {
          var e3 = this, t3 = this.props, n2 = t3.src;
          t3.texPath;
          if (!n2)
            return false;
          new o.ColladaLoader().load(n2, function(t4) {
            e3.obj3d = t4.scene;
            var n3 = {};
            if (t4.scene.traverse(function(e4) {
              e4 instanceof o.Camera && (n3.cameras || (n3.cameras = []), n3.cameras.push(e4)), e4 instanceof o.Light && (n3.lights || (n3.lights = []), n3.lights.push(e4));
            }), n3.cameras && n3.cameras.length)
              e3.camera = n3.cameras[0], e3.camera.position.copy(e3.camera.position.clone().add(new o.Vector3(0, 0, 0.01)));
            else {
              var r2 = e3.computeBoundingBox(t4.scene), i3 = r2.max;
              r2.max.z, r2.min.z;
              e3.camera.position.set(i3.x, i3.y, i3.z);
            }
            n3.lights && n3.lights.length, e3.initControl(), e3.props.onLoad && e3.props.onLoad();
          }, function(t4) {
            e3.props.onProgress && e3.props.onProgress(t4);
          }, function() {
            console.log("An error happened");
          });
        } }]), t2;
      }(), r.defaultProps = Object.assign({}, s.default.defaultProps, { loader: "collada" }), i2);
      t.default = c2;
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true });
      var r, i2, a = function() {
        function e2(e3, t2) {
          for (var n2 = 0; n2 < t2.length; n2++) {
            var r2 = t2[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
          }
        }
        return function(t2, n2, r2) {
          return n2 && e2(t2.prototype, n2), r2 && e2(t2, r2), t2;
        };
      }(), o = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = {};
        if (null != e2)
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
        return t2.default = e2, t2;
      }(n(0)), s = (n(2), function(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }(n(1)));
      var c2 = (i2 = r = function(e2) {
        function t2(e3) {
          return function(e4, t3) {
            if (!(e4 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }(this, t2), function(e4, t3) {
            if (!e4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t3 || "object" != typeof t3 && "function" != typeof t3 ? e4 : t3;
          }(this, (t2.__proto__ || Object.getPrototypeOf(t2)).call(this, e3));
        }
        return function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t3);
          e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }), t3 && (Object.setPrototypeOf ? Object.setPrototypeOf(e3, t3) : e3.__proto__ = t3);
        }(t2, s.default), a(t2, [{ key: "load3dModel", value: function() {
          var e3 = this, t3 = this.props, n2 = t3.src, r2 = t3.mtl, i3 = t3.texPath;
          if (!n2 || !r2)
            return false;
          var a2 = new o.MTLLoader(), s2 = new o.OBJLoader();
          a2.setTexturePath(i3), a2.load(r2, function(t4) {
            t4.preload(), s2.setMaterials(t4).load(n2, function(t5) {
              var n3 = e3.computeBoundingBox(t5), r3 = n3.max, i4 = n3.max.z - n3.min.z;
              e3.camera.position.set(0, 0, r3.z + 1.5 * i4), e3.initControl(), e3.obj3d = t5, e3.props.onLoad && e3.props.onLoad();
            }, function(t5) {
              e3.props.onProgress && e3.props.onProgress(t5);
            });
          });
        } }]), t2;
      }(), r.defaultProps = Object.assign({}, s.default.defaultProps, { loader: "objmtl" }), i2);
      t.default = c2;
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true });
      var r, i2, a = function() {
        function e2(e3, t2) {
          for (var n2 = 0; n2 < t2.length; n2++) {
            var r2 = t2[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
          }
        }
        return function(t2, n2, r2) {
          return n2 && e2(t2.prototype, n2), r2 && e2(t2, r2), t2;
        };
      }(), o = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = {};
        if (null != e2)
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
        return t2.default = e2, t2;
      }(n(0)), s = (n(2), function(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }(n(1)));
      var c2 = (i2 = r = function(e2) {
        function t2(e3) {
          return function(e4, t3) {
            if (!(e4 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }(this, t2), function(e4, t3) {
            if (!e4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t3 || "object" != typeof t3 && "function" != typeof t3 ? e4 : t3;
          }(this, (t2.__proto__ || Object.getPrototypeOf(t2)).call(this, e3));
        }
        return function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t3);
          e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }), t3 && (Object.setPrototypeOf ? Object.setPrototypeOf(e3, t3) : e3.__proto__ = t3);
        }(t2, s.default), a(t2, [{ key: "load3dModel", value: function() {
          var e3 = this, t3 = this.props, n2 = t3.src;
          t3.texPath;
          if (!n2)
            return false;
          new o.OBJLoader().load(n2, function(t4) {
            var n3 = e3.computeBoundingBox(t4), r2 = n3.max, i3 = n3.max.z - n3.min.z;
            e3.camera.position.set(0, 0, r2.z + 1.5 * i3), e3.initControl(), e3.obj3d = t4, e3.props.onLoad && e3.props.onLoad();
          }, function(t4) {
            e3.props.onProgress && e3.props.onProgress(t4);
          });
        } }]), t2;
      }(), r.defaultProps = Object.assign({}, s.default.defaultProps, { loader: "obj" }), i2);
      t.default = c2;
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true });
      var r, i2, a = function() {
        function e2(e3, t2) {
          for (var n2 = 0; n2 < t2.length; n2++) {
            var r2 = t2[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
          }
        }
        return function(t2, n2, r2) {
          return n2 && e2(t2.prototype, n2), r2 && e2(t2, r2), t2;
        };
      }(), o = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        var t2 = {};
        if (null != e2)
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && (t2[n2] = e2[n2]);
        return t2.default = e2, t2;
      }(n(0)), s = (n(2), function(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }(n(1)));
      var c2 = (i2 = r = function(e2) {
        function t2(e3) {
          return function(e4, t3) {
            if (!(e4 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }(this, t2), function(e4, t3) {
            if (!e4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t3 || "object" != typeof t3 && "function" != typeof t3 ? e4 : t3;
          }(this, (t2.__proto__ || Object.getPrototypeOf(t2)).call(this, e3));
        }
        return function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t3);
          e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }), t3 && (Object.setPrototypeOf ? Object.setPrototypeOf(e3, t3) : e3.__proto__ = t3);
        }(t2, s.default), a(t2, [{ key: "load3dModel", value: function() {
          var e3 = this, t3 = this.props, n2 = t3.src, r2 = t3.onProgress, i3 = t3.onLoad, a2 = t3.texPath, s2 = new o.JSONLoader();
          s2.setTexturePath(a2), s2.load(n2, function(t4, n3) {
            var r3 = new o.Mesh(t4, n3);
            t4.computeBoundingBox();
            var a3 = t4.boundingSphere, s3 = a3.center, c3 = a3.radius, u = s3.clone().multiplyScalar(-1);
            r3.geometry.applyMatrix(new o.Matrix4().makeTranslation(u.x, u.y, u.z));
            var l = e3.computeBoundingBox(r3).max;
            e3.camera.position.set(l.x, l.y, l.z), e3.camera.position.copy(u.clone().add(new o.Vector3(0, 0, 1.666 * c3))), e3.initControl(), e3.obj3d = r3, i3 && i3();
          }, function(e4) {
            r2 && r2(e4);
          });
        } }]), t2;
      }(), r.defaultProps = Object.assign({}, s.default.defaultProps, { loader: "json" }), i2);
      t.default = c2;
    }, function(e, t, n) {
      /*
      object-assign
      (c) Sindre Sorhus
      @license MIT
      */
      var r = Object.getOwnPropertySymbols, i2 = Object.prototype.hasOwnProperty, a = Object.prototype.propertyIsEnumerable;
      e.exports = function() {
        try {
          if (!Object.assign)
            return false;
          var e2 = new String("abc");
          if (e2[5] = "de", "5" === Object.getOwnPropertyNames(e2)[0])
            return false;
          for (var t2 = {}, n2 = 0; n2 < 10; n2++)
            t2["_" + String.fromCharCode(n2)] = n2;
          if ("0123456789" !== Object.getOwnPropertyNames(t2).map(function(e3) {
            return t2[e3];
          }).join(""))
            return false;
          var r2 = {};
          return "abcdefghijklmnopqrst".split("").forEach(function(e3) {
            r2[e3] = e3;
          }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, r2)).join("");
        } catch (e3) {
          return false;
        }
      }() ? Object.assign : function(e2, t2) {
        for (var n2, o, s = function(e3) {
          if (null === e3 || void 0 === e3)
            throw new TypeError("Object.assign cannot be called with null or undefined");
          return Object(e3);
        }(e2), c2 = 1; c2 < arguments.length; c2++) {
          for (var u in n2 = Object(arguments[c2]))
            i2.call(n2, u) && (s[u] = n2[u]);
          if (r) {
            o = r(n2);
            for (var l = 0; l < o.length; l++)
              a.call(n2, o[l]) && (s[o[l]] = n2[o[l]]);
          }
        }
        return s;
      };
    }, function(e, t, n) {
      /** @license React v16.7.0
      * react.production.min.js
      *
      * Copyright (c) Facebook, Inc. and its affiliates.
      *
      * This source code is licensed under the MIT license found in the
      * LICENSE file in the root directory of this source tree.
      */
      var r = n(11), i2 = "function" == typeof Symbol && Symbol.for, a = i2 ? Symbol.for("react.element") : 60103, o = i2 ? Symbol.for("react.portal") : 60106, s = i2 ? Symbol.for("react.fragment") : 60107, c2 = i2 ? Symbol.for("react.strict_mode") : 60108, u = i2 ? Symbol.for("react.profiler") : 60114, l = i2 ? Symbol.for("react.provider") : 60109, h = i2 ? Symbol.for("react.context") : 60110, d = i2 ? Symbol.for("react.concurrent_mode") : 60111, p = i2 ? Symbol.for("react.forward_ref") : 60112, f = i2 ? Symbol.for("react.suspense") : 60113, m2 = i2 ? Symbol.for("react.memo") : 60115, g = i2 ? Symbol.for("react.lazy") : 60116, v = "function" == typeof Symbol && Symbol.iterator;
      function y(e2) {
        for (var t2 = arguments.length - 1, n2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + e2, r2 = 0; r2 < t2; r2++)
          n2 += "&args[]=" + encodeURIComponent(arguments[r2 + 1]);
        !function(e3, t3, n3, r3, i3, a2, o2, s2) {
          if (!e3) {
            if (e3 = void 0, void 0 === t3)
              e3 = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
            else {
              var c3 = [n3, r3, i3, a2, o2, s2], u2 = 0;
              (e3 = Error(t3.replace(/%s/g, function() {
                return c3[u2++];
              }))).name = "Invariant Violation";
            }
            throw e3.framesToPop = 1, e3;
          }
        }(false, "Minified React error #" + e2 + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", n2);
      }
      var x = { isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      } }, b = {};
      function w(e2, t2, n2) {
        this.props = e2, this.context = t2, this.refs = b, this.updater = n2 || x;
      }
      function _() {
      }
      function M(e2, t2, n2) {
        this.props = e2, this.context = t2, this.refs = b, this.updater = n2 || x;
      }
      w.prototype.isReactComponent = {}, w.prototype.setState = function(e2, t2) {
        "object" != typeof e2 && "function" != typeof e2 && null != e2 && y("85"), this.updater.enqueueSetState(this, e2, t2, "setState");
      }, w.prototype.forceUpdate = function(e2) {
        this.updater.enqueueForceUpdate(this, e2, "forceUpdate");
      }, _.prototype = w.prototype;
      var E = M.prototype = new _();
      E.constructor = M, r(E, w.prototype), E.isPureReactComponent = true;
      var T = { current: null, currentDispatcher: null }, S = Object.prototype.hasOwnProperty, A = { key: true, ref: true, __self: true, __source: true };
      function L(e2, t2, n2) {
        var r2 = void 0, i3 = {}, o2 = null, s2 = null;
        if (null != t2)
          for (r2 in void 0 !== t2.ref && (s2 = t2.ref), void 0 !== t2.key && (o2 = "" + t2.key), t2)
            S.call(t2, r2) && !A.hasOwnProperty(r2) && (i3[r2] = t2[r2]);
        var c3 = arguments.length - 2;
        if (1 === c3)
          i3.children = n2;
        else if (1 < c3) {
          for (var u2 = Array(c3), l2 = 0; l2 < c3; l2++)
            u2[l2] = arguments[l2 + 2];
          i3.children = u2;
        }
        if (e2 && e2.defaultProps)
          for (r2 in c3 = e2.defaultProps)
            void 0 === i3[r2] && (i3[r2] = c3[r2]);
        return { $$typeof: a, type: e2, key: o2, ref: s2, props: i3, _owner: T.current };
      }
      function R(e2) {
        return "object" == typeof e2 && null !== e2 && e2.$$typeof === a;
      }
      var C = /\/+/g, P = [];
      function O(e2, t2, n2, r2) {
        if (P.length) {
          var i3 = P.pop();
          return i3.result = e2, i3.keyPrefix = t2, i3.func = n2, i3.context = r2, i3.count = 0, i3;
        }
        return { result: e2, keyPrefix: t2, func: n2, context: r2, count: 0 };
      }
      function N(e2) {
        e2.result = null, e2.keyPrefix = null, e2.func = null, e2.context = null, e2.count = 0, 10 > P.length && P.push(e2);
      }
      function I(e2, t2, n2) {
        return null == e2 ? 0 : function e3(t3, n3, r2, i3) {
          var s2 = typeof t3;
          "undefined" !== s2 && "boolean" !== s2 || (t3 = null);
          var c3 = false;
          if (null === t3)
            c3 = true;
          else
            switch (s2) {
              case "string":
              case "number":
                c3 = true;
                break;
              case "object":
                switch (t3.$$typeof) {
                  case a:
                  case o:
                    c3 = true;
                }
            }
          if (c3)
            return r2(i3, t3, "" === n3 ? "." + D(t3, 0) : n3), 1;
          if (c3 = 0, n3 = "" === n3 ? "." : n3 + ":", Array.isArray(t3))
            for (var u2 = 0; u2 < t3.length; u2++) {
              var l2 = n3 + D(s2 = t3[u2], u2);
              c3 += e3(s2, l2, r2, i3);
            }
          else if (l2 = null === t3 || "object" != typeof t3 ? null : "function" == typeof (l2 = v && t3[v] || t3["@@iterator"]) ? l2 : null, "function" == typeof l2)
            for (t3 = l2.call(t3), u2 = 0; !(s2 = t3.next()).done; )
              c3 += e3(s2 = s2.value, l2 = n3 + D(s2, u2++), r2, i3);
          else
            "object" === s2 && y("31", "[object Object]" == (r2 = "" + t3) ? "object with keys {" + Object.keys(t3).join(", ") + "}" : r2, "");
          return c3;
        }(e2, "", t2, n2);
      }
      function D(e2, t2) {
        return "object" == typeof e2 && null !== e2 && null != e2.key ? function(e3) {
          var t3 = { "=": "=0", ":": "=2" };
          return "$" + ("" + e3).replace(/[=:]/g, function(e4) {
            return t3[e4];
          });
        }(e2.key) : t2.toString(36);
      }
      function U(e2, t2) {
        e2.func.call(e2.context, t2, e2.count++);
      }
      function B(e2, t2, n2) {
        var r2 = e2.result, i3 = e2.keyPrefix;
        e2 = e2.func.call(e2.context, t2, e2.count++), Array.isArray(e2) ? F(e2, r2, n2, function(e3) {
          return e3;
        }) : null != e2 && (R(e2) && (e2 = function(e3, t3) {
          return { $$typeof: a, type: e3.type, key: t3, ref: e3.ref, props: e3.props, _owner: e3._owner };
        }(e2, i3 + (!e2.key || t2 && t2.key === e2.key ? "" : ("" + e2.key).replace(C, "$&/") + "/") + n2)), r2.push(e2));
      }
      function F(e2, t2, n2, r2, i3) {
        var a2 = "";
        null != n2 && (a2 = ("" + n2).replace(C, "$&/") + "/"), I(e2, B, t2 = O(t2, a2, r2, i3)), N(t2);
      }
      var G = { Children: { map: function(e2, t2, n2) {
        if (null == e2)
          return e2;
        var r2 = [];
        return F(e2, r2, null, t2, n2), r2;
      }, forEach: function(e2, t2, n2) {
        if (null == e2)
          return e2;
        I(e2, U, t2 = O(null, null, t2, n2)), N(t2);
      }, count: function(e2) {
        return I(e2, function() {
          return null;
        }, null);
      }, toArray: function(e2) {
        var t2 = [];
        return F(e2, t2, null, function(e3) {
          return e3;
        }), t2;
      }, only: function(e2) {
        return R(e2) || y("143"), e2;
      } }, createRef: function() {
        return { current: null };
      }, Component: w, PureComponent: M, createContext: function(e2, t2) {
        return void 0 === t2 && (t2 = null), (e2 = { $$typeof: h, _calculateChangedBits: t2, _currentValue: e2, _currentValue2: e2, _threadCount: 0, Provider: null, Consumer: null }).Provider = { $$typeof: l, _context: e2 }, e2.Consumer = e2;
      }, forwardRef: function(e2) {
        return { $$typeof: p, render: e2 };
      }, lazy: function(e2) {
        return { $$typeof: g, _ctor: e2, _status: -1, _result: null };
      }, memo: function(e2, t2) {
        return { $$typeof: m2, type: e2, compare: void 0 === t2 ? null : t2 };
      }, Fragment: s, StrictMode: c2, Suspense: f, createElement: L, cloneElement: function(e2, t2, n2) {
        (null === e2 || void 0 === e2) && y("267", e2);
        var i3 = void 0, o2 = r({}, e2.props), s2 = e2.key, c3 = e2.ref, u2 = e2._owner;
        if (null != t2) {
          void 0 !== t2.ref && (c3 = t2.ref, u2 = T.current), void 0 !== t2.key && (s2 = "" + t2.key);
          var l2 = void 0;
          for (i3 in e2.type && e2.type.defaultProps && (l2 = e2.type.defaultProps), t2)
            S.call(t2, i3) && !A.hasOwnProperty(i3) && (o2[i3] = void 0 === t2[i3] && void 0 !== l2 ? l2[i3] : t2[i3]);
        }
        if (1 === (i3 = arguments.length - 2))
          o2.children = n2;
        else if (1 < i3) {
          l2 = Array(i3);
          for (var h2 = 0; h2 < i3; h2++)
            l2[h2] = arguments[h2 + 2];
          o2.children = l2;
        }
        return { $$typeof: a, type: e2.type, key: s2, ref: c3, props: o2, _owner: u2 };
      }, createFactory: function(e2) {
        var t2 = L.bind(null, e2);
        return t2.type = e2, t2;
      }, isValidElement: R, version: "16.7.0", unstable_ConcurrentMode: d, unstable_Profiler: u, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: T, assign: r } }, z = { default: G }, H = z && G || z;
      e.exports = H.default || H;
    }, function(e, t, n) {
      Object.defineProperty(t, "__esModule", { value: true });
      var r = n(1);
      Object.defineProperty(t, "Model", { enumerable: true, get: function() {
        return h(r).default;
      } });
      var i2 = n(10);
      Object.defineProperty(t, "JSONModel", { enumerable: true, get: function() {
        return h(i2).default;
      } });
      var a = n(9);
      Object.defineProperty(t, "OBJModel", { enumerable: true, get: function() {
        return h(a).default;
      } });
      var o = n(8);
      Object.defineProperty(t, "MTLModel", { enumerable: true, get: function() {
        return h(o).default;
      } });
      var s = n(7);
      Object.defineProperty(t, "DAEModel", { enumerable: true, get: function() {
        return h(s).default;
      } });
      var c2 = n(6);
      Object.defineProperty(t, "GLTFModel", { enumerable: true, get: function() {
        return h(c2).default;
      } });
      var u = n(3);
      Object.defineProperty(t, "Tick", { enumerable: true, get: function() {
        return h(u).default;
      } });
      var l = n(4);
      function h(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      Object.defineProperty(t, "DirectionLight", { enumerable: true, get: function() {
        return l.DirectionLight;
      } }), Object.defineProperty(t, "AmbientLight", { enumerable: true, get: function() {
        return l.AmbientLight;
      } });
    }]);
  });
})(react3dViewer);
const PresentationalBagItem = ({
  isDragging,
  item,
  setSelItem
}) => {
  const modelRef = React.useRef(null);
  const handleClick = (event) => {
    switch (event.detail) {
      case 1:
        if (window && window.openInWebaverse) {
          window.openInWebaverse(item);
        } else {
          setSelItem(item);
        }
        break;
      case 2:
        console.log("handling double click");
        break;
      case 3:
        console.log("handling triple click");
        break;
      default:
        console.log("handling default click");
        break;
    }
  };
  React.useEffect(() => {
    const interval = setInterval(() => {
      const refContainer = modelRef && modelRef.current && modelRef.current.$container;
      if (refContainer && refContainer.children && refContainer.children.length > 1) {
        refContainer.removeChild(refContainer.firstChild);
      }
    }, 1);
    return () => {
      clearInterval(interval);
    };
  }, []);
  return item && /* @__PURE__ */ jsxs("div", {
    style: {
      width: "100%",
      height: "100%",
      border: "0 !important",
      opacity: isDragging ? 0 : 1,
      cursor: "grab",
      img: {
        maxWidth: "100%"
      },
      video: {
        maxWidth: "100%"
      }
    },
    onClick: handleClick,
    children: [isImage(item == null ? void 0 : item.url) && /* @__PURE__ */ jsx("span", {
      onClick: handleClick,
      children: /* @__PURE__ */ jsx("img", {
        crossOrigin: "anonymous",
        referrerPolicy: "no-referer-on-downgrade",
        style: {},
        src: item.url,
        onClick: handleClick
      })
    }), isMedia(item == null ? void 0 : item.url) && /* @__PURE__ */ jsx("span", {
      onClick: handleClick,
      children: /* @__PURE__ */ jsx("video", {
        crossOrigin: "anonymous",
        referrerPolicy: "no-referer-on-downgrade",
        style: {},
        src: item.url,
        autoPlay: true,
        loop: true,
        muted: true
      })
    }), isModel(item == null ? void 0 : item.url) && /* @__PURE__ */ jsx(react3dViewer.exports.GLTFModel, {
      ref: modelRef,
      width: 38,
      height: 38,
      src: item.url,
      enabled: false,
      position: {
        x: -0.15,
        y: -0.3,
        z: -0.3
      },
      onClick: handleClick
    })]
  });
};
const BagItem = ({
  item,
  isForTrade,
  index: index2,
  tradeBoxes,
  setTradeBoxes,
  tradeLayer,
  plugActor,
  tradeData,
  setSelItem,
  setLoading,
  setMessage,
  isConfirmedItem
}) => {
  const ref = React.useRef(null);
  if (!item)
    item = {};
  item.isForTrade = isForTrade;
  const [{
    handlerId
  }, drop] = useDrop({
    accept: itemTypes.LAYER1,
    candrop(dragItem, monitor) {
      const flag = tradeLayer !== "remote";
      return flag;
    },
    collect(monitor) {
      return {
        handlerId: monitor.getHandlerId()
      };
    },
    drop(dragEl, monitor) {
      if (dragEl.index === index2 && dragEl.tradeLayer === tradeLayer || tradeLayer === "remote")
        return;
      const dragIndex = dragEl.index;
      const hoverIndex = index2;
      const cloneDragTradeItem = clone(dragEl.item);
      cloneDragTradeItem.slot = hoverIndex;
      const cloneDragTradeBoxes = clone(dragEl.tradeBoxes);
      const cloneHoverTradeItem = clone(item);
      cloneHoverTradeItem.slot = dragIndex;
      const cloneHoverTradeBoxes = clone(tradeBoxes);
      console.log("cloneDragTradeItem: ", cloneDragTradeItem);
      console.log("cloneDragTradeItem canister: ", Principal.fromText(cloneDragTradeItem.canister_id));
      if (dragEl.tradeLayer === "inventory" && tradeLayer === "local") {
        (async () => {
          setLoading(true);
          const canisterItem = {
            token_id: parseInt(cloneDragTradeItem.token_id),
            name: cloneDragTradeItem.name,
            canister_id: Principal.fromText(cloneDragTradeItem.canister_id)
          };
          const res = await plugActor.add_item_to_trade(tradeData.id, canisterItem);
          console.log("add_item_to_trade res: ", res);
          setLoading(false);
        })();
      }
      if (dragEl.tradeLayer === "local" && tradeLayer === "inventory") {
        if (isConfirmedItem(cloneDragTradeItem.token_id)) {
          setMessage("This item is confirmed.");
          return;
        }
        (async () => {
          setLoading(true);
          const res = await plugActor.remove_item_from_trade(tradeData.id, {
            token_id: parseInt(cloneDragTradeItem.token_id),
            name: cloneDragTradeItem.name,
            canister_id: Principal.fromText(cloneDragTradeItem.canister_id)
          });
          console.log("remove_item_from_trade res: ", res);
          setLoading(false);
        })();
      }
      if (tradeLayer === dragEl.tradeLayer) {
        cloneHoverTradeBoxes[dragIndex].item = cloneHoverTradeItem;
        cloneHoverTradeBoxes[hoverIndex].item = cloneDragTradeItem;
        setTradeBoxes(cloneHoverTradeBoxes);
      } else {
        cloneDragTradeBoxes[dragIndex].item = cloneHoverTradeItem;
        cloneHoverTradeBoxes[hoverIndex].item = cloneDragTradeItem;
        dragEl.setTradeBoxes(cloneDragTradeBoxes);
        setTradeBoxes(cloneHoverTradeBoxes);
      }
      dragEl.index = hoverIndex;
      dragEl.tradeLayer = tradeLayer;
    }
  });
  const [{
    isDragging
  }, drag] = useDrag({
    type: itemTypes.LAYER1,
    canDrag: !!item.canister_id && tradeLayer !== "remote",
    item: () => {
      return {
        index: index2,
        tradeBoxes,
        setTradeBoxes,
        item,
        tradeLayer
      };
    },
    collect: (monitor) => ({
      isDragging: monitor.isDragging()
    })
  });
  const opacity = isDragging ? 0 : 1;
  drag(drop(ref));
  return /* @__PURE__ */ jsx("div", {
    style: {
      opacity,
      display: "inline"
    },
    ref,
    "data-handler-id": handlerId,
    children: /* @__PURE__ */ jsx(PresentationalBagItem, {
      isDragging,
      item,
      setSelItem
    })
  });
};
const Logo = "/assets/Logo.f0aa0903.svg";
const Console = "/assets/Console.2c970bc2.svg";
const Inventory = "/assets/Inventory.6da7817c.svg";
const Trade$1 = "/assets/Trade.b1e1e6f5.svg";
const Header = ({
  type,
  connected,
  mode = "inventory",
  setMode
}) => {
  return /* @__PURE__ */ jsxs("div", {
    style: {
      width: "100%",
      height: "4em"
    },
    children: [/* @__PURE__ */ jsx("img", {
      src: type === "webaverse" ? Logo : Console,
      style: {
        position: "absolute",
        left: "50%",
        top: "1em",
        transform: "translate(-50%, 0)"
      }
    }), connected && /* @__PURE__ */ jsx("button", {
      style: {
        position: "absolute",
        opacity: mode === "inventory" ? 1 : 0.5,
        left: "1em",
        top: "1em"
      },
      onClick: () => setMode("inventory"),
      children: /* @__PURE__ */ jsx("img", {
        src: Inventory
      })
    }), connected && /* @__PURE__ */ jsx("button", {
      style: {
        position: "absolute",
        opacity: mode === "trade" ? 1 : 0.5,
        right: "1em",
        top: "1em"
      },
      onClick: () => setMode("trade"),
      children: /* @__PURE__ */ jsx("img", {
        src: Trade$1
      })
    })]
  });
};
const ICBanner = "/assets/ICBanner.81b7cef8.svg";
const Footer = ({
  showPagination,
  mode,
  loading = false,
  curPage = 1,
  setCurPage
}) => {
  const pageNum = Math.ceil(inventoryBoxNum / (mode === "trade" ? tradePageBoxNum : pageBoxNum));
  const onPrevPage = () => {
    if (curPage <= 1)
      return;
    setCurPage(curPage - 1);
  };
  const onNextPage = () => {
    if (curPage >= pageNum)
      return;
    setCurPage(curPage + 1);
  };
  return /* @__PURE__ */ jsxs("div", {
    style: {
      position: "absolute",
      width: "100%",
      bottom: 0
    },
    children: [/* @__PURE__ */ jsx("div", {
      style: {
        position: "absolute",
        left: "50%",
        bottom: "1em",
        transform: "translate(-50%, 0)"
      },
      children: /* @__PURE__ */ jsx("img", {
        src: ICBanner
      })
    }), /* @__PURE__ */ jsx("div", {
      style: {
        position: "absolute",
        right: ".5em",
        bottom: ".5em"
      },
      children: /* @__PURE__ */ jsx("span", {
        style: {
          color: "yellow",
          zIndex: 1
        },
        children: loading ? "Loading..." : ""
      })
    }), showPagination && /* @__PURE__ */ jsxs("div", {
      style: {
        position: "absolute",
        left: ".5em",
        bottom: ".5em"
      },
      children: [/* @__PURE__ */ jsx("button", {
        style: {
          opacity: curPage <= 1 ? 0.5 : 1
        },
        onClick: () => onPrevPage(),
        children: "<"
      }), /* @__PURE__ */ jsx("span", {
        children: curPage
      }), /* @__PURE__ */ jsx("button", {
        style: {
          opacity: curPage >= pageNum ? 0.5 : 1
        },
        onClick: () => onNextPage(),
        children: ">"
      })]
    })]
  });
};
const {
  ic
} = window;
const {
  plug
} = ic;
const canisterId = "pjl2v-yiaaa-aaaao-aeksq-cai";
const whitelist = [canisterId, "6hgw2-nyaaa-aaaai-abkqq-cai"];
const host = "https://mainnet.dfinity.network";
const timeout = 5e4;
let partnerTokens = {};
let prevTrade = {};
let forceStopTrade = false;
const url = new URL(window.location.href);
let tradeId = url.searchParams.get("tradeId");
const Trade = ({
  type
}) => {
  const initRemoteBoxes = [...Array(tradeBoxNum).keys()].map((i2) => {
    return {
      id: i2,
      item: null
    };
  });
  const initLocalBoxes = [...Array(tradeBoxNum).keys()].map((i2) => {
    return {
      id: i2,
      item: null
    };
  });
  const initInventoryBoxes = [...Array(inventoryBoxNum).keys()].map((i2) => {
    return {
      id: i2,
      item: null
    };
  });
  const [plugActor, setPlugActor] = react.exports.useState(null);
  const [connected, setConnected] = react.exports.useState(false);
  const [tradeData, setTradeData] = react.exports.useState(null);
  const [isCreator, setIsCreator] = react.exports.useState(false);
  const [partnerId, setPartnerId] = react.exports.useState(null);
  const [remoteBoxes, setRemoteBoxes] = react.exports.useState(clone(initRemoteBoxes));
  const [localBoxes, setLocalBoxes] = react.exports.useState(clone(initLocalBoxes));
  const [inventoryTokens, setInventoryTokens] = react.exports.useState({});
  const [inventoryBoxes, setInventoryBoxes] = react.exports.useState(initInventoryBoxes);
  const [accepted, setAccepted] = react.exports.useState(false);
  const [loading, setLoading] = react.exports.useState(false);
  const [mode, setMode] = react.exports.useState("inventory");
  const [selItem, setSelItem] = react.exports.useState(null);
  const [curPage, setCurPage] = react.exports.useState(1);
  const [alertMessage, setAlertMessage] = react.exports.useState("");
  const [message, setMessage] = react.exports.useState("");
  let localLoginAttempted = false;
  const localTradeId = tradeData ? tradeData.id : tradeId || localStorage.getItem("storageTradeId");
  react.exports.useEffect(() => {
    (async () => {
      await waitLoading();
      if (type !== "webaverse" || connected || localLoginAttempted)
        return;
      localLoginAttempted = true;
      onConnect();
    })();
  }, []);
  react.exports.useEffect(() => {
    (async () => {
      await waitLoading();
      console.log("connected: ", connected, plug);
      if (!connected || !plug.agent || !plug.principalId)
        return;
      setLoading(true);
      const newTokens = await getUserTokens({
        agent: plug.agent,
        user: plug.principalId
      });
      setInventoryBoxes(getInventoryBoxes(newTokens));
      setInventoryTokens(clone(newTokens));
      if (localTradeId) {
        const trade = await onStartTrade();
        if (trade && Object.keys(newTokens).length) {
          const hostId = getPrincipalId(trade.host);
          const guestId = getPrincipalId(trade.guest);
          let ltts;
          if (hostId === plug.principalId) {
            ltts = canisterItemsToTokens(trade.host_items, newTokens);
          } else {
            if (guestId === plug.principalId) {
              ltts = canisterItemsToTokens(trade.guest_items, newTokens);
            }
          }
          if (ltts) {
            const its = Object.values(newTokens).filter((token2) => !ltts[token2.token_id]);
            const ibs = getInventoryBoxes(its);
            setInventoryBoxes(ibs);
            const lbs = getLocalBoxes(ltts);
            setLocalBoxes(lbs);
          }
        }
      }
      setLoading(false);
    })();
  }, [connected]);
  react.exports.useEffect(() => {
    (async () => {
      if (forceStopTrade) {
        forceStopTrade = false;
        setTradeData(null);
        return;
      }
      if (!tradeData || !plugActor || !plug.principalId)
        return;
      setLoading(true);
      const hostId = getPrincipalId(tradeData.host);
      const guestId = getPrincipalId(tradeData.guest);
      const prevGuestId = getPrincipalId(prevTrade.guest);
      if (isCreator && prevGuestId && !guestId) {
        setPartnerId(null);
        setAlertMessage("The guest left the trade");
      }
      if (!isCreator && guestId && guestId !== plug.principalId) {
        setAlertMessage("Trade already initialized to another wallet");
        return;
      }
      if (isCreator && guestId && guestId !== partnerId) {
        console.log("trade partner found(guestId): ", guestId);
        setPartnerId(guestId);
      }
      if (!isCreator && hostId && hostId !== partnerId) {
        console.log("trade partner found(hostId): ", hostId);
        setPartnerId(hostId);
      }
      const partnerTokenLen = Object.keys(partnerTokens).length;
      if (tradeData && (isCreator && tradeData.guest_items.length || !isCreator && tradeData.host_items.length) && !partnerTokenLen && partnerId) {
        partnerTokens = await getUserTokens({
          agent: plug.agent,
          user: partnerId
        });
        console.log("partnerTokens: ", partnerTokens);
      }
      const rtts = isCreator ? canisterItemsToTokens(tradeData.guest_items, partnerTokens) : canisterItemsToTokens(tradeData.host_items, partnerTokens);
      const rbs = getRemoteBoxes(rtts);
      setRemoteBoxes(rbs);
      if (hostId && guestId && tradeData.host_items.length && tradeData.host_items.length !== tradeData.host_escrow_items.length && tradeData.guest_items.length && tradeData.guest_items.length !== tradeData.guest_escrow_items.length && tradeData.host_accept && tradeData.guest_accept) {
        console.log("Sending NFTs...");
        const canisterItems = isCreator ? tradeData.host_items : tradeData.guest_items;
        const canisterEscrowItems = isCreator ? tradeData.host_escrow_items : tradeData.guest_escrow_items;
        const canisterAddableItems = getMismatchedItems(canisterItems, canisterEscrowItems);
        console.log("canisterAddableItems: ", canisterAddableItems);
        for (let i2 = 0; i2 < canisterAddableItems.length; i2++) {
          const canisterAddableItem = canisterAddableItems[i2];
          inventoryTokens[canisterAddableItem.token_id];
          try {
            await plugActor.add_item_to_escrow(tradeData.id, canisterAddableItem);
          } catch (e) {
            console.log("NFT is non-existent: ", e);
            await onCancel();
          }
        }
      }
      if (tradeData.host_accept && tradeData.guest_accept && tradeData.host_items.length && tradeData.host_escrow_items.length === tradeData.host_items.length && tradeData.guest_items.length && tradeData.guest_escrow_items.length === tradeData.guest_items.length) {
        await onCancelTrade();
        setAlertMessage("Trade completed!");
      }
      prevTrade = clone(tradeData);
      setLoading(false);
      setTimeout(async () => {
        try {
          const trade = await plugActor.get_trade_by_id(tradeData.id);
          if (!deepEqual(trade, tradeData))
            console.log("trade: ", trade);
          setTradeData(trade);
        } catch (e) {
          console.log("get_trade_by_id error: ", e);
          await onCancelTrade();
          if (!alertMessage) {
            if (isCreator)
              ;
            else {
              setAlertMessage("The host left the trade");
            }
          }
        }
      }, 1e3);
    })();
  }, [tradeData]);
  react.exports.useEffect(() => {
    console.log("inventoryTokens: ", inventoryTokens);
    const cloneInventoryBoxes = clone(inventoryBoxes);
    cloneInventoryBoxes.forEach((box) => {
      var _a;
      ((_a = box.item) == null ? void 0 : _a.token_id) && (box.item = inventoryTokens[box.item.token_id]);
    });
    console.log("cloneInventoryBoxes: ", cloneInventoryBoxes);
    setInventoryBoxes(cloneInventoryBoxes);
    const cloneLocalBoxes = clone(localBoxes);
    cloneLocalBoxes.forEach((box) => {
      var _a;
      ((_a = box.item) == null ? void 0 : _a.token_id) && (box.item = inventoryTokens[box.item.token_id]);
    });
    console.log("cloneLocalBoxes: ", cloneLocalBoxes);
    setLocalBoxes(cloneLocalBoxes);
  }, [inventoryTokens]);
  const onConnect = async () => {
    (async () => {
      await waitLoading();
      setLoading(true);
      let publicKey;
      try {
        publicKey = await plug.requestConnect({
          whitelist,
          host,
          timeout,
          onConnectionUpdate: () => {
            console.log("sessionData: ", plug.sessionManager.sessionData);
          }
        });
      } catch (e) {
        setMessage("");
        setLoading(false);
        setAlertMessage("Connection failed");
        return;
      }
      if (publicKey) {
        console.log("publicKey: ", publicKey);
        const tempPlugActor = await plug.createActor({
          canisterId,
          interfaceFactory: idlFactory,
          agent: plug.agent
        });
        console.log("tempPlugActor: ", tempPlugActor);
        setPlugActor(tempPlugActor);
      } else {
        setMessage("");
        setLoading(false);
        setAlertMessage("Connection failed");
        return;
      }
      console.log("plug: ", plug);
      setLoading(false);
      setMessage("");
      setConnected(true);
    })();
  };
  const onStartTrade = async () => {
    if (!plugActor || !plug.principalId)
      return;
    setLoading(true);
    let trade;
    if (localTradeId) {
      console.log("localTradeId: ", localTradeId);
      try {
        trade = await plugActor.get_trade_by_id(localTradeId);
      } catch (e) {
        console.log("get_trade_by_id error: ", e);
        await onCancelTrade();
        if (!alertMessage) {
          if (isCreator)
            ;
          else {
            setAlertMessage("The host left the trade");
          }
        }
        return;
      }
    }
    if (!trade) {
      trade = await plugActor.create_trade();
    }
    localStorage.setItem("storageTradeId", trade.id);
    const hostId = getPrincipalId(trade.host);
    const guestId = getPrincipalId(trade.guest);
    if (hostId === plug.principalId) {
      setIsCreator(true);
    } else {
      if (!guestId || guestId !== plug.principalId) {
        trade = await plugActor.join_trade(trade.id);
      }
      if (getPrincipalId(trade.guest) === plug.principalId) {
        setIsCreator(false);
      } else {
        setMessage("Trading is incorrect");
        setLoading(false);
        return;
      }
    }
    console.log("trade: ", trade);
    setTradeData(trade);
    setLoading(false);
    return trade;
  };
  const onCancelTrade = async () => {
    setLoading(true);
    if (plugActor && tradeData) {
      try {
        await plugActor.leave_trade(tradeData.id);
      } catch (e) {
        console.log("onCancelTrade error: ", e);
      }
    }
    forceStopTrade = true;
    setLoading(false);
    setTradeData(null);
    setPartnerId(null);
    setAccepted(false);
    setMessage("");
    setAlertMessage("");
    localStorage.setItem("storageTradeId", "");
    tradeId = 0;
  };
  const onConfirm = async () => {
    if (!plugActor || !tradeData)
      return;
    setLoading(true);
    await plugActor.accept(tradeData.id);
    setLoading(false);
  };
  const onCancel = async () => {
    if (!plugActor || !tradeData)
      return;
    setLoading(true);
    setAccepted(false);
    await plugActor.cancel(tradeData.id);
    setLoading(false);
  };
  const waitLoading = async () => {
    await new Promise((resolve) => !loading && resolve());
  };
  const isConfirmedItem = (tokenId) => {
    if (!tradeData)
      return false;
    const escrowItems = isCreator ? tradeData.host_escrow_items : tradeData.guest_escrow_items;
    return !!escrowItems.find((escrowItem) => escrowItem.token_id === tokenId);
  };
  return /* @__PURE__ */ jsx("div", {
    style: {
      position: "absolute",
      backgroundColor: "#1A1A1A",
      marginLeft: "auto",
      marginRight: "auto",
      width: "600px",
      height: "400px"
    },
    children: /* @__PURE__ */ jsxs(DndProvider, {
      backend: HTML5Backend,
      children: [/* @__PURE__ */ jsx(Header, {
        connected,
        setMode,
        mode
      }), !connected && /* @__PURE__ */ jsx("button", {
        onClick: onConnect,
        style: {
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          padding: ".5rem 2rem",
          borderRadius: "0.5rem",
          backgroundColor: "#2c3e50",
          disable: loading,
          opacity: loading && 0.5
        },
        children: "Connect"
      }), connected && plug.principalId && /* @__PURE__ */ jsx("div", {
        style: {
          display: "flex",
          justifyContent: "space-between",
          flexWrap: "wrap",
          padding: ".5em"
        },
        children: inventoryBoxes.slice((curPage - 1) * (mode === "trade" ? tradePageBoxNum : pageBoxNum), curPage * (mode === "trade" ? tradePageBoxNum : pageBoxNum)).map((box, index2) => {
          return /* @__PURE__ */ jsx(BagBox$1, {
            children: /* @__PURE__ */ jsx(BagItem, {
              item: clone(box.item),
              index: (curPage - 1) * (mode === "trade" ? tradePageBoxNum : pageBoxNum) + index2,
              tradeBoxes: clone(inventoryBoxes),
              setTradeBoxes: setInventoryBoxes,
              tradeLayer: "inventory",
              plugActor,
              tradeData,
              localUserId: plug.principalId,
              setSelItem,
              setLoading,
              setAlertMessage,
              isConfirmedItem
            }, `inventory_${box.id}`)
          }, box.id);
        })
      }), mode === "trade" && connected && plug.principalId && /* @__PURE__ */ jsxs(Fragment, {
        children: [/* @__PURE__ */ jsxs("div", {
          children: [/* @__PURE__ */ jsx("span", {
            style: {
              width: "50%",
              display: "inline-block",
              textAlign: "left",
              paddingLeft: ".5em",
              opacity: 0.5
            },
            children: "YOUR OFFERINGS"
          }), /* @__PURE__ */ jsx("span", {
            style: {
              width: "50%",
              display: "inline-block",
              textAlign: "right",
              paddingRight: ".5em",
              opacity: 0.5
            },
            children: tradeData && (isCreator && tradeData.guest_accept || !isCreator && tradeData.host_accept) ? "TRADE ACCEPTED" : "PARTNER OFFERINGS"
          })]
        }), /* @__PURE__ */ jsxs("div", {
          children: [/* @__PURE__ */ jsx("span", {
            style: {
              width: "50%",
              display: "inline-block",
              textAlign: "left",
              paddingLeft: ".5em"
            },
            children: localBoxes.map((box, index2) => {
              return /* @__PURE__ */ jsx(BagBox$1, {
                children: tradeData && /* @__PURE__ */ jsx(BagItem, {
                  isForTrade: true,
                  item: clone(box.item),
                  index: index2,
                  tradeBoxes: clone(localBoxes),
                  setTradeBoxes: setLocalBoxes,
                  tradeLayer: "local",
                  plugActor,
                  tradeData,
                  localUserId: plug.principalId,
                  setSelItem,
                  setLoading,
                  setAlertMessage,
                  isConfirmedItem
                }, `local_${box.id}`)
              }, box.id);
            })
          }), /* @__PURE__ */ jsx("span", {
            style: {
              width: "50%",
              display: "inline-block",
              textAlign: "right",
              paddingRight: ".5em"
            },
            children: remoteBoxes.map((box, index2) => {
              return /* @__PURE__ */ jsx(RemoteBox$1, {
                children: tradeData && /* @__PURE__ */ jsx(BagItem, {
                  item: clone(box.item),
                  index: index2,
                  tradeBoxes: clone(remoteBoxes),
                  setTradeBoxes: setRemoteBoxes,
                  tradeLayer: "remote",
                  plugActor,
                  tradeData,
                  localUserId: plug.principalId,
                  setSelItem,
                  setLoading,
                  setAlertMessage,
                  isConfirmedItem
                }, `remote_${box.id}`)
              }, box.id);
            })
          })]
        })]
      }), /* @__PURE__ */ jsxs("div", {
        style: {
          width: "100%",
          marginTop: ".5em"
        },
        children: [!tradeData && !prevTrade.id && mode === "trade" && connected && /* @__PURE__ */ jsx("button", {
          style: {
            position: "absolute",
            left: "50%",
            transform: "translate(-50%, 0)",
            backgroundColor: "green",
            padding: ".3em 1em",
            borderRadius: ".3em",
            disable: loading,
            opacity: loading && 0.5
          },
          onClick: onStartTrade,
          children: "Start Trade"
        }), tradeData && (!tradeData.host_accept || !tradeData.guest_accept) && mode === "trade" && /* @__PURE__ */ jsx("button", {
          onClick: onCancelTrade,
          style: {
            position: "absolute",
            right: ".5em",
            backgroundColor: "red",
            padding: ".3em 1em",
            borderRadius: ".3em",
            disable: loading,
            opacity: loading && 0.5
          },
          children: "Cancel Trade"
        }), tradeData && (!tradeData.host_accept || !tradeData.guest_accept) && mode === "trade" && /* @__PURE__ */ jsxs("div", {
          style: {
            display: "flex",
            gap: "1em",
            paddingLeft: ".5em"
          },
          children: [/* @__PURE__ */ jsx("button", {
            style: {
              backgroundColor: "#2ecc71",
              borderRadius: ".3em",
              padding: ".3em 1em",
              disable: !existItems(localBoxes) || accepted,
              opacity: (!existItems(localBoxes) || accepted) && 0.5
            },
            onClick: () => {
              if (!existItems(localBoxes) || accepted)
                return;
              setAccepted(true);
            },
            children: "Accept"
          }), /* @__PURE__ */ jsx("button", {
            style: {
              backgroundColor: "#e74c3c",
              borderRadius: ".3em",
              padding: ".3em 1em",
              disable: !existItems(localBoxes) || !accepted || (isCreator ? !tradeData.host_accept : !tradeData.guest_accept),
              opacity: (!existItems(localBoxes) || !accepted || (isCreator ? !tradeData.host_accept : !tradeData.guest_accept)) && 0.5
            },
            onClick: onCancel,
            children: "Cancel"
          })]
        })]
      }), /* @__PURE__ */ jsx("div", {
        style: {
          width: "100%"
        },
        children: partnerId && mode === "trade" && /* @__PURE__ */ jsxs("div", {
          style: {
            position: "absolute",
            left: ".5em",
            bottom: "2em"
          },
          children: ["Trading with\xA0", /* @__PURE__ */ jsx("span", {
            style: {
              color: "yellow"
            },
            children: partnerId
          })]
        })
      }), isCreator && tradeData && tradeData.id && !tradeData.guest.length && /* @__PURE__ */ jsx(ModalBox, {
        children: /* @__PURE__ */ jsxs("div", {
          style: {
            display: "flex",
            alignItems: "center",
            padding: "50px 10px",
            flexDirection: "column",
            justifyContent: "space-between",
            width: "100%",
            height: "100%"
          },
          children: [/* @__PURE__ */ jsx("b", {
            children: " WAITING FOR TRADE PARTNER..."
          }), "Send this link to your trade partner", /* @__PURE__ */ jsxs("a", {
            style: {
              color: "yellow"
            },
            href: "#",
            children: [url.host, "/?tradeId=", tradeData.id]
          })]
        })
      }), accepted && tradeData && (!tradeData.host_accept || !tradeData.guest_accept) && /* @__PURE__ */ jsx(ModalBox, {
        children: /* @__PURE__ */ jsxs("div", {
          style: {
            display: "flex",
            alignItems: "center",
            padding: "50px",
            flexDirection: "column",
            justifyContent: "space-between",
            width: "100%",
            height: "100%"
          },
          children: [/* @__PURE__ */ jsx("div", {
            children: "Do you want to confirm the current trade?"
          }), /* @__PURE__ */ jsxs("div", {
            style: {
              display: "flex",
              alignItems: "center",
              justifyContent: "space-evenly",
              width: "100%"
            },
            children: [/* @__PURE__ */ jsx("button", {
              style: {
                backgroundColor: "#2ecc71",
                borderRadius: ".3em",
                padding: ".3em 1em",
                disable: isCreator ? tradeData.host_accept : tradeData.guest_accept,
                opacity: (isCreator ? tradeData.host_accept : tradeData.guest_accept) && 0.5
              },
              onClick: onConfirm,
              children: "Confirm"
            }), /* @__PURE__ */ jsx("button", {
              style: {
                backgroundColor: "#e74c3c",
                borderRadius: ".3em",
                padding: ".3em 1em",
                disable: accepted || (isCreator ? !tradeData.host_accept : !tradeData.guest_accept),
                opacity: (accepted || (isCreator ? !tradeData.host_accept : !tradeData.guest_accept)) && 0.5
              },
              onClick: onCancel,
              children: "Cancel"
            })]
          })]
        })
      }), alertMessage && /* @__PURE__ */ jsx(ModalBox, {
        children: /* @__PURE__ */ jsxs("div", {
          style: {
            display: "flex",
            alignItems: "center",
            padding: "50px",
            flexDirection: "column",
            justifyContent: "space-between",
            width: "100%",
            height: "100%"
          },
          children: [/* @__PURE__ */ jsx("div", {
            children: alertMessage
          }), /* @__PURE__ */ jsx("button", {
            style: {
              backgroundColor: "#2ecc71",
              borderRadius: ".3em",
              padding: ".3em 1em"
            },
            onClick: () => {
              setAlertMessage("");
            },
            children: "Ok"
          })]
        })
      }), message && /* @__PURE__ */ jsx(ModalBox, {
        children: /* @__PURE__ */ jsx("div", {
          style: {
            display: "flex",
            alignItems: "center",
            padding: "50px",
            flexDirection: "column",
            justifyContent: "center",
            width: "100%",
            height: "100%"
          },
          children: /* @__PURE__ */ jsx("div", {
            children: message
          })
        })
      }), /* @__PURE__ */ jsx(Footer, {
        showPagination: connected,
        loading,
        curPage,
        setCurPage
      })]
    })
  });
};
styleInject(css);
const App = ({
  type
}) => {
  return /* @__PURE__ */ jsx("div", {
    style: {
      position: "absolute",
      left: "50%",
      top: "50%",
      transform: "translate(-50%, -50%)",
      width: "600px",
      height: "400px"
    },
    children: /* @__PURE__ */ jsx(Trade, {
      type
    })
  });
};
client.createRoot(document.getElementById("root")).render(/* @__PURE__ */ jsx(React.StrictMode, {
  children: /* @__PURE__ */ jsx(App, {})
}));
